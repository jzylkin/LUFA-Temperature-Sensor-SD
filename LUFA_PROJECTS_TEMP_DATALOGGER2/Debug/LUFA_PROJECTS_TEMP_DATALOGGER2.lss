
LUFA_PROJECTS_TEMP_DATALOGGER2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  00005328  000053dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005328  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000665  008001e4  008001e4  000054c0  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  000054c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000054c1  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000550  00000000  00000000  0000551d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b850  00000000  00000000  00005a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020d9  00000000  00000000  000112bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000eb50  00000000  00000000  00013396  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019d4  00000000  00000000  00021ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001a28c  00000000  00000000  000238bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b74e  00000000  00000000  0003db48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001060  00000000  00000000  00049296  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009146  00000000  00000000  0004a2f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	cd c0       	rjmp	.+410    	; 0x1a0 <__bad_interrupt>
       6:	00 00       	nop
       8:	cb c0       	rjmp	.+406    	; 0x1a0 <__bad_interrupt>
       a:	00 00       	nop
       c:	c9 c0       	rjmp	.+402    	; 0x1a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c0       	rjmp	.+398    	; 0x1a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c0       	rjmp	.+394    	; 0x1a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c0       	rjmp	.+390    	; 0x1a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c0       	rjmp	.+386    	; 0x1a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c0       	rjmp	.+382    	; 0x1a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c0       	rjmp	.+378    	; 0x1a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 e8 23 	jmp	0x47d0	; 0x47d0 <__vector_10>
      2c:	0c 94 a7 24 	jmp	0x494e	; 0x494e <__vector_11>
      30:	b7 c0       	rjmp	.+366    	; 0x1a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c0       	rjmp	.+362    	; 0x1a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c0       	rjmp	.+358    	; 0x1a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c0       	rjmp	.+354    	; 0x1a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c0       	rjmp	.+350    	; 0x1a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 17 19 	jmp	0x322e	; 0x322e <__vector_17>
      48:	ab c0       	rjmp	.+342    	; 0x1a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a9 c0       	rjmp	.+338    	; 0x1a0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a7 c0       	rjmp	.+334    	; 0x1a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c0       	rjmp	.+330    	; 0x1a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c0       	rjmp	.+326    	; 0x1a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c0       	rjmp	.+322    	; 0x1a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c0       	rjmp	.+318    	; 0x1a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c0       	rjmp	.+314    	; 0x1a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c0       	rjmp	.+310    	; 0x1a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c0       	rjmp	.+306    	; 0x1a0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	97 c0       	rjmp	.+302    	; 0x1a0 <__bad_interrupt>
      72:	00 00       	nop
      74:	95 c0       	rjmp	.+298    	; 0x1a0 <__bad_interrupt>
      76:	00 00       	nop
      78:	93 c0       	rjmp	.+294    	; 0x1a0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	91 c0       	rjmp	.+290    	; 0x1a0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	8f c0       	rjmp	.+286    	; 0x1a0 <__bad_interrupt>
      82:	00 00       	nop
      84:	8d c0       	rjmp	.+282    	; 0x1a0 <__bad_interrupt>
      86:	00 00       	nop
      88:	8b c0       	rjmp	.+278    	; 0x1a0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	89 c0       	rjmp	.+274    	; 0x1a0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	87 c0       	rjmp	.+270    	; 0x1a0 <__bad_interrupt>
      92:	00 00       	nop
      94:	85 c0       	rjmp	.+266    	; 0x1a0 <__bad_interrupt>
      96:	00 00       	nop
      98:	83 c0       	rjmp	.+262    	; 0x1a0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	81 c0       	rjmp	.+258    	; 0x1a0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	7f c0       	rjmp	.+254    	; 0x1a0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7d c0       	rjmp	.+250    	; 0x1a0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7b c0       	rjmp	.+246    	; 0x1a0 <__bad_interrupt>
	...

000000ac <ProductString>:
      ac:	2e 03 54 00 65 00 6d 00 70 00 65 00 72 00 61 00     ..T.e.m.p.e.r.a.
      bc:	74 00 75 00 72 00 65 00 20 00 44 00 61 00 74 00     t.u.r.e. .D.a.t.
      cc:	61 00 6c 00 6f 00 67 00 67 00 65 00 72 00 00 00     a.l.o.g.g.e.r...

000000dc <ManufacturerString>:
      dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
      f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
      fa:	09 02 39 00 02 01 00 c0 32 09 04 00 00 02 08 06     ..9.....2.......
     10a:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..
     11a:	09 04 01 00 01 03 00 00 00 09 21 11 01 00 01 22     ..........!...."
     12a:	20 00 07 05 81 03 10 00 05                           ........

00000133 <DeviceDescriptor>:
     133:	12 01 10 01 00 00 00 08 eb 03 63 20 01 00 01 02     ..........c ....
     143:	dc 01                                               ..

00000145 <GenericReport>:
     145:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     155:	02 81 02 09 03 15 00 25 ff 75 08 95 02 91 02 c0     .......%.u......
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	da e0       	ldi	r29, 0x0A	; 10
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e8 e2       	ldi	r30, 0x28	; 40
     17a:	f3 e5       	ldi	r31, 0x53	; 83
     17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x10>
     17e:	05 90       	lpm	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	a4 3e       	cpi	r26, 0xE4	; 228
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0xc>

00000188 <__do_clear_bss>:
     188:	28 e0       	ldi	r18, 0x08	; 8
     18a:	a4 ee       	ldi	r26, 0xE4	; 228
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	a9 34       	cpi	r26, 0x49	; 73
     194:	b2 07       	cpc	r27, r18
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
     198:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <main>
     19c:	0c 94 92 29 	jmp	0x5324	; 0x5324 <_exit>

000001a0 <__bad_interrupt>:
     1a0:	2f cf       	rjmp	.-418    	; 0x0 <__vectors>

000001a2 <Config_IO>:
#include "IO_Macros.h"
#include <avr/io.h>

void Config_IO(){
	
	configure_as_input(SD_DETECT);
     1a2:	27 98       	cbi	0x04, 7	; 4
	pullup_on(SD_DETECT);
     1a4:	2f 9a       	sbi	0x05, 7	; 5
	
	configure_as_input(REED_1);
     1a6:	56 98       	cbi	0x0a, 6	; 10
	pullup_on(REED_1);
     1a8:	5e 9a       	sbi	0x0b, 6	; 11
	
	configure_as_input(REED_2);
     1aa:	57 98       	cbi	0x0a, 7	; 10
	pullup_on(REED_2);	
     1ac:	5f 9a       	sbi	0x0b, 7	; 11

	configure_as_input(REED_3);
     1ae:	24 98       	cbi	0x04, 4	; 4
	pullup_on(REED_3);	
     1b0:	2c 9a       	sbi	0x05, 4	; 5
	
	configure_as_input(REED_4);
     1b2:	25 98       	cbi	0x04, 5	; 4
	pullup_on(REED_4);	
     1b4:	2d 9a       	sbi	0x05, 5	; 5

	configure_as_output(SENSE_CLK);
     1b6:	26 9a       	sbi	0x04, 6	; 4
	
	configure_as_input(SENSE_SER);
     1b8:	3e 98       	cbi	0x07, 6	; 7
	pullup_on(SENSE_SER);
     1ba:	46 9a       	sbi	0x08, 6	; 8
	
	configure_as_input(PIO_5);
     1bc:	20 98       	cbi	0x04, 0	; 4
	pullup_on(PIO_5);
     1be:	28 9a       	sbi	0x05, 0	; 5
	
	configure_as_input(PIO_6);
     1c0:	6e 98       	cbi	0x0d, 6	; 13
	pullup_on(PIO_6);
     1c2:	76 9a       	sbi	0x0e, 6	; 14
	
	set_low(DUMMY_LOAD);
     1c4:	5d 98       	cbi	0x0b, 5	; 11
	configure_as_output(DUMMY_LOAD);
     1c6:	55 9a       	sbi	0x0a, 5	; 10
	
	configure_as_input(POK);
     1c8:	54 98       	cbi	0x0a, 4	; 10
	pullup_on(POK);
     1ca:	5c 9a       	sbi	0x0b, 4	; 11
	
	set_high(TX);
     1cc:	5b 9a       	sbi	0x0b, 3	; 11
	configure_as_output(TX);
     1ce:	53 9a       	sbi	0x0a, 3	; 10
	
	configure_as_input(RX);
     1d0:	52 98       	cbi	0x0a, 2	; 10
	pullup_on(RX);
     1d2:	5a 9a       	sbi	0x0b, 2	; 11
	
	set_high(SD_CHIP_SELECT);
     1d4:	59 9a       	sbi	0x0b, 1	; 11
	configure_as_output(SD_CHIP_SELECT);
     1d6:	51 9a       	sbi	0x0a, 1	; 10
	
	set_low(SD_POWER);
     1d8:	58 98       	cbi	0x0b, 0	; 11
	configure_as_output(SD_POWER);
     1da:	50 9a       	sbi	0x0a, 0	; 10
	set_low(SD_POWER);
     1dc:	58 98       	cbi	0x0b, 0	; 11
	
	set_high(SENSE_POWER);
     1de:	72 9a       	sbi	0x0e, 2	; 14
	configure_as_output(SENSE_POWER);
     1e0:	6a 9a       	sbi	0x0d, 2	; 13
	set_high(SENSE_POWER);
     1e2:	72 9a       	sbi	0x0e, 2	; 14
	
	configure_as_input(S1);
     1e4:	85 98       	cbi	0x10, 5	; 16
	pullup_on(S1);
     1e6:	8d 9a       	sbi	0x11, 5	; 17
	
	configure_as_input(S2);
     1e8:	86 98       	cbi	0x10, 6	; 16
	pullup_on(S2);
     1ea:	8e 9a       	sbi	0x11, 6	; 17
	
	configure_as_input(S3);
     1ec:	87 98       	cbi	0x10, 7	; 16
	pullup_on(S3);
     1ee:	8f 9a       	sbi	0x11, 7	; 17
	
	set_low(BT_RESET);
     1f0:	8c 98       	cbi	0x11, 4	; 17
	configure_as_output(BT_RESET);
     1f2:	84 9a       	sbi	0x10, 4	; 16
	
	set_high(LED1);
     1f4:	89 9a       	sbi	0x11, 1	; 17
	configure_as_output(LED1);
     1f6:	81 9a       	sbi	0x10, 1	; 16
	
	set_high(LED2);
     1f8:	88 9a       	sbi	0x11, 0	; 17
	configure_as_output(LED2);
     1fa:	80 9a       	sbi	0x10, 0	; 16
     1fc:	08 95       	ret

000001fe <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     1fe:	29 2f       	mov	r18, r25
     200:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     202:	23 30       	cpi	r18, 0x03	; 3
     204:	31 05       	cpc	r19, r1
     206:	c9 f0       	breq	.+50     	; 0x23a <CALLBACK_USB_GetDescriptor+0x3c>
     208:	44 f4       	brge	.+16     	; 0x21a <CALLBACK_USB_GetDescriptor+0x1c>
     20a:	21 30       	cpi	r18, 0x01	; 1
     20c:	31 05       	cpc	r19, r1
     20e:	09 f4       	brne	.+2      	; 0x212 <CALLBACK_USB_GetDescriptor+0x14>
     210:	39 c0       	rjmp	.+114    	; 0x284 <CALLBACK_USB_GetDescriptor+0x86>
     212:	22 30       	cpi	r18, 0x02	; 2
     214:	31 05       	cpc	r19, r1
     216:	61 f0       	breq	.+24     	; 0x230 <CALLBACK_USB_GetDescriptor+0x32>
     218:	06 c0       	rjmp	.+12     	; 0x226 <CALLBACK_USB_GetDescriptor+0x28>
     21a:	21 32       	cpi	r18, 0x21	; 33
     21c:	31 05       	cpc	r19, r1
     21e:	41 f1       	breq	.+80     	; 0x270 <CALLBACK_USB_GetDescriptor+0x72>
     220:	22 32       	cpi	r18, 0x22	; 34
     222:	31 05       	cpc	r19, r1
     224:	51 f1       	breq	.+84     	; 0x27a <CALLBACK_USB_GetDescriptor+0x7c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	33 c0       	rjmp	.+102    	; 0x296 <CALLBACK_USB_GetDescriptor+0x98>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     230:	89 e3       	ldi	r24, 0x39	; 57
     232:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     234:	2a ef       	ldi	r18, 0xFA	; 250
     236:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     238:	2e c0       	rjmp	.+92     	; 0x296 <CALLBACK_USB_GetDescriptor+0x98>
     23a:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	91 05       	cpc	r25, r1
     240:	59 f0       	breq	.+22     	; 0x258 <CALLBACK_USB_GetDescriptor+0x5a>
     242:	82 30       	cpi	r24, 0x02	; 2
     244:	91 05       	cpc	r25, r1
     246:	71 f0       	breq	.+28     	; 0x264 <CALLBACK_USB_GetDescriptor+0x66>
     248:	89 2b       	or	r24, r25
     24a:	09 f5       	brne	.+66     	; 0x28e <CALLBACK_USB_GetDescriptor+0x90>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     24c:	e6 ef       	ldi	r30, 0xF6	; 246
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	84 91       	lpm	r24, Z
     252:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     254:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     256:	1f c0       	rjmp	.+62     	; 0x296 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     258:	ec ed       	ldi	r30, 0xDC	; 220
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	84 91       	lpm	r24, Z
     25e:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     260:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     262:	19 c0       	rjmp	.+50     	; 0x296 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     264:	ec ea       	ldi	r30, 0xAC	; 172
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	84 91       	lpm	r24, Z
     26a:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     26c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     26e:	13 c0       	rjmp	.+38     	; 0x296 <CALLBACK_USB_GetDescriptor+0x98>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     270:	89 e0       	ldi	r24, 0x09	; 9
     272:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     274:	23 e2       	ldi	r18, 0x23	; 35
     276:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     278:	0e c0       	rjmp	.+28     	; 0x296 <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     27a:	80 e2       	ldi	r24, 0x20	; 32
     27c:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     27e:	25 e4       	ldi	r18, 0x45	; 69
     280:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
     282:	09 c0       	rjmp	.+18     	; 0x296 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     284:	82 e1       	ldi	r24, 0x12	; 18
     286:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     288:	23 e3       	ldi	r18, 0x33	; 51
     28a:	31 e0       	ldi	r19, 0x01	; 1
     28c:	04 c0       	rjmp	.+8      	; 0x296 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     296:	fa 01       	movw	r30, r20
     298:	31 83       	std	Z+1, r19	; 0x01
     29a:	20 83       	st	Z, r18
	return Size;
}
     29c:	08 95       	ret

0000029e <dly_us>:

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
     29e:	23 b1       	in	r18, 0x03	; 3
#if F_CPU >= 6000000
		PINB;
     2a0:	23 b1       	in	r18, 0x03	; 3
#endif
#if F_CPU >= 7000000
		PINB;
     2a2:	23 b1       	in	r18, 0x03	; 3
#endif
#if F_CPU >= 8000000
		PINB;
     2a4:	23 b1       	in	r18, 0x03	; 3
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	c9 f7       	brne	.-14     	; 0x29e <dly_us>
}
     2ac:	08 95       	ret

000002ae <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
     2ae:	fc 01       	movw	r30, r24
     2b0:	68 0f       	add	r22, r24
     2b2:	79 1f       	adc	r23, r25
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
     2b4:	81 91       	ld	r24, Z+
		if (d & 0x80) {DI_H();} else {DI_L();}	/* bit7 */
     2b6:	88 23       	and	r24, r24
     2b8:	14 f4       	brge	.+4      	; 0x2be <xmit_mmc+0x10>
     2ba:	2a 9a       	sbi	0x05, 2	; 5
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <xmit_mmc+0x12>
     2be:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     2c0:	29 9a       	sbi	0x05, 1	; 5
     2c2:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x40) {DI_H();} else {DI_L();}	/* bit6 */
     2c4:	86 ff       	sbrs	r24, 6
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <xmit_mmc+0x1e>
     2c8:	2a 9a       	sbi	0x05, 2	; 5
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <xmit_mmc+0x20>
     2cc:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     2ce:	29 9a       	sbi	0x05, 1	; 5
     2d0:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
     2d2:	85 ff       	sbrs	r24, 5
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <xmit_mmc+0x2c>
     2d6:	2a 9a       	sbi	0x05, 2	; 5
     2d8:	01 c0       	rjmp	.+2      	; 0x2dc <xmit_mmc+0x2e>
     2da:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     2dc:	29 9a       	sbi	0x05, 1	; 5
     2de:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
     2e0:	84 ff       	sbrs	r24, 4
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <xmit_mmc+0x3a>
     2e4:	2a 9a       	sbi	0x05, 2	; 5
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <xmit_mmc+0x3c>
     2e8:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     2ea:	29 9a       	sbi	0x05, 1	; 5
     2ec:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
     2ee:	83 ff       	sbrs	r24, 3
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <xmit_mmc+0x48>
     2f2:	2a 9a       	sbi	0x05, 2	; 5
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <xmit_mmc+0x4a>
     2f6:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     2f8:	29 9a       	sbi	0x05, 1	; 5
     2fa:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
     2fc:	82 ff       	sbrs	r24, 2
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <xmit_mmc+0x56>
     300:	2a 9a       	sbi	0x05, 2	; 5
     302:	01 c0       	rjmp	.+2      	; 0x306 <xmit_mmc+0x58>
     304:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     306:	29 9a       	sbi	0x05, 1	; 5
     308:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
     30a:	81 ff       	sbrs	r24, 1
     30c:	02 c0       	rjmp	.+4      	; 0x312 <xmit_mmc+0x64>
     30e:	2a 9a       	sbi	0x05, 2	; 5
     310:	01 c0       	rjmp	.+2      	; 0x314 <xmit_mmc+0x66>
     312:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     314:	29 9a       	sbi	0x05, 1	; 5
     316:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
     318:	80 ff       	sbrs	r24, 0
     31a:	02 c0       	rjmp	.+4      	; 0x320 <xmit_mmc+0x72>
     31c:	2a 9a       	sbi	0x05, 2	; 5
     31e:	01 c0       	rjmp	.+2      	; 0x322 <xmit_mmc+0x74>
     320:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     322:	29 9a       	sbi	0x05, 1	; 5
     324:	29 98       	cbi	0x05, 1	; 5
	} while (--bc);
     326:	e6 17       	cp	r30, r22
     328:	f7 07       	cpc	r31, r23
     32a:	21 f6       	brne	.-120    	; 0x2b4 <xmit_mmc+0x6>
}
     32c:	08 95       	ret

0000032e <rcvr_mmc>:
)
{
	BYTE r;


	DI_H();	/* Send 0xFF */
     32e:	2a 9a       	sbi	0x05, 2	; 5
     330:	fc 01       	movw	r30, r24
     332:	68 0f       	add	r22, r24
     334:	79 1f       	adc	r23, r25

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
     336:	83 b1       	in	r24, 0x03	; 3
		CK_H(); CK_L();
     338:	29 9a       	sbi	0x05, 1	; 5
     33a:	29 98       	cbi	0x05, 1	; 5


	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
     33c:	83 fb       	bst	r24, 3
     33e:	88 27       	eor	r24, r24
     340:	80 f9       	bld	r24, 0
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit6 */
     342:	88 0f       	add	r24, r24
     344:	1b 99       	sbic	0x03, 3	; 3
     346:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     348:	29 9a       	sbi	0x05, 1	; 5
     34a:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit5 */
     34c:	88 0f       	add	r24, r24
     34e:	1b 99       	sbic	0x03, 3	; 3
     350:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     352:	29 9a       	sbi	0x05, 1	; 5
     354:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit4 */
     356:	88 0f       	add	r24, r24
     358:	1b 99       	sbic	0x03, 3	; 3
     35a:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     35c:	29 9a       	sbi	0x05, 1	; 5
     35e:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit3 */
     360:	88 0f       	add	r24, r24
     362:	1b 99       	sbic	0x03, 3	; 3
     364:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     366:	29 9a       	sbi	0x05, 1	; 5
     368:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit2 */
     36a:	88 0f       	add	r24, r24
     36c:	1b 99       	sbic	0x03, 3	; 3
     36e:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     370:	29 9a       	sbi	0x05, 1	; 5
     372:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit1 */
     374:	88 0f       	add	r24, r24
     376:	1b 99       	sbic	0x03, 3	; 3
     378:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     37a:	29 9a       	sbi	0x05, 1	; 5
     37c:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit0 */
     37e:	88 0f       	add	r24, r24
     380:	1b 99       	sbic	0x03, 3	; 3
     382:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     384:	29 9a       	sbi	0x05, 1	; 5
     386:	29 98       	cbi	0x05, 1	; 5
		*buff++ = r;			/* Store a received byte */
     388:	81 93       	st	Z+, r24
	} while (--bc);
     38a:	e6 17       	cp	r30, r22
     38c:	f7 07       	cpc	r31, r23
     38e:	99 f6       	brne	.-90     	; 0x336 <rcvr_mmc+0x8>
}
     390:	08 95       	ret

00000392 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	1f 92       	push	r1
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
     3a0:	08 e8       	ldi	r16, 0x88	; 136
     3a2:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	c0 df       	rcall	.-128    	; 0x32e <rcvr_mmc>
		if (d == 0xFF) break;
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	8f 3f       	cpi	r24, 0xFF	; 255
     3b2:	41 f0       	breq	.+16     	; 0x3c4 <wait_ready+0x32>
		dly_us(100);
     3b4:	84 e6       	ldi	r24, 0x64	; 100
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	72 df       	rcall	.-284    	; 0x29e <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
     3ba:	01 50       	subi	r16, 0x01	; 1
     3bc:	11 09       	sbc	r17, r1
     3be:	01 15       	cp	r16, r1
     3c0:	11 05       	cpc	r17, r1
     3c2:	81 f7       	brne	.-32     	; 0x3a4 <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	01 2b       	or	r16, r17
     3ca:	11 f4       	brne	.+4      	; 0x3d0 <wait_ready+0x3e>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
}
     3d0:	0f 90       	pop	r0
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	08 95       	ret

000003dc <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	1f 92       	push	r1
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();
     3e6:	59 9a       	sbi	0x0b, 1	; 11
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	ce 01       	movw	r24, r28
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	9e df       	rcall	.-196    	; 0x32e <rcvr_mmc>
}
     3f2:	0f 90       	pop	r0
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	1f 92       	push	r1
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();
     408:	59 98       	cbi	0x0b, 1	; 11
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	8d df       	rcall	.-230    	; 0x32e <rcvr_mmc>

	if (wait_ready()) return 1;	/* OK */
     414:	be df       	rcall	.-132    	; 0x392 <wait_ready>
     416:	8c 01       	movw	r16, r24
     418:	00 97       	sbiw	r24, 0x00	; 0
     41a:	11 f4       	brne	.+4      	; 0x420 <select+0x26>
	deselect();
     41c:	df df       	rcall	.-66     	; 0x3dc <deselect>
	return 0;			/* Failed */
     41e:	02 c0       	rjmp	.+4      	; 0x424 <select+0x2a>
	BYTE d;

	CS_L();
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
     420:	01 e0       	ldi	r16, 0x01	; 1
     422:	10 e0       	ldi	r17, 0x00	; 0
	deselect();
	return 0;			/* Failed */
}
     424:	c8 01       	movw	r24, r16
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	08 95       	ret

00000432 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
     432:	cf 92       	push	r12
     434:	df 92       	push	r13
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	00 d0       	rcall	.+0      	; 0x444 <rcvr_datablock+0x12>
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	7c 01       	movw	r14, r24
     44a:	6b 01       	movw	r12, r22
     44c:	08 ee       	ldi	r16, 0xE8	; 232
     44e:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	ce 01       	movw	r24, r28
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	6a df       	rcall	.-300    	; 0x32e <rcvr_mmc>
		if (d[0] != 0xFF) break;
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	8f 3f       	cpi	r24, 0xFF	; 255
     45e:	41 f4       	brne	.+16     	; 0x470 <rcvr_datablock+0x3e>
		dly_us(100);
     460:	84 e6       	ldi	r24, 0x64	; 100
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	1c df       	rcall	.-456    	; 0x29e <dly_us>
     466:	01 50       	subi	r16, 0x01	; 1
     468:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
     46a:	01 15       	cp	r16, r1
     46c:	11 05       	cpc	r17, r1
     46e:	81 f7       	brne	.-32     	; 0x450 <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE){ return 0;}//debug		/* If not valid data token, return with error */
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	8e 3f       	cpi	r24, 0xFE	; 254
     474:	59 f4       	brne	.+22     	; 0x48c <rcvr_datablock+0x5a>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
     476:	b6 01       	movw	r22, r12
     478:	c7 01       	movw	r24, r14
     47a:	59 df       	rcall	.-334    	; 0x32e <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
     47c:	62 e0       	ldi	r22, 0x02	; 2
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	ce 01       	movw	r24, r28
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	54 df       	rcall	.-344    	; 0x32e <rcvr_mmc>

	return 1;						/* Return with success */
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	02 c0       	rjmp	.+4      	; 0x490 <rcvr_datablock+0x5e>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE){ return 0;}//debug		/* If not valid data token, return with error */
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	ff 90       	pop	r15
     49e:	ef 90       	pop	r14
     4a0:	df 90       	pop	r13
     4a2:	cf 90       	pop	r12
     4a4:	08 95       	ret

000004a6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <xmit_datablock+0xc>
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	8c 01       	movw	r16, r24
     4b8:	f6 2e       	mov	r15, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
     4ba:	6b df       	rcall	.-298    	; 0x392 <wait_ready>
     4bc:	00 97       	sbiw	r24, 0x00	; 0
     4be:	19 f1       	breq	.+70     	; 0x506 <xmit_datablock+0x60>

	d[0] = token;
     4c0:	f9 82       	std	Y+1, r15	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	ce 01       	movw	r24, r28
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	f1 de       	rcall	.-542    	; 0x2ae <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
     4cc:	8d ef       	ldi	r24, 0xFD	; 253
     4ce:	f8 16       	cp	r15, r24
     4d0:	c1 f0       	breq	.+48     	; 0x502 <xmit_datablock+0x5c>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	72 e0       	ldi	r23, 0x02	; 2
     4d6:	c8 01       	movw	r24, r16
     4d8:	ea de       	rcall	.-556    	; 0x2ae <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
     4da:	62 e0       	ldi	r22, 0x02	; 2
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	ce 01       	movw	r24, r28
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	25 df       	rcall	.-438    	; 0x32e <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	ce 01       	movw	r24, r28
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	20 df       	rcall	.-448    	; 0x32e <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	8f 71       	andi	r24, 0x1F	; 31
     4f2:	31 e0       	ldi	r19, 0x01	; 1
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	85 30       	cpi	r24, 0x05	; 5
     4f8:	09 f0       	breq	.+2      	; 0x4fc <xmit_datablock+0x56>
     4fa:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
     4fc:	83 2f       	mov	r24, r19
     4fe:	92 2f       	mov	r25, r18
     500:	02 c0       	rjmp	.+4      	; 0x506 <xmit_datablock+0x60>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
}
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	08 95       	ret

00000516 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	27 97       	sbiw	r28, 0x07	; 7
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
     534:	18 2f       	mov	r17, r24
     536:	04 2f       	mov	r16, r20
     538:	f5 2e       	mov	r15, r21
     53a:	e6 2e       	mov	r14, r22
     53c:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     53e:	88 23       	and	r24, r24
     540:	4c f4       	brge	.+18     	; 0x554 <send_cmd+0x3e>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	ba 01       	movw	r22, r20
     548:	87 e3       	ldi	r24, 0x37	; 55
     54a:	e5 df       	rcall	.-54     	; 0x516 <send_cmd>
		if (n > 1) return n;
     54c:	82 30       	cpi	r24, 0x02	; 2
     54e:	08 f0       	brcs	.+2      	; 0x552 <send_cmd+0x3c>
     550:	45 c0       	rjmp	.+138    	; 0x5dc <send_cmd+0xc6>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     552:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     554:	1c 30       	cpi	r17, 0x0C	; 12
     556:	59 f1       	breq	.+86     	; 0x5ae <send_cmd+0x98>
		deselect();
     558:	41 df       	rcall	.-382    	; 0x3dc <deselect>
		if (!select()) return 0xFF;
     55a:	4f df       	rcall	.-354    	; 0x3fa <select>
     55c:	89 2b       	or	r24, r25
     55e:	29 f1       	breq	.+74     	; 0x5aa <send_cmd+0x94>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
     560:	81 2f       	mov	r24, r17
     562:	80 64       	ori	r24, 0x40	; 64
     564:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
     566:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
     568:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
     56a:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
     56c:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
     56e:	11 23       	and	r17, r17
     570:	69 f1       	breq	.+90     	; 0x5cc <send_cmd+0xb6>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
     572:	18 30       	cpi	r17, 0x08	; 8
     574:	19 f1       	breq	.+70     	; 0x5bc <send_cmd+0xa6>
	buf[5] = n;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     57a:	66 e0       	ldi	r22, 0x06	; 6
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	ce 01       	movw	r24, r28
     580:	02 96       	adiw	r24, 0x02	; 2
     582:	95 de       	rcall	.-726    	; 0x2ae <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
     584:	1c 30       	cpi	r17, 0x0C	; 12
     586:	29 f4       	brne	.+10     	; 0x592 <send_cmd+0x7c>
     588:	61 e0       	ldi	r22, 0x01	; 1
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	ce 01       	movw	r24, r28
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	ce de       	rcall	.-612    	; 0x32e <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     592:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	ce 01       	movw	r24, r28
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	c8 de       	rcall	.-624    	; 0x32e <rcvr_mmc>
	while ((d & 0x80) && --n);
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	88 23       	and	r24, r24
     5a2:	e4 f4       	brge	.+56     	; 0x5dc <send_cmd+0xc6>
     5a4:	11 50       	subi	r17, 0x01	; 1
     5a6:	b1 f7       	brne	.-20     	; 0x594 <send_cmd+0x7e>
     5a8:	19 c0       	rjmp	.+50     	; 0x5dc <send_cmd+0xc6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     5aa:	8f ef       	ldi	r24, 0xFF	; 255
     5ac:	17 c0       	rjmp	.+46     	; 0x5dc <send_cmd+0xc6>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
     5ae:	8c e4       	ldi	r24, 0x4C	; 76
     5b0:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
     5b2:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
     5b4:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
     5b6:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
     5b8:	0e 83       	std	Y+6, r16	; 0x06
     5ba:	dd cf       	rjmp	.-70     	; 0x576 <send_cmd+0x60>
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
     5bc:	87 e8       	ldi	r24, 0x87	; 135
     5be:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     5c0:	66 e0       	ldi	r22, 0x06	; 6
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	ce 01       	movw	r24, r28
     5c6:	02 96       	adiw	r24, 0x02	; 2
     5c8:	72 de       	rcall	.-796    	; 0x2ae <xmit_mmc>
     5ca:	e3 cf       	rjmp	.-58     	; 0x592 <send_cmd+0x7c>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
     5cc:	85 e9       	ldi	r24, 0x95	; 149
     5ce:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     5d0:	66 e0       	ldi	r22, 0x06	; 6
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	ce 01       	movw	r24, r28
     5d6:	02 96       	adiw	r24, 0x02	; 2
     5d8:	6a de       	rcall	.-812    	; 0x2ae <xmit_mmc>
     5da:	db cf       	rjmp	.-74     	; 0x592 <send_cmd+0x7c>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
     5dc:	27 96       	adiw	r28, 0x07	; 7
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	df 90       	pop	r13
     5f6:	08 95       	ret

000005f8 <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     5f8:	81 11       	cpse	r24, r1
     5fa:	03 c0       	rjmp	.+6      	; 0x602 <disk_status+0xa>

	return Stat;
     5fc:	80 91 00 01 	lds	r24, 0x0100
     600:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     602:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
     604:	08 95       	ret

00000606 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	00 d0       	rcall	.+0      	; 0x614 <disk_initialize+0xe>
     614:	00 d0       	rcall	.+0      	; 0x616 <disk_initialize+0x10>
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
     61a:	81 11       	cpse	r24, r1
     61c:	a9 c0       	rjmp	.+338    	; 0x770 <disk_initialize+0x16a>

	dly_us(10000);			/* 10ms */
     61e:	80 e1       	ldi	r24, 0x10	; 16
     620:	97 e2       	ldi	r25, 0x27	; 39
     622:	3d de       	rcall	.-902    	; 0x29e <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
     624:	51 9a       	sbi	0x0a, 1	; 10
     626:	59 9a       	sbi	0x0b, 1	; 11
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
     628:	29 98       	cbi	0x05, 1	; 5
     62a:	21 9a       	sbi	0x04, 1	; 4
     62c:	29 98       	cbi	0x05, 1	; 5
	DI_INIT();				/* Initialize port pin tied to DI */
     62e:	22 9a       	sbi	0x04, 2	; 4
	DO_INIT();				/* Initialize port pin tied to DO */
     630:	23 98       	cbi	0x04, 3	; 4
     632:	2b 9a       	sbi	0x05, 3	; 5
     634:	1a e0       	ldi	r17, 0x0A	; 10

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
     636:	61 e0       	ldi	r22, 0x01	; 1
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	77 de       	rcall	.-786    	; 0x32e <rcvr_mmc>
     640:	11 50       	subi	r17, 0x01	; 1
     642:	c9 f7       	brne	.-14     	; 0x636 <disk_initialize+0x30>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	ba 01       	movw	r22, r20
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	64 df       	rcall	.-312    	; 0x516 <send_cmd>
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	09 f0       	breq	.+2      	; 0x654 <disk_initialize+0x4e>
     652:	6f c0       	rjmp	.+222    	; 0x732 <disk_initialize+0x12c>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     654:	4a ea       	ldi	r20, 0xAA	; 170
     656:	51 e0       	ldi	r21, 0x01	; 1
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	88 e0       	ldi	r24, 0x08	; 8
     65e:	5b df       	rcall	.-330    	; 0x516 <send_cmd>
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	b9 f5       	brne	.+110    	; 0x6d2 <disk_initialize+0xcc>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
     664:	64 e0       	ldi	r22, 0x04	; 4
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	ce 01       	movw	r24, r28
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	60 de       	rcall	.-832    	; 0x32e <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	09 f0       	breq	.+2      	; 0x676 <disk_initialize+0x70>
     674:	60 c0       	rjmp	.+192    	; 0x736 <disk_initialize+0x130>
     676:	8c 81       	ldd	r24, Y+4	; 0x04
     678:	8a 3a       	cpi	r24, 0xAA	; 170
     67a:	09 f0       	breq	.+2      	; 0x67e <disk_initialize+0x78>
     67c:	5e c0       	rjmp	.+188    	; 0x73a <disk_initialize+0x134>
     67e:	08 ee       	ldi	r16, 0xE8	; 232
     680:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e4       	ldi	r23, 0x40	; 64
     68a:	89 ea       	ldi	r24, 0xA9	; 169
     68c:	44 df       	rcall	.-376    	; 0x516 <send_cmd>
     68e:	88 23       	and	r24, r24
     690:	49 f0       	breq	.+18     	; 0x6a4 <disk_initialize+0x9e>
					dly_us(1000);
     692:	88 ee       	ldi	r24, 0xE8	; 232
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	03 de       	rcall	.-1018   	; 0x29e <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
     698:	01 50       	subi	r16, 0x01	; 1
     69a:	11 09       	sbc	r17, r1
     69c:	01 15       	cp	r16, r1
     69e:	11 05       	cpc	r17, r1
     6a0:	81 f7       	brne	.-32     	; 0x682 <disk_initialize+0x7c>
     6a2:	4d c0       	rjmp	.+154    	; 0x73e <disk_initialize+0x138>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
     6a4:	01 2b       	or	r16, r17
     6a6:	09 f4       	brne	.+2      	; 0x6aa <disk_initialize+0xa4>
     6a8:	4c c0       	rjmp	.+152    	; 0x742 <disk_initialize+0x13c>
     6aa:	40 e0       	ldi	r20, 0x00	; 0
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	ba 01       	movw	r22, r20
     6b0:	8a e3       	ldi	r24, 0x3A	; 58
     6b2:	31 df       	rcall	.-414    	; 0x516 <send_cmd>
     6b4:	81 11       	cpse	r24, r1
     6b6:	47 c0       	rjmp	.+142    	; 0x746 <disk_initialize+0x140>
					rcvr_mmc(buf, 4);
     6b8:	64 e0       	ldi	r22, 0x04	; 4
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	36 de       	rcall	.-916    	; 0x32e <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	86 ff       	sbrs	r24, 6
     6c6:	41 c0       	rjmp	.+130    	; 0x74a <disk_initialize+0x144>
     6c8:	0f 2e       	mov	r0, r31
     6ca:	fc e0       	ldi	r31, 0x0C	; 12
     6cc:	ff 2e       	mov	r15, r31
     6ce:	f0 2d       	mov	r31, r0
     6d0:	45 c0       	rjmp	.+138    	; 0x75c <disk_initialize+0x156>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	ba 01       	movw	r22, r20
     6d8:	89 ea       	ldi	r24, 0xA9	; 169
     6da:	1d df       	rcall	.-454    	; 0x516 <send_cmd>
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	40 f4       	brcc	.+16     	; 0x6f0 <disk_initialize+0xea>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     6e0:	0f 2e       	mov	r0, r31
     6e2:	f9 ea       	ldi	r31, 0xA9	; 169
     6e4:	ef 2e       	mov	r14, r31
     6e6:	f0 2d       	mov	r31, r0
     6e8:	68 94       	set
     6ea:	ff 24       	eor	r15, r15
     6ec:	f1 f8       	bld	r15, 1
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <disk_initialize+0xf2>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     6f0:	ee 24       	eor	r14, r14
     6f2:	e3 94       	inc	r14
     6f4:	ff 24       	eor	r15, r15
     6f6:	f3 94       	inc	r15
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
     6f8:	08 ee       	ldi	r16, 0xE8	; 232
     6fa:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	ba 01       	movw	r22, r20
     702:	8e 2d       	mov	r24, r14
     704:	08 df       	rcall	.-496    	; 0x516 <send_cmd>
     706:	88 23       	and	r24, r24
     708:	49 f0       	breq	.+18     	; 0x71c <disk_initialize+0x116>
				dly_us(1000);
     70a:	88 ee       	ldi	r24, 0xE8	; 232
     70c:	93 e0       	ldi	r25, 0x03	; 3
     70e:	c7 dd       	rcall	.-1138   	; 0x29e <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
     710:	01 50       	subi	r16, 0x01	; 1
     712:	11 09       	sbc	r17, r1
     714:	01 15       	cp	r16, r1
     716:	11 05       	cpc	r17, r1
     718:	89 f7       	brne	.-30     	; 0x6fc <disk_initialize+0xf6>
     71a:	1b c0       	rjmp	.+54     	; 0x752 <disk_initialize+0x14c>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     71c:	01 2b       	or	r16, r17
     71e:	d9 f0       	breq	.+54     	; 0x756 <disk_initialize+0x150>
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	52 e0       	ldi	r21, 0x02	; 2
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e1       	ldi	r24, 0x10	; 16
     72a:	f5 de       	rcall	.-534    	; 0x516 <send_cmd>
     72c:	81 11       	cpse	r24, r1
     72e:	15 c0       	rjmp	.+42     	; 0x75a <disk_initialize+0x154>
     730:	15 c0       	rjmp	.+42     	; 0x75c <disk_initialize+0x156>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
     732:	f1 2c       	mov	r15, r1
     734:	13 c0       	rjmp	.+38     	; 0x75c <disk_initialize+0x156>
     736:	f1 2c       	mov	r15, r1
     738:	11 c0       	rjmp	.+34     	; 0x75c <disk_initialize+0x156>
     73a:	f1 2c       	mov	r15, r1
     73c:	0f c0       	rjmp	.+30     	; 0x75c <disk_initialize+0x156>
     73e:	f1 2c       	mov	r15, r1
     740:	0d c0       	rjmp	.+26     	; 0x75c <disk_initialize+0x156>
     742:	f1 2c       	mov	r15, r1
     744:	0b c0       	rjmp	.+22     	; 0x75c <disk_initialize+0x156>
     746:	f1 2c       	mov	r15, r1
     748:	09 c0       	rjmp	.+18     	; 0x75c <disk_initialize+0x156>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     74a:	68 94       	set
     74c:	ff 24       	eor	r15, r15
     74e:	f2 f8       	bld	r15, 2
     750:	05 c0       	rjmp	.+10     	; 0x75c <disk_initialize+0x156>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
     752:	f1 2c       	mov	r15, r1
     754:	03 c0       	rjmp	.+6      	; 0x75c <disk_initialize+0x156>
     756:	f1 2c       	mov	r15, r1
     758:	01 c0       	rjmp	.+2      	; 0x75c <disk_initialize+0x156>
     75a:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
     75c:	f0 92 e4 01 	sts	0x01E4, r15
	s = ty ? 0 : STA_NOINIT;
     760:	11 e0       	ldi	r17, 0x01	; 1
     762:	f1 10       	cpse	r15, r1
     764:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
     766:	10 93 00 01 	sts	0x0100, r17

	deselect();
     76a:	38 de       	rcall	.-912    	; 0x3dc <deselect>

	return s;
     76c:	81 2f       	mov	r24, r17
     76e:	01 c0       	rjmp	.+2      	; 0x772 <disk_initialize+0x16c>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
     770:	83 e0       	ldi	r24, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	08 95       	ret

00000788 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	eb 01       	movw	r28, r22

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     794:	81 11       	cpse	r24, r1
     796:	3d c0       	rjmp	.+122    	; 0x812 <disk_read+0x8a>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;//DEBUG
     798:	80 91 00 01 	lds	r24, 0x0100
     79c:	80 fd       	sbrc	r24, 0
     79e:	3b c0       	rjmp	.+118    	; 0x816 <disk_read+0x8e>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
     7a0:	80 91 e4 01 	lds	r24, 0x01E4
     7a4:	83 fd       	sbrc	r24, 3
     7a6:	09 c0       	rjmp	.+18     	; 0x7ba <disk_read+0x32>
     7a8:	01 2e       	mov	r0, r17
     7aa:	19 e0       	ldi	r17, 0x09	; 9
     7ac:	22 0f       	add	r18, r18
     7ae:	33 1f       	adc	r19, r19
     7b0:	44 1f       	adc	r20, r20
     7b2:	55 1f       	adc	r21, r21
     7b4:	1a 95       	dec	r17
     7b6:	d1 f7       	brne	.-12     	; 0x7ac <disk_read+0x24>
     7b8:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     7ba:	02 30       	cpi	r16, 0x02	; 2
     7bc:	11 05       	cpc	r17, r1
     7be:	28 f0       	brcs	.+10     	; 0x7ca <disk_read+0x42>
     7c0:	0f 2e       	mov	r0, r31
     7c2:	f2 e1       	ldi	r31, 0x12	; 18
     7c4:	ff 2e       	mov	r15, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <disk_read+0x4a>
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f1 e1       	ldi	r31, 0x11	; 17
     7ce:	ff 2e       	mov	r15, r31
     7d0:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
     7d2:	ba 01       	movw	r22, r20
     7d4:	a9 01       	movw	r20, r18
     7d6:	8f 2d       	mov	r24, r15
     7d8:	9e de       	rcall	.-708    	; 0x516 <send_cmd>
     7da:	81 11       	cpse	r24, r1
     7dc:	14 c0       	rjmp	.+40     	; 0x806 <disk_read+0x7e>
		do {
			if (!rcvr_datablock(buff, 512)) break;
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	72 e0       	ldi	r23, 0x02	; 2
     7e2:	ce 01       	movw	r24, r28
     7e4:	26 de       	rcall	.-948    	; 0x432 <rcvr_datablock>
     7e6:	89 2b       	or	r24, r25
     7e8:	31 f0       	breq	.+12     	; 0x7f6 <disk_read+0x6e>
			buff += 512;
     7ea:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
     7ec:	01 50       	subi	r16, 0x01	; 1
     7ee:	11 09       	sbc	r17, r1
     7f0:	01 15       	cp	r16, r1
     7f2:	11 05       	cpc	r17, r1
     7f4:	a1 f7       	brne	.-24     	; 0x7de <disk_read+0x56>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
     7f6:	82 e1       	ldi	r24, 0x12	; 18
     7f8:	f8 12       	cpse	r15, r24
     7fa:	05 c0       	rjmp	.+10     	; 0x806 <disk_read+0x7e>
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	ba 01       	movw	r22, r20
     802:	8c e0       	ldi	r24, 0x0C	; 12
     804:	88 de       	rcall	.-752    	; 0x516 <send_cmd>
	}
	deselect();
     806:	ea dd       	rcall	.-1068   	; 0x3dc <deselect>

	return count ? RES_ERROR : RES_OK;
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	01 2b       	or	r16, r17
     80c:	29 f4       	brne	.+10     	; 0x818 <disk_read+0x90>
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	03 c0       	rjmp	.+6      	; 0x818 <disk_read+0x90>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;//DEBUG
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	01 c0       	rjmp	.+2      	; 0x818 <disk_read+0x90>
     816:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	08 95       	ret

00000824 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	eb 01       	movw	r28, r22
     836:	69 01       	movw	r12, r18
     838:	7a 01       	movw	r14, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     83a:	81 11       	cpse	r24, r1
     83c:	4b c0       	rjmp	.+150    	; 0x8d4 <disk_write+0xb0>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     83e:	80 91 00 01 	lds	r24, 0x0100
     842:	80 fd       	sbrc	r24, 0
     844:	49 c0       	rjmp	.+146    	; 0x8d8 <disk_write+0xb4>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
     846:	80 91 e4 01 	lds	r24, 0x01E4
     84a:	83 fd       	sbrc	r24, 3
     84c:	09 c0       	rjmp	.+18     	; 0x860 <disk_write+0x3c>
     84e:	0b 2e       	mov	r0, r27
     850:	b9 e0       	ldi	r27, 0x09	; 9
     852:	cc 0c       	add	r12, r12
     854:	dd 1c       	adc	r13, r13
     856:	ee 1c       	adc	r14, r14
     858:	ff 1c       	adc	r15, r15
     85a:	ba 95       	dec	r27
     85c:	d1 f7       	brne	.-12     	; 0x852 <disk_write+0x2e>
     85e:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     860:	01 30       	cpi	r16, 0x01	; 1
     862:	11 05       	cpc	r17, r1
     864:	89 f4       	brne	.+34     	; 0x888 <disk_write+0x64>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     866:	b7 01       	movw	r22, r14
     868:	a6 01       	movw	r20, r12
     86a:	88 e1       	ldi	r24, 0x18	; 24
     86c:	54 de       	rcall	.-856    	; 0x516 <send_cmd>
     86e:	81 11       	cpse	r24, r1
     870:	2b c0       	rjmp	.+86     	; 0x8c8 <disk_write+0xa4>
			&& xmit_datablock(buff, 0xFE))
     872:	6e ef       	ldi	r22, 0xFE	; 254
     874:	ce 01       	movw	r24, r28
     876:	17 de       	rcall	.-978    	; 0x4a6 <xmit_datablock>
     878:	31 e0       	ldi	r19, 0x01	; 1
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	89 2b       	or	r24, r25
     87e:	09 f0       	breq	.+2      	; 0x882 <disk_write+0x5e>
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	03 2f       	mov	r16, r19
     884:	12 2f       	mov	r17, r18
     886:	20 c0       	rjmp	.+64     	; 0x8c8 <disk_write+0xa4>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     888:	86 70       	andi	r24, 0x06	; 6
     88a:	29 f0       	breq	.+10     	; 0x896 <disk_write+0x72>
     88c:	a8 01       	movw	r20, r16
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	87 e9       	ldi	r24, 0x97	; 151
     894:	40 de       	rcall	.-896    	; 0x516 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     896:	b7 01       	movw	r22, r14
     898:	a6 01       	movw	r20, r12
     89a:	89 e1       	ldi	r24, 0x19	; 25
     89c:	3c de       	rcall	.-904    	; 0x516 <send_cmd>
     89e:	81 11       	cpse	r24, r1
     8a0:	13 c0       	rjmp	.+38     	; 0x8c8 <disk_write+0xa4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     8a2:	6c ef       	ldi	r22, 0xFC	; 252
     8a4:	ce 01       	movw	r24, r28
     8a6:	ff dd       	rcall	.-1026   	; 0x4a6 <xmit_datablock>
     8a8:	89 2b       	or	r24, r25
     8aa:	31 f0       	breq	.+12     	; 0x8b8 <disk_write+0x94>
				buff += 512;
     8ac:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
     8ae:	01 50       	subi	r16, 0x01	; 1
     8b0:	11 09       	sbc	r17, r1
     8b2:	01 15       	cp	r16, r1
     8b4:	11 05       	cpc	r17, r1
     8b6:	a9 f7       	brne	.-22     	; 0x8a2 <disk_write+0x7e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     8b8:	6d ef       	ldi	r22, 0xFD	; 253
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	f3 dd       	rcall	.-1050   	; 0x4a6 <xmit_datablock>
     8c0:	89 2b       	or	r24, r25
     8c2:	11 f4       	brne	.+4      	; 0x8c8 <disk_write+0xa4>
				count = 1;
     8c4:	01 e0       	ldi	r16, 0x01	; 1
     8c6:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
     8c8:	89 dd       	rcall	.-1262   	; 0x3dc <deselect>

	return count ? RES_ERROR : RES_OK;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	01 2b       	or	r16, r17
     8ce:	29 f4       	brne	.+10     	; 0x8da <disk_write+0xb6>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <disk_write+0xb6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <disk_write+0xb6>
     8d8:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	08 95       	ret

000008ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	60 97       	sbiw	r28, 0x10	; 16
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	8a 01       	movw	r16, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     90e:	81 11       	cpse	r24, r1
     910:	96 c0       	rjmp	.+300    	; 0xa3e <disk_ioctl+0x152>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
     912:	80 91 00 01 	lds	r24, 0x0100
     916:	80 fd       	sbrc	r24, 0
     918:	94 c0       	rjmp	.+296    	; 0xa42 <disk_ioctl+0x156>

	res = RES_ERROR;
	switch (ctrl) {
     91a:	61 30       	cpi	r22, 0x01	; 1
     91c:	61 f0       	breq	.+24     	; 0x936 <disk_ioctl+0x4a>
     91e:	20 f0       	brcs	.+8      	; 0x928 <disk_ioctl+0x3c>
     920:	63 30       	cpi	r22, 0x03	; 3
     922:	09 f4       	brne	.+2      	; 0x926 <disk_ioctl+0x3a>
     924:	79 c0       	rjmp	.+242    	; 0xa18 <disk_ioctl+0x12c>
     926:	83 c0       	rjmp	.+262    	; 0xa2e <disk_ioctl+0x142>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
     928:	68 dd       	rcall	.-1328   	; 0x3fa <select>
     92a:	11 e0       	ldi	r17, 0x01	; 1
     92c:	89 2b       	or	r24, r25
     92e:	09 f4       	brne	.+2      	; 0x932 <disk_ioctl+0x46>
     930:	83 c0       	rjmp	.+262    	; 0xa38 <disk_ioctl+0x14c>
     932:	10 e0       	ldi	r17, 0x00	; 0
     934:	81 c0       	rjmp	.+258    	; 0xa38 <disk_ioctl+0x14c>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	ba 01       	movw	r22, r20
     93c:	89 e0       	ldi	r24, 0x09	; 9
     93e:	eb dd       	rcall	.-1066   	; 0x516 <send_cmd>
     940:	81 11       	cpse	r24, r1
     942:	77 c0       	rjmp	.+238    	; 0xa32 <disk_ioctl+0x146>
     944:	60 e1       	ldi	r22, 0x10	; 16
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	ce 01       	movw	r24, r28
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	72 dd       	rcall	.-1308   	; 0x432 <rcvr_datablock>
     94e:	89 2b       	or	r24, r25
     950:	09 f4       	brne	.+2      	; 0x954 <disk_ioctl+0x68>
     952:	71 c0       	rjmp	.+226    	; 0xa36 <disk_ioctl+0x14a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	82 95       	swap	r24
     958:	86 95       	lsr	r24
     95a:	86 95       	lsr	r24
     95c:	83 70       	andi	r24, 0x03	; 3
     95e:	81 30       	cpi	r24, 0x01	; 1
     960:	31 f5       	brne	.+76     	; 0x9ae <disk_ioctl+0xc2>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     962:	88 85       	ldd	r24, Y+8	; 0x08
     964:	8f 73       	andi	r24, 0x3F	; 63
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	a0 e0       	ldi	r26, 0x00	; 0
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	dc 01       	movw	r26, r24
     96e:	99 27       	eor	r25, r25
     970:	88 27       	eor	r24, r24
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	a1 1d       	adc	r26, r1
     976:	b1 1d       	adc	r27, r1
     978:	29 85       	ldd	r18, Y+9	; 0x09
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	32 2f       	mov	r19, r18
     97e:	22 27       	eor	r18, r18
     980:	4a 85       	ldd	r20, Y+10	; 0x0a
     982:	24 0f       	add	r18, r20
     984:	31 1d       	adc	r19, r1
     986:	82 0f       	add	r24, r18
     988:	93 1f       	adc	r25, r19
     98a:	a1 1d       	adc	r26, r1
     98c:	b1 1d       	adc	r27, r1
					*(DWORD*)buff = cs << 10;
     98e:	07 2e       	mov	r0, r23
     990:	7a e0       	ldi	r23, 0x0A	; 10
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	aa 1f       	adc	r26, r26
     998:	bb 1f       	adc	r27, r27
     99a:	7a 95       	dec	r23
     99c:	d1 f7       	brne	.-12     	; 0x992 <disk_ioctl+0xa6>
     99e:	70 2d       	mov	r23, r0
     9a0:	f8 01       	movw	r30, r16
     9a2:	80 83       	st	Z, r24
     9a4:	91 83       	std	Z+1, r25	; 0x01
     9a6:	a2 83       	std	Z+2, r26	; 0x02
     9a8:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
				}
				res = RES_OK;
     9aa:	10 e0       	ldi	r17, 0x00	; 0
     9ac:	45 c0       	rjmp	.+138    	; 0xa38 <disk_ioctl+0x14c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     9ae:	49 85       	ldd	r20, Y+9	; 0x09
     9b0:	42 95       	swap	r20
     9b2:	46 95       	lsr	r20
     9b4:	46 95       	lsr	r20
     9b6:	43 70       	andi	r20, 0x03	; 3
     9b8:	88 85       	ldd	r24, Y+8	; 0x08
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	f4 e0       	ldi	r31, 0x04	; 4
     9be:	8f 9f       	mul	r24, r31
     9c0:	40 0d       	add	r20, r0
     9c2:	51 1d       	adc	r21, r1
     9c4:	11 24       	eor	r1, r1
     9c6:	4f 5f       	subi	r20, 0xFF	; 255
     9c8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ca:	8f 81       	ldd	r24, Y+7	; 0x07
     9cc:	83 70       	andi	r24, 0x03	; 3
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	98 2f       	mov	r25, r24
     9d2:	88 27       	eor	r24, r24
     9d4:	99 0f       	add	r25, r25
     9d6:	99 0f       	add	r25, r25
     9d8:	48 0f       	add	r20, r24
     9da:	59 1f       	adc	r21, r25
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     9e0:	9e 81       	ldd	r25, Y+6	; 0x06
     9e2:	9f 70       	andi	r25, 0x0F	; 15
     9e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e6:	88 1f       	adc	r24, r24
     9e8:	88 27       	eor	r24, r24
     9ea:	88 1f       	adc	r24, r24
     9ec:	89 0f       	add	r24, r25
     9ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f0:	93 70       	andi	r25, 0x03	; 3
     9f2:	99 0f       	add	r25, r25
     9f4:	89 0f       	add	r24, r25
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
     9f6:	87 50       	subi	r24, 0x07	; 7
     9f8:	6a 01       	movw	r12, r20
     9fa:	7b 01       	movw	r14, r22
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <disk_ioctl+0x11a>
     9fe:	cc 0c       	add	r12, r12
     a00:	dd 1c       	adc	r13, r13
     a02:	ee 1c       	adc	r14, r14
     a04:	ff 1c       	adc	r15, r15
     a06:	8a 95       	dec	r24
     a08:	d2 f7       	brpl	.-12     	; 0x9fe <disk_ioctl+0x112>
     a0a:	f8 01       	movw	r30, r16
     a0c:	c0 82       	st	Z, r12
     a0e:	d1 82       	std	Z+1, r13	; 0x01
     a10:	e2 82       	std	Z+2, r14	; 0x02
     a12:	f3 82       	std	Z+3, r15	; 0x03
				}
				res = RES_OK;
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	10 c0       	rjmp	.+32     	; 0xa38 <disk_ioctl+0x14c>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
     a18:	80 e8       	ldi	r24, 0x80	; 128
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	fa 01       	movw	r30, r20
     a22:	80 83       	st	Z, r24
     a24:	91 83       	std	Z+1, r25	; 0x01
     a26:	a2 83       	std	Z+2, r26	; 0x02
     a28:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
     a2a:	10 e0       	ldi	r17, 0x00	; 0
			break;
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <disk_ioctl+0x14c>

		default:
			res = RES_PARERR;
     a2e:	14 e0       	ldi	r17, 0x04	; 4
     a30:	03 c0       	rjmp	.+6      	; 0xa38 <disk_ioctl+0x14c>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
     a32:	11 e0       	ldi	r17, 0x01	; 1
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <disk_ioctl+0x14c>
     a36:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
     a38:	d1 dc       	rcall	.-1630   	; 0x3dc <deselect>

	return res;
     a3a:	81 2f       	mov	r24, r17
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <disk_ioctl+0x158>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <disk_ioctl+0x158>
     a42:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
     a44:	60 96       	adiw	r28, 0x10	; 16
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	08 95       	ret

00000a62 <mem_cpy>:
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
     a62:	41 15       	cp	r20, r1
     a64:	51 05       	cpc	r21, r1
     a66:	51 f0       	breq	.+20     	; 0xa7c <mem_cpy+0x1a>
     a68:	a6 2f       	mov	r26, r22
     a6a:	b7 2f       	mov	r27, r23
     a6c:	fc 01       	movw	r30, r24
     a6e:	84 0f       	add	r24, r20
     a70:	95 1f       	adc	r25, r21
     a72:	2d 91       	ld	r18, X+
     a74:	21 93       	st	Z+, r18
     a76:	e8 17       	cp	r30, r24
     a78:	f9 07       	cpc	r31, r25
     a7a:	d9 f7       	brne	.-10     	; 0xa72 <mem_cpy+0x10>
     a7c:	08 95       	ret

00000a7e <mem_set>:
     a7e:	41 15       	cp	r20, r1
     a80:	51 05       	cpc	r21, r1
     a82:	39 f0       	breq	.+14     	; 0xa92 <mem_set+0x14>
     a84:	fc 01       	movw	r30, r24
     a86:	84 0f       	add	r24, r20
     a88:	95 1f       	adc	r25, r21
     a8a:	61 93       	st	Z+, r22
     a8c:	e8 17       	cp	r30, r24
     a8e:	f9 07       	cpc	r31, r25
     a90:	e1 f7       	brne	.-8      	; 0xa8a <mem_set+0xc>
     a92:	08 95       	ret

00000a94 <ld_clust>:
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	dc 01       	movw	r26, r24
     a9a:	fb 01       	movw	r30, r22
     a9c:	63 8d       	ldd	r22, Z+27	; 0x1b
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	76 2f       	mov	r23, r22
     aa2:	66 27       	eor	r22, r22
     aa4:	82 8d       	ldd	r24, Z+26	; 0x1a
     aa6:	68 2b       	or	r22, r24
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	2c 91       	ld	r18, X
     aae:	23 30       	cpi	r18, 0x03	; 3
     ab0:	79 f4       	brne	.+30     	; 0xad0 <ld_clust+0x3c>
     ab2:	05 89       	ldd	r16, Z+21	; 0x15
     ab4:	10 e0       	ldi	r17, 0x00	; 0
     ab6:	10 2f       	mov	r17, r16
     ab8:	00 27       	eor	r16, r16
     aba:	24 89       	ldd	r18, Z+20	; 0x14
     abc:	02 2b       	or	r16, r18
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	98 01       	movw	r18, r16
     ac4:	11 27       	eor	r17, r17
     ac6:	00 27       	eor	r16, r16
     ac8:	60 2b       	or	r22, r16
     aca:	71 2b       	or	r23, r17
     acc:	82 2b       	or	r24, r18
     ace:	93 2b       	or	r25, r19
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	08 95       	ret

00000ad6 <get_ldnumber>:
     ad6:	fc 01       	movw	r30, r24
     ad8:	a0 81       	ld	r26, Z
     ada:	b1 81       	ldd	r27, Z+1	; 0x01
     adc:	10 97       	sbiw	r26, 0x00	; 0
     ade:	09 f1       	breq	.+66     	; 0xb22 <__stack+0x23>
     ae0:	6c 91       	ld	r22, X
     ae2:	61 32       	cpi	r22, 0x21	; 33
     ae4:	58 f0       	brcs	.+22     	; 0xafc <get_ldnumber+0x26>
     ae6:	6a 33       	cpi	r22, 0x3A	; 58
     ae8:	41 f1       	breq	.+80     	; 0xb3a <__stack+0x3b>
     aea:	fd 01       	movw	r30, r26
     aec:	31 96       	adiw	r30, 0x01	; 1
     aee:	9f 01       	movw	r18, r30
     af0:	41 91       	ld	r20, Z+
     af2:	41 32       	cpi	r20, 0x21	; 33
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__stack+0x1>
     af6:	4a 33       	cpi	r20, 0x3A	; 58
     af8:	d1 f7       	brne	.-12     	; 0xaee <get_ldnumber+0x18>
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <__stack+0x5>
     afc:	46 2f       	mov	r20, r22
     afe:	9d 01       	movw	r18, r26
     b00:	4a 33       	cpi	r20, 0x3A	; 58
     b02:	91 f4       	brne	.+36     	; 0xb28 <__stack+0x29>
     b04:	ad 01       	movw	r20, r26
     b06:	4f 5f       	subi	r20, 0xFF	; 255
     b08:	5f 4f       	sbci	r21, 0xFF	; 255
     b0a:	24 17       	cp	r18, r20
     b0c:	35 07       	cpc	r19, r21
     b0e:	79 f4       	brne	.+30     	; 0xb2e <__stack+0x2f>
     b10:	60 33       	cpi	r22, 0x30	; 48
     b12:	81 f4       	brne	.+32     	; 0xb34 <__stack+0x35>
     b14:	12 96       	adiw	r26, 0x02	; 2
     b16:	fc 01       	movw	r30, r24
     b18:	b1 83       	std	Z+1, r27	; 0x01
     b1a:	a0 83       	st	Z, r26
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	08 95       	ret
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	9f ef       	ldi	r25, 0xFF	; 255
     b26:	08 95       	ret
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	08 95       	ret
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	08 95       	ret
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	08 95       	ret
     b3a:	9d 01       	movw	r18, r26
     b3c:	e3 cf       	rjmp	.-58     	; 0xb04 <__stack+0x5>

00000b3e <sync_window>:
     b3e:	8f 92       	push	r8
     b40:	9f 92       	push	r9
     b42:	af 92       	push	r10
     b44:	bf 92       	push	r11
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	ec 01       	movw	r28, r24
     b58:	8c 81       	ldd	r24, Y+4	; 0x04
     b5a:	88 23       	and	r24, r24
     b5c:	09 f4       	brne	.+2      	; 0xb60 <sync_window+0x22>
     b5e:	42 c0       	rjmp	.+132    	; 0xbe4 <sync_window+0xa6>
     b60:	ca a4       	ldd	r12, Y+42	; 0x2a
     b62:	db a4       	ldd	r13, Y+43	; 0x2b
     b64:	ec a4       	ldd	r14, Y+44	; 0x2c
     b66:	fd a4       	ldd	r15, Y+45	; 0x2d
     b68:	5e 01       	movw	r10, r28
     b6a:	8e e2       	ldi	r24, 0x2E	; 46
     b6c:	a8 0e       	add	r10, r24
     b6e:	b1 1c       	adc	r11, r1
     b70:	01 e0       	ldi	r16, 0x01	; 1
     b72:	10 e0       	ldi	r17, 0x00	; 0
     b74:	a7 01       	movw	r20, r14
     b76:	96 01       	movw	r18, r12
     b78:	b5 01       	movw	r22, r10
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	53 de       	rcall	.-858    	; 0x824 <disk_write>
     b7e:	81 11       	cpse	r24, r1
     b80:	33 c0       	rjmp	.+102    	; 0xbe8 <sync_window+0xaa>
     b82:	1c 82       	std	Y+4, r1	; 0x04
     b84:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b86:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b88:	a8 a1       	ldd	r26, Y+32	; 0x20
     b8a:	b9 a1       	ldd	r27, Y+33	; 0x21
     b8c:	b7 01       	movw	r22, r14
     b8e:	a6 01       	movw	r20, r12
     b90:	48 1b       	sub	r20, r24
     b92:	59 0b       	sbc	r21, r25
     b94:	6a 0b       	sbc	r22, r26
     b96:	7b 0b       	sbc	r23, r27
     b98:	8e 89       	ldd	r24, Y+22	; 0x16
     b9a:	9f 89       	ldd	r25, Y+23	; 0x17
     b9c:	a8 8d       	ldd	r26, Y+24	; 0x18
     b9e:	b9 8d       	ldd	r27, Y+25	; 0x19
     ba0:	48 17       	cp	r20, r24
     ba2:	59 07       	cpc	r21, r25
     ba4:	6a 07       	cpc	r22, r26
     ba6:	7b 07       	cpc	r23, r27
     ba8:	08 f5       	brcc	.+66     	; 0xbec <sync_window+0xae>
     baa:	8b 80       	ldd	r8, Y+3	; 0x03
     bac:	91 2c       	mov	r9, r1
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	88 16       	cp	r8, r24
     bb2:	91 04       	cpc	r9, r1
     bb4:	e8 f0       	brcs	.+58     	; 0xbf0 <sync_window+0xb2>
     bb6:	8e 89       	ldd	r24, Y+22	; 0x16
     bb8:	9f 89       	ldd	r25, Y+23	; 0x17
     bba:	a8 8d       	ldd	r26, Y+24	; 0x18
     bbc:	b9 8d       	ldd	r27, Y+25	; 0x19
     bbe:	c8 0e       	add	r12, r24
     bc0:	d9 1e       	adc	r13, r25
     bc2:	ea 1e       	adc	r14, r26
     bc4:	fb 1e       	adc	r15, r27
     bc6:	01 e0       	ldi	r16, 0x01	; 1
     bc8:	10 e0       	ldi	r17, 0x00	; 0
     bca:	a7 01       	movw	r20, r14
     bcc:	96 01       	movw	r18, r12
     bce:	b5 01       	movw	r22, r10
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	28 de       	rcall	.-944    	; 0x824 <disk_write>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	88 1a       	sub	r8, r24
     bd8:	91 08       	sbc	r9, r1
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	88 16       	cp	r8, r24
     bde:	91 04       	cpc	r9, r1
     be0:	51 f7       	brne	.-44     	; 0xbb6 <sync_window+0x78>
     be2:	08 c0       	rjmp	.+16     	; 0xbf4 <sync_window+0xb6>
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	07 c0       	rjmp	.+14     	; 0xbf6 <sync_window+0xb8>
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <sync_window+0xb8>
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <sync_window+0xb8>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <sync_window+0xb8>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	df 90       	pop	r13
     c04:	cf 90       	pop	r12
     c06:	bf 90       	pop	r11
     c08:	af 90       	pop	r10
     c0a:	9f 90       	pop	r9
     c0c:	8f 90       	pop	r8
     c0e:	08 95       	ret

00000c10 <move_window>:
     c10:	bf 92       	push	r11
     c12:	cf 92       	push	r12
     c14:	df 92       	push	r13
     c16:	ef 92       	push	r14
     c18:	ff 92       	push	r15
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ec 01       	movw	r28, r24
     c24:	6a 01       	movw	r12, r20
     c26:	7b 01       	movw	r14, r22
     c28:	8a a5       	ldd	r24, Y+42	; 0x2a
     c2a:	9b a5       	ldd	r25, Y+43	; 0x2b
     c2c:	ac a5       	ldd	r26, Y+44	; 0x2c
     c2e:	bd a5       	ldd	r27, Y+45	; 0x2d
     c30:	84 17       	cp	r24, r20
     c32:	95 07       	cpc	r25, r21
     c34:	a6 07       	cpc	r26, r22
     c36:	b7 07       	cpc	r27, r23
     c38:	d9 f0       	breq	.+54     	; 0xc70 <move_window+0x60>
     c3a:	ce 01       	movw	r24, r28
     c3c:	80 df       	rcall	.-256    	; 0xb3e <sync_window>
     c3e:	b8 2e       	mov	r11, r24
     c40:	81 11       	cpse	r24, r1
     c42:	17 c0       	rjmp	.+46     	; 0xc72 <move_window+0x62>
     c44:	01 e0       	ldi	r16, 0x01	; 1
     c46:	10 e0       	ldi	r17, 0x00	; 0
     c48:	a7 01       	movw	r20, r14
     c4a:	96 01       	movw	r18, r12
     c4c:	be 01       	movw	r22, r28
     c4e:	62 5d       	subi	r22, 0xD2	; 210
     c50:	7f 4f       	sbci	r23, 0xFF	; 255
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	99 dd       	rcall	.-1230   	; 0x788 <disk_read>
     c56:	88 23       	and	r24, r24
     c58:	31 f0       	breq	.+12     	; 0xc66 <move_window+0x56>
     c5a:	bb 24       	eor	r11, r11
     c5c:	b3 94       	inc	r11
     c5e:	cc 24       	eor	r12, r12
     c60:	ca 94       	dec	r12
     c62:	dc 2c       	mov	r13, r12
     c64:	76 01       	movw	r14, r12
     c66:	ca a6       	std	Y+42, r12	; 0x2a
     c68:	db a6       	std	Y+43, r13	; 0x2b
     c6a:	ec a6       	std	Y+44, r14	; 0x2c
     c6c:	fd a6       	std	Y+45, r15	; 0x2d
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <move_window+0x62>
     c70:	b1 2c       	mov	r11, r1
     c72:	8b 2d       	mov	r24, r11
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	bf 90       	pop	r11
     c86:	08 95       	ret

00000c88 <check_fs>:
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	ec 01       	movw	r28, r24
     c92:	1c 82       	std	Y+4, r1	; 0x04
     c94:	0f ef       	ldi	r16, 0xFF	; 255
     c96:	1f ef       	ldi	r17, 0xFF	; 255
     c98:	98 01       	movw	r18, r16
     c9a:	0a a7       	std	Y+42, r16	; 0x2a
     c9c:	1b a7       	std	Y+43, r17	; 0x2b
     c9e:	2c a7       	std	Y+44, r18	; 0x2c
     ca0:	3d a7       	std	Y+45, r19	; 0x2d
     ca2:	b6 df       	rcall	.-148    	; 0xc10 <move_window>
     ca4:	81 11       	cpse	r24, r1
     ca6:	51 c0       	rjmp	.+162    	; 0xd4a <check_fs+0xc2>
     ca8:	fe 01       	movw	r30, r28
     caa:	e3 5d       	subi	r30, 0xD3	; 211
     cac:	fd 4f       	sbci	r31, 0xFD	; 253
     cae:	80 81       	ld	r24, Z
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	98 2f       	mov	r25, r24
     cb4:	88 27       	eor	r24, r24
     cb6:	31 97       	sbiw	r30, 0x01	; 1
     cb8:	20 81       	ld	r18, Z
     cba:	82 2b       	or	r24, r18
     cbc:	85 35       	cpi	r24, 0x55	; 85
     cbe:	9a 4a       	sbci	r25, 0xAA	; 170
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <check_fs+0x3c>
     cc2:	45 c0       	rjmp	.+138    	; 0xd4e <check_fs+0xc6>
     cc4:	e5 5c       	subi	r30, 0xC5	; 197
     cc6:	f1 40       	sbci	r31, 0x01	; 1
     cc8:	80 81       	ld	r24, Z
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	40 81       	ld	r20, Z
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	ba 01       	movw	r22, r20
     cd6:	55 27       	eor	r21, r21
     cd8:	44 27       	eor	r20, r20
     cda:	78 2b       	or	r23, r24
     cdc:	32 97       	sbiw	r30, 0x02	; 2
     cde:	80 81       	ld	r24, Z
     ce0:	48 2b       	or	r20, r24
     ce2:	31 96       	adiw	r30, 0x01	; 1
     ce4:	00 81       	ld	r16, Z
     ce6:	10 e0       	ldi	r17, 0x00	; 0
     ce8:	10 2f       	mov	r17, r16
     cea:	00 27       	eor	r16, r16
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 2b       	or	r20, r16
     cf2:	51 2b       	or	r21, r17
     cf4:	62 2b       	or	r22, r18
     cf6:	73 2b       	or	r23, r19
     cf8:	77 27       	eor	r23, r23
     cfa:	46 34       	cpi	r20, 0x46	; 70
     cfc:	51 44       	sbci	r21, 0x41	; 65
     cfe:	64 45       	sbci	r22, 0x54	; 84
     d00:	71 05       	cpc	r23, r1
     d02:	39 f1       	breq	.+78     	; 0xd52 <check_fs+0xca>
     d04:	7e 96       	adiw	r30, 0x1e	; 30
     d06:	80 81       	ld	r24, Z
     d08:	31 97       	sbiw	r30, 0x01	; 1
     d0a:	40 81       	ld	r20, Z
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	ba 01       	movw	r22, r20
     d14:	55 27       	eor	r21, r21
     d16:	44 27       	eor	r20, r20
     d18:	78 2b       	or	r23, r24
     d1a:	32 97       	sbiw	r30, 0x02	; 2
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2b       	or	r20, r24
     d20:	cf 57       	subi	r28, 0x7F	; 127
     d22:	df 4f       	sbci	r29, 0xFF	; 255
     d24:	88 81       	ld	r24, Y
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	98 2f       	mov	r25, r24
     d2a:	88 27       	eor	r24, r24
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	48 2b       	or	r20, r24
     d32:	59 2b       	or	r21, r25
     d34:	6a 2b       	or	r22, r26
     d36:	7b 2b       	or	r23, r27
     d38:	77 27       	eor	r23, r23
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	46 34       	cpi	r20, 0x46	; 70
     d3e:	51 44       	sbci	r21, 0x41	; 65
     d40:	64 45       	sbci	r22, 0x54	; 84
     d42:	71 05       	cpc	r23, r1
     d44:	39 f4       	brne	.+14     	; 0xd54 <check_fs+0xcc>
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	05 c0       	rjmp	.+10     	; 0xd54 <check_fs+0xcc>
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <check_fs+0xcc>
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <check_fs+0xcc>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	08 95       	ret

00000d5e <validate>:
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	c1 f0       	breq	.+48     	; 0xd92 <validate+0x34>
     d62:	dc 01       	movw	r26, r24
     d64:	ed 91       	ld	r30, X+
     d66:	fc 91       	ld	r31, X
     d68:	11 97       	sbiw	r26, 0x01	; 1
     d6a:	30 97       	sbiw	r30, 0x00	; 0
     d6c:	a1 f0       	breq	.+40     	; 0xd96 <validate+0x38>
     d6e:	20 81       	ld	r18, Z
     d70:	22 23       	and	r18, r18
     d72:	99 f0       	breq	.+38     	; 0xd9a <validate+0x3c>
     d74:	26 81       	ldd	r18, Z+6	; 0x06
     d76:	37 81       	ldd	r19, Z+7	; 0x07
     d78:	12 96       	adiw	r26, 0x02	; 2
     d7a:	8d 91       	ld	r24, X+
     d7c:	9c 91       	ld	r25, X
     d7e:	13 97       	sbiw	r26, 0x03	; 3
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	61 f4       	brne	.+24     	; 0xd9e <validate+0x40>
     d86:	81 81       	ldd	r24, Z+1	; 0x01
     d88:	37 dc       	rcall	.-1938   	; 0x5f8 <disk_status>
     d8a:	80 ff       	sbrs	r24, 0
     d8c:	0a c0       	rjmp	.+20     	; 0xda2 <validate+0x44>
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	08 95       	ret
     d92:	89 e0       	ldi	r24, 0x09	; 9
     d94:	08 95       	ret
     d96:	89 e0       	ldi	r24, 0x09	; 9
     d98:	08 95       	ret
     d9a:	89 e0       	ldi	r24, 0x09	; 9
     d9c:	08 95       	ret
     d9e:	89 e0       	ldi	r24, 0x09	; 9
     da0:	08 95       	ret
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	08 95       	ret

00000da6 <find_volume>:
     da6:	2f 92       	push	r2
     da8:	3f 92       	push	r3
     daa:	4f 92       	push	r4
     dac:	5f 92       	push	r5
     dae:	6f 92       	push	r6
     db0:	7f 92       	push	r7
     db2:	8f 92       	push	r8
     db4:	9f 92       	push	r9
     db6:	af 92       	push	r10
     db8:	bf 92       	push	r11
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	6d 97       	sbiw	r28, 0x1d	; 29
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	6c 01       	movw	r12, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	b4 2e       	mov	r11, r20
     de0:	d6 01       	movw	r26, r12
     de2:	1d 92       	st	X+, r1
     de4:	1c 92       	st	X, r1
     de6:	77 de       	rcall	.-786    	; 0xad6 <get_ldnumber>
     de8:	7c 01       	movw	r14, r24
     dea:	99 23       	and	r25, r25
     dec:	0c f4       	brge	.+2      	; 0xdf0 <find_volume+0x4a>
     dee:	e1 c2       	rjmp	.+1474   	; 0x13b2 <find_volume+0x60c>
     df0:	fc 01       	movw	r30, r24
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	e9 51       	subi	r30, 0x19	; 25
     df8:	fe 4f       	sbci	r31, 0xFE	; 254
     dfa:	00 81       	ld	r16, Z
     dfc:	11 81       	ldd	r17, Z+1	; 0x01
     dfe:	01 15       	cp	r16, r1
     e00:	11 05       	cpc	r17, r1
     e02:	09 f4       	brne	.+2      	; 0xe06 <find_volume+0x60>
     e04:	d8 c2       	rjmp	.+1456   	; 0x13b6 <find_volume+0x610>
     e06:	f6 01       	movw	r30, r12
     e08:	11 83       	std	Z+1, r17	; 0x01
     e0a:	00 83       	st	Z, r16
     e0c:	d8 01       	movw	r26, r16
     e0e:	8c 91       	ld	r24, X
     e10:	88 23       	and	r24, r24
     e12:	61 f0       	breq	.+24     	; 0xe2c <find_volume+0x86>
     e14:	11 96       	adiw	r26, 0x01	; 1
     e16:	8c 91       	ld	r24, X
     e18:	ef db       	rcall	.-2082   	; 0x5f8 <disk_status>
     e1a:	80 fd       	sbrc	r24, 0
     e1c:	07 c0       	rjmp	.+14     	; 0xe2c <find_volume+0x86>
     e1e:	bb 20       	and	r11, r11
     e20:	09 f4       	brne	.+2      	; 0xe24 <find_volume+0x7e>
     e22:	cb c2       	rjmp	.+1430   	; 0x13ba <find_volume+0x614>
     e24:	82 fd       	sbrc	r24, 2
     e26:	cb c2       	rjmp	.+1430   	; 0x13be <find_volume+0x618>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	17 c3       	rjmp	.+1582   	; 0x145a <find_volume+0x6b4>
     e2c:	f8 01       	movw	r30, r16
     e2e:	10 82       	st	Z, r1
     e30:	e1 82       	std	Z+1, r14	; 0x01
     e32:	8e 2d       	mov	r24, r14
     e34:	e8 db       	rcall	.-2096   	; 0x606 <disk_initialize>
     e36:	80 fd       	sbrc	r24, 0
     e38:	c4 c2       	rjmp	.+1416   	; 0x13c2 <find_volume+0x61c>
     e3a:	bb 20       	and	r11, r11
     e3c:	11 f0       	breq	.+4      	; 0xe42 <find_volume+0x9c>
     e3e:	82 fd       	sbrc	r24, 2
     e40:	c2 c2       	rjmp	.+1412   	; 0x13c6 <find_volume+0x620>
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	ba 01       	movw	r22, r20
     e48:	c8 01       	movw	r24, r16
     e4a:	1e df       	rcall	.-452    	; 0xc88 <check_fs>
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	09 f0       	breq	.+2      	; 0xe52 <find_volume+0xac>
     e50:	52 c0       	rjmp	.+164    	; 0xef6 <find_volume+0x150>
     e52:	f8 01       	movw	r30, r16
     e54:	e0 51       	subi	r30, 0x10	; 16
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	7e 01       	movw	r14, r28
     e5a:	21 e1       	ldi	r18, 0x11	; 17
     e5c:	e2 0e       	add	r14, r18
     e5e:	f1 1c       	adc	r15, r1
     e60:	9e 01       	movw	r18, r28
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	a1 2c       	mov	r10, r1
     e68:	b1 2c       	mov	r11, r1
     e6a:	c1 2c       	mov	r12, r1
     e6c:	d1 2c       	mov	r13, r1
     e6e:	80 81       	ld	r24, Z
     e70:	88 23       	and	r24, r24
     e72:	b1 f0       	breq	.+44     	; 0xea0 <find_volume+0xfa>
     e74:	47 81       	ldd	r20, Z+7	; 0x07
     e76:	86 81       	ldd	r24, Z+6	; 0x06
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	dc 01       	movw	r26, r24
     e80:	99 27       	eor	r25, r25
     e82:	88 27       	eor	r24, r24
     e84:	b4 2b       	or	r27, r20
     e86:	44 81       	ldd	r20, Z+4	; 0x04
     e88:	84 2b       	or	r24, r20
     e8a:	45 81       	ldd	r20, Z+5	; 0x05
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	54 2f       	mov	r21, r20
     e90:	44 27       	eor	r20, r20
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	48 2b       	or	r20, r24
     e98:	59 2b       	or	r21, r25
     e9a:	6a 2b       	or	r22, r26
     e9c:	7b 2b       	or	r23, r27
     e9e:	04 c0       	rjmp	.+8      	; 0xea8 <find_volume+0x102>
     ea0:	4a 2d       	mov	r20, r10
     ea2:	5b 2d       	mov	r21, r11
     ea4:	6c 2d       	mov	r22, r12
     ea6:	7d 2d       	mov	r23, r13
     ea8:	d9 01       	movw	r26, r18
     eaa:	4d 93       	st	X+, r20
     eac:	5d 93       	st	X+, r21
     eae:	6d 93       	st	X+, r22
     eb0:	7d 93       	st	X+, r23
     eb2:	9d 01       	movw	r18, r26
     eb4:	70 96       	adiw	r30, 0x10	; 16
     eb6:	ae 15       	cp	r26, r14
     eb8:	bf 05       	cpc	r27, r15
     eba:	c9 f6       	brne	.-78     	; 0xe6e <find_volume+0xc8>
     ebc:	fe 01       	movw	r30, r28
     ebe:	31 96       	adiw	r30, 0x01	; 1
     ec0:	6f 01       	movw	r12, r30
     ec2:	68 94       	set
     ec4:	bb 24       	eor	r11, r11
     ec6:	b1 f8       	bld	r11, 1
     ec8:	d6 01       	movw	r26, r12
     eca:	4d 90       	ld	r4, X+
     ecc:	5d 90       	ld	r5, X+
     ece:	6d 90       	ld	r6, X+
     ed0:	7d 90       	ld	r7, X+
     ed2:	6d 01       	movw	r12, r26
     ed4:	41 14       	cp	r4, r1
     ed6:	51 04       	cpc	r5, r1
     ed8:	61 04       	cpc	r6, r1
     eda:	71 04       	cpc	r7, r1
     edc:	39 f0       	breq	.+14     	; 0xeec <find_volume+0x146>
     ede:	b3 01       	movw	r22, r6
     ee0:	a2 01       	movw	r20, r4
     ee2:	c8 01       	movw	r24, r16
     ee4:	d1 de       	rcall	.-606    	; 0xc88 <check_fs>
     ee6:	81 11       	cpse	r24, r1
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <find_volume+0x148>
     eea:	08 c0       	rjmp	.+16     	; 0xefc <find_volume+0x156>
     eec:	8b 2d       	mov	r24, r11
     eee:	ce 14       	cp	r12, r14
     ef0:	df 04       	cpc	r13, r15
     ef2:	51 f7       	brne	.-44     	; 0xec8 <find_volume+0x122>
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <find_volume+0x156>
     ef6:	41 2c       	mov	r4, r1
     ef8:	51 2c       	mov	r5, r1
     efa:	32 01       	movw	r6, r4
     efc:	83 30       	cpi	r24, 0x03	; 3
     efe:	09 f4       	brne	.+2      	; 0xf02 <find_volume+0x15c>
     f00:	64 c2       	rjmp	.+1224   	; 0x13ca <find_volume+0x624>
     f02:	81 11       	cpse	r24, r1
     f04:	64 c2       	rjmp	.+1224   	; 0x13ce <find_volume+0x628>
     f06:	f8 01       	movw	r30, r16
     f08:	82 ad       	ldd	r24, Z+58	; 0x3a
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	98 2f       	mov	r25, r24
     f0e:	88 27       	eor	r24, r24
     f10:	21 ad       	ldd	r18, Z+57	; 0x39
     f12:	82 2b       	or	r24, r18
     f14:	81 15       	cp	r24, r1
     f16:	92 40       	sbci	r25, 0x02	; 2
     f18:	09 f0       	breq	.+2      	; 0xf1c <find_volume+0x176>
     f1a:	5b c2       	rjmp	.+1206   	; 0x13d2 <find_volume+0x62c>
     f1c:	f8 01       	movw	r30, r16
     f1e:	eb 5b       	subi	r30, 0xBB	; 187
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	c0 80       	ld	r12, Z
     f24:	d1 2c       	mov	r13, r1
     f26:	dc 2c       	mov	r13, r12
     f28:	cc 24       	eor	r12, r12
     f2a:	31 97       	sbiw	r30, 0x01	; 1
     f2c:	80 81       	ld	r24, Z
     f2e:	c8 2a       	or	r12, r24
     f30:	e1 2c       	mov	r14, r1
     f32:	f1 2c       	mov	r15, r1
     f34:	c1 14       	cp	r12, r1
     f36:	d1 04       	cpc	r13, r1
     f38:	e1 04       	cpc	r14, r1
     f3a:	f1 04       	cpc	r15, r1
     f3c:	c9 f4       	brne	.+50     	; 0xf70 <find_volume+0x1ca>
     f3e:	71 96       	adiw	r30, 0x11	; 17
     f40:	80 81       	ld	r24, Z
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	c0 80       	ld	r12, Z
     f46:	d1 2c       	mov	r13, r1
     f48:	e1 2c       	mov	r14, r1
     f4a:	f1 2c       	mov	r15, r1
     f4c:	76 01       	movw	r14, r12
     f4e:	dd 24       	eor	r13, r13
     f50:	cc 24       	eor	r12, r12
     f52:	f8 2a       	or	r15, r24
     f54:	32 97       	sbiw	r30, 0x02	; 2
     f56:	80 81       	ld	r24, Z
     f58:	c8 2a       	or	r12, r24
     f5a:	31 96       	adiw	r30, 0x01	; 1
     f5c:	80 81       	ld	r24, Z
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	98 2f       	mov	r25, r24
     f62:	88 27       	eor	r24, r24
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	c8 2a       	or	r12, r24
     f6a:	d9 2a       	or	r13, r25
     f6c:	ea 2a       	or	r14, r26
     f6e:	fb 2a       	or	r15, r27
     f70:	d8 01       	movw	r26, r16
     f72:	56 96       	adiw	r26, 0x16	; 22
     f74:	cd 92       	st	X+, r12
     f76:	dd 92       	st	X+, r13
     f78:	ed 92       	st	X+, r14
     f7a:	fc 92       	st	X, r15
     f7c:	59 97       	sbiw	r26, 0x19	; 25
     f7e:	de 96       	adiw	r26, 0x3e	; 62
     f80:	ac 91       	ld	r26, X
     f82:	f8 01       	movw	r30, r16
     f84:	a3 83       	std	Z+3, r26	; 0x03
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	8a 0f       	add	r24, r26
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <find_volume+0x1ea>
     f8e:	23 c2       	rjmp	.+1094   	; 0x13d6 <find_volume+0x630>
     f90:	f3 ad       	ldd	r31, Z+59	; 0x3b
     f92:	f9 8b       	std	Y+17, r31	; 0x11
     f94:	2f 2f       	mov	r18, r31
     f96:	f8 01       	movw	r30, r16
     f98:	22 83       	std	Z+2, r18	; 0x02
     f9a:	22 23       	and	r18, r18
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <find_volume+0x1fa>
     f9e:	1d c2       	rjmp	.+1082   	; 0x13da <find_volume+0x634>
     fa0:	82 2f       	mov	r24, r18
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9c 01       	movw	r18, r24
     fa6:	21 50       	subi	r18, 0x01	; 1
     fa8:	31 09       	sbc	r19, r1
     faa:	82 23       	and	r24, r18
     fac:	93 23       	and	r25, r19
     fae:	89 2b       	or	r24, r25
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <find_volume+0x20e>
     fb2:	15 c2       	rjmp	.+1066   	; 0x13de <find_volume+0x638>
     fb4:	e0 5c       	subi	r30, 0xC0	; 192
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 81       	ld	r24, Z
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	98 2f       	mov	r25, r24
     fbe:	88 27       	eor	r24, r24
     fc0:	f8 01       	movw	r30, r16
     fc2:	27 ad       	ldd	r18, Z+63	; 0x3f
     fc4:	1c 01       	movw	r2, r24
     fc6:	22 2a       	or	r2, r18
     fc8:	31 86       	std	Z+9, r3	; 0x09
     fca:	20 86       	std	Z+8, r2	; 0x08
     fcc:	c1 01       	movw	r24, r2
     fce:	8f 70       	andi	r24, 0x0F	; 15
     fd0:	99 27       	eor	r25, r25
     fd2:	89 2b       	or	r24, r25
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <find_volume+0x232>
     fd6:	05 c2       	rjmp	.+1034   	; 0x13e2 <find_volume+0x63c>
     fd8:	ee 5b       	subi	r30, 0xBE	; 190
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	80 80       	ld	r8, Z
     fde:	91 2c       	mov	r9, r1
     fe0:	98 2c       	mov	r9, r8
     fe2:	88 24       	eor	r8, r8
     fe4:	31 97       	sbiw	r30, 0x01	; 1
     fe6:	80 81       	ld	r24, Z
     fe8:	88 2a       	or	r8, r24
     fea:	a1 2c       	mov	r10, r1
     fec:	b1 2c       	mov	r11, r1
     fee:	81 14       	cp	r8, r1
     ff0:	91 04       	cpc	r9, r1
     ff2:	a1 04       	cpc	r10, r1
     ff4:	b1 04       	cpc	r11, r1
     ff6:	d1 f4       	brne	.+52     	; 0x102c <find_volume+0x286>
     ff8:	70 96       	adiw	r30, 0x10	; 16
     ffa:	80 81       	ld	r24, Z
     ffc:	31 97       	sbiw	r30, 0x01	; 1
     ffe:	80 80       	ld	r8, Z
    1000:	91 2c       	mov	r9, r1
    1002:	a1 2c       	mov	r10, r1
    1004:	b1 2c       	mov	r11, r1
    1006:	54 01       	movw	r10, r8
    1008:	99 24       	eor	r9, r9
    100a:	88 24       	eor	r8, r8
    100c:	b8 2a       	or	r11, r24
    100e:	32 97       	sbiw	r30, 0x02	; 2
    1010:	80 81       	ld	r24, Z
    1012:	88 2a       	or	r8, r24
    1014:	31 96       	adiw	r30, 0x01	; 1
    1016:	80 81       	ld	r24, Z
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	98 2f       	mov	r25, r24
    101c:	88 27       	eor	r24, r24
    101e:	ac 01       	movw	r20, r24
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	84 2a       	or	r8, r20
    1026:	95 2a       	or	r9, r21
    1028:	a6 2a       	or	r10, r22
    102a:	b7 2a       	or	r11, r23
    102c:	f8 01       	movw	r30, r16
    102e:	85 ad       	ldd	r24, Z+61	; 0x3d
    1030:	e8 2f       	mov	r30, r24
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	3e 2f       	mov	r19, r30
    1036:	22 27       	eor	r18, r18
    1038:	f8 01       	movw	r30, r16
    103a:	84 ad       	ldd	r24, Z+60	; 0x3c
    103c:	f9 01       	movw	r30, r18
    103e:	e8 2b       	or	r30, r24
    1040:	30 97       	sbiw	r30, 0x00	; 0
    1042:	09 f4       	brne	.+2      	; 0x1046 <find_volume+0x2a0>
    1044:	d0 c1       	rjmp	.+928    	; 0x13e6 <find_volume+0x640>
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	a7 01       	movw	r20, r14
    104a:	96 01       	movw	r18, r12
    104c:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <__muluhisi3>
    1050:	6a 8f       	std	Y+26, r22	; 0x1a
    1052:	7b 8f       	std	Y+27, r23	; 0x1b
    1054:	8c 8f       	std	Y+28, r24	; 0x1c
    1056:	9d 8f       	std	Y+29, r25	; 0x1d
    1058:	9f 01       	movw	r18, r30
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	2e 8b       	std	Y+22, r18	; 0x16
    1060:	3f 8b       	std	Y+23, r19	; 0x17
    1062:	48 8f       	std	Y+24, r20	; 0x18
    1064:	59 8f       	std	Y+25, r21	; 0x19
    1066:	c1 01       	movw	r24, r2
    1068:	92 95       	swap	r25
    106a:	82 95       	swap	r24
    106c:	8f 70       	andi	r24, 0x0F	; 15
    106e:	89 27       	eor	r24, r25
    1070:	9f 70       	andi	r25, 0x0F	; 15
    1072:	89 27       	eor	r24, r25
    1074:	28 0f       	add	r18, r24
    1076:	39 1f       	adc	r19, r25
    1078:	41 1d       	adc	r20, r1
    107a:	51 1d       	adc	r21, r1
    107c:	da 01       	movw	r26, r20
    107e:	c9 01       	movw	r24, r18
    1080:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1082:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1084:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1086:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1088:	28 0f       	add	r18, r24
    108a:	39 1f       	adc	r19, r25
    108c:	4a 1f       	adc	r20, r26
    108e:	5b 1f       	adc	r21, r27
    1090:	2a 8b       	std	Y+18, r18	; 0x12
    1092:	3b 8b       	std	Y+19, r19	; 0x13
    1094:	4c 8b       	std	Y+20, r20	; 0x14
    1096:	5d 8b       	std	Y+21, r21	; 0x15
    1098:	82 16       	cp	r8, r18
    109a:	93 06       	cpc	r9, r19
    109c:	a4 06       	cpc	r10, r20
    109e:	b5 06       	cpc	r11, r21
    10a0:	08 f4       	brcc	.+2      	; 0x10a4 <find_volume+0x2fe>
    10a2:	a3 c1       	rjmp	.+838    	; 0x13ea <find_volume+0x644>
    10a4:	c5 01       	movw	r24, r10
    10a6:	b4 01       	movw	r22, r8
    10a8:	62 1b       	sub	r22, r18
    10aa:	73 0b       	sbc	r23, r19
    10ac:	84 0b       	sbc	r24, r20
    10ae:	95 0b       	sbc	r25, r21
    10b0:	e9 89       	ldd	r30, Y+17	; 0x11
    10b2:	2e 2f       	mov	r18, r30
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <__udivmodsi4>
    10be:	da 01       	movw	r26, r20
    10c0:	c9 01       	movw	r24, r18
    10c2:	21 15       	cp	r18, r1
    10c4:	31 05       	cpc	r19, r1
    10c6:	41 05       	cpc	r20, r1
    10c8:	51 05       	cpc	r21, r1
    10ca:	09 f4       	brne	.+2      	; 0x10ce <find_volume+0x328>
    10cc:	90 c1       	rjmp	.+800    	; 0x13ee <find_volume+0x648>
    10ce:	26 3f       	cpi	r18, 0xF6	; 246
    10d0:	ff e0       	ldi	r31, 0x0F	; 15
    10d2:	3f 07       	cpc	r19, r31
    10d4:	41 05       	cpc	r20, r1
    10d6:	51 05       	cpc	r21, r1
    10d8:	18 f4       	brcc	.+6      	; 0x10e0 <find_volume+0x33a>
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	69 8b       	std	Y+17, r22	; 0x11
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <find_volume+0x33e>
    10e0:	e2 e0       	ldi	r30, 0x02	; 2
    10e2:	e9 8b       	std	Y+17, r30	; 0x11
    10e4:	86 3f       	cpi	r24, 0xF6	; 246
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	a1 05       	cpc	r26, r1
    10ea:	b1 05       	cpc	r27, r1
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <find_volume+0x34a>
    10ee:	87 c1       	rjmp	.+782    	; 0x13fe <find_volume+0x658>
    10f0:	49 01       	movw	r8, r18
    10f2:	5a 01       	movw	r10, r20
    10f4:	62 e0       	ldi	r22, 0x02	; 2
    10f6:	86 0e       	add	r8, r22
    10f8:	91 1c       	adc	r9, r1
    10fa:	a1 1c       	adc	r10, r1
    10fc:	b1 1c       	adc	r11, r1
    10fe:	d8 01       	movw	r26, r16
    1100:	52 96       	adiw	r26, 0x12	; 18
    1102:	8d 92       	st	X+, r8
    1104:	9d 92       	st	X+, r9
    1106:	ad 92       	st	X+, r10
    1108:	bc 92       	st	X, r11
    110a:	55 97       	sbiw	r26, 0x15	; 21
    110c:	f8 01       	movw	r30, r16
    110e:	42 8e       	std	Z+26, r4	; 0x1a
    1110:	53 8e       	std	Z+27, r5	; 0x1b
    1112:	64 8e       	std	Z+28, r6	; 0x1c
    1114:	75 8e       	std	Z+29, r7	; 0x1d
    1116:	8e 89       	ldd	r24, Y+22	; 0x16
    1118:	9f 89       	ldd	r25, Y+23	; 0x17
    111a:	a8 8d       	ldd	r26, Y+24	; 0x18
    111c:	b9 8d       	ldd	r27, Y+25	; 0x19
    111e:	84 0d       	add	r24, r4
    1120:	95 1d       	adc	r25, r5
    1122:	a6 1d       	adc	r26, r6
    1124:	b7 1d       	adc	r27, r7
    1126:	86 8f       	std	Z+30, r24	; 0x1e
    1128:	97 8f       	std	Z+31, r25	; 0x1f
    112a:	a0 a3       	std	Z+32, r26	; 0x20
    112c:	b1 a3       	std	Z+33, r27	; 0x21
    112e:	4a 89       	ldd	r20, Y+18	; 0x12
    1130:	5b 89       	ldd	r21, Y+19	; 0x13
    1132:	6c 89       	ldd	r22, Y+20	; 0x14
    1134:	7d 89       	ldd	r23, Y+21	; 0x15
    1136:	44 0d       	add	r20, r4
    1138:	55 1d       	adc	r21, r5
    113a:	66 1d       	adc	r22, r6
    113c:	77 1d       	adc	r23, r7
    113e:	46 a3       	std	Z+38, r20	; 0x26
    1140:	57 a3       	std	Z+39, r21	; 0x27
    1142:	60 a7       	std	Z+40, r22	; 0x28
    1144:	71 a7       	std	Z+41, r23	; 0x29
    1146:	f9 89       	ldd	r31, Y+17	; 0x11
    1148:	f3 30       	cpi	r31, 0x03	; 3
    114a:	61 f5       	brne	.+88     	; 0x11a4 <find_volume+0x3fe>
    114c:	23 28       	or	r2, r3
    114e:	09 f0       	breq	.+2      	; 0x1152 <find_volume+0x3ac>
    1150:	50 c1       	rjmp	.+672    	; 0x13f2 <find_volume+0x64c>
    1152:	f8 01       	movw	r30, r16
    1154:	e3 5a       	subi	r30, 0xA3	; 163
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	20 81       	ld	r18, Z
    115a:	31 97       	sbiw	r30, 0x01	; 1
    115c:	80 81       	ld	r24, Z
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a0 e0       	ldi	r26, 0x00	; 0
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	dc 01       	movw	r26, r24
    1166:	99 27       	eor	r25, r25
    1168:	88 27       	eor	r24, r24
    116a:	b2 2b       	or	r27, r18
    116c:	32 97       	sbiw	r30, 0x02	; 2
    116e:	20 81       	ld	r18, Z
    1170:	82 2b       	or	r24, r18
    1172:	31 96       	adiw	r30, 0x01	; 1
    1174:	40 81       	ld	r20, Z
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	54 2f       	mov	r21, r20
    117a:	44 27       	eor	r20, r20
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	84 2b       	or	r24, r20
    1182:	95 2b       	or	r25, r21
    1184:	a6 2b       	or	r26, r22
    1186:	b7 2b       	or	r27, r23
    1188:	f8 01       	movw	r30, r16
    118a:	82 a3       	std	Z+34, r24	; 0x22
    118c:	93 a3       	std	Z+35, r25	; 0x23
    118e:	a4 a3       	std	Z+36, r26	; 0x24
    1190:	b5 a3       	std	Z+37, r27	; 0x25
    1192:	88 0c       	add	r8, r8
    1194:	99 1c       	adc	r9, r9
    1196:	aa 1c       	adc	r10, r10
    1198:	bb 1c       	adc	r11, r11
    119a:	88 0c       	add	r8, r8
    119c:	99 1c       	adc	r9, r9
    119e:	aa 1c       	adc	r10, r10
    11a0:	bb 1c       	adc	r11, r11
    11a2:	2d c0       	rjmp	.+90     	; 0x11fe <find_volume+0x458>
    11a4:	23 28       	or	r2, r3
    11a6:	09 f4       	brne	.+2      	; 0x11aa <find_volume+0x404>
    11a8:	26 c1       	rjmp	.+588    	; 0x13f6 <find_volume+0x650>
    11aa:	2a 8d       	ldd	r18, Y+26	; 0x1a
    11ac:	3b 8d       	ldd	r19, Y+27	; 0x1b
    11ae:	4c 8d       	ldd	r20, Y+28	; 0x1c
    11b0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    11b2:	82 0f       	add	r24, r18
    11b4:	93 1f       	adc	r25, r19
    11b6:	a4 1f       	adc	r26, r20
    11b8:	b5 1f       	adc	r27, r21
    11ba:	f8 01       	movw	r30, r16
    11bc:	82 a3       	std	Z+34, r24	; 0x22
    11be:	93 a3       	std	Z+35, r25	; 0x23
    11c0:	a4 a3       	std	Z+36, r26	; 0x24
    11c2:	b5 a3       	std	Z+37, r27	; 0x25
    11c4:	f9 89       	ldd	r31, Y+17	; 0x11
    11c6:	f2 30       	cpi	r31, 0x02	; 2
    11c8:	29 f4       	brne	.+10     	; 0x11d4 <find_volume+0x42e>
    11ca:	88 0c       	add	r8, r8
    11cc:	99 1c       	adc	r9, r9
    11ce:	aa 1c       	adc	r10, r10
    11d0:	bb 1c       	adc	r11, r11
    11d2:	15 c0       	rjmp	.+42     	; 0x11fe <find_volume+0x458>
    11d4:	a3 e0       	ldi	r26, 0x03	; 3
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	a5 01       	movw	r20, r10
    11da:	94 01       	movw	r18, r8
    11dc:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <__muluhisi3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	b6 95       	lsr	r27
    11e6:	a7 95       	ror	r26
    11e8:	97 95       	ror	r25
    11ea:	87 95       	ror	r24
    11ec:	21 e0       	ldi	r18, 0x01	; 1
    11ee:	82 22       	and	r8, r18
    11f0:	99 24       	eor	r9, r9
    11f2:	aa 24       	eor	r10, r10
    11f4:	bb 24       	eor	r11, r11
    11f6:	88 0e       	add	r8, r24
    11f8:	99 1e       	adc	r9, r25
    11fa:	aa 1e       	adc	r10, r26
    11fc:	bb 1e       	adc	r11, r27
    11fe:	3f ef       	ldi	r19, 0xFF	; 255
    1200:	83 0e       	add	r8, r19
    1202:	31 e0       	ldi	r19, 0x01	; 1
    1204:	93 1e       	adc	r9, r19
    1206:	a1 1c       	adc	r10, r1
    1208:	b1 1c       	adc	r11, r1
    120a:	07 2e       	mov	r0, r23
    120c:	79 e0       	ldi	r23, 0x09	; 9
    120e:	b6 94       	lsr	r11
    1210:	a7 94       	ror	r10
    1212:	97 94       	ror	r9
    1214:	87 94       	ror	r8
    1216:	7a 95       	dec	r23
    1218:	d1 f7       	brne	.-12     	; 0x120e <find_volume+0x468>
    121a:	70 2d       	mov	r23, r0
    121c:	c8 14       	cp	r12, r8
    121e:	d9 04       	cpc	r13, r9
    1220:	ea 04       	cpc	r14, r10
    1222:	fb 04       	cpc	r15, r11
    1224:	08 f4       	brcc	.+2      	; 0x1228 <find_volume+0x482>
    1226:	e9 c0       	rjmp	.+466    	; 0x13fa <find_volume+0x654>
    1228:	8f ef       	ldi	r24, 0xFF	; 255
    122a:	9f ef       	ldi	r25, 0xFF	; 255
    122c:	dc 01       	movw	r26, r24
    122e:	f8 01       	movw	r30, r16
    1230:	86 87       	std	Z+14, r24	; 0x0e
    1232:	97 87       	std	Z+15, r25	; 0x0f
    1234:	a0 8b       	std	Z+16, r26	; 0x10
    1236:	b1 8b       	std	Z+17, r27	; 0x11
    1238:	82 87       	std	Z+10, r24	; 0x0a
    123a:	93 87       	std	Z+11, r25	; 0x0b
    123c:	a4 87       	std	Z+12, r26	; 0x0c
    123e:	b5 87       	std	Z+13, r27	; 0x0d
    1240:	80 e8       	ldi	r24, 0x80	; 128
    1242:	85 83       	std	Z+5, r24	; 0x05
    1244:	f9 89       	ldd	r31, Y+17	; 0x11
    1246:	f3 30       	cpi	r31, 0x03	; 3
    1248:	09 f0       	breq	.+2      	; 0x124c <find_volume+0x4a6>
    124a:	a1 c0       	rjmp	.+322    	; 0x138e <find_volume+0x5e8>
    124c:	f8 01       	movw	r30, r16
    124e:	e1 5a       	subi	r30, 0xA1	; 161
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 81       	ld	r24, Z
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	98 2f       	mov	r25, r24
    1258:	88 27       	eor	r24, r24
    125a:	31 97       	sbiw	r30, 0x01	; 1
    125c:	20 81       	ld	r18, Z
    125e:	82 2b       	or	r24, r18
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	09 f0       	breq	.+2      	; 0x1266 <find_volume+0x4c0>
    1264:	94 c0       	rjmp	.+296    	; 0x138e <find_volume+0x5e8>
    1266:	b3 01       	movw	r22, r6
    1268:	a2 01       	movw	r20, r4
    126a:	4f 5f       	subi	r20, 0xFF	; 255
    126c:	5f 4f       	sbci	r21, 0xFF	; 255
    126e:	6f 4f       	sbci	r22, 0xFF	; 255
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	c8 01       	movw	r24, r16
    1274:	cd dc       	rcall	.-1638   	; 0xc10 <move_window>
    1276:	81 11       	cpse	r24, r1
    1278:	8a c0       	rjmp	.+276    	; 0x138e <find_volume+0x5e8>
    127a:	d8 01       	movw	r26, r16
    127c:	15 96       	adiw	r26, 0x05	; 5
    127e:	1c 92       	st	X, r1
    1280:	f8 01       	movw	r30, r16
    1282:	e3 5d       	subi	r30, 0xD3	; 211
    1284:	fd 4f       	sbci	r31, 0xFD	; 253
    1286:	80 81       	ld	r24, Z
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	98 2f       	mov	r25, r24
    128c:	88 27       	eor	r24, r24
    128e:	31 97       	sbiw	r30, 0x01	; 1
    1290:	20 81       	ld	r18, Z
    1292:	82 2b       	or	r24, r18
    1294:	85 35       	cpi	r24, 0x55	; 85
    1296:	9a 4a       	sbci	r25, 0xAA	; 170
    1298:	09 f0       	breq	.+2      	; 0x129c <find_volume+0x4f6>
    129a:	79 c0       	rjmp	.+242    	; 0x138e <find_volume+0x5e8>
    129c:	f8 01       	movw	r30, r16
    129e:	21 a9       	ldd	r18, Z+49	; 0x31
    12a0:	80 a9       	ldd	r24, Z+48	; 0x30
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a0 e0       	ldi	r26, 0x00	; 0
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	dc 01       	movw	r26, r24
    12aa:	99 27       	eor	r25, r25
    12ac:	88 27       	eor	r24, r24
    12ae:	b2 2b       	or	r27, r18
    12b0:	26 a5       	ldd	r18, Z+46	; 0x2e
    12b2:	82 2b       	or	r24, r18
    12b4:	47 a5       	ldd	r20, Z+47	; 0x2f
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	54 2f       	mov	r21, r20
    12ba:	44 27       	eor	r20, r20
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	84 2b       	or	r24, r20
    12c2:	95 2b       	or	r25, r21
    12c4:	a6 2b       	or	r26, r22
    12c6:	b7 2b       	or	r27, r23
    12c8:	82 35       	cpi	r24, 0x52	; 82
    12ca:	92 45       	sbci	r25, 0x52	; 82
    12cc:	a1 46       	sbci	r26, 0x61	; 97
    12ce:	b1 44       	sbci	r27, 0x41	; 65
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <find_volume+0x52e>
    12d2:	5d c0       	rjmp	.+186    	; 0x138e <find_volume+0x5e8>
    12d4:	f8 01       	movw	r30, r16
    12d6:	eb 5e       	subi	r30, 0xEB	; 235
    12d8:	fd 4f       	sbci	r31, 0xFD	; 253
    12da:	20 81       	ld	r18, Z
    12dc:	31 97       	sbiw	r30, 0x01	; 1
    12de:	80 81       	ld	r24, Z
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	dc 01       	movw	r26, r24
    12e8:	99 27       	eor	r25, r25
    12ea:	88 27       	eor	r24, r24
    12ec:	b2 2b       	or	r27, r18
    12ee:	32 97       	sbiw	r30, 0x02	; 2
    12f0:	20 81       	ld	r18, Z
    12f2:	82 2b       	or	r24, r18
    12f4:	31 96       	adiw	r30, 0x01	; 1
    12f6:	40 81       	ld	r20, Z
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	54 2f       	mov	r21, r20
    12fc:	44 27       	eor	r20, r20
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	84 2b       	or	r24, r20
    1304:	95 2b       	or	r25, r21
    1306:	a6 2b       	or	r26, r22
    1308:	b7 2b       	or	r27, r23
    130a:	82 37       	cpi	r24, 0x72	; 114
    130c:	92 47       	sbci	r25, 0x72	; 114
    130e:	a1 44       	sbci	r26, 0x41	; 65
    1310:	b1 46       	sbci	r27, 0x61	; 97
    1312:	e9 f5       	brne	.+122    	; 0x138e <find_volume+0x5e8>
    1314:	36 96       	adiw	r30, 0x06	; 6
    1316:	20 81       	ld	r18, Z
    1318:	31 97       	sbiw	r30, 0x01	; 1
    131a:	80 81       	ld	r24, Z
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a0 e0       	ldi	r26, 0x00	; 0
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	dc 01       	movw	r26, r24
    1324:	99 27       	eor	r25, r25
    1326:	88 27       	eor	r24, r24
    1328:	b2 2b       	or	r27, r18
    132a:	32 97       	sbiw	r30, 0x02	; 2
    132c:	20 81       	ld	r18, Z
    132e:	82 2b       	or	r24, r18
    1330:	31 96       	adiw	r30, 0x01	; 1
    1332:	40 81       	ld	r20, Z
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	54 2f       	mov	r21, r20
    1338:	44 27       	eor	r20, r20
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	84 2b       	or	r24, r20
    1340:	95 2b       	or	r25, r21
    1342:	a6 2b       	or	r26, r22
    1344:	b7 2b       	or	r27, r23
    1346:	f8 01       	movw	r30, r16
    1348:	86 87       	std	Z+14, r24	; 0x0e
    134a:	97 87       	std	Z+15, r25	; 0x0f
    134c:	a0 8b       	std	Z+16, r26	; 0x10
    134e:	b1 8b       	std	Z+17, r27	; 0x11
    1350:	e3 5e       	subi	r30, 0xE3	; 227
    1352:	fd 4f       	sbci	r31, 0xFD	; 253
    1354:	20 81       	ld	r18, Z
    1356:	31 97       	sbiw	r30, 0x01	; 1
    1358:	80 81       	ld	r24, Z
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a0 e0       	ldi	r26, 0x00	; 0
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	dc 01       	movw	r26, r24
    1362:	99 27       	eor	r25, r25
    1364:	88 27       	eor	r24, r24
    1366:	b2 2b       	or	r27, r18
    1368:	32 97       	sbiw	r30, 0x02	; 2
    136a:	20 81       	ld	r18, Z
    136c:	82 2b       	or	r24, r18
    136e:	31 96       	adiw	r30, 0x01	; 1
    1370:	40 81       	ld	r20, Z
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	54 2f       	mov	r21, r20
    1376:	44 27       	eor	r20, r20
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	84 2b       	or	r24, r20
    137e:	95 2b       	or	r25, r21
    1380:	a6 2b       	or	r26, r22
    1382:	b7 2b       	or	r27, r23
    1384:	f8 01       	movw	r30, r16
    1386:	82 87       	std	Z+10, r24	; 0x0a
    1388:	93 87       	std	Z+11, r25	; 0x0b
    138a:	a4 87       	std	Z+12, r26	; 0x0c
    138c:	b5 87       	std	Z+13, r27	; 0x0d
    138e:	e9 89       	ldd	r30, Y+17	; 0x11
    1390:	d8 01       	movw	r26, r16
    1392:	ec 93       	st	X, r30
    1394:	80 91 e5 01 	lds	r24, 0x01E5
    1398:	90 91 e6 01 	lds	r25, 0x01E6
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	90 93 e6 01 	sts	0x01E6, r25
    13a2:	80 93 e5 01 	sts	0x01E5, r24
    13a6:	17 96       	adiw	r26, 0x07	; 7
    13a8:	9c 93       	st	X, r25
    13aa:	8e 93       	st	-X, r24
    13ac:	16 97       	sbiw	r26, 0x06	; 6
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	54 c0       	rjmp	.+168    	; 0x145a <find_volume+0x6b4>
    13b2:	8b e0       	ldi	r24, 0x0B	; 11
    13b4:	52 c0       	rjmp	.+164    	; 0x145a <find_volume+0x6b4>
    13b6:	8c e0       	ldi	r24, 0x0C	; 12
    13b8:	50 c0       	rjmp	.+160    	; 0x145a <find_volume+0x6b4>
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	4e c0       	rjmp	.+156    	; 0x145a <find_volume+0x6b4>
    13be:	8a e0       	ldi	r24, 0x0A	; 10
    13c0:	4c c0       	rjmp	.+152    	; 0x145a <find_volume+0x6b4>
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	4a c0       	rjmp	.+148    	; 0x145a <find_volume+0x6b4>
    13c6:	8a e0       	ldi	r24, 0x0A	; 10
    13c8:	48 c0       	rjmp	.+144    	; 0x145a <find_volume+0x6b4>
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	46 c0       	rjmp	.+140    	; 0x145a <find_volume+0x6b4>
    13ce:	8d e0       	ldi	r24, 0x0D	; 13
    13d0:	44 c0       	rjmp	.+136    	; 0x145a <find_volume+0x6b4>
    13d2:	8d e0       	ldi	r24, 0x0D	; 13
    13d4:	42 c0       	rjmp	.+132    	; 0x145a <find_volume+0x6b4>
    13d6:	8d e0       	ldi	r24, 0x0D	; 13
    13d8:	40 c0       	rjmp	.+128    	; 0x145a <find_volume+0x6b4>
    13da:	8d e0       	ldi	r24, 0x0D	; 13
    13dc:	3e c0       	rjmp	.+124    	; 0x145a <find_volume+0x6b4>
    13de:	8d e0       	ldi	r24, 0x0D	; 13
    13e0:	3c c0       	rjmp	.+120    	; 0x145a <find_volume+0x6b4>
    13e2:	8d e0       	ldi	r24, 0x0D	; 13
    13e4:	3a c0       	rjmp	.+116    	; 0x145a <find_volume+0x6b4>
    13e6:	8d e0       	ldi	r24, 0x0D	; 13
    13e8:	38 c0       	rjmp	.+112    	; 0x145a <find_volume+0x6b4>
    13ea:	8d e0       	ldi	r24, 0x0D	; 13
    13ec:	36 c0       	rjmp	.+108    	; 0x145a <find_volume+0x6b4>
    13ee:	8d e0       	ldi	r24, 0x0D	; 13
    13f0:	34 c0       	rjmp	.+104    	; 0x145a <find_volume+0x6b4>
    13f2:	8d e0       	ldi	r24, 0x0D	; 13
    13f4:	32 c0       	rjmp	.+100    	; 0x145a <find_volume+0x6b4>
    13f6:	8d e0       	ldi	r24, 0x0D	; 13
    13f8:	30 c0       	rjmp	.+96     	; 0x145a <find_volume+0x6b4>
    13fa:	8d e0       	ldi	r24, 0x0D	; 13
    13fc:	2e c0       	rjmp	.+92     	; 0x145a <find_volume+0x6b4>
    13fe:	49 01       	movw	r8, r18
    1400:	5a 01       	movw	r10, r20
    1402:	f2 e0       	ldi	r31, 0x02	; 2
    1404:	8f 0e       	add	r8, r31
    1406:	91 1c       	adc	r9, r1
    1408:	a1 1c       	adc	r10, r1
    140a:	b1 1c       	adc	r11, r1
    140c:	d8 01       	movw	r26, r16
    140e:	52 96       	adiw	r26, 0x12	; 18
    1410:	8d 92       	st	X+, r8
    1412:	9d 92       	st	X+, r9
    1414:	ad 92       	st	X+, r10
    1416:	bc 92       	st	X, r11
    1418:	55 97       	sbiw	r26, 0x15	; 21
    141a:	f8 01       	movw	r30, r16
    141c:	42 8e       	std	Z+26, r4	; 0x1a
    141e:	53 8e       	std	Z+27, r5	; 0x1b
    1420:	64 8e       	std	Z+28, r6	; 0x1c
    1422:	75 8e       	std	Z+29, r7	; 0x1d
    1424:	8e 89       	ldd	r24, Y+22	; 0x16
    1426:	9f 89       	ldd	r25, Y+23	; 0x17
    1428:	a8 8d       	ldd	r26, Y+24	; 0x18
    142a:	b9 8d       	ldd	r27, Y+25	; 0x19
    142c:	84 0d       	add	r24, r4
    142e:	95 1d       	adc	r25, r5
    1430:	a6 1d       	adc	r26, r6
    1432:	b7 1d       	adc	r27, r7
    1434:	86 8f       	std	Z+30, r24	; 0x1e
    1436:	97 8f       	std	Z+31, r25	; 0x1f
    1438:	a0 a3       	std	Z+32, r26	; 0x20
    143a:	b1 a3       	std	Z+33, r27	; 0x21
    143c:	8a 89       	ldd	r24, Y+18	; 0x12
    143e:	9b 89       	ldd	r25, Y+19	; 0x13
    1440:	ac 89       	ldd	r26, Y+20	; 0x14
    1442:	bd 89       	ldd	r27, Y+21	; 0x15
    1444:	84 0d       	add	r24, r4
    1446:	95 1d       	adc	r25, r5
    1448:	a6 1d       	adc	r26, r6
    144a:	b7 1d       	adc	r27, r7
    144c:	86 a3       	std	Z+38, r24	; 0x26
    144e:	97 a3       	std	Z+39, r25	; 0x27
    1450:	a0 a7       	std	Z+40, r26	; 0x28
    1452:	b1 a7       	std	Z+41, r27	; 0x29
    1454:	f3 e0       	ldi	r31, 0x03	; 3
    1456:	f9 8b       	std	Y+17, r31	; 0x11
    1458:	79 ce       	rjmp	.-782    	; 0x114c <find_volume+0x3a6>
    145a:	6d 96       	adiw	r28, 0x1d	; 29
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	cf 90       	pop	r12
    1476:	bf 90       	pop	r11
    1478:	af 90       	pop	r10
    147a:	9f 90       	pop	r9
    147c:	8f 90       	pop	r8
    147e:	7f 90       	pop	r7
    1480:	6f 90       	pop	r6
    1482:	5f 90       	pop	r5
    1484:	4f 90       	pop	r4
    1486:	3f 90       	pop	r3
    1488:	2f 90       	pop	r2
    148a:	08 95       	ret

0000148c <sync_fs>:
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	ec 01       	movw	r28, r24
    149a:	51 db       	rcall	.-2398   	; 0xb3e <sync_window>
    149c:	98 2f       	mov	r25, r24
    149e:	81 11       	cpse	r24, r1
    14a0:	5f c0       	rjmp	.+190    	; 0x1560 <sync_fs+0xd4>
    14a2:	88 81       	ld	r24, Y
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	09 f0       	breq	.+2      	; 0x14aa <sync_fs+0x1e>
    14a8:	52 c0       	rjmp	.+164    	; 0x154e <sync_fs+0xc2>
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <sync_fs+0x26>
    14b0:	4e c0       	rjmp	.+156    	; 0x154e <sync_fs+0xc2>
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	52 e0       	ldi	r21, 0x02	; 2
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	7e 01       	movw	r14, r28
    14bc:	8e e2       	ldi	r24, 0x2E	; 46
    14be:	e8 0e       	add	r14, r24
    14c0:	f1 1c       	adc	r15, r1
    14c2:	c7 01       	movw	r24, r14
    14c4:	dc da       	rcall	.-2632   	; 0xa7e <mem_set>
    14c6:	85 e5       	ldi	r24, 0x55	; 85
    14c8:	fe 01       	movw	r30, r28
    14ca:	e4 5d       	subi	r30, 0xD4	; 212
    14cc:	fd 4f       	sbci	r31, 0xFD	; 253
    14ce:	80 83       	st	Z, r24
    14d0:	8a ea       	ldi	r24, 0xAA	; 170
    14d2:	31 96       	adiw	r30, 0x01	; 1
    14d4:	80 83       	st	Z, r24
    14d6:	82 e5       	ldi	r24, 0x52	; 82
    14d8:	8e a7       	std	Y+46, r24	; 0x2e
    14da:	8f a7       	std	Y+47, r24	; 0x2f
    14dc:	81 e6       	ldi	r24, 0x61	; 97
    14de:	88 ab       	std	Y+48, r24	; 0x30
    14e0:	91 e4       	ldi	r25, 0x41	; 65
    14e2:	99 ab       	std	Y+49, r25	; 0x31
    14e4:	22 e7       	ldi	r18, 0x72	; 114
    14e6:	7b 97       	sbiw	r30, 0x1b	; 27
    14e8:	20 83       	st	Z, r18
    14ea:	31 96       	adiw	r30, 0x01	; 1
    14ec:	20 83       	st	Z, r18
    14ee:	31 96       	adiw	r30, 0x01	; 1
    14f0:	90 83       	st	Z, r25
    14f2:	31 96       	adiw	r30, 0x01	; 1
    14f4:	80 83       	st	Z, r24
    14f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    14f8:	2f 85       	ldd	r18, Y+15	; 0x0f
    14fa:	98 89       	ldd	r25, Y+16	; 0x10
    14fc:	89 89       	ldd	r24, Y+17	; 0x11
    14fe:	31 96       	adiw	r30, 0x01	; 1
    1500:	30 83       	st	Z, r19
    1502:	31 96       	adiw	r30, 0x01	; 1
    1504:	20 83       	st	Z, r18
    1506:	31 96       	adiw	r30, 0x01	; 1
    1508:	90 83       	st	Z, r25
    150a:	31 96       	adiw	r30, 0x01	; 1
    150c:	80 83       	st	Z, r24
    150e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1510:	2b 85       	ldd	r18, Y+11	; 0x0b
    1512:	9c 85       	ldd	r25, Y+12	; 0x0c
    1514:	8d 85       	ldd	r24, Y+13	; 0x0d
    1516:	31 96       	adiw	r30, 0x01	; 1
    1518:	30 83       	st	Z, r19
    151a:	31 96       	adiw	r30, 0x01	; 1
    151c:	20 83       	st	Z, r18
    151e:	31 96       	adiw	r30, 0x01	; 1
    1520:	90 83       	st	Z, r25
    1522:	31 96       	adiw	r30, 0x01	; 1
    1524:	80 83       	st	Z, r24
    1526:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1528:	9b 8d       	ldd	r25, Y+27	; 0x1b
    152a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    152c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    152e:	9c 01       	movw	r18, r24
    1530:	ad 01       	movw	r20, r26
    1532:	2f 5f       	subi	r18, 0xFF	; 255
    1534:	3f 4f       	sbci	r19, 0xFF	; 255
    1536:	4f 4f       	sbci	r20, 0xFF	; 255
    1538:	5f 4f       	sbci	r21, 0xFF	; 255
    153a:	2a a7       	std	Y+42, r18	; 0x2a
    153c:	3b a7       	std	Y+43, r19	; 0x2b
    153e:	4c a7       	std	Y+44, r20	; 0x2c
    1540:	5d a7       	std	Y+45, r21	; 0x2d
    1542:	01 e0       	ldi	r16, 0x01	; 1
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	b7 01       	movw	r22, r14
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	6c d9       	rcall	.-3368   	; 0x824 <disk_write>
    154c:	1d 82       	std	Y+5, r1	; 0x05
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	ca d9       	rcall	.-3180   	; 0x8ec <disk_ioctl>
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	81 11       	cpse	r24, r1
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <sync_fs+0xd4>
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	89 2f       	mov	r24, r25
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	08 95       	ret

00001570 <clust2sect>:
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	fc 01       	movw	r30, r24
    157a:	9a 01       	movw	r18, r20
    157c:	ab 01       	movw	r20, r22
    157e:	22 50       	subi	r18, 0x02	; 2
    1580:	31 09       	sbc	r19, r1
    1582:	41 09       	sbc	r20, r1
    1584:	51 09       	sbc	r21, r1
    1586:	c2 88       	ldd	r12, Z+18	; 0x12
    1588:	d3 88       	ldd	r13, Z+19	; 0x13
    158a:	e4 88       	ldd	r14, Z+20	; 0x14
    158c:	f5 88       	ldd	r15, Z+21	; 0x15
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	c8 1a       	sub	r12, r24
    1592:	d1 08       	sbc	r13, r1
    1594:	e1 08       	sbc	r14, r1
    1596:	f1 08       	sbc	r15, r1
    1598:	2c 15       	cp	r18, r12
    159a:	3d 05       	cpc	r19, r13
    159c:	4e 05       	cpc	r20, r14
    159e:	5f 05       	cpc	r21, r15
    15a0:	68 f4       	brcc	.+26     	; 0x15bc <clust2sect+0x4c>
    15a2:	a2 81       	ldd	r26, Z+2	; 0x02
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <__muluhisi3>
    15aa:	c6 a0       	ldd	r12, Z+38	; 0x26
    15ac:	d7 a0       	ldd	r13, Z+39	; 0x27
    15ae:	e0 a4       	ldd	r14, Z+40	; 0x28
    15b0:	f1 a4       	ldd	r15, Z+41	; 0x29
    15b2:	6c 0d       	add	r22, r12
    15b4:	7d 1d       	adc	r23, r13
    15b6:	8e 1d       	adc	r24, r14
    15b8:	9f 1d       	adc	r25, r15
    15ba:	03 c0       	rjmp	.+6      	; 0x15c2 <clust2sect+0x52>
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	cb 01       	movw	r24, r22
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	df 90       	pop	r13
    15c8:	cf 90       	pop	r12
    15ca:	08 95       	ret

000015cc <get_fat>:
    15cc:	af 92       	push	r10
    15ce:	bf 92       	push	r11
    15d0:	cf 92       	push	r12
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	ec 01       	movw	r28, r24
    15e2:	6a 01       	movw	r12, r20
    15e4:	7b 01       	movw	r14, r22
    15e6:	42 30       	cpi	r20, 0x02	; 2
    15e8:	51 05       	cpc	r21, r1
    15ea:	61 05       	cpc	r22, r1
    15ec:	71 05       	cpc	r23, r1
    15ee:	08 f4       	brcc	.+2      	; 0x15f2 <get_fat+0x26>
    15f0:	c5 c0       	rjmp	.+394    	; 0x177c <get_fat+0x1b0>
    15f2:	4a 89       	ldd	r20, Y+18	; 0x12
    15f4:	5b 89       	ldd	r21, Y+19	; 0x13
    15f6:	6c 89       	ldd	r22, Y+20	; 0x14
    15f8:	7d 89       	ldd	r23, Y+21	; 0x15
    15fa:	c4 16       	cp	r12, r20
    15fc:	d5 06       	cpc	r13, r21
    15fe:	e6 06       	cpc	r14, r22
    1600:	f7 06       	cpc	r15, r23
    1602:	08 f0       	brcs	.+2      	; 0x1606 <get_fat+0x3a>
    1604:	c0 c0       	rjmp	.+384    	; 0x1786 <get_fat+0x1ba>
    1606:	88 81       	ld	r24, Y
    1608:	82 30       	cpi	r24, 0x02	; 2
    160a:	09 f4       	brne	.+2      	; 0x160e <get_fat+0x42>
    160c:	4b c0       	rjmp	.+150    	; 0x16a4 <get_fat+0xd8>
    160e:	83 30       	cpi	r24, 0x03	; 3
    1610:	09 f4       	brne	.+2      	; 0x1614 <get_fat+0x48>
    1612:	6f c0       	rjmp	.+222    	; 0x16f2 <get_fat+0x126>
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	09 f0       	breq	.+2      	; 0x161a <get_fat+0x4e>
    1618:	bb c0       	rjmp	.+374    	; 0x1790 <get_fat+0x1c4>
    161a:	86 01       	movw	r16, r12
    161c:	16 95       	lsr	r17
    161e:	07 95       	ror	r16
    1620:	0c 0d       	add	r16, r12
    1622:	1d 1d       	adc	r17, r13
    1624:	c8 01       	movw	r24, r16
    1626:	89 2f       	mov	r24, r25
    1628:	99 27       	eor	r25, r25
    162a:	86 95       	lsr	r24
    162c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    162e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1630:	68 a1       	ldd	r22, Y+32	; 0x20
    1632:	79 a1       	ldd	r23, Y+33	; 0x21
    1634:	48 0f       	add	r20, r24
    1636:	59 1f       	adc	r21, r25
    1638:	61 1d       	adc	r22, r1
    163a:	71 1d       	adc	r23, r1
    163c:	ce 01       	movw	r24, r28
    163e:	e8 da       	rcall	.-2608   	; 0xc10 <move_window>
    1640:	81 11       	cpse	r24, r1
    1642:	ab c0       	rjmp	.+342    	; 0x179a <get_fat+0x1ce>
    1644:	58 01       	movw	r10, r16
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	a8 1a       	sub	r10, r24
    164a:	b8 0a       	sbc	r11, r24
    164c:	11 70       	andi	r17, 0x01	; 1
    164e:	fe 01       	movw	r30, r28
    1650:	e0 0f       	add	r30, r16
    1652:	f1 1f       	adc	r31, r17
    1654:	16 a5       	ldd	r17, Z+46	; 0x2e
    1656:	c5 01       	movw	r24, r10
    1658:	89 2f       	mov	r24, r25
    165a:	99 27       	eor	r25, r25
    165c:	86 95       	lsr	r24
    165e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1660:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1662:	68 a1       	ldd	r22, Y+32	; 0x20
    1664:	79 a1       	ldd	r23, Y+33	; 0x21
    1666:	48 0f       	add	r20, r24
    1668:	59 1f       	adc	r21, r25
    166a:	61 1d       	adc	r22, r1
    166c:	71 1d       	adc	r23, r1
    166e:	ce 01       	movw	r24, r28
    1670:	cf da       	rcall	.-2658   	; 0xc10 <move_window>
    1672:	81 11       	cpse	r24, r1
    1674:	96 c0       	rjmp	.+300    	; 0x17a2 <get_fat+0x1d6>
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	b8 22       	and	r11, r24
    167a:	ca 0d       	add	r28, r10
    167c:	db 1d       	adc	r29, r11
    167e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1680:	61 2f       	mov	r22, r17
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	78 2b       	or	r23, r24
    1686:	c0 fe       	sbrs	r12, 0
    1688:	09 c0       	rjmp	.+18     	; 0x169c <get_fat+0xd0>
    168a:	72 95       	swap	r23
    168c:	62 95       	swap	r22
    168e:	6f 70       	andi	r22, 0x0F	; 15
    1690:	67 27       	eor	r22, r23
    1692:	7f 70       	andi	r23, 0x0F	; 15
    1694:	67 27       	eor	r22, r23
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	8e c0       	rjmp	.+284    	; 0x17b8 <get_fat+0x1ec>
    169c:	7f 70       	andi	r23, 0x0F	; 15
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	8a c0       	rjmp	.+276    	; 0x17b8 <get_fat+0x1ec>
    16a4:	77 27       	eor	r23, r23
    16a6:	6f 2d       	mov	r22, r15
    16a8:	5e 2d       	mov	r21, r14
    16aa:	4d 2d       	mov	r20, r13
    16ac:	0e 8d       	ldd	r16, Y+30	; 0x1e
    16ae:	1f 8d       	ldd	r17, Y+31	; 0x1f
    16b0:	28 a1       	ldd	r18, Y+32	; 0x20
    16b2:	39 a1       	ldd	r19, Y+33	; 0x21
    16b4:	40 0f       	add	r20, r16
    16b6:	51 1f       	adc	r21, r17
    16b8:	62 1f       	adc	r22, r18
    16ba:	73 1f       	adc	r23, r19
    16bc:	ce 01       	movw	r24, r28
    16be:	a8 da       	rcall	.-2736   	; 0xc10 <move_window>
    16c0:	81 11       	cpse	r24, r1
    16c2:	73 c0       	rjmp	.+230    	; 0x17aa <get_fat+0x1de>
    16c4:	cc 0c       	add	r12, r12
    16c6:	dd 1c       	adc	r13, r13
    16c8:	ee 1c       	adc	r14, r14
    16ca:	ff 1c       	adc	r15, r15
    16cc:	e8 94       	clt
    16ce:	c0 f8       	bld	r12, 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	d8 22       	and	r13, r24
    16d4:	ee 24       	eor	r14, r14
    16d6:	ff 24       	eor	r15, r15
    16d8:	fe 01       	movw	r30, r28
    16da:	ec 0d       	add	r30, r12
    16dc:	fd 1d       	adc	r31, r13
    16de:	66 a5       	ldd	r22, Z+46	; 0x2e
    16e0:	fe 01       	movw	r30, r28
    16e2:	ec 0d       	add	r30, r12
    16e4:	fd 1d       	adc	r31, r13
    16e6:	87 a5       	ldd	r24, Z+47	; 0x2f
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	78 2b       	or	r23, r24
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	63 c0       	rjmp	.+198    	; 0x17b8 <get_fat+0x1ec>
    16f2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    16f4:	5f 8d       	ldd	r21, Y+31	; 0x1f
    16f6:	68 a1       	ldd	r22, Y+32	; 0x20
    16f8:	79 a1       	ldd	r23, Y+33	; 0x21
    16fa:	97 01       	movw	r18, r14
    16fc:	86 01       	movw	r16, r12
    16fe:	68 94       	set
    1700:	16 f8       	bld	r1, 6
    1702:	36 95       	lsr	r19
    1704:	27 95       	ror	r18
    1706:	17 95       	ror	r17
    1708:	07 95       	ror	r16
    170a:	16 94       	lsr	r1
    170c:	d1 f7       	brne	.-12     	; 0x1702 <get_fat+0x136>
    170e:	40 0f       	add	r20, r16
    1710:	51 1f       	adc	r21, r17
    1712:	62 1f       	adc	r22, r18
    1714:	73 1f       	adc	r23, r19
    1716:	ce 01       	movw	r24, r28
    1718:	7b da       	rcall	.-2826   	; 0xc10 <move_window>
    171a:	81 11       	cpse	r24, r1
    171c:	4a c0       	rjmp	.+148    	; 0x17b2 <get_fat+0x1e6>
    171e:	cc 0c       	add	r12, r12
    1720:	dd 1c       	adc	r13, r13
    1722:	ee 1c       	adc	r14, r14
    1724:	ff 1c       	adc	r15, r15
    1726:	cc 0c       	add	r12, r12
    1728:	dd 1c       	adc	r13, r13
    172a:	ee 1c       	adc	r14, r14
    172c:	ff 1c       	adc	r15, r15
    172e:	8c ef       	ldi	r24, 0xFC	; 252
    1730:	c8 22       	and	r12, r24
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	d8 22       	and	r13, r24
    1736:	ee 24       	eor	r14, r14
    1738:	ff 24       	eor	r15, r15
    173a:	f6 01       	movw	r30, r12
    173c:	be 96       	adiw	r30, 0x2e	; 46
    173e:	ec 0f       	add	r30, r28
    1740:	fd 1f       	adc	r31, r29
    1742:	82 81       	ldd	r24, Z+2	; 0x02
    1744:	43 81       	ldd	r20, Z+3	; 0x03
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	74 2f       	mov	r23, r20
    174e:	66 27       	eor	r22, r22
    1750:	55 27       	eor	r21, r21
    1752:	44 27       	eor	r20, r20
    1754:	68 2b       	or	r22, r24
    1756:	81 81       	ldd	r24, Z+1	; 0x01
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	98 2f       	mov	r25, r24
    175c:	88 27       	eor	r24, r24
    175e:	a0 e0       	ldi	r26, 0x00	; 0
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	84 2b       	or	r24, r20
    1764:	95 2b       	or	r25, r21
    1766:	a6 2b       	or	r26, r22
    1768:	b7 2b       	or	r27, r23
    176a:	fe 01       	movw	r30, r28
    176c:	ec 0d       	add	r30, r12
    176e:	fd 1d       	adc	r31, r13
    1770:	26 a5       	ldd	r18, Z+46	; 0x2e
    1772:	82 2b       	or	r24, r18
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	9f 70       	andi	r25, 0x0F	; 15
    177a:	1e c0       	rjmp	.+60     	; 0x17b8 <get_fat+0x1ec>
    177c:	61 e0       	ldi	r22, 0x01	; 1
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	19 c0       	rjmp	.+50     	; 0x17b8 <get_fat+0x1ec>
    1786:	61 e0       	ldi	r22, 0x01	; 1
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	14 c0       	rjmp	.+40     	; 0x17b8 <get_fat+0x1ec>
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0f c0       	rjmp	.+30     	; 0x17b8 <get_fat+0x1ec>
    179a:	6f ef       	ldi	r22, 0xFF	; 255
    179c:	7f ef       	ldi	r23, 0xFF	; 255
    179e:	cb 01       	movw	r24, r22
    17a0:	0b c0       	rjmp	.+22     	; 0x17b8 <get_fat+0x1ec>
    17a2:	6f ef       	ldi	r22, 0xFF	; 255
    17a4:	7f ef       	ldi	r23, 0xFF	; 255
    17a6:	cb 01       	movw	r24, r22
    17a8:	07 c0       	rjmp	.+14     	; 0x17b8 <get_fat+0x1ec>
    17aa:	6f ef       	ldi	r22, 0xFF	; 255
    17ac:	7f ef       	ldi	r23, 0xFF	; 255
    17ae:	cb 01       	movw	r24, r22
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <get_fat+0x1ec>
    17b2:	6f ef       	ldi	r22, 0xFF	; 255
    17b4:	7f ef       	ldi	r23, 0xFF	; 255
    17b6:	cb 01       	movw	r24, r22
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	ff 90       	pop	r15
    17c2:	ef 90       	pop	r14
    17c4:	df 90       	pop	r13
    17c6:	cf 90       	pop	r12
    17c8:	bf 90       	pop	r11
    17ca:	af 90       	pop	r10
    17cc:	08 95       	ret

000017ce <dir_sdi>:
    17ce:	af 92       	push	r10
    17d0:	bf 92       	push	r11
    17d2:	cf 92       	push	r12
    17d4:	df 92       	push	r13
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	8b 01       	movw	r16, r22
    17e6:	7d 83       	std	Y+5, r23	; 0x05
    17e8:	6c 83       	std	Y+4, r22	; 0x04
    17ea:	ce 80       	ldd	r12, Y+6	; 0x06
    17ec:	df 80       	ldd	r13, Y+7	; 0x07
    17ee:	e8 84       	ldd	r14, Y+8	; 0x08
    17f0:	f9 84       	ldd	r15, Y+9	; 0x09
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	c8 16       	cp	r12, r24
    17f6:	d1 04       	cpc	r13, r1
    17f8:	e1 04       	cpc	r14, r1
    17fa:	f1 04       	cpc	r15, r1
    17fc:	09 f4       	brne	.+2      	; 0x1800 <dir_sdi+0x32>
    17fe:	8a c0       	rjmp	.+276    	; 0x1914 <dir_sdi+0x146>
    1800:	e8 81       	ld	r30, Y
    1802:	f9 81       	ldd	r31, Y+1	; 0x01
    1804:	82 89       	ldd	r24, Z+18	; 0x12
    1806:	93 89       	ldd	r25, Z+19	; 0x13
    1808:	a4 89       	ldd	r26, Z+20	; 0x14
    180a:	b5 89       	ldd	r27, Z+21	; 0x15
    180c:	c8 16       	cp	r12, r24
    180e:	d9 06       	cpc	r13, r25
    1810:	ea 06       	cpc	r14, r26
    1812:	fb 06       	cpc	r15, r27
    1814:	08 f0       	brcs	.+2      	; 0x1818 <dir_sdi+0x4a>
    1816:	80 c0       	rjmp	.+256    	; 0x1918 <dir_sdi+0x14a>
    1818:	c1 14       	cp	r12, r1
    181a:	d1 04       	cpc	r13, r1
    181c:	e1 04       	cpc	r14, r1
    181e:	f1 04       	cpc	r15, r1
    1820:	c1 f4       	brne	.+48     	; 0x1852 <dir_sdi+0x84>
    1822:	80 81       	ld	r24, Z
    1824:	83 30       	cpi	r24, 0x03	; 3
    1826:	41 f4       	brne	.+16     	; 0x1838 <dir_sdi+0x6a>
    1828:	82 a1       	ldd	r24, Z+34	; 0x22
    182a:	93 a1       	ldd	r25, Z+35	; 0x23
    182c:	a4 a1       	ldd	r26, Z+36	; 0x24
    182e:	b5 a1       	ldd	r27, Z+37	; 0x25
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	a1 05       	cpc	r26, r1
    1834:	b1 05       	cpc	r27, r1
    1836:	59 f4       	brne	.+22     	; 0x184e <dir_sdi+0x80>
    1838:	80 85       	ldd	r24, Z+8	; 0x08
    183a:	91 85       	ldd	r25, Z+9	; 0x09
    183c:	08 17       	cp	r16, r24
    183e:	19 07       	cpc	r17, r25
    1840:	08 f0       	brcs	.+2      	; 0x1844 <dir_sdi+0x76>
    1842:	6c c0       	rjmp	.+216    	; 0x191c <dir_sdi+0x14e>
    1844:	62 a1       	ldd	r22, Z+34	; 0x22
    1846:	73 a1       	ldd	r23, Z+35	; 0x23
    1848:	84 a1       	ldd	r24, Z+36	; 0x24
    184a:	95 a1       	ldd	r25, Z+37	; 0x25
    184c:	35 c0       	rjmp	.+106    	; 0x18b8 <dir_sdi+0xea>
    184e:	6c 01       	movw	r12, r24
    1850:	7d 01       	movw	r14, r26
    1852:	a2 80       	ldd	r10, Z+2	; 0x02
    1854:	80 e1       	ldi	r24, 0x10	; 16
    1856:	a8 9e       	mul	r10, r24
    1858:	50 01       	movw	r10, r0
    185a:	11 24       	eor	r1, r1
    185c:	0a 15       	cp	r16, r10
    185e:	1b 05       	cpc	r17, r11
    1860:	30 f1       	brcs	.+76     	; 0x18ae <dir_sdi+0xe0>
    1862:	b7 01       	movw	r22, r14
    1864:	a6 01       	movw	r20, r12
    1866:	88 81       	ld	r24, Y
    1868:	99 81       	ldd	r25, Y+1	; 0x01
    186a:	b0 de       	rcall	.-672    	; 0x15cc <get_fat>
    186c:	6b 01       	movw	r12, r22
    186e:	7c 01       	movw	r14, r24
    1870:	8f ef       	ldi	r24, 0xFF	; 255
    1872:	c8 16       	cp	r12, r24
    1874:	d8 06       	cpc	r13, r24
    1876:	e8 06       	cpc	r14, r24
    1878:	f8 06       	cpc	r15, r24
    187a:	09 f4       	brne	.+2      	; 0x187e <dir_sdi+0xb0>
    187c:	51 c0       	rjmp	.+162    	; 0x1920 <dir_sdi+0x152>
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	c8 16       	cp	r12, r24
    1882:	d1 04       	cpc	r13, r1
    1884:	e1 04       	cpc	r14, r1
    1886:	f1 04       	cpc	r15, r1
    1888:	08 f4       	brcc	.+2      	; 0x188c <dir_sdi+0xbe>
    188a:	4c c0       	rjmp	.+152    	; 0x1924 <dir_sdi+0x156>
    188c:	e8 81       	ld	r30, Y
    188e:	f9 81       	ldd	r31, Y+1	; 0x01
    1890:	82 89       	ldd	r24, Z+18	; 0x12
    1892:	93 89       	ldd	r25, Z+19	; 0x13
    1894:	a4 89       	ldd	r26, Z+20	; 0x14
    1896:	b5 89       	ldd	r27, Z+21	; 0x15
    1898:	c8 16       	cp	r12, r24
    189a:	d9 06       	cpc	r13, r25
    189c:	ea 06       	cpc	r14, r26
    189e:	fb 06       	cpc	r15, r27
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <dir_sdi+0xd6>
    18a2:	42 c0       	rjmp	.+132    	; 0x1928 <dir_sdi+0x15a>
    18a4:	0a 19       	sub	r16, r10
    18a6:	1b 09       	sbc	r17, r11
    18a8:	0a 15       	cp	r16, r10
    18aa:	1b 05       	cpc	r17, r11
    18ac:	d0 f6       	brcc	.-76     	; 0x1862 <dir_sdi+0x94>
    18ae:	b7 01       	movw	r22, r14
    18b0:	a6 01       	movw	r20, r12
    18b2:	88 81       	ld	r24, Y
    18b4:	99 81       	ldd	r25, Y+1	; 0x01
    18b6:	5c de       	rcall	.-840    	; 0x1570 <clust2sect>
    18b8:	ca 86       	std	Y+10, r12	; 0x0a
    18ba:	db 86       	std	Y+11, r13	; 0x0b
    18bc:	ec 86       	std	Y+12, r14	; 0x0c
    18be:	fd 86       	std	Y+13, r15	; 0x0d
    18c0:	61 15       	cp	r22, r1
    18c2:	71 05       	cpc	r23, r1
    18c4:	81 05       	cpc	r24, r1
    18c6:	91 05       	cpc	r25, r1
    18c8:	89 f1       	breq	.+98     	; 0x192c <dir_sdi+0x15e>
    18ca:	98 01       	movw	r18, r16
    18cc:	32 95       	swap	r19
    18ce:	22 95       	swap	r18
    18d0:	2f 70       	andi	r18, 0x0F	; 15
    18d2:	23 27       	eor	r18, r19
    18d4:	3f 70       	andi	r19, 0x0F	; 15
    18d6:	23 27       	eor	r18, r19
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	82 0f       	add	r24, r18
    18de:	93 1f       	adc	r25, r19
    18e0:	a1 1d       	adc	r26, r1
    18e2:	b1 1d       	adc	r27, r1
    18e4:	8e 87       	std	Y+14, r24	; 0x0e
    18e6:	9f 87       	std	Y+15, r25	; 0x0f
    18e8:	a8 8b       	std	Y+16, r26	; 0x10
    18ea:	b9 8b       	std	Y+17, r27	; 0x11
    18ec:	0f 70       	andi	r16, 0x0F	; 15
    18ee:	11 27       	eor	r17, r17
    18f0:	c8 01       	movw	r24, r16
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	82 95       	swap	r24
    18f8:	92 95       	swap	r25
    18fa:	90 7f       	andi	r25, 0xF0	; 240
    18fc:	98 27       	eor	r25, r24
    18fe:	80 7f       	andi	r24, 0xF0	; 240
    1900:	98 27       	eor	r25, r24
    1902:	8e 96       	adiw	r24, 0x2e	; 46
    1904:	28 81       	ld	r18, Y
    1906:	39 81       	ldd	r19, Y+1	; 0x01
    1908:	82 0f       	add	r24, r18
    190a:	93 1f       	adc	r25, r19
    190c:	9b 8b       	std	Y+19, r25	; 0x13
    190e:	8a 8b       	std	Y+18, r24	; 0x12
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	0d c0       	rjmp	.+26     	; 0x192e <dir_sdi+0x160>
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	0b c0       	rjmp	.+22     	; 0x192e <dir_sdi+0x160>
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	09 c0       	rjmp	.+18     	; 0x192e <dir_sdi+0x160>
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	07 c0       	rjmp	.+14     	; 0x192e <dir_sdi+0x160>
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	05 c0       	rjmp	.+10     	; 0x192e <dir_sdi+0x160>
    1924:	82 e0       	ldi	r24, 0x02	; 2
    1926:	03 c0       	rjmp	.+6      	; 0x192e <dir_sdi+0x160>
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	01 c0       	rjmp	.+2      	; 0x192e <dir_sdi+0x160>
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	df 90       	pop	r13
    193c:	cf 90       	pop	r12
    193e:	bf 90       	pop	r11
    1940:	af 90       	pop	r10
    1942:	08 95       	ret

00001944 <put_fat>:
    1944:	4f 92       	push	r4
    1946:	5f 92       	push	r5
    1948:	6f 92       	push	r6
    194a:	7f 92       	push	r7
    194c:	8f 92       	push	r8
    194e:	9f 92       	push	r9
    1950:	af 92       	push	r10
    1952:	bf 92       	push	r11
    1954:	cf 92       	push	r12
    1956:	df 92       	push	r13
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	ec 01       	movw	r28, r24
    1966:	6a 01       	movw	r12, r20
    1968:	7b 01       	movw	r14, r22
    196a:	28 01       	movw	r4, r16
    196c:	39 01       	movw	r6, r18
    196e:	42 30       	cpi	r20, 0x02	; 2
    1970:	51 05       	cpc	r21, r1
    1972:	61 05       	cpc	r22, r1
    1974:	71 05       	cpc	r23, r1
    1976:	08 f4       	brcc	.+2      	; 0x197a <put_fat+0x36>
    1978:	dd c0       	rjmp	.+442    	; 0x1b34 <put_fat+0x1f0>
    197a:	8a 89       	ldd	r24, Y+18	; 0x12
    197c:	9b 89       	ldd	r25, Y+19	; 0x13
    197e:	ac 89       	ldd	r26, Y+20	; 0x14
    1980:	bd 89       	ldd	r27, Y+21	; 0x15
    1982:	48 17       	cp	r20, r24
    1984:	59 07       	cpc	r21, r25
    1986:	6a 07       	cpc	r22, r26
    1988:	7b 07       	cpc	r23, r27
    198a:	08 f0       	brcs	.+2      	; 0x198e <put_fat+0x4a>
    198c:	d5 c0       	rjmp	.+426    	; 0x1b38 <put_fat+0x1f4>
    198e:	88 81       	ld	r24, Y
    1990:	82 30       	cpi	r24, 0x02	; 2
    1992:	09 f4       	brne	.+2      	; 0x1996 <put_fat+0x52>
    1994:	69 c0       	rjmp	.+210    	; 0x1a68 <put_fat+0x124>
    1996:	83 30       	cpi	r24, 0x03	; 3
    1998:	09 f4       	brne	.+2      	; 0x199c <put_fat+0x58>
    199a:	8b c0       	rjmp	.+278    	; 0x1ab2 <put_fat+0x16e>
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	09 f0       	breq	.+2      	; 0x19a2 <put_fat+0x5e>
    19a0:	cd c0       	rjmp	.+410    	; 0x1b3c <put_fat+0x1f8>
    19a2:	5a 01       	movw	r10, r20
    19a4:	b6 94       	lsr	r11
    19a6:	a7 94       	ror	r10
    19a8:	a4 0e       	add	r10, r20
    19aa:	b5 1e       	adc	r11, r21
    19ac:	c5 01       	movw	r24, r10
    19ae:	89 2f       	mov	r24, r25
    19b0:	99 27       	eor	r25, r25
    19b2:	86 95       	lsr	r24
    19b4:	4e 8d       	ldd	r20, Y+30	; 0x1e
    19b6:	5f 8d       	ldd	r21, Y+31	; 0x1f
    19b8:	68 a1       	ldd	r22, Y+32	; 0x20
    19ba:	79 a1       	ldd	r23, Y+33	; 0x21
    19bc:	48 0f       	add	r20, r24
    19be:	59 1f       	adc	r21, r25
    19c0:	61 1d       	adc	r22, r1
    19c2:	71 1d       	adc	r23, r1
    19c4:	ce 01       	movw	r24, r28
    19c6:	24 d9       	rcall	.-3512   	; 0xc10 <move_window>
    19c8:	81 11       	cpse	r24, r1
    19ca:	b9 c0       	rjmp	.+370    	; 0x1b3e <put_fat+0x1fa>
    19cc:	85 01       	movw	r16, r10
    19ce:	0f 5f       	subi	r16, 0xFF	; 255
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	c5 01       	movw	r24, r10
    19d4:	91 70       	andi	r25, 0x01	; 1
    19d6:	46 01       	movw	r8, r12
    19d8:	57 01       	movw	r10, r14
    19da:	51 e0       	ldi	r21, 0x01	; 1
    19dc:	85 22       	and	r8, r21
    19de:	99 24       	eor	r9, r9
    19e0:	aa 24       	eor	r10, r10
    19e2:	bb 24       	eor	r11, r11
    19e4:	c0 fe       	sbrs	r12, 0
    19e6:	0b c0       	rjmp	.+22     	; 0x19fe <put_fat+0xba>
    19e8:	fe 01       	movw	r30, r28
    19ea:	e8 0f       	add	r30, r24
    19ec:	f9 1f       	adc	r31, r25
    19ee:	46 a5       	ldd	r20, Z+46	; 0x2e
    19f0:	4f 70       	andi	r20, 0x0F	; 15
    19f2:	50 e1       	ldi	r21, 0x10	; 16
    19f4:	45 9e       	mul	r4, r21
    19f6:	90 01       	movw	r18, r0
    19f8:	11 24       	eor	r1, r1
    19fa:	24 2b       	or	r18, r20
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <put_fat+0xbc>
    19fe:	24 2d       	mov	r18, r4
    1a00:	fe 01       	movw	r30, r28
    1a02:	e8 0f       	add	r30, r24
    1a04:	f9 1f       	adc	r31, r25
    1a06:	26 a7       	std	Z+46, r18	; 0x2e
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	8c 83       	std	Y+4, r24	; 0x04
    1a0c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1a0e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1a10:	68 a1       	ldd	r22, Y+32	; 0x20
    1a12:	79 a1       	ldd	r23, Y+33	; 0x21
    1a14:	c8 01       	movw	r24, r16
    1a16:	89 2f       	mov	r24, r25
    1a18:	99 27       	eor	r25, r25
    1a1a:	86 95       	lsr	r24
    1a1c:	48 0f       	add	r20, r24
    1a1e:	59 1f       	adc	r21, r25
    1a20:	61 1d       	adc	r22, r1
    1a22:	71 1d       	adc	r23, r1
    1a24:	ce 01       	movw	r24, r28
    1a26:	f4 d8       	rcall	.-3608   	; 0xc10 <move_window>
    1a28:	81 11       	cpse	r24, r1
    1a2a:	89 c0       	rjmp	.+274    	; 0x1b3e <put_fat+0x1fa>
    1a2c:	11 70       	andi	r17, 0x01	; 1
    1a2e:	89 28       	or	r8, r9
    1a30:	8a 28       	or	r8, r10
    1a32:	8b 28       	or	r8, r11
    1a34:	49 f0       	breq	.+18     	; 0x1a48 <put_fat+0x104>
    1a36:	68 94       	set
    1a38:	13 f8       	bld	r1, 3
    1a3a:	76 94       	lsr	r7
    1a3c:	67 94       	ror	r6
    1a3e:	57 94       	ror	r5
    1a40:	47 94       	ror	r4
    1a42:	16 94       	lsr	r1
    1a44:	d1 f7       	brne	.-12     	; 0x1a3a <put_fat+0xf6>
    1a46:	09 c0       	rjmp	.+18     	; 0x1a5a <put_fat+0x116>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e0 0f       	add	r30, r16
    1a4c:	f1 1f       	adc	r31, r17
    1a4e:	26 a5       	ldd	r18, Z+46	; 0x2e
    1a50:	20 7f       	andi	r18, 0xF0	; 240
    1a52:	95 2d       	mov	r25, r5
    1a54:	9f 70       	andi	r25, 0x0F	; 15
    1a56:	42 2e       	mov	r4, r18
    1a58:	49 2a       	or	r4, r25
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e0 0f       	add	r30, r16
    1a5e:	f1 1f       	adc	r31, r17
    1a60:	46 a6       	std	Z+46, r4	; 0x2e
    1a62:	91 e0       	ldi	r25, 0x01	; 1
    1a64:	9c 83       	std	Y+4, r25	; 0x04
    1a66:	6b c0       	rjmp	.+214    	; 0x1b3e <put_fat+0x1fa>
    1a68:	45 2f       	mov	r20, r21
    1a6a:	56 2f       	mov	r21, r22
    1a6c:	67 2f       	mov	r22, r23
    1a6e:	77 27       	eor	r23, r23
    1a70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a72:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a74:	a8 a1       	ldd	r26, Y+32	; 0x20
    1a76:	b9 a1       	ldd	r27, Y+33	; 0x21
    1a78:	48 0f       	add	r20, r24
    1a7a:	59 1f       	adc	r21, r25
    1a7c:	6a 1f       	adc	r22, r26
    1a7e:	7b 1f       	adc	r23, r27
    1a80:	ce 01       	movw	r24, r28
    1a82:	c6 d8       	rcall	.-3700   	; 0xc10 <move_window>
    1a84:	81 11       	cpse	r24, r1
    1a86:	5b c0       	rjmp	.+182    	; 0x1b3e <put_fat+0x1fa>
    1a88:	cc 0c       	add	r12, r12
    1a8a:	dd 1c       	adc	r13, r13
    1a8c:	ee 1c       	adc	r14, r14
    1a8e:	ff 1c       	adc	r15, r15
    1a90:	e8 94       	clt
    1a92:	c0 f8       	bld	r12, 0
    1a94:	91 e0       	ldi	r25, 0x01	; 1
    1a96:	d9 22       	and	r13, r25
    1a98:	ee 24       	eor	r14, r14
    1a9a:	ff 24       	eor	r15, r15
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ec 0d       	add	r30, r12
    1aa0:	fd 1d       	adc	r31, r13
    1aa2:	46 a6       	std	Z+46, r4	; 0x2e
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	ec 0d       	add	r30, r12
    1aa8:	fd 1d       	adc	r31, r13
    1aaa:	57 a6       	std	Z+47, r5	; 0x2f
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	9c 83       	std	Y+4, r25	; 0x04
    1ab0:	46 c0       	rjmp	.+140    	; 0x1b3e <put_fat+0x1fa>
    1ab2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ab4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ab6:	a8 a1       	ldd	r26, Y+32	; 0x20
    1ab8:	b9 a1       	ldd	r27, Y+33	; 0x21
    1aba:	68 94       	set
    1abc:	16 f8       	bld	r1, 6
    1abe:	76 95       	lsr	r23
    1ac0:	67 95       	ror	r22
    1ac2:	57 95       	ror	r21
    1ac4:	47 95       	ror	r20
    1ac6:	16 94       	lsr	r1
    1ac8:	d1 f7       	brne	.-12     	; 0x1abe <put_fat+0x17a>
    1aca:	48 0f       	add	r20, r24
    1acc:	59 1f       	adc	r21, r25
    1ace:	6a 1f       	adc	r22, r26
    1ad0:	7b 1f       	adc	r23, r27
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	9d d8       	rcall	.-3782   	; 0xc10 <move_window>
    1ad6:	81 11       	cpse	r24, r1
    1ad8:	32 c0       	rjmp	.+100    	; 0x1b3e <put_fat+0x1fa>
    1ada:	cc 0c       	add	r12, r12
    1adc:	dd 1c       	adc	r13, r13
    1ade:	ee 1c       	adc	r14, r14
    1ae0:	ff 1c       	adc	r15, r15
    1ae2:	cc 0c       	add	r12, r12
    1ae4:	dd 1c       	adc	r13, r13
    1ae6:	ee 1c       	adc	r14, r14
    1ae8:	ff 1c       	adc	r15, r15
    1aea:	2c ef       	ldi	r18, 0xFC	; 252
    1aec:	c2 22       	and	r12, r18
    1aee:	21 e0       	ldi	r18, 0x01	; 1
    1af0:	d2 22       	and	r13, r18
    1af2:	ee 24       	eor	r14, r14
    1af4:	ff 24       	eor	r15, r15
    1af6:	f6 01       	movw	r30, r12
    1af8:	be 96       	adiw	r30, 0x2e	; 46
    1afa:	ec 0f       	add	r30, r28
    1afc:	fd 1f       	adc	r31, r29
    1afe:	43 81       	ldd	r20, Z+3	; 0x03
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	74 2f       	mov	r23, r20
    1b08:	66 27       	eor	r22, r22
    1b0a:	55 27       	eor	r21, r21
    1b0c:	44 27       	eor	r20, r20
    1b0e:	de 01       	movw	r26, r28
    1b10:	ac 0d       	add	r26, r12
    1b12:	bd 1d       	adc	r27, r13
    1b14:	44 27       	eor	r20, r20
    1b16:	55 27       	eor	r21, r21
    1b18:	66 27       	eor	r22, r22
    1b1a:	70 7f       	andi	r23, 0xF0	; 240
    1b1c:	44 2a       	or	r4, r20
    1b1e:	55 2a       	or	r5, r21
    1b20:	66 2a       	or	r6, r22
    1b22:	77 2a       	or	r7, r23
    1b24:	9e 96       	adiw	r26, 0x2e	; 46
    1b26:	4c 92       	st	X, r4
    1b28:	51 82       	std	Z+1, r5	; 0x01
    1b2a:	62 82       	std	Z+2, r6	; 0x02
    1b2c:	73 82       	std	Z+3, r7	; 0x03
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	05 c0       	rjmp	.+10     	; 0x1b3e <put_fat+0x1fa>
    1b34:	82 e0       	ldi	r24, 0x02	; 2
    1b36:	03 c0       	rjmp	.+6      	; 0x1b3e <put_fat+0x1fa>
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	01 c0       	rjmp	.+2      	; 0x1b3e <put_fat+0x1fa>
    1b3c:	82 e0       	ldi	r24, 0x02	; 2
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	cf 90       	pop	r12
    1b4e:	bf 90       	pop	r11
    1b50:	af 90       	pop	r10
    1b52:	9f 90       	pop	r9
    1b54:	8f 90       	pop	r8
    1b56:	7f 90       	pop	r7
    1b58:	6f 90       	pop	r6
    1b5a:	5f 90       	pop	r5
    1b5c:	4f 90       	pop	r4
    1b5e:	08 95       	ret

00001b60 <create_chain>:
    1b60:	2f 92       	push	r2
    1b62:	3f 92       	push	r3
    1b64:	4f 92       	push	r4
    1b66:	5f 92       	push	r5
    1b68:	6f 92       	push	r6
    1b6a:	7f 92       	push	r7
    1b6c:	8f 92       	push	r8
    1b6e:	9f 92       	push	r9
    1b70:	af 92       	push	r10
    1b72:	bf 92       	push	r11
    1b74:	cf 92       	push	r12
    1b76:	df 92       	push	r13
    1b78:	ef 92       	push	r14
    1b7a:	ff 92       	push	r15
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	ec 01       	movw	r28, r24
    1b86:	2a 01       	movw	r4, r20
    1b88:	3b 01       	movw	r6, r22
    1b8a:	41 15       	cp	r20, r1
    1b8c:	51 05       	cpc	r21, r1
    1b8e:	61 05       	cpc	r22, r1
    1b90:	71 05       	cpc	r23, r1
    1b92:	99 f4       	brne	.+38     	; 0x1bba <create_chain+0x5a>
    1b94:	8a 84       	ldd	r8, Y+10	; 0x0a
    1b96:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b98:	ac 84       	ldd	r10, Y+12	; 0x0c
    1b9a:	bd 84       	ldd	r11, Y+13	; 0x0d
    1b9c:	81 14       	cp	r8, r1
    1b9e:	91 04       	cpc	r9, r1
    1ba0:	a1 04       	cpc	r10, r1
    1ba2:	b1 04       	cpc	r11, r1
    1ba4:	29 f1       	breq	.+74     	; 0x1bf0 <create_chain+0x90>
    1ba6:	8a 89       	ldd	r24, Y+18	; 0x12
    1ba8:	9b 89       	ldd	r25, Y+19	; 0x13
    1baa:	ac 89       	ldd	r26, Y+20	; 0x14
    1bac:	bd 89       	ldd	r27, Y+21	; 0x15
    1bae:	88 16       	cp	r8, r24
    1bb0:	99 06       	cpc	r9, r25
    1bb2:	aa 06       	cpc	r10, r26
    1bb4:	bb 06       	cpc	r11, r27
    1bb6:	08 f5       	brcc	.+66     	; 0x1bfa <create_chain+0x9a>
    1bb8:	24 c0       	rjmp	.+72     	; 0x1c02 <create_chain+0xa2>
    1bba:	08 dd       	rcall	.-1520   	; 0x15cc <get_fat>
    1bbc:	62 30       	cpi	r22, 0x02	; 2
    1bbe:	71 05       	cpc	r23, r1
    1bc0:	81 05       	cpc	r24, r1
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	08 f4       	brcc	.+2      	; 0x1bc8 <create_chain+0x68>
    1bc6:	9b c0       	rjmp	.+310    	; 0x1cfe <create_chain+0x19e>
    1bc8:	6f 3f       	cpi	r22, 0xFF	; 255
    1bca:	2f ef       	ldi	r18, 0xFF	; 255
    1bcc:	72 07       	cpc	r23, r18
    1bce:	82 07       	cpc	r24, r18
    1bd0:	92 07       	cpc	r25, r18
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <create_chain+0x76>
    1bd4:	99 c0       	rjmp	.+306    	; 0x1d08 <create_chain+0x1a8>
    1bd6:	0a 89       	ldd	r16, Y+18	; 0x12
    1bd8:	1b 89       	ldd	r17, Y+19	; 0x13
    1bda:	2c 89       	ldd	r18, Y+20	; 0x14
    1bdc:	3d 89       	ldd	r19, Y+21	; 0x15
    1bde:	60 17       	cp	r22, r16
    1be0:	71 07       	cpc	r23, r17
    1be2:	82 07       	cpc	r24, r18
    1be4:	93 07       	cpc	r25, r19
    1be6:	08 f4       	brcc	.+2      	; 0x1bea <create_chain+0x8a>
    1be8:	93 c0       	rjmp	.+294    	; 0x1d10 <create_chain+0x1b0>
    1bea:	53 01       	movw	r10, r6
    1bec:	42 01       	movw	r8, r4
    1bee:	09 c0       	rjmp	.+18     	; 0x1c02 <create_chain+0xa2>
    1bf0:	81 2c       	mov	r8, r1
    1bf2:	91 2c       	mov	r9, r1
    1bf4:	54 01       	movw	r10, r8
    1bf6:	83 94       	inc	r8
    1bf8:	04 c0       	rjmp	.+8      	; 0x1c02 <create_chain+0xa2>
    1bfa:	81 2c       	mov	r8, r1
    1bfc:	91 2c       	mov	r9, r1
    1bfe:	54 01       	movw	r10, r8
    1c00:	83 94       	inc	r8
    1c02:	75 01       	movw	r14, r10
    1c04:	64 01       	movw	r12, r8
    1c06:	68 94       	set
    1c08:	22 24       	eor	r2, r2
    1c0a:	21 f8       	bld	r2, 1
    1c0c:	31 2c       	mov	r3, r1
    1c0e:	00 e0       	ldi	r16, 0x00	; 0
    1c10:	10 e0       	ldi	r17, 0x00	; 0
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	c8 1a       	sub	r12, r24
    1c16:	d8 0a       	sbc	r13, r24
    1c18:	e8 0a       	sbc	r14, r24
    1c1a:	f8 0a       	sbc	r15, r24
    1c1c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c1e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c20:	ac 89       	ldd	r26, Y+20	; 0x14
    1c22:	bd 89       	ldd	r27, Y+21	; 0x15
    1c24:	c8 16       	cp	r12, r24
    1c26:	d9 06       	cpc	r13, r25
    1c28:	ea 06       	cpc	r14, r26
    1c2a:	fb 06       	cpc	r15, r27
    1c2c:	58 f0       	brcs	.+22     	; 0x1c44 <create_chain+0xe4>
    1c2e:	22 e0       	ldi	r18, 0x02	; 2
    1c30:	82 16       	cp	r8, r18
    1c32:	91 04       	cpc	r9, r1
    1c34:	a1 04       	cpc	r10, r1
    1c36:	b1 04       	cpc	r11, r1
    1c38:	08 f4       	brcc	.+2      	; 0x1c3c <create_chain+0xdc>
    1c3a:	6e c0       	rjmp	.+220    	; 0x1d18 <create_chain+0x1b8>
    1c3c:	c2 2c       	mov	r12, r2
    1c3e:	d3 2c       	mov	r13, r3
    1c40:	e0 2e       	mov	r14, r16
    1c42:	f1 2e       	mov	r15, r17
    1c44:	b7 01       	movw	r22, r14
    1c46:	a6 01       	movw	r20, r12
    1c48:	ce 01       	movw	r24, r28
    1c4a:	c0 dc       	rcall	.-1664   	; 0x15cc <get_fat>
    1c4c:	61 15       	cp	r22, r1
    1c4e:	71 05       	cpc	r23, r1
    1c50:	81 05       	cpc	r24, r1
    1c52:	91 05       	cpc	r25, r1
    1c54:	99 f0       	breq	.+38     	; 0x1c7c <create_chain+0x11c>
    1c56:	6f 3f       	cpi	r22, 0xFF	; 255
    1c58:	2f ef       	ldi	r18, 0xFF	; 255
    1c5a:	72 07       	cpc	r23, r18
    1c5c:	82 07       	cpc	r24, r18
    1c5e:	92 07       	cpc	r25, r18
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <create_chain+0x104>
    1c62:	5f c0       	rjmp	.+190    	; 0x1d22 <create_chain+0x1c2>
    1c64:	61 30       	cpi	r22, 0x01	; 1
    1c66:	71 05       	cpc	r23, r1
    1c68:	81 05       	cpc	r24, r1
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <create_chain+0x110>
    1c6e:	5d c0       	rjmp	.+186    	; 0x1d2a <create_chain+0x1ca>
    1c70:	c8 14       	cp	r12, r8
    1c72:	d9 04       	cpc	r13, r9
    1c74:	ea 04       	cpc	r14, r10
    1c76:	fb 04       	cpc	r15, r11
    1c78:	61 f6       	brne	.-104    	; 0x1c12 <create_chain+0xb2>
    1c7a:	5b c0       	rjmp	.+182    	; 0x1d32 <create_chain+0x1d2>
    1c7c:	8c 2c       	mov	r8, r12
    1c7e:	9d 2c       	mov	r9, r13
    1c80:	ae 2c       	mov	r10, r14
    1c82:	bf 2c       	mov	r11, r15
    1c84:	0f ef       	ldi	r16, 0xFF	; 255
    1c86:	1f ef       	ldi	r17, 0xFF	; 255
    1c88:	2f ef       	ldi	r18, 0xFF	; 255
    1c8a:	3f e0       	ldi	r19, 0x0F	; 15
    1c8c:	b7 01       	movw	r22, r14
    1c8e:	a6 01       	movw	r20, r12
    1c90:	ce 01       	movw	r24, r28
    1c92:	58 de       	rcall	.-848    	; 0x1944 <put_fat>
    1c94:	81 11       	cpse	r24, r1
    1c96:	2c c0       	rjmp	.+88     	; 0x1cf0 <create_chain+0x190>
    1c98:	41 14       	cp	r4, r1
    1c9a:	51 04       	cpc	r5, r1
    1c9c:	61 04       	cpc	r6, r1
    1c9e:	71 04       	cpc	r7, r1
    1ca0:	51 f0       	breq	.+20     	; 0x1cb6 <create_chain+0x156>
    1ca2:	0c 2d       	mov	r16, r12
    1ca4:	1d 2d       	mov	r17, r13
    1ca6:	2e 2d       	mov	r18, r14
    1ca8:	3f 2d       	mov	r19, r15
    1caa:	b3 01       	movw	r22, r6
    1cac:	a2 01       	movw	r20, r4
    1cae:	ce 01       	movw	r24, r28
    1cb0:	49 de       	rcall	.-878    	; 0x1944 <put_fat>
    1cb2:	81 11       	cpse	r24, r1
    1cb4:	1d c0       	rjmp	.+58     	; 0x1cf0 <create_chain+0x190>
    1cb6:	8a 86       	std	Y+10, r8	; 0x0a
    1cb8:	9b 86       	std	Y+11, r9	; 0x0b
    1cba:	ac 86       	std	Y+12, r10	; 0x0c
    1cbc:	bd 86       	std	Y+13, r11	; 0x0d
    1cbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cc2:	a8 89       	ldd	r26, Y+16	; 0x10
    1cc4:	b9 89       	ldd	r27, Y+17	; 0x11
    1cc6:	8f 3f       	cpi	r24, 0xFF	; 255
    1cc8:	2f ef       	ldi	r18, 0xFF	; 255
    1cca:	92 07       	cpc	r25, r18
    1ccc:	a2 07       	cpc	r26, r18
    1cce:	b2 07       	cpc	r27, r18
    1cd0:	a9 f1       	breq	.+106    	; 0x1d3c <create_chain+0x1dc>
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	a1 09       	sbc	r26, r1
    1cd6:	b1 09       	sbc	r27, r1
    1cd8:	8e 87       	std	Y+14, r24	; 0x0e
    1cda:	9f 87       	std	Y+15, r25	; 0x0f
    1cdc:	a8 8b       	std	Y+16, r26	; 0x10
    1cde:	b9 8b       	std	Y+17, r27	; 0x11
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	81 60       	ori	r24, 0x01	; 1
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	4c 2d       	mov	r20, r12
    1ce8:	3d 2d       	mov	r19, r13
    1cea:	2e 2d       	mov	r18, r14
    1cec:	9f 2d       	mov	r25, r15
    1cee:	2f c0       	rjmp	.+94     	; 0x1d4e <create_chain+0x1ee>
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	49 f5       	brne	.+82     	; 0x1d46 <create_chain+0x1e6>
    1cf4:	4f ef       	ldi	r20, 0xFF	; 255
    1cf6:	3f ef       	ldi	r19, 0xFF	; 255
    1cf8:	2f ef       	ldi	r18, 0xFF	; 255
    1cfa:	9f ef       	ldi	r25, 0xFF	; 255
    1cfc:	28 c0       	rjmp	.+80     	; 0x1d4e <create_chain+0x1ee>
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	23 c0       	rjmp	.+70     	; 0x1d4e <create_chain+0x1ee>
    1d08:	46 2f       	mov	r20, r22
    1d0a:	37 2f       	mov	r19, r23
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	1f c0       	rjmp	.+62     	; 0x1d4e <create_chain+0x1ee>
    1d10:	46 2f       	mov	r20, r22
    1d12:	37 2f       	mov	r19, r23
    1d14:	28 2f       	mov	r18, r24
    1d16:	1b c0       	rjmp	.+54     	; 0x1d4e <create_chain+0x1ee>
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	16 c0       	rjmp	.+44     	; 0x1d4e <create_chain+0x1ee>
    1d22:	46 2f       	mov	r20, r22
    1d24:	37 2f       	mov	r19, r23
    1d26:	28 2f       	mov	r18, r24
    1d28:	12 c0       	rjmp	.+36     	; 0x1d4e <create_chain+0x1ee>
    1d2a:	46 2f       	mov	r20, r22
    1d2c:	37 2f       	mov	r19, r23
    1d2e:	28 2f       	mov	r18, r24
    1d30:	0e c0       	rjmp	.+28     	; 0x1d4e <create_chain+0x1ee>
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	09 c0       	rjmp	.+18     	; 0x1d4e <create_chain+0x1ee>
    1d3c:	4c 2d       	mov	r20, r12
    1d3e:	3d 2d       	mov	r19, r13
    1d40:	2e 2d       	mov	r18, r14
    1d42:	9f 2d       	mov	r25, r15
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <create_chain+0x1ee>
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	64 2f       	mov	r22, r20
    1d50:	73 2f       	mov	r23, r19
    1d52:	82 2f       	mov	r24, r18
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	df 90       	pop	r13
    1d62:	cf 90       	pop	r12
    1d64:	bf 90       	pop	r11
    1d66:	af 90       	pop	r10
    1d68:	9f 90       	pop	r9
    1d6a:	8f 90       	pop	r8
    1d6c:	7f 90       	pop	r7
    1d6e:	6f 90       	pop	r6
    1d70:	5f 90       	pop	r5
    1d72:	4f 90       	pop	r4
    1d74:	3f 90       	pop	r3
    1d76:	2f 90       	pop	r2
    1d78:	08 95       	ret

00001d7a <dir_next>:
    1d7a:	7f 92       	push	r7
    1d7c:	8f 92       	push	r8
    1d7e:	9f 92       	push	r9
    1d80:	af 92       	push	r10
    1d82:	bf 92       	push	r11
    1d84:	cf 92       	push	r12
    1d86:	df 92       	push	r13
    1d88:	ef 92       	push	r14
    1d8a:	ff 92       	push	r15
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	ec 01       	movw	r28, r24
    1d96:	7b 01       	movw	r14, r22
    1d98:	0c 81       	ldd	r16, Y+4	; 0x04
    1d9a:	1d 81       	ldd	r17, Y+5	; 0x05
    1d9c:	0f 5f       	subi	r16, 0xFF	; 255
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1da0:	01 15       	cp	r16, r1
    1da2:	11 05       	cpc	r17, r1
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <dir_next+0x2e>
    1da6:	e4 c0       	rjmp	.+456    	; 0x1f70 <dir_next+0x1f6>
    1da8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1daa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dac:	a8 89       	ldd	r26, Y+16	; 0x10
    1dae:	b9 89       	ldd	r27, Y+17	; 0x11
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	a1 05       	cpc	r26, r1
    1db4:	b1 05       	cpc	r27, r1
    1db6:	09 f4       	brne	.+2      	; 0x1dba <dir_next+0x40>
    1db8:	dd c0       	rjmp	.+442    	; 0x1f74 <dir_next+0x1fa>
    1dba:	68 01       	movw	r12, r16
    1dbc:	2f e0       	ldi	r18, 0x0F	; 15
    1dbe:	c2 22       	and	r12, r18
    1dc0:	dd 24       	eor	r13, r13
    1dc2:	c1 14       	cp	r12, r1
    1dc4:	d1 04       	cpc	r13, r1
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <dir_next+0x50>
    1dc8:	bc c0       	rjmp	.+376    	; 0x1f42 <dir_next+0x1c8>
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	a1 1d       	adc	r26, r1
    1dce:	b1 1d       	adc	r27, r1
    1dd0:	8e 87       	std	Y+14, r24	; 0x0e
    1dd2:	9f 87       	std	Y+15, r25	; 0x0f
    1dd4:	a8 8b       	std	Y+16, r26	; 0x10
    1dd6:	b9 8b       	std	Y+17, r27	; 0x11
    1dd8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1dda:	5b 85       	ldd	r21, Y+11	; 0x0b
    1ddc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dde:	7d 85       	ldd	r23, Y+13	; 0x0d
    1de0:	41 15       	cp	r20, r1
    1de2:	51 05       	cpc	r21, r1
    1de4:	61 05       	cpc	r22, r1
    1de6:	71 05       	cpc	r23, r1
    1de8:	49 f4       	brne	.+18     	; 0x1dfc <dir_next+0x82>
    1dea:	e8 81       	ld	r30, Y
    1dec:	f9 81       	ldd	r31, Y+1	; 0x01
    1dee:	80 85       	ldd	r24, Z+8	; 0x08
    1df0:	91 85       	ldd	r25, Z+9	; 0x09
    1df2:	08 17       	cp	r16, r24
    1df4:	19 07       	cpc	r17, r25
    1df6:	08 f0       	brcs	.+2      	; 0x1dfa <dir_next+0x80>
    1df8:	bf c0       	rjmp	.+382    	; 0x1f78 <dir_next+0x1fe>
    1dfa:	a3 c0       	rjmp	.+326    	; 0x1f42 <dir_next+0x1c8>
    1dfc:	e8 81       	ld	r30, Y
    1dfe:	f9 81       	ldd	r31, Y+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	98 01       	movw	r18, r16
    1e08:	32 95       	swap	r19
    1e0a:	22 95       	swap	r18
    1e0c:	2f 70       	andi	r18, 0x0F	; 15
    1e0e:	23 27       	eor	r18, r19
    1e10:	3f 70       	andi	r19, 0x0F	; 15
    1e12:	23 27       	eor	r18, r19
    1e14:	82 23       	and	r24, r18
    1e16:	93 23       	and	r25, r19
    1e18:	89 2b       	or	r24, r25
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <dir_next+0xa4>
    1e1c:	92 c0       	rjmp	.+292    	; 0x1f42 <dir_next+0x1c8>
    1e1e:	cf 01       	movw	r24, r30
    1e20:	d5 db       	rcall	.-2134   	; 0x15cc <get_fat>
    1e22:	4b 01       	movw	r8, r22
    1e24:	5c 01       	movw	r10, r24
    1e26:	82 e0       	ldi	r24, 0x02	; 2
    1e28:	88 16       	cp	r8, r24
    1e2a:	91 04       	cpc	r9, r1
    1e2c:	a1 04       	cpc	r10, r1
    1e2e:	b1 04       	cpc	r11, r1
    1e30:	08 f4       	brcc	.+2      	; 0x1e34 <dir_next+0xba>
    1e32:	a4 c0       	rjmp	.+328    	; 0x1f7c <dir_next+0x202>
    1e34:	ef ef       	ldi	r30, 0xFF	; 255
    1e36:	8e 16       	cp	r8, r30
    1e38:	9e 06       	cpc	r9, r30
    1e3a:	ae 06       	cpc	r10, r30
    1e3c:	be 06       	cpc	r11, r30
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <dir_next+0xc8>
    1e40:	9f c0       	rjmp	.+318    	; 0x1f80 <dir_next+0x206>
    1e42:	e8 81       	ld	r30, Y
    1e44:	f9 81       	ldd	r31, Y+1	; 0x01
    1e46:	82 89       	ldd	r24, Z+18	; 0x12
    1e48:	93 89       	ldd	r25, Z+19	; 0x13
    1e4a:	a4 89       	ldd	r26, Z+20	; 0x14
    1e4c:	b5 89       	ldd	r27, Z+21	; 0x15
    1e4e:	88 16       	cp	r8, r24
    1e50:	99 06       	cpc	r9, r25
    1e52:	aa 06       	cpc	r10, r26
    1e54:	bb 06       	cpc	r11, r27
    1e56:	08 f4       	brcc	.+2      	; 0x1e5a <dir_next+0xe0>
    1e58:	67 c0       	rjmp	.+206    	; 0x1f28 <dir_next+0x1ae>
    1e5a:	ef 28       	or	r14, r15
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <dir_next+0xe6>
    1e5e:	92 c0       	rjmp	.+292    	; 0x1f84 <dir_next+0x20a>
    1e60:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e62:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e64:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e66:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e68:	cf 01       	movw	r24, r30
    1e6a:	7a de       	rcall	.-780    	; 0x1b60 <create_chain>
    1e6c:	4b 01       	movw	r8, r22
    1e6e:	5c 01       	movw	r10, r24
    1e70:	61 15       	cp	r22, r1
    1e72:	71 05       	cpc	r23, r1
    1e74:	81 05       	cpc	r24, r1
    1e76:	91 05       	cpc	r25, r1
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <dir_next+0x102>
    1e7a:	86 c0       	rjmp	.+268    	; 0x1f88 <dir_next+0x20e>
    1e7c:	61 30       	cpi	r22, 0x01	; 1
    1e7e:	71 05       	cpc	r23, r1
    1e80:	81 05       	cpc	r24, r1
    1e82:	91 05       	cpc	r25, r1
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <dir_next+0x10e>
    1e86:	82 c0       	rjmp	.+260    	; 0x1f8c <dir_next+0x212>
    1e88:	6f 3f       	cpi	r22, 0xFF	; 255
    1e8a:	2f ef       	ldi	r18, 0xFF	; 255
    1e8c:	72 07       	cpc	r23, r18
    1e8e:	82 07       	cpc	r24, r18
    1e90:	92 07       	cpc	r25, r18
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <dir_next+0x11c>
    1e94:	7d c0       	rjmp	.+250    	; 0x1f90 <dir_next+0x216>
    1e96:	88 81       	ld	r24, Y
    1e98:	99 81       	ldd	r25, Y+1	; 0x01
    1e9a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <sync_window>
    1e9e:	81 11       	cpse	r24, r1
    1ea0:	79 c0       	rjmp	.+242    	; 0x1f94 <dir_next+0x21a>
    1ea2:	88 81       	ld	r24, Y
    1ea4:	99 81       	ldd	r25, Y+1	; 0x01
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	52 e0       	ldi	r21, 0x02	; 2
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	8e 96       	adiw	r24, 0x2e	; 46
    1eb0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <mem_set>
    1eb4:	e8 80       	ld	r14, Y
    1eb6:	f9 80       	ldd	r15, Y+1	; 0x01
    1eb8:	b5 01       	movw	r22, r10
    1eba:	a4 01       	movw	r20, r8
    1ebc:	c7 01       	movw	r24, r14
    1ebe:	58 db       	rcall	.-2384   	; 0x1570 <clust2sect>
    1ec0:	f7 01       	movw	r30, r14
    1ec2:	62 a7       	std	Z+42, r22	; 0x2a
    1ec4:	73 a7       	std	Z+43, r23	; 0x2b
    1ec6:	84 a7       	std	Z+44, r24	; 0x2c
    1ec8:	95 a7       	std	Z+45, r25	; 0x2d
    1eca:	e1 2c       	mov	r14, r1
    1ecc:	f1 2c       	mov	r15, r1
    1ece:	77 24       	eor	r7, r7
    1ed0:	73 94       	inc	r7
    1ed2:	17 c0       	rjmp	.+46     	; 0x1f02 <dir_next+0x188>
    1ed4:	74 82       	std	Z+4, r7	; 0x04
    1ed6:	88 81       	ld	r24, Y
    1ed8:	99 81       	ldd	r25, Y+1	; 0x01
    1eda:	0e 94 9f 05 	call	0xb3e	; 0xb3e <sync_window>
    1ede:	81 11       	cpse	r24, r1
    1ee0:	5b c0       	rjmp	.+182    	; 0x1f98 <dir_next+0x21e>
    1ee2:	e8 81       	ld	r30, Y
    1ee4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ee6:	82 a5       	ldd	r24, Z+42	; 0x2a
    1ee8:	93 a5       	ldd	r25, Z+43	; 0x2b
    1eea:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1eec:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	a1 1d       	adc	r26, r1
    1ef2:	b1 1d       	adc	r27, r1
    1ef4:	82 a7       	std	Z+42, r24	; 0x2a
    1ef6:	93 a7       	std	Z+43, r25	; 0x2b
    1ef8:	a4 a7       	std	Z+44, r26	; 0x2c
    1efa:	b5 a7       	std	Z+45, r27	; 0x2d
    1efc:	ff ef       	ldi	r31, 0xFF	; 255
    1efe:	ef 1a       	sub	r14, r31
    1f00:	ff 0a       	sbc	r15, r31
    1f02:	e8 81       	ld	r30, Y
    1f04:	f9 81       	ldd	r31, Y+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	e8 16       	cp	r14, r24
    1f0c:	f9 06       	cpc	r15, r25
    1f0e:	10 f3       	brcs	.-60     	; 0x1ed4 <dir_next+0x15a>
    1f10:	82 a5       	ldd	r24, Z+42	; 0x2a
    1f12:	93 a5       	ldd	r25, Z+43	; 0x2b
    1f14:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1f16:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1f18:	8e 19       	sub	r24, r14
    1f1a:	9f 09       	sbc	r25, r15
    1f1c:	a1 09       	sbc	r26, r1
    1f1e:	b1 09       	sbc	r27, r1
    1f20:	82 a7       	std	Z+42, r24	; 0x2a
    1f22:	93 a7       	std	Z+43, r25	; 0x2b
    1f24:	a4 a7       	std	Z+44, r26	; 0x2c
    1f26:	b5 a7       	std	Z+45, r27	; 0x2d
    1f28:	8a 86       	std	Y+10, r8	; 0x0a
    1f2a:	9b 86       	std	Y+11, r9	; 0x0b
    1f2c:	ac 86       	std	Y+12, r10	; 0x0c
    1f2e:	bd 86       	std	Y+13, r11	; 0x0d
    1f30:	b5 01       	movw	r22, r10
    1f32:	a4 01       	movw	r20, r8
    1f34:	88 81       	ld	r24, Y
    1f36:	99 81       	ldd	r25, Y+1	; 0x01
    1f38:	1b db       	rcall	.-2506   	; 0x1570 <clust2sect>
    1f3a:	6e 87       	std	Y+14, r22	; 0x0e
    1f3c:	7f 87       	std	Y+15, r23	; 0x0f
    1f3e:	88 8b       	std	Y+16, r24	; 0x10
    1f40:	99 8b       	std	Y+17, r25	; 0x11
    1f42:	1d 83       	std	Y+5, r17	; 0x05
    1f44:	0c 83       	std	Y+4, r16	; 0x04
    1f46:	cc 0c       	add	r12, r12
    1f48:	dd 1c       	adc	r13, r13
    1f4a:	cc 0c       	add	r12, r12
    1f4c:	dd 1c       	adc	r13, r13
    1f4e:	cc 0c       	add	r12, r12
    1f50:	dd 1c       	adc	r13, r13
    1f52:	cc 0c       	add	r12, r12
    1f54:	dd 1c       	adc	r13, r13
    1f56:	cc 0c       	add	r12, r12
    1f58:	dd 1c       	adc	r13, r13
    1f5a:	2e e2       	ldi	r18, 0x2E	; 46
    1f5c:	c2 0e       	add	r12, r18
    1f5e:	d1 1c       	adc	r13, r1
    1f60:	88 81       	ld	r24, Y
    1f62:	99 81       	ldd	r25, Y+1	; 0x01
    1f64:	c8 0e       	add	r12, r24
    1f66:	d9 1e       	adc	r13, r25
    1f68:	db 8a       	std	Y+19, r13	; 0x13
    1f6a:	ca 8a       	std	Y+18, r12	; 0x12
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	15 c0       	rjmp	.+42     	; 0x1f9a <dir_next+0x220>
    1f70:	84 e0       	ldi	r24, 0x04	; 4
    1f72:	13 c0       	rjmp	.+38     	; 0x1f9a <dir_next+0x220>
    1f74:	84 e0       	ldi	r24, 0x04	; 4
    1f76:	11 c0       	rjmp	.+34     	; 0x1f9a <dir_next+0x220>
    1f78:	84 e0       	ldi	r24, 0x04	; 4
    1f7a:	0f c0       	rjmp	.+30     	; 0x1f9a <dir_next+0x220>
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	0d c0       	rjmp	.+26     	; 0x1f9a <dir_next+0x220>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	0b c0       	rjmp	.+22     	; 0x1f9a <dir_next+0x220>
    1f84:	84 e0       	ldi	r24, 0x04	; 4
    1f86:	09 c0       	rjmp	.+18     	; 0x1f9a <dir_next+0x220>
    1f88:	87 e0       	ldi	r24, 0x07	; 7
    1f8a:	07 c0       	rjmp	.+14     	; 0x1f9a <dir_next+0x220>
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	05 c0       	rjmp	.+10     	; 0x1f9a <dir_next+0x220>
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	03 c0       	rjmp	.+6      	; 0x1f9a <dir_next+0x220>
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	01 c0       	rjmp	.+2      	; 0x1f9a <dir_next+0x220>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	cf 90       	pop	r12
    1faa:	bf 90       	pop	r11
    1fac:	af 90       	pop	r10
    1fae:	9f 90       	pop	r9
    1fb0:	8f 90       	pop	r8
    1fb2:	7f 90       	pop	r7
    1fb4:	08 95       	ret

00001fb6 <follow_path>:
    1fb6:	2f 92       	push	r2
    1fb8:	3f 92       	push	r3
    1fba:	4f 92       	push	r4
    1fbc:	5f 92       	push	r5
    1fbe:	6f 92       	push	r6
    1fc0:	7f 92       	push	r7
    1fc2:	8f 92       	push	r8
    1fc4:	9f 92       	push	r9
    1fc6:	af 92       	push	r10
    1fc8:	bf 92       	push	r11
    1fca:	cf 92       	push	r12
    1fcc:	df 92       	push	r13
    1fce:	ef 92       	push	r14
    1fd0:	ff 92       	push	r15
    1fd2:	0f 93       	push	r16
    1fd4:	1f 93       	push	r17
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <follow_path+0x26>
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <follow_path+0x28>
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	7c 01       	movw	r14, r24
    1fe4:	8b 01       	movw	r16, r22
    1fe6:	db 01       	movw	r26, r22
    1fe8:	8c 91       	ld	r24, X
    1fea:	8f 32       	cpi	r24, 0x2F	; 47
    1fec:	11 f0       	breq	.+4      	; 0x1ff2 <follow_path+0x3c>
    1fee:	8c 35       	cpi	r24, 0x5C	; 92
    1ff0:	11 f4       	brne	.+4      	; 0x1ff6 <follow_path+0x40>
    1ff2:	0f 5f       	subi	r16, 0xFF	; 255
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	f7 01       	movw	r30, r14
    1ff8:	16 82       	std	Z+6, r1	; 0x06
    1ffa:	17 82       	std	Z+7, r1	; 0x07
    1ffc:	10 86       	std	Z+8, r1	; 0x08
    1ffe:	11 86       	std	Z+9, r1	; 0x09
    2000:	d8 01       	movw	r26, r16
    2002:	8c 91       	ld	r24, X
    2004:	80 32       	cpi	r24, 0x20	; 32
    2006:	40 f4       	brcc	.+16     	; 0x2018 <follow_path+0x62>
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	c7 01       	movw	r24, r14
    200e:	df db       	rcall	.-2114   	; 0x17ce <dir_sdi>
    2010:	f7 01       	movw	r30, r14
    2012:	13 8a       	std	Z+19, r1	; 0x13
    2014:	12 8a       	std	Z+18, r1	; 0x12
    2016:	4d c1       	rjmp	.+666    	; 0x22b2 <follow_path+0x2fc>
    2018:	0f 2e       	mov	r0, r31
    201a:	fb e0       	ldi	r31, 0x0B	; 11
    201c:	6f 2e       	mov	r6, r31
    201e:	f0 2d       	mov	r31, r0
    2020:	51 2c       	mov	r5, r1
    2022:	c1 2c       	mov	r12, r1
    2024:	d1 2c       	mov	r13, r1
    2026:	68 94       	set
    2028:	88 24       	eor	r8, r8
    202a:	83 f8       	bld	r8, 3
    202c:	71 2c       	mov	r7, r1
    202e:	b1 2c       	mov	r11, r1
    2030:	79 82       	std	Y+1, r7	; 0x01
    2032:	a5 2c       	mov	r10, r5
    2034:	17 01       	movw	r2, r14
    2036:	8a 82       	std	Y+2, r8	; 0x02
    2038:	46 2c       	mov	r4, r6
    203a:	f8 01       	movw	r30, r16
    203c:	8f 01       	movw	r16, r30
    203e:	81 91       	ld	r24, Z+
    2040:	8f 32       	cpi	r24, 0x2F	; 47
    2042:	e1 f3       	breq	.-8      	; 0x203c <follow_path+0x86>
    2044:	8c 35       	cpi	r24, 0x5C	; 92
    2046:	d1 f3       	breq	.-12     	; 0x203c <follow_path+0x86>
    2048:	d1 01       	movw	r26, r2
    204a:	54 96       	adiw	r26, 0x14	; 20
    204c:	ed 90       	ld	r14, X+
    204e:	fc 90       	ld	r15, X
    2050:	55 97       	sbiw	r26, 0x15	; 21
    2052:	46 2d       	mov	r20, r6
    2054:	55 2d       	mov	r21, r5
    2056:	60 e2       	ldi	r22, 0x20	; 32
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	c7 01       	movw	r24, r14
    205c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <mem_set>
    2060:	8c 2d       	mov	r24, r12
    2062:	9d 2d       	mov	r25, r13
    2064:	4c 2d       	mov	r20, r12
    2066:	5d 2d       	mov	r21, r13
    2068:	28 2d       	mov	r18, r8
    206a:	37 2d       	mov	r19, r7
    206c:	9b 2c       	mov	r9, r11
    206e:	3c 82       	std	Y+4, r3	; 0x04
    2070:	2b 82       	std	Y+3, r2	; 0x03
    2072:	ba 01       	movw	r22, r20
    2074:	6f 5f       	subi	r22, 0xFF	; 255
    2076:	7f 4f       	sbci	r23, 0xFF	; 255
    2078:	f8 01       	movw	r30, r16
    207a:	e4 0f       	add	r30, r20
    207c:	f5 1f       	adc	r31, r21
    207e:	a0 81       	ld	r26, Z
    2080:	a1 32       	cpi	r26, 0x21	; 33
    2082:	08 f4       	brcc	.+2      	; 0x2086 <follow_path+0xd0>
    2084:	f3 c0       	rjmp	.+486    	; 0x226c <follow_path+0x2b6>
    2086:	af 32       	cpi	r26, 0x2F	; 47
    2088:	09 f4       	brne	.+2      	; 0x208c <follow_path+0xd6>
    208a:	f7 c0       	rjmp	.+494    	; 0x227a <follow_path+0x2c4>
    208c:	ac 35       	cpi	r26, 0x5C	; 92
    208e:	09 f4       	brne	.+2      	; 0x2092 <follow_path+0xdc>
    2090:	f4 c0       	rjmp	.+488    	; 0x227a <follow_path+0x2c4>
    2092:	ae 32       	cpi	r26, 0x2E	; 46
    2094:	09 f4       	brne	.+2      	; 0x2098 <follow_path+0xe2>
    2096:	de c0       	rjmp	.+444    	; 0x2254 <follow_path+0x29e>
    2098:	82 17       	cp	r24, r18
    209a:	93 07       	cpc	r25, r19
    209c:	08 f0       	brcs	.+2      	; 0x20a0 <follow_path+0xea>
    209e:	c8 c0       	rjmp	.+400    	; 0x2230 <follow_path+0x27a>
    20a0:	08 c0       	rjmp	.+16     	; 0x20b2 <follow_path+0xfc>
    20a2:	99 0c       	add	r9, r9
    20a4:	99 0c       	add	r9, r9
    20a6:	ab 01       	movw	r20, r22
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	99 81       	ldd	r25, Y+1	; 0x01
    20ac:	24 2d       	mov	r18, r4
    20ae:	3a 2d       	mov	r19, r10
    20b0:	e0 cf       	rjmp	.-64     	; 0x2072 <follow_path+0xbc>
    20b2:	aa 23       	and	r26, r26
    20b4:	1c f4       	brge	.+6      	; 0x20bc <follow_path+0x106>
    20b6:	b9 2d       	mov	r27, r9
    20b8:	b3 60       	ori	r27, 0x03	; 3
    20ba:	9b 2e       	mov	r9, r27
    20bc:	ef e7       	ldi	r30, 0x7F	; 127
    20be:	ea 0f       	add	r30, r26
    20c0:	ef 31       	cpi	r30, 0x1F	; 31
    20c2:	20 f0       	brcs	.+8      	; 0x20cc <follow_path+0x116>
    20c4:	e0 e2       	ldi	r30, 0x20	; 32
    20c6:	ea 0f       	add	r30, r26
    20c8:	ed 31       	cpi	r30, 0x1D	; 29
    20ca:	08 f5       	brcc	.+66     	; 0x210e <follow_path+0x158>
    20cc:	4e 5f       	subi	r20, 0xFE	; 254
    20ce:	5f 4f       	sbci	r21, 0xFF	; 255
    20d0:	f8 01       	movw	r30, r16
    20d2:	e6 0f       	add	r30, r22
    20d4:	f7 1f       	adc	r31, r23
    20d6:	b0 81       	ld	r27, Z
    20d8:	60 ec       	ldi	r22, 0xC0	; 192
    20da:	6b 0f       	add	r22, r27
    20dc:	6f 33       	cpi	r22, 0x3F	; 63
    20de:	28 f0       	brcs	.+10     	; 0x20ea <follow_path+0x134>
    20e0:	60 e8       	ldi	r22, 0x80	; 128
    20e2:	6b 0f       	add	r22, r27
    20e4:	6d 37       	cpi	r22, 0x7D	; 125
    20e6:	08 f0       	brcs	.+2      	; 0x20ea <follow_path+0x134>
    20e8:	a5 c0       	rjmp	.+330    	; 0x2234 <follow_path+0x27e>
    20ea:	b9 01       	movw	r22, r18
    20ec:	61 50       	subi	r22, 0x01	; 1
    20ee:	71 09       	sbc	r23, r1
    20f0:	86 17       	cp	r24, r22
    20f2:	97 07       	cpc	r25, r23
    20f4:	08 f0       	brcs	.+2      	; 0x20f8 <follow_path+0x142>
    20f6:	a0 c0       	rjmp	.+320    	; 0x2238 <follow_path+0x282>
    20f8:	f7 01       	movw	r30, r14
    20fa:	e8 0f       	add	r30, r24
    20fc:	f9 1f       	adc	r31, r25
    20fe:	a0 83       	st	Z, r26
    2100:	fc 01       	movw	r30, r24
    2102:	31 96       	adiw	r30, 0x01	; 1
    2104:	ee 0d       	add	r30, r14
    2106:	ff 1d       	adc	r31, r15
    2108:	02 96       	adiw	r24, 0x02	; 2
    210a:	b0 83       	st	Z, r27
    210c:	b2 cf       	rjmp	.-156    	; 0x2072 <follow_path+0xbc>
    210e:	2a 2e       	mov	r2, r26
    2110:	31 2c       	mov	r3, r1
    2112:	e2 e2       	ldi	r30, 0x22	; 34
    2114:	2e 16       	cp	r2, r30
    2116:	31 04       	cpc	r3, r1
    2118:	09 f4       	brne	.+2      	; 0x211c <follow_path+0x166>
    211a:	90 c0       	rjmp	.+288    	; 0x223c <follow_path+0x286>
    211c:	ed e5       	ldi	r30, 0x5D	; 93
    211e:	f1 e0       	ldi	r31, 0x01	; 1
    2120:	a9 01       	movw	r20, r18
    2122:	21 91       	ld	r18, Z+
    2124:	22 23       	and	r18, r18
    2126:	09 f4       	brne	.+2      	; 0x212a <follow_path+0x174>
    2128:	9a c0       	rjmp	.+308    	; 0x225e <follow_path+0x2a8>
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	22 16       	cp	r2, r18
    212e:	33 06       	cpc	r3, r19
    2130:	c1 f7       	brne	.-16     	; 0x2122 <follow_path+0x16c>
    2132:	86 c0       	rjmp	.+268    	; 0x2240 <follow_path+0x28a>
    2134:	49 2d       	mov	r20, r9
    2136:	42 60       	ori	r20, 0x02	; 2
    2138:	94 2e       	mov	r9, r20
    213a:	08 c0       	rjmp	.+16     	; 0x214c <follow_path+0x196>
    213c:	4f e9       	ldi	r20, 0x9F	; 159
    213e:	4a 0f       	add	r20, r26
    2140:	4a 31       	cpi	r20, 0x1A	; 26
    2142:	20 f4       	brcc	.+8      	; 0x214c <follow_path+0x196>
    2144:	59 2d       	mov	r21, r9
    2146:	51 60       	ori	r21, 0x01	; 1
    2148:	95 2e       	mov	r9, r21
    214a:	a0 52       	subi	r26, 0x20	; 32
    214c:	f7 01       	movw	r30, r14
    214e:	e8 0f       	add	r30, r24
    2150:	f9 1f       	adc	r31, r25
    2152:	a0 83       	st	Z, r26
    2154:	01 96       	adiw	r24, 0x01	; 1
    2156:	ab 01       	movw	r20, r22
    2158:	8c cf       	rjmp	.-232    	; 0x2072 <follow_path+0xbc>
    215a:	89 2b       	or	r24, r25
    215c:	09 f4       	brne	.+2      	; 0x2160 <follow_path+0x1aa>
    215e:	72 c0       	rjmp	.+228    	; 0x2244 <follow_path+0x28e>
    2160:	d7 01       	movw	r26, r14
    2162:	8c 91       	ld	r24, X
    2164:	85 3e       	cpi	r24, 0xE5	; 229
    2166:	11 f4       	brne	.+4      	; 0x216c <follow_path+0x1b6>
    2168:	e5 e0       	ldi	r30, 0x05	; 5
    216a:	ec 93       	st	X, r30
    216c:	28 30       	cpi	r18, 0x08	; 8
    216e:	31 05       	cpc	r19, r1
    2170:	19 f4       	brne	.+6      	; 0x2178 <follow_path+0x1c2>
    2172:	95 2e       	mov	r9, r21
    2174:	99 0c       	add	r9, r9
    2176:	99 0c       	add	r9, r9
    2178:	89 2d       	mov	r24, r9
    217a:	83 70       	andi	r24, 0x03	; 3
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	09 f4       	brne	.+2      	; 0x2182 <follow_path+0x1cc>
    2180:	40 61       	ori	r20, 0x10	; 16
    2182:	89 2d       	mov	r24, r9
    2184:	8c 70       	andi	r24, 0x0C	; 12
    2186:	84 30       	cpi	r24, 0x04	; 4
    2188:	09 f4       	brne	.+2      	; 0x218c <follow_path+0x1d6>
    218a:	48 60       	ori	r20, 0x08	; 8
    218c:	d7 01       	movw	r26, r14
    218e:	1b 96       	adiw	r26, 0x0b	; 11
    2190:	4c 93       	st	X, r20
    2192:	6c 2d       	mov	r22, r12
    2194:	7d 2d       	mov	r23, r13
    2196:	c1 01       	movw	r24, r2
    2198:	1a db       	rcall	.-2508   	; 0x17ce <dir_sdi>
    219a:	81 11       	cpse	r24, r1
    219c:	75 c0       	rjmp	.+234    	; 0x2288 <follow_path+0x2d2>
    219e:	71 01       	movw	r14, r2
    21a0:	f7 01       	movw	r30, r14
    21a2:	46 85       	ldd	r20, Z+14	; 0x0e
    21a4:	57 85       	ldd	r21, Z+15	; 0x0f
    21a6:	60 89       	ldd	r22, Z+16	; 0x10
    21a8:	71 89       	ldd	r23, Z+17	; 0x11
    21aa:	80 81       	ld	r24, Z
    21ac:	91 81       	ldd	r25, Z+1	; 0x01
    21ae:	0e 94 08 06 	call	0xc10	; 0xc10 <move_window>
    21b2:	81 11       	cpse	r24, r1
    21b4:	6a c0       	rjmp	.+212    	; 0x228a <follow_path+0x2d4>
    21b6:	d7 01       	movw	r26, r14
    21b8:	52 96       	adiw	r26, 0x12	; 18
    21ba:	6d 91       	ld	r22, X+
    21bc:	7c 91       	ld	r23, X
    21be:	53 97       	sbiw	r26, 0x13	; 19
    21c0:	fb 01       	movw	r30, r22
    21c2:	90 81       	ld	r25, Z
    21c4:	99 23       	and	r25, r25
    21c6:	09 f4       	brne	.+2      	; 0x21ca <follow_path+0x214>
    21c8:	69 c0       	rjmp	.+210    	; 0x229c <follow_path+0x2e6>
    21ca:	93 85       	ldd	r25, Z+11	; 0x0b
    21cc:	93 fd       	sbrc	r25, 3
    21ce:	13 c0       	rjmp	.+38     	; 0x21f6 <follow_path+0x240>
    21d0:	54 96       	adiw	r26, 0x14	; 20
    21d2:	4d 91       	ld	r20, X+
    21d4:	5c 91       	ld	r21, X
    21d6:	55 97       	sbiw	r26, 0x15	; 21
    21d8:	da 01       	movw	r26, r20
    21da:	9b 01       	movw	r18, r22
    21dc:	25 5f       	subi	r18, 0xF5	; 245
    21de:	3f 4f       	sbci	r19, 0xFF	; 255
    21e0:	17 01       	movw	r2, r14
    21e2:	04 c0       	rjmp	.+8      	; 0x21ec <follow_path+0x236>
    21e4:	e2 17       	cp	r30, r18
    21e6:	f3 07       	cpc	r31, r19
    21e8:	09 f4       	brne	.+2      	; 0x21ec <follow_path+0x236>
    21ea:	5f c0       	rjmp	.+190    	; 0x22aa <follow_path+0x2f4>
    21ec:	f1 90       	ld	r15, Z+
    21ee:	9d 91       	ld	r25, X+
    21f0:	f9 16       	cp	r15, r25
    21f2:	c1 f3       	breq	.-16     	; 0x21e4 <follow_path+0x22e>
    21f4:	71 01       	movw	r14, r2
    21f6:	6c 2d       	mov	r22, r12
    21f8:	7d 2d       	mov	r23, r13
    21fa:	c7 01       	movw	r24, r14
    21fc:	be dd       	rcall	.-1156   	; 0x1d7a <dir_next>
    21fe:	88 23       	and	r24, r24
    2200:	79 f2       	breq	.-98     	; 0x21a0 <follow_path+0x1ea>
    2202:	43 c0       	rjmp	.+134    	; 0x228a <follow_path+0x2d4>
    2204:	92 ff       	sbrs	r25, 2
    2206:	20 c0       	rjmp	.+64     	; 0x2248 <follow_path+0x292>
    2208:	84 e0       	ldi	r24, 0x04	; 4
    220a:	53 c0       	rjmp	.+166    	; 0x22b2 <follow_path+0x2fc>
    220c:	db 01       	movw	r26, r22
    220e:	1b 96       	adiw	r26, 0x0b	; 11
    2210:	8c 91       	ld	r24, X
    2212:	84 ff       	sbrs	r24, 4
    2214:	1b c0       	rjmp	.+54     	; 0x224c <follow_path+0x296>
    2216:	f1 01       	movw	r30, r2
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	0e 94 4a 05 	call	0xa94	; 0xa94 <ld_clust>
    2220:	d1 01       	movw	r26, r2
    2222:	16 96       	adiw	r26, 0x06	; 6
    2224:	6d 93       	st	X+, r22
    2226:	7d 93       	st	X+, r23
    2228:	8d 93       	st	X+, r24
    222a:	9c 93       	st	X, r25
    222c:	19 97       	sbiw	r26, 0x09	; 9
    222e:	05 cf       	rjmp	.-502    	; 0x203a <follow_path+0x84>
    2230:	86 e0       	ldi	r24, 0x06	; 6
    2232:	3f c0       	rjmp	.+126    	; 0x22b2 <follow_path+0x2fc>
    2234:	86 e0       	ldi	r24, 0x06	; 6
    2236:	3d c0       	rjmp	.+122    	; 0x22b2 <follow_path+0x2fc>
    2238:	86 e0       	ldi	r24, 0x06	; 6
    223a:	3b c0       	rjmp	.+118    	; 0x22b2 <follow_path+0x2fc>
    223c:	86 e0       	ldi	r24, 0x06	; 6
    223e:	39 c0       	rjmp	.+114    	; 0x22b2 <follow_path+0x2fc>
    2240:	86 e0       	ldi	r24, 0x06	; 6
    2242:	37 c0       	rjmp	.+110    	; 0x22b2 <follow_path+0x2fc>
    2244:	86 e0       	ldi	r24, 0x06	; 6
    2246:	35 c0       	rjmp	.+106    	; 0x22b2 <follow_path+0x2fc>
    2248:	85 e0       	ldi	r24, 0x05	; 5
    224a:	33 c0       	rjmp	.+102    	; 0x22b2 <follow_path+0x2fc>
    224c:	85 e0       	ldi	r24, 0x05	; 5
    224e:	31 c0       	rjmp	.+98     	; 0x22b2 <follow_path+0x2fc>
    2250:	86 e0       	ldi	r24, 0x06	; 6
    2252:	2f c0       	rjmp	.+94     	; 0x22b2 <follow_path+0x2fc>
    2254:	28 30       	cpi	r18, 0x08	; 8
    2256:	31 05       	cpc	r19, r1
    2258:	09 f4       	brne	.+2      	; 0x225c <follow_path+0x2a6>
    225a:	23 cf       	rjmp	.-442    	; 0x20a2 <follow_path+0xec>
    225c:	f9 cf       	rjmp	.-14     	; 0x2250 <follow_path+0x29a>
    225e:	9a 01       	movw	r18, r20
    2260:	4f eb       	ldi	r20, 0xBF	; 191
    2262:	4a 0f       	add	r20, r26
    2264:	4a 31       	cpi	r20, 0x1A	; 26
    2266:	08 f4       	brcc	.+2      	; 0x226a <follow_path+0x2b4>
    2268:	65 cf       	rjmp	.-310    	; 0x2134 <follow_path+0x17e>
    226a:	68 cf       	rjmp	.-304    	; 0x213c <follow_path+0x186>
    226c:	2b 80       	ldd	r2, Y+3	; 0x03
    226e:	3c 80       	ldd	r3, Y+4	; 0x04
    2270:	06 0f       	add	r16, r22
    2272:	17 1f       	adc	r17, r23
    2274:	59 2d       	mov	r21, r9
    2276:	44 e0       	ldi	r20, 0x04	; 4
    2278:	70 cf       	rjmp	.-288    	; 0x215a <follow_path+0x1a4>
    227a:	2b 80       	ldd	r2, Y+3	; 0x03
    227c:	3c 80       	ldd	r3, Y+4	; 0x04
    227e:	06 0f       	add	r16, r22
    2280:	17 1f       	adc	r17, r23
    2282:	59 2d       	mov	r21, r9
    2284:	4b 2d       	mov	r20, r11
    2286:	69 cf       	rjmp	.-302    	; 0x215a <follow_path+0x1a4>
    2288:	71 01       	movw	r14, r2
    228a:	d7 01       	movw	r26, r14
    228c:	54 96       	adiw	r26, 0x14	; 20
    228e:	ed 91       	ld	r30, X+
    2290:	fc 91       	ld	r31, X
    2292:	55 97       	sbiw	r26, 0x15	; 21
    2294:	93 85       	ldd	r25, Z+11	; 0x0b
    2296:	84 30       	cpi	r24, 0x04	; 4
    2298:	61 f4       	brne	.+24     	; 0x22b2 <follow_path+0x2fc>
    229a:	b4 cf       	rjmp	.-152    	; 0x2204 <follow_path+0x24e>
    229c:	d7 01       	movw	r26, r14
    229e:	54 96       	adiw	r26, 0x14	; 20
    22a0:	ed 91       	ld	r30, X+
    22a2:	fc 91       	ld	r31, X
    22a4:	55 97       	sbiw	r26, 0x15	; 21
    22a6:	93 85       	ldd	r25, Z+11	; 0x0b
    22a8:	ad cf       	rjmp	.-166    	; 0x2204 <follow_path+0x24e>
    22aa:	fa 01       	movw	r30, r20
    22ac:	93 85       	ldd	r25, Z+11	; 0x0b
    22ae:	92 ff       	sbrs	r25, 2
    22b0:	ad cf       	rjmp	.-166    	; 0x220c <follow_path+0x256>
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	df 90       	pop	r13
    22c8:	cf 90       	pop	r12
    22ca:	bf 90       	pop	r11
    22cc:	af 90       	pop	r10
    22ce:	9f 90       	pop	r9
    22d0:	8f 90       	pop	r8
    22d2:	7f 90       	pop	r7
    22d4:	6f 90       	pop	r6
    22d6:	5f 90       	pop	r5
    22d8:	4f 90       	pop	r4
    22da:	3f 90       	pop	r3
    22dc:	2f 90       	pop	r2
    22de:	08 95       	ret

000022e0 <dir_register>:
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	ec 01       	movw	r28, r24
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	70 da       	rcall	.-2848   	; 0x17ce <dir_sdi>
    22ee:	18 2f       	mov	r17, r24
    22f0:	81 11       	cpse	r24, r1
    22f2:	19 c0       	rjmp	.+50     	; 0x2326 <dir_register+0x46>
    22f4:	4e 85       	ldd	r20, Y+14	; 0x0e
    22f6:	5f 85       	ldd	r21, Y+15	; 0x0f
    22f8:	68 89       	ldd	r22, Y+16	; 0x10
    22fa:	79 89       	ldd	r23, Y+17	; 0x11
    22fc:	88 81       	ld	r24, Y
    22fe:	99 81       	ldd	r25, Y+1	; 0x01
    2300:	0e 94 08 06 	call	0xc10	; 0xc10 <move_window>
    2304:	18 2f       	mov	r17, r24
    2306:	81 11       	cpse	r24, r1
    2308:	0e c0       	rjmp	.+28     	; 0x2326 <dir_register+0x46>
    230a:	ea 89       	ldd	r30, Y+18	; 0x12
    230c:	fb 89       	ldd	r31, Y+19	; 0x13
    230e:	80 81       	ld	r24, Z
    2310:	85 3e       	cpi	r24, 0xE5	; 229
    2312:	69 f0       	breq	.+26     	; 0x232e <dir_register+0x4e>
    2314:	88 23       	and	r24, r24
    2316:	59 f0       	breq	.+22     	; 0x232e <dir_register+0x4e>
    2318:	61 e0       	ldi	r22, 0x01	; 1
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	ce 01       	movw	r24, r28
    231e:	2d dd       	rcall	.-1446   	; 0x1d7a <dir_next>
    2320:	18 2f       	mov	r17, r24
    2322:	88 23       	and	r24, r24
    2324:	39 f3       	breq	.-50     	; 0x22f4 <dir_register+0x14>
    2326:	14 30       	cpi	r17, 0x04	; 4
    2328:	11 f1       	breq	.+68     	; 0x236e <dir_register+0x8e>
    232a:	11 11       	cpse	r17, r1
    232c:	21 c0       	rjmp	.+66     	; 0x2370 <dir_register+0x90>
    232e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2330:	5f 85       	ldd	r21, Y+15	; 0x0f
    2332:	68 89       	ldd	r22, Y+16	; 0x10
    2334:	79 89       	ldd	r23, Y+17	; 0x11
    2336:	88 81       	ld	r24, Y
    2338:	99 81       	ldd	r25, Y+1	; 0x01
    233a:	0e 94 08 06 	call	0xc10	; 0xc10 <move_window>
    233e:	18 2f       	mov	r17, r24
    2340:	81 11       	cpse	r24, r1
    2342:	16 c0       	rjmp	.+44     	; 0x2370 <dir_register+0x90>
    2344:	40 e2       	ldi	r20, 0x20	; 32
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	70 e0       	ldi	r23, 0x00	; 0
    234c:	8a 89       	ldd	r24, Y+18	; 0x12
    234e:	9b 89       	ldd	r25, Y+19	; 0x13
    2350:	0e 94 3f 05 	call	0xa7e	; 0xa7e <mem_set>
    2354:	6c 89       	ldd	r22, Y+20	; 0x14
    2356:	7d 89       	ldd	r23, Y+21	; 0x15
    2358:	4b e0       	ldi	r20, 0x0B	; 11
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	8a 89       	ldd	r24, Y+18	; 0x12
    235e:	9b 89       	ldd	r25, Y+19	; 0x13
    2360:	0e 94 31 05 	call	0xa62	; 0xa62 <mem_cpy>
    2364:	e8 81       	ld	r30, Y
    2366:	f9 81       	ldd	r31, Y+1	; 0x01
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	84 83       	std	Z+4, r24	; 0x04
    236c:	01 c0       	rjmp	.+2      	; 0x2370 <dir_register+0x90>
    236e:	17 e0       	ldi	r17, 0x07	; 7
    2370:	81 2f       	mov	r24, r17
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	08 95       	ret

0000237a <remove_chain>:
    237a:	8f 92       	push	r8
    237c:	9f 92       	push	r9
    237e:	af 92       	push	r10
    2380:	bf 92       	push	r11
    2382:	cf 92       	push	r12
    2384:	df 92       	push	r13
    2386:	ef 92       	push	r14
    2388:	ff 92       	push	r15
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	ec 01       	movw	r28, r24
    2394:	4a 01       	movw	r8, r20
    2396:	5b 01       	movw	r10, r22
    2398:	42 30       	cpi	r20, 0x02	; 2
    239a:	51 05       	cpc	r21, r1
    239c:	61 05       	cpc	r22, r1
    239e:	71 05       	cpc	r23, r1
    23a0:	08 f4       	brcc	.+2      	; 0x23a4 <remove_chain+0x2a>
    23a2:	4b c0       	rjmp	.+150    	; 0x243a <remove_chain+0xc0>
    23a4:	4a 89       	ldd	r20, Y+18	; 0x12
    23a6:	5b 89       	ldd	r21, Y+19	; 0x13
    23a8:	6c 89       	ldd	r22, Y+20	; 0x14
    23aa:	7d 89       	ldd	r23, Y+21	; 0x15
    23ac:	84 16       	cp	r8, r20
    23ae:	95 06       	cpc	r9, r21
    23b0:	a6 06       	cpc	r10, r22
    23b2:	b7 06       	cpc	r11, r23
    23b4:	08 f0       	brcs	.+2      	; 0x23b8 <remove_chain+0x3e>
    23b6:	43 c0       	rjmp	.+134    	; 0x243e <remove_chain+0xc4>
    23b8:	b5 01       	movw	r22, r10
    23ba:	a4 01       	movw	r20, r8
    23bc:	ce 01       	movw	r24, r28
    23be:	06 d9       	rcall	.-3572   	; 0x15cc <get_fat>
    23c0:	6b 01       	movw	r12, r22
    23c2:	7c 01       	movw	r14, r24
    23c4:	61 15       	cp	r22, r1
    23c6:	71 05       	cpc	r23, r1
    23c8:	81 05       	cpc	r24, r1
    23ca:	91 05       	cpc	r25, r1
    23cc:	d1 f1       	breq	.+116    	; 0x2442 <remove_chain+0xc8>
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	c9 16       	cp	r12, r25
    23d2:	d1 04       	cpc	r13, r1
    23d4:	e1 04       	cpc	r14, r1
    23d6:	f1 04       	cpc	r15, r1
    23d8:	b1 f1       	breq	.+108    	; 0x2446 <remove_chain+0xcc>
    23da:	8f ef       	ldi	r24, 0xFF	; 255
    23dc:	c8 16       	cp	r12, r24
    23de:	d8 06       	cpc	r13, r24
    23e0:	e8 06       	cpc	r14, r24
    23e2:	f8 06       	cpc	r15, r24
    23e4:	91 f1       	breq	.+100    	; 0x244a <remove_chain+0xd0>
    23e6:	00 e0       	ldi	r16, 0x00	; 0
    23e8:	10 e0       	ldi	r17, 0x00	; 0
    23ea:	98 01       	movw	r18, r16
    23ec:	b5 01       	movw	r22, r10
    23ee:	a4 01       	movw	r20, r8
    23f0:	ce 01       	movw	r24, r28
    23f2:	a8 da       	rcall	.-2736   	; 0x1944 <put_fat>
    23f4:	81 11       	cpse	r24, r1
    23f6:	2a c0       	rjmp	.+84     	; 0x244c <remove_chain+0xd2>
    23f8:	4e 85       	ldd	r20, Y+14	; 0x0e
    23fa:	5f 85       	ldd	r21, Y+15	; 0x0f
    23fc:	68 89       	ldd	r22, Y+16	; 0x10
    23fe:	79 89       	ldd	r23, Y+17	; 0x11
    2400:	4f 3f       	cpi	r20, 0xFF	; 255
    2402:	9f ef       	ldi	r25, 0xFF	; 255
    2404:	59 07       	cpc	r21, r25
    2406:	69 07       	cpc	r22, r25
    2408:	79 07       	cpc	r23, r25
    240a:	59 f0       	breq	.+22     	; 0x2422 <remove_chain+0xa8>
    240c:	4f 5f       	subi	r20, 0xFF	; 255
    240e:	5f 4f       	sbci	r21, 0xFF	; 255
    2410:	6f 4f       	sbci	r22, 0xFF	; 255
    2412:	7f 4f       	sbci	r23, 0xFF	; 255
    2414:	4e 87       	std	Y+14, r20	; 0x0e
    2416:	5f 87       	std	Y+15, r21	; 0x0f
    2418:	68 8b       	std	Y+16, r22	; 0x10
    241a:	79 8b       	std	Y+17, r23	; 0x11
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	91 60       	ori	r25, 0x01	; 1
    2420:	9d 83       	std	Y+5, r25	; 0x05
    2422:	4a 89       	ldd	r20, Y+18	; 0x12
    2424:	5b 89       	ldd	r21, Y+19	; 0x13
    2426:	6c 89       	ldd	r22, Y+20	; 0x14
    2428:	7d 89       	ldd	r23, Y+21	; 0x15
    242a:	c4 16       	cp	r12, r20
    242c:	d5 06       	cpc	r13, r21
    242e:	e6 06       	cpc	r14, r22
    2430:	f7 06       	cpc	r15, r23
    2432:	60 f4       	brcc	.+24     	; 0x244c <remove_chain+0xd2>
    2434:	46 01       	movw	r8, r12
    2436:	57 01       	movw	r10, r14
    2438:	bf cf       	rjmp	.-130    	; 0x23b8 <remove_chain+0x3e>
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	07 c0       	rjmp	.+14     	; 0x244c <remove_chain+0xd2>
    243e:	82 e0       	ldi	r24, 0x02	; 2
    2440:	05 c0       	rjmp	.+10     	; 0x244c <remove_chain+0xd2>
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	03 c0       	rjmp	.+6      	; 0x244c <remove_chain+0xd2>
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	01 c0       	rjmp	.+2      	; 0x244c <remove_chain+0xd2>
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	ff 90       	pop	r15
    2456:	ef 90       	pop	r14
    2458:	df 90       	pop	r13
    245a:	cf 90       	pop	r12
    245c:	bf 90       	pop	r11
    245e:	af 90       	pop	r10
    2460:	9f 90       	pop	r9
    2462:	8f 90       	pop	r8
    2464:	08 95       	ret

00002466 <f_mount>:
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	00 d0       	rcall	.+0      	; 0x246e <f_mount+0x8>
    246e:	00 d0       	rcall	.+0      	; 0x2470 <f_mount+0xa>
    2470:	00 d0       	rcall	.+0      	; 0x2472 <f_mount+0xc>
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	9c 83       	std	Y+4, r25	; 0x04
    2478:	8b 83       	std	Y+3, r24	; 0x03
    247a:	7e 83       	std	Y+6, r23	; 0x06
    247c:	6d 83       	std	Y+5, r22	; 0x05
    247e:	14 2f       	mov	r17, r20
    2480:	7a 83       	std	Y+2, r23	; 0x02
    2482:	69 83       	std	Y+1, r22	; 0x01
    2484:	ce 01       	movw	r24, r28
    2486:	01 96       	adiw	r24, 0x01	; 1
    2488:	0e 94 6b 05 	call	0xad6	; 0xad6 <get_ldnumber>
    248c:	99 23       	and	r25, r25
    248e:	34 f1       	brlt	.+76     	; 0x24dc <f_mount+0x76>
    2490:	fc 01       	movw	r30, r24
    2492:	ee 0f       	add	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	e9 51       	subi	r30, 0x19	; 25
    2498:	fe 4f       	sbci	r31, 0xFE	; 254
    249a:	01 90       	ld	r0, Z+
    249c:	f0 81       	ld	r31, Z
    249e:	e0 2d       	mov	r30, r0
    24a0:	30 97       	sbiw	r30, 0x00	; 0
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <f_mount+0x40>
    24a4:	10 82       	st	Z, r1
    24a6:	eb 81       	ldd	r30, Y+3	; 0x03
    24a8:	fc 81       	ldd	r31, Y+4	; 0x04
    24aa:	30 97       	sbiw	r30, 0x00	; 0
    24ac:	e9 f0       	breq	.+58     	; 0x24e8 <f_mount+0x82>
    24ae:	10 82       	st	Z, r1
    24b0:	2b 81       	ldd	r18, Y+3	; 0x03
    24b2:	3c 81       	ldd	r19, Y+4	; 0x04
    24b4:	fc 01       	movw	r30, r24
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	e9 51       	subi	r30, 0x19	; 25
    24bc:	fe 4f       	sbci	r31, 0xFE	; 254
    24be:	31 83       	std	Z+1, r19	; 0x01
    24c0:	20 83       	st	Z, r18
    24c2:	23 2b       	or	r18, r19
    24c4:	69 f0       	breq	.+26     	; 0x24e0 <f_mount+0x7a>
    24c6:	11 30       	cpi	r17, 0x01	; 1
    24c8:	69 f4       	brne	.+26     	; 0x24e4 <f_mount+0x7e>
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	be 01       	movw	r22, r28
    24ce:	6b 5f       	subi	r22, 0xFB	; 251
    24d0:	7f 4f       	sbci	r23, 0xFF	; 255
    24d2:	ce 01       	movw	r24, r28
    24d4:	03 96       	adiw	r24, 0x03	; 3
    24d6:	0e 94 d3 06 	call	0xda6	; 0xda6 <find_volume>
    24da:	0e c0       	rjmp	.+28     	; 0x24f8 <f_mount+0x92>
    24dc:	8b e0       	ldi	r24, 0x0B	; 11
    24de:	0c c0       	rjmp	.+24     	; 0x24f8 <f_mount+0x92>
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	0a c0       	rjmp	.+20     	; 0x24f8 <f_mount+0x92>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	08 c0       	rjmp	.+16     	; 0x24f8 <f_mount+0x92>
    24e8:	fc 01       	movw	r30, r24
    24ea:	ee 0f       	add	r30, r30
    24ec:	ff 1f       	adc	r31, r31
    24ee:	e9 51       	subi	r30, 0x19	; 25
    24f0:	fe 4f       	sbci	r31, 0xFE	; 254
    24f2:	11 82       	std	Z+1, r1	; 0x01
    24f4:	10 82       	st	Z, r1
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	26 96       	adiw	r28, 0x06	; 6
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	de bf       	out	0x3e, r29	; 62
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	cd bf       	out	0x3d, r28	; 61
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	1f 91       	pop	r17
    250a:	08 95       	ret

0000250c <f_open>:
    250c:	4f 92       	push	r4
    250e:	5f 92       	push	r5
    2510:	6f 92       	push	r6
    2512:	7f 92       	push	r7
    2514:	bf 92       	push	r11
    2516:	cf 92       	push	r12
    2518:	df 92       	push	r13
    251a:	ef 92       	push	r14
    251c:	ff 92       	push	r15
    251e:	0f 93       	push	r16
    2520:	1f 93       	push	r17
    2522:	cf 93       	push	r28
    2524:	df 93       	push	r29
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	a8 97       	sbiw	r28, 0x28	; 40
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	f8 94       	cli
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	0f be       	out	0x3f, r0	; 63
    2534:	cd bf       	out	0x3d, r28	; 61
    2536:	8c 01       	movw	r16, r24
    2538:	7c a3       	std	Y+36, r23	; 0x24
    253a:	6b a3       	std	Y+35, r22	; 0x23
    253c:	f4 2e       	mov	r15, r20
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	09 f4       	brne	.+2      	; 0x2544 <f_open+0x38>
    2542:	e5 c0       	rjmp	.+458    	; 0x270e <f_open+0x202>
    2544:	dc 01       	movw	r26, r24
    2546:	1d 92       	st	X+, r1
    2548:	1c 92       	st	X, r1
    254a:	4e 71       	andi	r20, 0x1E	; 30
    254c:	be 01       	movw	r22, r28
    254e:	6d 5d       	subi	r22, 0xDD	; 221
    2550:	7f 4f       	sbci	r23, 0xFF	; 255
    2552:	ce 01       	movw	r24, r28
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	0e 94 d3 06 	call	0xda6	; 0xda6 <find_volume>
    255a:	81 11       	cpse	r24, r1
    255c:	ec c0       	rjmp	.+472    	; 0x2736 <f_open+0x22a>
    255e:	bf 2d       	mov	r27, r15
    2560:	bf 71       	andi	r27, 0x1F	; 31
    2562:	bb 2e       	mov	r11, r27
    2564:	ce 01       	movw	r24, r28
    2566:	47 96       	adiw	r24, 0x17	; 23
    2568:	9e 8b       	std	Y+22, r25	; 0x16
    256a:	8d 8b       	std	Y+21, r24	; 0x15
    256c:	6b a1       	ldd	r22, Y+35	; 0x23
    256e:	7c a1       	ldd	r23, Y+36	; 0x24
    2570:	46 97       	sbiw	r24, 0x16	; 22
    2572:	21 dd       	rcall	.-1470   	; 0x1fb6 <follow_path>
    2574:	cb 88       	ldd	r12, Y+19	; 0x13
    2576:	dc 88       	ldd	r13, Y+20	; 0x14
    2578:	81 11       	cpse	r24, r1
    257a:	d1 c0       	rjmp	.+418    	; 0x271e <f_open+0x212>
    257c:	c1 14       	cp	r12, r1
    257e:	d1 04       	cpc	r13, r1
    2580:	09 f0       	breq	.+2      	; 0x2584 <f_open+0x78>
    2582:	c7 c0       	rjmp	.+398    	; 0x2712 <f_open+0x206>
    2584:	cb c0       	rjmp	.+406    	; 0x271c <f_open+0x210>
    2586:	88 23       	and	r24, r24
    2588:	71 f0       	breq	.+28     	; 0x25a6 <f_open+0x9a>
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	09 f0       	breq	.+2      	; 0x2590 <f_open+0x84>
    258e:	d3 c0       	rjmp	.+422    	; 0x2736 <f_open+0x22a>
    2590:	ce 01       	movw	r24, r28
    2592:	01 96       	adiw	r24, 0x01	; 1
    2594:	a5 de       	rcall	.-694    	; 0x22e0 <dir_register>
    2596:	eb 2d       	mov	r30, r11
    2598:	e8 60       	ori	r30, 0x08	; 8
    259a:	be 2e       	mov	r11, r30
    259c:	cb 88       	ldd	r12, Y+19	; 0x13
    259e:	dc 88       	ldd	r13, Y+20	; 0x14
    25a0:	88 23       	and	r24, r24
    25a2:	49 f0       	breq	.+18     	; 0x25b6 <f_open+0xaa>
    25a4:	c8 c0       	rjmp	.+400    	; 0x2736 <f_open+0x22a>
    25a6:	d6 01       	movw	r26, r12
    25a8:	1b 96       	adiw	r26, 0x0b	; 11
    25aa:	8c 91       	ld	r24, X
    25ac:	81 71       	andi	r24, 0x11	; 17
    25ae:	09 f0       	breq	.+2      	; 0x25b2 <f_open+0xa6>
    25b0:	bb c0       	rjmp	.+374    	; 0x2728 <f_open+0x21c>
    25b2:	f2 fc       	sbrc	r15, 2
    25b4:	bb c0       	rjmp	.+374    	; 0x272c <f_open+0x220>
    25b6:	b3 fe       	sbrs	r11, 3
    25b8:	56 c0       	rjmp	.+172    	; 0x2666 <f_open+0x15a>
    25ba:	f6 01       	movw	r30, r12
    25bc:	16 86       	std	Z+14, r1	; 0x0e
    25be:	17 86       	std	Z+15, r1	; 0x0f
    25c0:	89 e6       	ldi	r24, 0x69	; 105
    25c2:	80 8b       	std	Z+16, r24	; 0x10
    25c4:	8d eb       	ldi	r24, 0xBD	; 189
    25c6:	81 8b       	std	Z+17, r24	; 0x11
    25c8:	13 86       	std	Z+11, r1	; 0x0b
    25ca:	14 8e       	std	Z+28, r1	; 0x1c
    25cc:	15 8e       	std	Z+29, r1	; 0x1d
    25ce:	16 8e       	std	Z+30, r1	; 0x1e
    25d0:	17 8e       	std	Z+31, r1	; 0x1f
    25d2:	e9 80       	ldd	r14, Y+1	; 0x01
    25d4:	fa 80       	ldd	r15, Y+2	; 0x02
    25d6:	b6 01       	movw	r22, r12
    25d8:	c7 01       	movw	r24, r14
    25da:	0e 94 4a 05 	call	0xa94	; 0xa94 <ld_clust>
    25de:	2b 01       	movw	r4, r22
    25e0:	3c 01       	movw	r6, r24
    25e2:	d6 01       	movw	r26, r12
    25e4:	5a 96       	adiw	r26, 0x1a	; 26
    25e6:	1c 92       	st	X, r1
    25e8:	5a 97       	sbiw	r26, 0x1a	; 26
    25ea:	5b 96       	adiw	r26, 0x1b	; 27
    25ec:	1c 92       	st	X, r1
    25ee:	5b 97       	sbiw	r26, 0x1b	; 27
    25f0:	54 96       	adiw	r26, 0x14	; 20
    25f2:	1c 92       	st	X, r1
    25f4:	54 97       	sbiw	r26, 0x14	; 20
    25f6:	55 96       	adiw	r26, 0x15	; 21
    25f8:	1c 92       	st	X, r1
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	f7 01       	movw	r30, r14
    25fe:	84 83       	std	Z+4, r24	; 0x04
    2600:	41 14       	cp	r4, r1
    2602:	51 04       	cpc	r5, r1
    2604:	61 04       	cpc	r6, r1
    2606:	71 04       	cpc	r7, r1
    2608:	71 f1       	breq	.+92     	; 0x2666 <f_open+0x15a>
    260a:	82 a5       	ldd	r24, Z+42	; 0x2a
    260c:	93 a5       	ldd	r25, Z+43	; 0x2b
    260e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2610:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2612:	8d a3       	std	Y+37, r24	; 0x25
    2614:	9e a3       	std	Y+38, r25	; 0x26
    2616:	af a3       	std	Y+39, r26	; 0x27
    2618:	b8 a7       	std	Y+40, r27	; 0x28
    261a:	b3 01       	movw	r22, r6
    261c:	a2 01       	movw	r20, r4
    261e:	c7 01       	movw	r24, r14
    2620:	ac de       	rcall	.-680    	; 0x237a <remove_chain>
    2622:	81 11       	cpse	r24, r1
    2624:	88 c0       	rjmp	.+272    	; 0x2736 <f_open+0x22a>
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	9a 81       	ldd	r25, Y+2	; 0x02
    262a:	b3 01       	movw	r22, r6
    262c:	a2 01       	movw	r20, r4
    262e:	41 50       	subi	r20, 0x01	; 1
    2630:	51 09       	sbc	r21, r1
    2632:	61 09       	sbc	r22, r1
    2634:	71 09       	sbc	r23, r1
    2636:	fc 01       	movw	r30, r24
    2638:	42 87       	std	Z+10, r20	; 0x0a
    263a:	53 87       	std	Z+11, r21	; 0x0b
    263c:	64 87       	std	Z+12, r22	; 0x0c
    263e:	75 87       	std	Z+13, r23	; 0x0d
    2640:	4d a1       	ldd	r20, Y+37	; 0x25
    2642:	5e a1       	ldd	r21, Y+38	; 0x26
    2644:	6f a1       	ldd	r22, Y+39	; 0x27
    2646:	78 a5       	ldd	r23, Y+40	; 0x28
    2648:	0e 94 08 06 	call	0xc10	; 0xc10 <move_window>
    264c:	0a c0       	rjmp	.+20     	; 0x2662 <f_open+0x156>
    264e:	d6 01       	movw	r26, r12
    2650:	1b 96       	adiw	r26, 0x0b	; 11
    2652:	8c 91       	ld	r24, X
    2654:	84 fd       	sbrc	r24, 4
    2656:	6c c0       	rjmp	.+216    	; 0x2730 <f_open+0x224>
    2658:	f1 fe       	sbrs	r15, 1
    265a:	05 c0       	rjmp	.+10     	; 0x2666 <f_open+0x15a>
    265c:	80 fd       	sbrc	r24, 0
    265e:	6a c0       	rjmp	.+212    	; 0x2734 <f_open+0x228>
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <f_open+0x15a>
    2662:	81 11       	cpse	r24, r1
    2664:	68 c0       	rjmp	.+208    	; 0x2736 <f_open+0x22a>
    2666:	b3 fe       	sbrs	r11, 3
    2668:	03 c0       	rjmp	.+6      	; 0x2670 <f_open+0x164>
    266a:	bb 2d       	mov	r27, r11
    266c:	b0 62       	ori	r27, 0x20	; 32
    266e:	bb 2e       	mov	r11, r27
    2670:	e9 80       	ldd	r14, Y+1	; 0x01
    2672:	fa 80       	ldd	r15, Y+2	; 0x02
    2674:	f7 01       	movw	r30, r14
    2676:	82 a5       	ldd	r24, Z+42	; 0x2a
    2678:	93 a5       	ldd	r25, Z+43	; 0x2b
    267a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    267c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    267e:	f8 01       	movw	r30, r16
    2680:	82 8f       	std	Z+26, r24	; 0x1a
    2682:	93 8f       	std	Z+27, r25	; 0x1b
    2684:	a4 8f       	std	Z+28, r26	; 0x1c
    2686:	b5 8f       	std	Z+29, r27	; 0x1d
    2688:	d7 8e       	std	Z+31, r13	; 0x1f
    268a:	c6 8e       	std	Z+30, r12	; 0x1e
    268c:	b4 82       	std	Z+4, r11	; 0x04
    268e:	15 82       	std	Z+5, r1	; 0x05
    2690:	b6 01       	movw	r22, r12
    2692:	c7 01       	movw	r24, r14
    2694:	0e 94 4a 05 	call	0xa94	; 0xa94 <ld_clust>
    2698:	d8 01       	movw	r26, r16
    269a:	1e 96       	adiw	r26, 0x0e	; 14
    269c:	6d 93       	st	X+, r22
    269e:	7d 93       	st	X+, r23
    26a0:	8d 93       	st	X+, r24
    26a2:	9c 93       	st	X, r25
    26a4:	51 97       	sbiw	r26, 0x11	; 17
    26a6:	f6 01       	movw	r30, r12
    26a8:	87 8d       	ldd	r24, Z+31	; 0x1f
    26aa:	46 8d       	ldd	r20, Z+30	; 0x1e
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	ba 01       	movw	r22, r20
    26b4:	55 27       	eor	r21, r21
    26b6:	44 27       	eor	r20, r20
    26b8:	78 2b       	or	r23, r24
    26ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    26bc:	48 2b       	or	r20, r24
    26be:	85 8d       	ldd	r24, Z+29	; 0x1d
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	98 2f       	mov	r25, r24
    26c4:	88 27       	eor	r24, r24
    26c6:	a0 e0       	ldi	r26, 0x00	; 0
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	48 2b       	or	r20, r24
    26cc:	59 2b       	or	r21, r25
    26ce:	6a 2b       	or	r22, r26
    26d0:	7b 2b       	or	r23, r27
    26d2:	d8 01       	movw	r26, r16
    26d4:	1a 96       	adiw	r26, 0x0a	; 10
    26d6:	4d 93       	st	X+, r20
    26d8:	5d 93       	st	X+, r21
    26da:	6d 93       	st	X+, r22
    26dc:	7c 93       	st	X, r23
    26de:	1d 97       	sbiw	r26, 0x0d	; 13
    26e0:	f8 01       	movw	r30, r16
    26e2:	16 82       	std	Z+6, r1	; 0x06
    26e4:	17 82       	std	Z+7, r1	; 0x07
    26e6:	10 86       	std	Z+8, r1	; 0x08
    26e8:	11 86       	std	Z+9, r1	; 0x09
    26ea:	56 96       	adiw	r26, 0x16	; 22
    26ec:	1d 92       	st	X+, r1
    26ee:	1d 92       	st	X+, r1
    26f0:	1d 92       	st	X+, r1
    26f2:	1c 92       	st	X, r1
    26f4:	59 97       	sbiw	r26, 0x19	; 25
    26f6:	11 96       	adiw	r26, 0x01	; 1
    26f8:	fc 92       	st	X, r15
    26fa:	ee 92       	st	-X, r14
    26fc:	f7 01       	movw	r30, r14
    26fe:	86 81       	ldd	r24, Z+6	; 0x06
    2700:	97 81       	ldd	r25, Z+7	; 0x07
    2702:	13 96       	adiw	r26, 0x03	; 3
    2704:	9c 93       	st	X, r25
    2706:	8e 93       	st	-X, r24
    2708:	12 97       	sbiw	r26, 0x02	; 2
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	14 c0       	rjmp	.+40     	; 0x2736 <f_open+0x22a>
    270e:	89 e0       	ldi	r24, 0x09	; 9
    2710:	12 c0       	rjmp	.+36     	; 0x2736 <f_open+0x22a>
    2712:	8f 2d       	mov	r24, r15
    2714:	8c 71       	andi	r24, 0x1C	; 28
    2716:	09 f0       	breq	.+2      	; 0x271a <f_open+0x20e>
    2718:	46 cf       	rjmp	.-372    	; 0x25a6 <f_open+0x9a>
    271a:	99 cf       	rjmp	.-206    	; 0x264e <f_open+0x142>
    271c:	86 e0       	ldi	r24, 0x06	; 6
    271e:	9f 2d       	mov	r25, r15
    2720:	9c 71       	andi	r25, 0x1C	; 28
    2722:	09 f0       	breq	.+2      	; 0x2726 <f_open+0x21a>
    2724:	30 cf       	rjmp	.-416    	; 0x2586 <f_open+0x7a>
    2726:	9d cf       	rjmp	.-198    	; 0x2662 <f_open+0x156>
    2728:	87 e0       	ldi	r24, 0x07	; 7
    272a:	05 c0       	rjmp	.+10     	; 0x2736 <f_open+0x22a>
    272c:	88 e0       	ldi	r24, 0x08	; 8
    272e:	03 c0       	rjmp	.+6      	; 0x2736 <f_open+0x22a>
    2730:	84 e0       	ldi	r24, 0x04	; 4
    2732:	01 c0       	rjmp	.+2      	; 0x2736 <f_open+0x22a>
    2734:	87 e0       	ldi	r24, 0x07	; 7
    2736:	a8 96       	adiw	r28, 0x28	; 40
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	ff 90       	pop	r15
    274c:	ef 90       	pop	r14
    274e:	df 90       	pop	r13
    2750:	cf 90       	pop	r12
    2752:	bf 90       	pop	r11
    2754:	7f 90       	pop	r7
    2756:	6f 90       	pop	r6
    2758:	5f 90       	pop	r5
    275a:	4f 90       	pop	r4
    275c:	08 95       	ret

0000275e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    275e:	2f 92       	push	r2
    2760:	3f 92       	push	r3
    2762:	4f 92       	push	r4
    2764:	5f 92       	push	r5
    2766:	6f 92       	push	r6
    2768:	7f 92       	push	r7
    276a:	8f 92       	push	r8
    276c:	9f 92       	push	r9
    276e:	af 92       	push	r10
    2770:	bf 92       	push	r11
    2772:	cf 92       	push	r12
    2774:	df 92       	push	r13
    2776:	ef 92       	push	r14
    2778:	ff 92       	push	r15
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	00 d0       	rcall	.+0      	; 0x2784 <f_write+0x26>
    2784:	00 d0       	rcall	.+0      	; 0x2786 <f_write+0x28>
    2786:	1f 92       	push	r1
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	9d 83       	std	Y+5, r25	; 0x05
    278e:	8c 83       	std	Y+4, r24	; 0x04
    2790:	5b 01       	movw	r10, r22
    2792:	7a 01       	movw	r14, r20
    2794:	69 01       	movw	r12, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    2796:	d9 01       	movw	r26, r18
    2798:	1d 92       	st	X+, r1
    279a:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    279c:	0e 94 af 06 	call	0xd5e	; 0xd5e <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    27a0:	81 11       	cpse	r24, r1
    27a2:	b4 c1       	rjmp	.+872    	; 0x2b0c <f_write+0x3ae>
	if (fp->err)							/* Check error */
    27a4:	ec 81       	ldd	r30, Y+4	; 0x04
    27a6:	fd 81       	ldd	r31, Y+5	; 0x05
    27a8:	85 81       	ldd	r24, Z+5	; 0x05
    27aa:	81 11       	cpse	r24, r1
    27ac:	af c1       	rjmp	.+862    	; 0x2b0c <f_write+0x3ae>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    27ae:	84 81       	ldd	r24, Z+4	; 0x04
    27b0:	81 ff       	sbrs	r24, 1
    27b2:	ab c1       	rjmp	.+854    	; 0x2b0a <f_write+0x3ac>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    27b4:	86 81       	ldd	r24, Z+6	; 0x06
    27b6:	97 81       	ldd	r25, Z+7	; 0x07
    27b8:	a0 85       	ldd	r26, Z+8	; 0x08
    27ba:	b1 85       	ldd	r27, Z+9	; 0x09
    27bc:	ac 01       	movw	r20, r24
    27be:	bd 01       	movw	r22, r26
    27c0:	4e 0d       	add	r20, r14
    27c2:	5f 1d       	adc	r21, r15
    27c4:	61 1d       	adc	r22, r1
    27c6:	71 1d       	adc	r23, r1
    27c8:	48 17       	cp	r20, r24
    27ca:	59 07       	cpc	r21, r25
    27cc:	6a 07       	cpc	r22, r26
    27ce:	7b 07       	cpc	r23, r27
    27d0:	08 f4       	brcc	.+2      	; 0x27d4 <f_write+0x76>
    27d2:	7e c1       	rjmp	.+764    	; 0x2ad0 <f_write+0x372>

	for ( ;  btw;							/* Repeat until all data written */
    27d4:	e1 14       	cp	r14, r1
    27d6:	f1 04       	cpc	r15, r1
    27d8:	09 f4       	brne	.+2      	; 0x27dc <f_write+0x7e>
    27da:	7a c1       	rjmp	.+756    	; 0x2ad0 <f_write+0x372>
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    27dc:	b0 96       	adiw	r30, 0x20	; 32
    27de:	fb 83       	std	Y+3, r31	; 0x03
    27e0:	ea 83       	std	Y+2, r30	; 0x02
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    27e2:	ec 81       	ldd	r30, Y+4	; 0x04
    27e4:	fd 81       	ldd	r31, Y+5	; 0x05
    27e6:	86 81       	ldd	r24, Z+6	; 0x06
    27e8:	97 81       	ldd	r25, Z+7	; 0x07
    27ea:	a0 85       	ldd	r26, Z+8	; 0x08
    27ec:	b1 85       	ldd	r27, Z+9	; 0x09
    27ee:	ac 01       	movw	r20, r24
    27f0:	bd 01       	movw	r22, r26
    27f2:	51 70       	andi	r21, 0x01	; 1
    27f4:	66 27       	eor	r22, r22
    27f6:	77 27       	eor	r23, r23
    27f8:	45 2b       	or	r20, r21
    27fa:	46 2b       	or	r20, r22
    27fc:	47 2b       	or	r20, r23
    27fe:	09 f0       	breq	.+2      	; 0x2802 <f_write+0xa4>
    2800:	29 c1       	rjmp	.+594    	; 0x2a54 <f_write+0x2f6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2802:	80 80       	ld	r8, Z
    2804:	91 80       	ldd	r9, Z+1	; 0x01
    2806:	f4 01       	movw	r30, r8
    2808:	22 81       	ldd	r18, Z+2	; 0x02
    280a:	21 50       	subi	r18, 0x01	; 1
    280c:	ac 01       	movw	r20, r24
    280e:	bd 01       	movw	r22, r26
    2810:	03 2e       	mov	r0, r19
    2812:	39 e0       	ldi	r19, 0x09	; 9
    2814:	76 95       	lsr	r23
    2816:	67 95       	ror	r22
    2818:	57 95       	ror	r21
    281a:	47 95       	ror	r20
    281c:	3a 95       	dec	r19
    281e:	d1 f7       	brne	.-12     	; 0x2814 <f_write+0xb6>
    2820:	30 2d       	mov	r19, r0
    2822:	24 23       	and	r18, r20
    2824:	29 83       	std	Y+1, r18	; 0x01
			if (!csect) {					/* On the cluster boundary? */
    2826:	21 11       	cpse	r18, r1
    2828:	52 c0       	rjmp	.+164    	; 0x28ce <f_write+0x170>
				if (fp->fptr == 0) {		/* On the top of the file? */
    282a:	89 2b       	or	r24, r25
    282c:	8a 2b       	or	r24, r26
    282e:	8b 2b       	or	r24, r27
    2830:	99 f4       	brne	.+38     	; 0x2858 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
    2832:	ac 81       	ldd	r26, Y+4	; 0x04
    2834:	bd 81       	ldd	r27, Y+5	; 0x05
    2836:	1e 96       	adiw	r26, 0x0e	; 14
    2838:	6d 91       	ld	r22, X+
    283a:	7d 91       	ld	r23, X+
    283c:	8d 91       	ld	r24, X+
    283e:	9c 91       	ld	r25, X
    2840:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)			/* When no cluster is allocated, */
    2842:	61 15       	cp	r22, r1
    2844:	71 05       	cpc	r23, r1
    2846:	81 05       	cpc	r24, r1
    2848:	91 05       	cpc	r25, r1
    284a:	a1 f4       	brne	.+40     	; 0x2874 <f_write+0x116>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	ba 01       	movw	r22, r20
    2852:	c4 01       	movw	r24, r8
    2854:	85 d9       	rcall	.-3318   	; 0x1b60 <create_chain>
    2856:	08 c0       	rjmp	.+16     	; 0x2868 <f_write+0x10a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2858:	ec 81       	ldd	r30, Y+4	; 0x04
    285a:	fd 81       	ldd	r31, Y+5	; 0x05
    285c:	42 89       	ldd	r20, Z+18	; 0x12
    285e:	53 89       	ldd	r21, Z+19	; 0x13
    2860:	64 89       	ldd	r22, Z+20	; 0x14
    2862:	75 89       	ldd	r23, Z+21	; 0x15
    2864:	c4 01       	movw	r24, r8
    2866:	7c d9       	rcall	.-3336   	; 0x1b60 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    2868:	61 15       	cp	r22, r1
    286a:	71 05       	cpc	r23, r1
    286c:	81 05       	cpc	r24, r1
    286e:	91 05       	cpc	r25, r1
    2870:	09 f4       	brne	.+2      	; 0x2874 <f_write+0x116>
    2872:	2e c1       	rjmp	.+604    	; 0x2ad0 <f_write+0x372>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2874:	61 30       	cpi	r22, 0x01	; 1
    2876:	71 05       	cpc	r23, r1
    2878:	81 05       	cpc	r24, r1
    287a:	91 05       	cpc	r25, r1
    287c:	31 f4       	brne	.+12     	; 0x288a <f_write+0x12c>
    287e:	82 e0       	ldi	r24, 0x02	; 2
    2880:	ac 81       	ldd	r26, Y+4	; 0x04
    2882:	bd 81       	ldd	r27, Y+5	; 0x05
    2884:	15 96       	adiw	r26, 0x05	; 5
    2886:	8c 93       	st	X, r24
    2888:	41 c1       	rjmp	.+642    	; 0x2b0c <f_write+0x3ae>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    288a:	6f 3f       	cpi	r22, 0xFF	; 255
    288c:	bf ef       	ldi	r27, 0xFF	; 255
    288e:	7b 07       	cpc	r23, r27
    2890:	8b 07       	cpc	r24, r27
    2892:	9b 07       	cpc	r25, r27
    2894:	29 f4       	brne	.+10     	; 0x28a0 <f_write+0x142>
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	ec 81       	ldd	r30, Y+4	; 0x04
    289a:	fd 81       	ldd	r31, Y+5	; 0x05
    289c:	85 83       	std	Z+5, r24	; 0x05
    289e:	36 c1       	rjmp	.+620    	; 0x2b0c <f_write+0x3ae>
				fp->clust = clst;			/* Update current cluster */
    28a0:	ac 81       	ldd	r26, Y+4	; 0x04
    28a2:	bd 81       	ldd	r27, Y+5	; 0x05
    28a4:	52 96       	adiw	r26, 0x12	; 18
    28a6:	6d 93       	st	X+, r22
    28a8:	7d 93       	st	X+, r23
    28aa:	8d 93       	st	X+, r24
    28ac:	9c 93       	st	X, r25
    28ae:	55 97       	sbiw	r26, 0x15	; 21
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    28b0:	1e 96       	adiw	r26, 0x0e	; 14
    28b2:	4d 90       	ld	r4, X+
    28b4:	5d 90       	ld	r5, X+
    28b6:	6d 90       	ld	r6, X+
    28b8:	7c 90       	ld	r7, X
    28ba:	51 97       	sbiw	r26, 0x11	; 17
    28bc:	45 28       	or	r4, r5
    28be:	46 28       	or	r4, r6
    28c0:	47 28       	or	r4, r7
    28c2:	29 f4       	brne	.+10     	; 0x28ce <f_write+0x170>
    28c4:	fd 01       	movw	r30, r26
    28c6:	66 87       	std	Z+14, r22	; 0x0e
    28c8:	77 87       	std	Z+15, r23	; 0x0f
    28ca:	80 8b       	std	Z+16, r24	; 0x10
    28cc:	91 8b       	std	Z+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    28ce:	ac 81       	ldd	r26, Y+4	; 0x04
    28d0:	bd 81       	ldd	r27, Y+5	; 0x05
    28d2:	14 96       	adiw	r26, 0x04	; 4
    28d4:	8c 91       	ld	r24, X
    28d6:	14 97       	sbiw	r26, 0x04	; 4
    28d8:	86 ff       	sbrs	r24, 6
    28da:	1e c0       	rjmp	.+60     	; 0x2918 <f_write+0x1ba>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    28dc:	56 96       	adiw	r26, 0x16	; 22
    28de:	2d 91       	ld	r18, X+
    28e0:	3d 91       	ld	r19, X+
    28e2:	4d 91       	ld	r20, X+
    28e4:	5c 91       	ld	r21, X
    28e6:	59 97       	sbiw	r26, 0x19	; 25
    28e8:	ed 91       	ld	r30, X+
    28ea:	fc 91       	ld	r31, X
    28ec:	01 e0       	ldi	r16, 0x01	; 1
    28ee:	10 e0       	ldi	r17, 0x00	; 0
    28f0:	6a 81       	ldd	r22, Y+2	; 0x02
    28f2:	7b 81       	ldd	r23, Y+3	; 0x03
    28f4:	81 81       	ldd	r24, Z+1	; 0x01
    28f6:	0e 94 12 04 	call	0x824	; 0x824 <disk_write>
    28fa:	88 23       	and	r24, r24
    28fc:	29 f0       	breq	.+10     	; 0x2908 <f_write+0x1aa>
					ABORT(fp->fs, FR_DISK_ERR);
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	ec 81       	ldd	r30, Y+4	; 0x04
    2902:	fd 81       	ldd	r31, Y+5	; 0x05
    2904:	85 83       	std	Z+5, r24	; 0x05
    2906:	02 c1       	rjmp	.+516    	; 0x2b0c <f_write+0x3ae>
				fp->flag &= ~FA__DIRTY;
    2908:	ac 81       	ldd	r26, Y+4	; 0x04
    290a:	bd 81       	ldd	r27, Y+5	; 0x05
    290c:	14 96       	adiw	r26, 0x04	; 4
    290e:	8c 91       	ld	r24, X
    2910:	14 97       	sbiw	r26, 0x04	; 4
    2912:	8f 7b       	andi	r24, 0xBF	; 191
    2914:	14 96       	adiw	r26, 0x04	; 4
    2916:	8c 93       	st	X, r24
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2918:	ec 81       	ldd	r30, Y+4	; 0x04
    291a:	fd 81       	ldd	r31, Y+5	; 0x05
    291c:	20 80       	ld	r2, Z
    291e:	31 80       	ldd	r3, Z+1	; 0x01
    2920:	42 89       	ldd	r20, Z+18	; 0x12
    2922:	53 89       	ldd	r21, Z+19	; 0x13
    2924:	64 89       	ldd	r22, Z+20	; 0x14
    2926:	75 89       	ldd	r23, Z+21	; 0x15
    2928:	c1 01       	movw	r24, r2
    292a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    292e:	61 15       	cp	r22, r1
    2930:	71 05       	cpc	r23, r1
    2932:	81 05       	cpc	r24, r1
    2934:	91 05       	cpc	r25, r1
    2936:	31 f4       	brne	.+12     	; 0x2944 <f_write+0x1e6>
    2938:	82 e0       	ldi	r24, 0x02	; 2
    293a:	ac 81       	ldd	r26, Y+4	; 0x04
    293c:	bd 81       	ldd	r27, Y+5	; 0x05
    293e:	15 96       	adiw	r26, 0x05	; 5
    2940:	8c 93       	st	X, r24
    2942:	e4 c0       	rjmp	.+456    	; 0x2b0c <f_write+0x3ae>
			sect += csect;
    2944:	2b 01       	movw	r4, r22
    2946:	3c 01       	movw	r6, r24
    2948:	b9 81       	ldd	r27, Y+1	; 0x01
    294a:	4b 0e       	add	r4, r27
    294c:	51 1c       	adc	r5, r1
    294e:	61 1c       	adc	r6, r1
    2950:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    2952:	47 01       	movw	r8, r14
    2954:	89 2c       	mov	r8, r9
    2956:	99 24       	eor	r9, r9
    2958:	86 94       	lsr	r8
			if (cc) {						/* Write maximum contiguous sectors directly */
    295a:	81 14       	cp	r8, r1
    295c:	91 04       	cpc	r9, r1
    295e:	09 f4       	brne	.+2      	; 0x2962 <f_write+0x204>
    2960:	47 c0       	rjmp	.+142    	; 0x29f0 <f_write+0x292>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2962:	f1 01       	movw	r30, r2
    2964:	42 81       	ldd	r20, Z+2	; 0x02
    2966:	24 2f       	mov	r18, r20
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	c4 01       	movw	r24, r8
    296c:	8b 0f       	add	r24, r27
    296e:	91 1d       	adc	r25, r1
    2970:	28 17       	cp	r18, r24
    2972:	39 07       	cpc	r19, r25
    2974:	18 f4       	brcc	.+6      	; 0x297c <f_write+0x21e>
					cc = fp->fs->csize - csect;
    2976:	49 01       	movw	r8, r18
    2978:	8b 1a       	sub	r8, r27
    297a:	91 08       	sbc	r9, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    297c:	84 01       	movw	r16, r8
    297e:	a3 01       	movw	r20, r6
    2980:	92 01       	movw	r18, r4
    2982:	b5 01       	movw	r22, r10
    2984:	d1 01       	movw	r26, r2
    2986:	11 96       	adiw	r26, 0x01	; 1
    2988:	8c 91       	ld	r24, X
    298a:	0e 94 12 04 	call	0x824	; 0x824 <disk_write>
    298e:	88 23       	and	r24, r24
    2990:	29 f0       	breq	.+10     	; 0x299c <f_write+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	ec 81       	ldd	r30, Y+4	; 0x04
    2996:	fd 81       	ldd	r31, Y+5	; 0x05
    2998:	85 83       	std	Z+5, r24	; 0x05
    299a:	b8 c0       	rjmp	.+368    	; 0x2b0c <f_write+0x3ae>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    299c:	ec 81       	ldd	r30, Y+4	; 0x04
    299e:	fd 81       	ldd	r31, Y+5	; 0x05
    29a0:	86 89       	ldd	r24, Z+22	; 0x16
    29a2:	97 89       	ldd	r25, Z+23	; 0x17
    29a4:	a0 8d       	ldd	r26, Z+24	; 0x18
    29a6:	b1 8d       	ldd	r27, Z+25	; 0x19
    29a8:	84 19       	sub	r24, r4
    29aa:	95 09       	sbc	r25, r5
    29ac:	a6 09       	sbc	r26, r6
    29ae:	b7 09       	sbc	r27, r7
    29b0:	a4 01       	movw	r20, r8
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	84 17       	cp	r24, r20
    29b8:	95 07       	cpc	r25, r21
    29ba:	a6 07       	cpc	r26, r22
    29bc:	b7 07       	cpc	r27, r23
    29be:	a0 f4       	brcc	.+40     	; 0x29e8 <f_write+0x28a>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    29c0:	98 2f       	mov	r25, r24
    29c2:	88 27       	eor	r24, r24
    29c4:	99 0f       	add	r25, r25
    29c6:	b5 01       	movw	r22, r10
    29c8:	68 0f       	add	r22, r24
    29ca:	79 1f       	adc	r23, r25
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	52 e0       	ldi	r21, 0x02	; 2
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	9b 81       	ldd	r25, Y+3	; 0x03
    29d4:	0e 94 31 05 	call	0xa62	; 0xa62 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
    29d8:	ac 81       	ldd	r26, Y+4	; 0x04
    29da:	bd 81       	ldd	r27, Y+5	; 0x05
    29dc:	14 96       	adiw	r26, 0x04	; 4
    29de:	8c 91       	ld	r24, X
    29e0:	14 97       	sbiw	r26, 0x04	; 4
    29e2:	8f 7b       	andi	r24, 0xBF	; 191
    29e4:	14 96       	adiw	r26, 0x04	; 4
    29e6:	8c 93       	st	X, r24
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    29e8:	98 2c       	mov	r9, r8
    29ea:	88 24       	eor	r8, r8
    29ec:	99 0c       	add	r9, r9
				continue;
    29ee:	54 c0       	rjmp	.+168    	; 0x2a98 <f_write+0x33a>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    29f0:	ec 81       	ldd	r30, Y+4	; 0x04
    29f2:	fd 81       	ldd	r31, Y+5	; 0x05
    29f4:	86 89       	ldd	r24, Z+22	; 0x16
    29f6:	97 89       	ldd	r25, Z+23	; 0x17
    29f8:	a0 8d       	ldd	r26, Z+24	; 0x18
    29fa:	b1 8d       	ldd	r27, Z+25	; 0x19
    29fc:	84 15       	cp	r24, r4
    29fe:	95 05       	cpc	r25, r5
    2a00:	a6 05       	cpc	r26, r6
    2a02:	b7 05       	cpc	r27, r7
    2a04:	f9 f0       	breq	.+62     	; 0x2a44 <f_write+0x2e6>
				if (fp->fptr < fp->fsize &&
    2a06:	46 81       	ldd	r20, Z+6	; 0x06
    2a08:	57 81       	ldd	r21, Z+7	; 0x07
    2a0a:	60 85       	ldd	r22, Z+8	; 0x08
    2a0c:	71 85       	ldd	r23, Z+9	; 0x09
    2a0e:	82 85       	ldd	r24, Z+10	; 0x0a
    2a10:	93 85       	ldd	r25, Z+11	; 0x0b
    2a12:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a14:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a16:	48 17       	cp	r20, r24
    2a18:	59 07       	cpc	r21, r25
    2a1a:	6a 07       	cpc	r22, r26
    2a1c:	7b 07       	cpc	r23, r27
    2a1e:	90 f4       	brcc	.+36     	; 0x2a44 <f_write+0x2e6>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    2a20:	01 e0       	ldi	r16, 0x01	; 1
    2a22:	10 e0       	ldi	r17, 0x00	; 0
    2a24:	a3 01       	movw	r20, r6
    2a26:	92 01       	movw	r18, r4
    2a28:	6a 81       	ldd	r22, Y+2	; 0x02
    2a2a:	7b 81       	ldd	r23, Y+3	; 0x03
    2a2c:	d1 01       	movw	r26, r2
    2a2e:	11 96       	adiw	r26, 0x01	; 1
    2a30:	8c 91       	ld	r24, X
    2a32:	0e 94 c4 03 	call	0x788	; 0x788 <disk_read>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
    2a36:	88 23       	and	r24, r24
    2a38:	29 f0       	breq	.+10     	; 0x2a44 <f_write+0x2e6>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	ec 81       	ldd	r30, Y+4	; 0x04
    2a3e:	fd 81       	ldd	r31, Y+5	; 0x05
    2a40:	85 83       	std	Z+5, r24	; 0x05
    2a42:	64 c0       	rjmp	.+200    	; 0x2b0c <f_write+0x3ae>
			}
#endif
			fp->dsect = sect;
    2a44:	ac 81       	ldd	r26, Y+4	; 0x04
    2a46:	bd 81       	ldd	r27, Y+5	; 0x05
    2a48:	56 96       	adiw	r26, 0x16	; 22
    2a4a:	4d 92       	st	X+, r4
    2a4c:	5d 92       	st	X+, r5
    2a4e:	6d 92       	st	X+, r6
    2a50:	7c 92       	st	X, r7
    2a52:	59 97       	sbiw	r26, 0x19	; 25
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2a54:	ec 81       	ldd	r30, Y+4	; 0x04
    2a56:	fd 81       	ldd	r31, Y+5	; 0x05
    2a58:	86 81       	ldd	r24, Z+6	; 0x06
    2a5a:	97 81       	ldd	r25, Z+7	; 0x07
    2a5c:	a0 85       	ldd	r26, Z+8	; 0x08
    2a5e:	b1 85       	ldd	r27, Z+9	; 0x09
    2a60:	9c 01       	movw	r18, r24
    2a62:	31 70       	andi	r19, 0x01	; 1
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	52 e0       	ldi	r21, 0x02	; 2
    2a68:	42 1b       	sub	r20, r18
    2a6a:	53 0b       	sbc	r21, r19
    2a6c:	47 01       	movw	r8, r14
    2a6e:	4e 15       	cp	r20, r14
    2a70:	5f 05       	cpc	r21, r15
    2a72:	08 f4       	brcc	.+2      	; 0x2a76 <f_write+0x318>
    2a74:	4a 01       	movw	r8, r20
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2a76:	91 70       	andi	r25, 0x01	; 1
    2a78:	aa 27       	eor	r26, r26
    2a7a:	bb 27       	eor	r27, r27
    2a7c:	80 96       	adiw	r24, 0x20	; 32
    2a7e:	a4 01       	movw	r20, r8
    2a80:	b5 01       	movw	r22, r10
    2a82:	ac 81       	ldd	r26, Y+4	; 0x04
    2a84:	bd 81       	ldd	r27, Y+5	; 0x05
    2a86:	8a 0f       	add	r24, r26
    2a88:	9b 1f       	adc	r25, r27
    2a8a:	0e 94 31 05 	call	0xa62	; 0xa62 <mem_cpy>
		fp->flag |= FA__DIRTY;
    2a8e:	ec 81       	ldd	r30, Y+4	; 0x04
    2a90:	fd 81       	ldd	r31, Y+5	; 0x05
    2a92:	84 81       	ldd	r24, Z+4	; 0x04
    2a94:	80 64       	ori	r24, 0x40	; 64
    2a96:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2a98:	a8 0c       	add	r10, r8
    2a9a:	b9 1c       	adc	r11, r9
    2a9c:	ec 81       	ldd	r30, Y+4	; 0x04
    2a9e:	fd 81       	ldd	r31, Y+5	; 0x05
    2aa0:	86 81       	ldd	r24, Z+6	; 0x06
    2aa2:	97 81       	ldd	r25, Z+7	; 0x07
    2aa4:	a0 85       	ldd	r26, Z+8	; 0x08
    2aa6:	b1 85       	ldd	r27, Z+9	; 0x09
    2aa8:	88 0d       	add	r24, r8
    2aaa:	99 1d       	adc	r25, r9
    2aac:	a1 1d       	adc	r26, r1
    2aae:	b1 1d       	adc	r27, r1
    2ab0:	86 83       	std	Z+6, r24	; 0x06
    2ab2:	97 83       	std	Z+7, r25	; 0x07
    2ab4:	a0 87       	std	Z+8, r26	; 0x08
    2ab6:	b1 87       	std	Z+9, r27	; 0x09
    2ab8:	d6 01       	movw	r26, r12
    2aba:	8d 91       	ld	r24, X+
    2abc:	9c 91       	ld	r25, X
    2abe:	11 97       	sbiw	r26, 0x01	; 1
    2ac0:	88 0d       	add	r24, r8
    2ac2:	99 1d       	adc	r25, r9
    2ac4:	8d 93       	st	X+, r24
    2ac6:	9c 93       	st	X, r25
    2ac8:	e8 18       	sub	r14, r8
    2aca:	f9 08       	sbc	r15, r9
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2acc:	09 f0       	breq	.+2      	; 0x2ad0 <f_write+0x372>
    2ace:	89 ce       	rjmp	.-750    	; 0x27e2 <f_write+0x84>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2ad0:	ec 81       	ldd	r30, Y+4	; 0x04
    2ad2:	fd 81       	ldd	r31, Y+5	; 0x05
    2ad4:	86 81       	ldd	r24, Z+6	; 0x06
    2ad6:	97 81       	ldd	r25, Z+7	; 0x07
    2ad8:	a0 85       	ldd	r26, Z+8	; 0x08
    2ada:	b1 85       	ldd	r27, Z+9	; 0x09
    2adc:	42 85       	ldd	r20, Z+10	; 0x0a
    2ade:	53 85       	ldd	r21, Z+11	; 0x0b
    2ae0:	64 85       	ldd	r22, Z+12	; 0x0c
    2ae2:	75 85       	ldd	r23, Z+13	; 0x0d
    2ae4:	48 17       	cp	r20, r24
    2ae6:	59 07       	cpc	r21, r25
    2ae8:	6a 07       	cpc	r22, r26
    2aea:	7b 07       	cpc	r23, r27
    2aec:	20 f4       	brcc	.+8      	; 0x2af6 <f_write+0x398>
    2aee:	82 87       	std	Z+10, r24	; 0x0a
    2af0:	93 87       	std	Z+11, r25	; 0x0b
    2af2:	a4 87       	std	Z+12, r26	; 0x0c
    2af4:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2af6:	ac 81       	ldd	r26, Y+4	; 0x04
    2af8:	bd 81       	ldd	r27, Y+5	; 0x05
    2afa:	14 96       	adiw	r26, 0x04	; 4
    2afc:	8c 91       	ld	r24, X
    2afe:	14 97       	sbiw	r26, 0x04	; 4
    2b00:	80 62       	ori	r24, 0x20	; 32
    2b02:	14 96       	adiw	r26, 0x04	; 4
    2b04:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	01 c0       	rjmp	.+2      	; 0x2b0c <f_write+0x3ae>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2b0a:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	ff 90       	pop	r15
    2b20:	ef 90       	pop	r14
    2b22:	df 90       	pop	r13
    2b24:	cf 90       	pop	r12
    2b26:	bf 90       	pop	r11
    2b28:	af 90       	pop	r10
    2b2a:	9f 90       	pop	r9
    2b2c:	8f 90       	pop	r8
    2b2e:	7f 90       	pop	r7
    2b30:	6f 90       	pop	r6
    2b32:	5f 90       	pop	r5
    2b34:	4f 90       	pop	r4
    2b36:	3f 90       	pop	r3
    2b38:	2f 90       	pop	r2
    2b3a:	08 95       	ret

00002b3c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    2b3c:	0f 93       	push	r16
    2b3e:	1f 93       	push	r17
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2b46:	0e 94 af 06 	call	0xd5e	; 0xd5e <validate>
	if (res == FR_OK) {
    2b4a:	81 11       	cpse	r24, r1
    2b4c:	51 c0       	rjmp	.+162    	; 0x2bf0 <f_sync+0xb4>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b50:	85 ff       	sbrs	r24, 5
    2b52:	4b c0       	rjmp	.+150    	; 0x2bea <f_sync+0xae>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
    2b54:	86 ff       	sbrs	r24, 6
    2b56:	13 c0       	rjmp	.+38     	; 0x2b7e <f_sync+0x42>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    2b58:	2e 89       	ldd	r18, Y+22	; 0x16
    2b5a:	3f 89       	ldd	r19, Y+23	; 0x17
    2b5c:	48 8d       	ldd	r20, Y+24	; 0x18
    2b5e:	59 8d       	ldd	r21, Y+25	; 0x19
    2b60:	e8 81       	ld	r30, Y
    2b62:	f9 81       	ldd	r31, Y+1	; 0x01
    2b64:	01 e0       	ldi	r16, 0x01	; 1
    2b66:	10 e0       	ldi	r17, 0x00	; 0
    2b68:	be 01       	movw	r22, r28
    2b6a:	60 5e       	subi	r22, 0xE0	; 224
    2b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6e:	81 81       	ldd	r24, Z+1	; 0x01
    2b70:	0e 94 12 04 	call	0x824	; 0x824 <disk_write>
    2b74:	81 11       	cpse	r24, r1
    2b76:	3b c0       	rjmp	.+118    	; 0x2bee <f_sync+0xb2>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    2b78:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7a:	8f 7b       	andi	r24, 0xBF	; 191
    2b7c:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2b7e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2b80:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2b82:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2b84:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2b86:	88 81       	ld	r24, Y
    2b88:	99 81       	ldd	r25, Y+1	; 0x01
    2b8a:	0e 94 08 06 	call	0xc10	; 0xc10 <move_window>
			if (res == FR_OK) {
    2b8e:	81 11       	cpse	r24, r1
    2b90:	2f c0       	rjmp	.+94     	; 0x2bf0 <f_sync+0xb4>
				dir = fp->dir_ptr;
    2b92:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b94:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2b96:	83 85       	ldd	r24, Z+11	; 0x0b
    2b98:	80 62       	ori	r24, 0x20	; 32
    2b9a:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2b9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b9e:	84 8f       	std	Z+28, r24	; 0x1c
    2ba0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ba2:	85 8f       	std	Z+29, r24	; 0x1d
    2ba4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ba6:	86 8f       	std	Z+30, r24	; 0x1e
    2ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2baa:	87 8f       	std	Z+31, r24	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    2bac:	4e 85       	ldd	r20, Y+14	; 0x0e
    2bae:	5f 85       	ldd	r21, Y+15	; 0x0f
    2bb0:	68 89       	ldd	r22, Y+16	; 0x10
    2bb2:	79 89       	ldd	r23, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    2bb4:	42 8f       	std	Z+26, r20	; 0x1a
    2bb6:	53 8f       	std	Z+27, r21	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    2bb8:	ab 01       	movw	r20, r22
    2bba:	66 27       	eor	r22, r22
    2bbc:	77 27       	eor	r23, r23
    2bbe:	44 8b       	std	Z+20, r20	; 0x14
    2bc0:	55 8b       	std	Z+21, r21	; 0x15
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tm);
    2bc2:	16 8a       	std	Z+22, r1	; 0x16
    2bc4:	17 8a       	std	Z+23, r1	; 0x17
    2bc6:	89 e6       	ldi	r24, 0x69	; 105
    2bc8:	80 8f       	std	Z+24, r24	; 0x18
    2bca:	8d eb       	ldi	r24, 0xBD	; 189
    2bcc:	81 8f       	std	Z+25, r24	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    2bce:	12 8a       	std	Z+18, r1	; 0x12
    2bd0:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    2bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd4:	8f 7d       	andi	r24, 0xDF	; 223
    2bd6:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2bd8:	e8 81       	ld	r30, Y
    2bda:	f9 81       	ldd	r31, Y+1	; 0x01
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    2be0:	88 81       	ld	r24, Y
    2be2:	99 81       	ldd	r25, Y+1	; 0x01
    2be4:	0e 94 46 0a 	call	0x148c	; 0x148c <sync_fs>
    2be8:	03 c0       	rjmp	.+6      	; 0x2bf0 <f_sync+0xb4>
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	01 c0       	rjmp	.+2      	; 0x2bf0 <f_sync+0xb4>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    2bee:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2bf0:	df 91       	pop	r29
    2bf2:	cf 91       	pop	r28
    2bf4:	1f 91       	pop	r17
    2bf6:	0f 91       	pop	r16
    2bf8:	08 95       	ret

00002bfa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2bfa:	cf 93       	push	r28
    2bfc:	df 93       	push	r29
    2bfe:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    2c00:	9d df       	rcall	.-198    	; 0x2b3c <f_sync>
	if (res == FR_OK)
    2c02:	81 11       	cpse	r24, r1
    2c04:	07 c0       	rjmp	.+14     	; 0x2c14 <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
    2c06:	ce 01       	movw	r24, r28
    2c08:	0e 94 af 06 	call	0xd5e	; 0xd5e <validate>
		if (res == FR_OK) {
    2c0c:	81 11       	cpse	r24, r1
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    2c10:	19 82       	std	Y+1, r1	; 0x01
    2c12:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	08 95       	ret

00002c1a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2c1a:	2f 92       	push	r2
    2c1c:	3f 92       	push	r3
    2c1e:	4f 92       	push	r4
    2c20:	5f 92       	push	r5
    2c22:	6f 92       	push	r6
    2c24:	7f 92       	push	r7
    2c26:	8f 92       	push	r8
    2c28:	9f 92       	push	r9
    2c2a:	af 92       	push	r10
    2c2c:	bf 92       	push	r11
    2c2e:	cf 92       	push	r12
    2c30:	df 92       	push	r13
    2c32:	ef 92       	push	r14
    2c34:	ff 92       	push	r15
    2c36:	0f 93       	push	r16
    2c38:	1f 93       	push	r17
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	00 d0       	rcall	.+0      	; 0x2c40 <f_lseek+0x26>
    2c40:	00 d0       	rcall	.+0      	; 0x2c42 <f_lseek+0x28>
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	1c 01       	movw	r2, r24
    2c48:	6a 01       	movw	r12, r20
    2c4a:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    2c4c:	0e 94 af 06 	call	0xd5e	; 0xd5e <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2c50:	81 11       	cpse	r24, r1
    2c52:	bd c1       	rjmp	.+890    	; 0x2fce <f_lseek+0x3b4>
	if (fp->err)						/* Check error */
    2c54:	d1 01       	movw	r26, r2
    2c56:	15 96       	adiw	r26, 0x05	; 5
    2c58:	8c 91       	ld	r24, X
    2c5a:	15 97       	sbiw	r26, 0x05	; 5
    2c5c:	81 11       	cpse	r24, r1
    2c5e:	b7 c1       	rjmp	.+878    	; 0x2fce <f_lseek+0x3b4>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2c60:	1a 96       	adiw	r26, 0x0a	; 10
    2c62:	8d 91       	ld	r24, X+
    2c64:	9d 91       	ld	r25, X+
    2c66:	0d 90       	ld	r0, X+
    2c68:	bc 91       	ld	r27, X
    2c6a:	a0 2d       	mov	r26, r0
    2c6c:	8c 15       	cp	r24, r12
    2c6e:	9d 05       	cpc	r25, r13
    2c70:	ae 05       	cpc	r26, r14
    2c72:	bf 05       	cpc	r27, r15
    2c74:	30 f4       	brcc	.+12     	; 0x2c82 <f_lseek+0x68>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    2c76:	f1 01       	movw	r30, r2
    2c78:	24 81       	ldd	r18, Z+4	; 0x04
    2c7a:	21 fd       	sbrc	r18, 1
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <f_lseek+0x68>
#endif
			) ofs = fp->fsize;
    2c7e:	6c 01       	movw	r12, r24
    2c80:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    2c82:	d1 01       	movw	r26, r2
    2c84:	16 96       	adiw	r26, 0x06	; 6
    2c86:	4d 90       	ld	r4, X+
    2c88:	5d 90       	ld	r5, X+
    2c8a:	6d 90       	ld	r6, X+
    2c8c:	7c 90       	ld	r7, X
    2c8e:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    2c90:	f1 01       	movw	r30, r2
    2c92:	16 82       	std	Z+6, r1	; 0x06
    2c94:	17 82       	std	Z+7, r1	; 0x07
    2c96:	10 86       	std	Z+8, r1	; 0x08
    2c98:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2c9a:	c1 14       	cp	r12, r1
    2c9c:	d1 04       	cpc	r13, r1
    2c9e:	e1 04       	cpc	r14, r1
    2ca0:	f1 04       	cpc	r15, r1
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <f_lseek+0x8c>
    2ca4:	91 c1       	rjmp	.+802    	; 0x2fc8 <f_lseek+0x3ae>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2ca6:	00 81       	ld	r16, Z
    2ca8:	11 81       	ldd	r17, Z+1	; 0x01
    2caa:	d8 01       	movw	r26, r16
    2cac:	12 96       	adiw	r26, 0x02	; 2
    2cae:	8c 90       	ld	r8, X
    2cb0:	91 2c       	mov	r9, r1
    2cb2:	a1 2c       	mov	r10, r1
    2cb4:	b1 2c       	mov	r11, r1
    2cb6:	07 2e       	mov	r0, r23
    2cb8:	79 e0       	ldi	r23, 0x09	; 9
    2cba:	88 0c       	add	r8, r8
    2cbc:	99 1c       	adc	r9, r9
    2cbe:	aa 1c       	adc	r10, r10
    2cc0:	bb 1c       	adc	r11, r11
    2cc2:	7a 95       	dec	r23
    2cc4:	d1 f7       	brne	.-12     	; 0x2cba <f_lseek+0xa0>
    2cc6:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    2cc8:	41 14       	cp	r4, r1
    2cca:	51 04       	cpc	r5, r1
    2ccc:	61 04       	cpc	r6, r1
    2cce:	71 04       	cpc	r7, r1
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <f_lseek+0xba>
    2cd2:	3f c0       	rjmp	.+126    	; 0x2d52 <f_lseek+0x138>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2cd4:	b1 e0       	ldi	r27, 0x01	; 1
    2cd6:	4b 1a       	sub	r4, r27
    2cd8:	51 08       	sbc	r5, r1
    2cda:	61 08       	sbc	r6, r1
    2cdc:	71 08       	sbc	r7, r1
    2cde:	c7 01       	movw	r24, r14
    2ce0:	b6 01       	movw	r22, r12
    2ce2:	61 50       	subi	r22, 0x01	; 1
    2ce4:	71 09       	sbc	r23, r1
    2ce6:	81 09       	sbc	r24, r1
    2ce8:	91 09       	sbc	r25, r1
    2cea:	a5 01       	movw	r20, r10
    2cec:	94 01       	movw	r18, r8
    2cee:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <__udivmodsi4>
    2cf2:	29 83       	std	Y+1, r18	; 0x01
    2cf4:	3a 83       	std	Y+2, r19	; 0x02
    2cf6:	4b 83       	std	Y+3, r20	; 0x03
    2cf8:	5c 83       	std	Y+4, r21	; 0x04
    2cfa:	c3 01       	movw	r24, r6
    2cfc:	b2 01       	movw	r22, r4
    2cfe:	a5 01       	movw	r20, r10
    2d00:	94 01       	movw	r18, r8
    2d02:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	ab 81       	ldd	r26, Y+3	; 0x03
    2d0c:	bc 81       	ldd	r27, Y+4	; 0x04
    2d0e:	82 17       	cp	r24, r18
    2d10:	93 07       	cpc	r25, r19
    2d12:	a4 07       	cpc	r26, r20
    2d14:	b5 07       	cpc	r27, r21
    2d16:	e8 f0       	brcs	.+58     	; 0x2d52 <f_lseek+0x138>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2d18:	88 27       	eor	r24, r24
    2d1a:	99 27       	eor	r25, r25
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	88 19       	sub	r24, r8
    2d20:	99 09       	sbc	r25, r9
    2d22:	aa 09       	sbc	r26, r10
    2d24:	bb 09       	sbc	r27, r11
    2d26:	48 22       	and	r4, r24
    2d28:	59 22       	and	r5, r25
    2d2a:	6a 22       	and	r6, r26
    2d2c:	7b 22       	and	r7, r27
    2d2e:	d1 01       	movw	r26, r2
    2d30:	16 96       	adiw	r26, 0x06	; 6
    2d32:	4d 92       	st	X+, r4
    2d34:	5d 92       	st	X+, r5
    2d36:	6d 92       	st	X+, r6
    2d38:	7c 92       	st	X, r7
    2d3a:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    2d3c:	c4 18       	sub	r12, r4
    2d3e:	d5 08       	sbc	r13, r5
    2d40:	e6 08       	sbc	r14, r6
    2d42:	f7 08       	sbc	r15, r7
				clst = fp->clust;
    2d44:	52 96       	adiw	r26, 0x12	; 18
    2d46:	6d 91       	ld	r22, X+
    2d48:	7d 91       	ld	r23, X+
    2d4a:	8d 91       	ld	r24, X+
    2d4c:	9c 91       	ld	r25, X
    2d4e:	55 97       	sbiw	r26, 0x15	; 21
    2d50:	30 c0       	rjmp	.+96     	; 0x2db2 <f_lseek+0x198>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    2d52:	f1 01       	movw	r30, r2
    2d54:	66 85       	ldd	r22, Z+14	; 0x0e
    2d56:	77 85       	ldd	r23, Z+15	; 0x0f
    2d58:	80 89       	ldd	r24, Z+16	; 0x10
    2d5a:	91 89       	ldd	r25, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2d5c:	61 15       	cp	r22, r1
    2d5e:	71 05       	cpc	r23, r1
    2d60:	81 05       	cpc	r24, r1
    2d62:	91 05       	cpc	r25, r1
    2d64:	09 f5       	brne	.+66     	; 0x2da8 <f_lseek+0x18e>
					clst = create_chain(fp->fs, 0);
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	50 e0       	ldi	r21, 0x00	; 0
    2d6a:	ba 01       	movw	r22, r20
    2d6c:	c8 01       	movw	r24, r16
    2d6e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2d72:	61 30       	cpi	r22, 0x01	; 1
    2d74:	71 05       	cpc	r23, r1
    2d76:	81 05       	cpc	r24, r1
    2d78:	91 05       	cpc	r25, r1
    2d7a:	29 f4       	brne	.+10     	; 0x2d86 <f_lseek+0x16c>
    2d7c:	82 e0       	ldi	r24, 0x02	; 2
    2d7e:	d1 01       	movw	r26, r2
    2d80:	15 96       	adiw	r26, 0x05	; 5
    2d82:	8c 93       	st	X, r24
    2d84:	24 c1       	rjmp	.+584    	; 0x2fce <f_lseek+0x3b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2d86:	6f 3f       	cpi	r22, 0xFF	; 255
    2d88:	bf ef       	ldi	r27, 0xFF	; 255
    2d8a:	7b 07       	cpc	r23, r27
    2d8c:	8b 07       	cpc	r24, r27
    2d8e:	9b 07       	cpc	r25, r27
    2d90:	21 f4       	brne	.+8      	; 0x2d9a <f_lseek+0x180>
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	f1 01       	movw	r30, r2
    2d96:	85 83       	std	Z+5, r24	; 0x05
    2d98:	1a c1       	rjmp	.+564    	; 0x2fce <f_lseek+0x3b4>
					fp->sclust = clst;
    2d9a:	d1 01       	movw	r26, r2
    2d9c:	1e 96       	adiw	r26, 0x0e	; 14
    2d9e:	6d 93       	st	X+, r22
    2da0:	7d 93       	st	X+, r23
    2da2:	8d 93       	st	X+, r24
    2da4:	9c 93       	st	X, r25
    2da6:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->clust = clst;
    2da8:	f1 01       	movw	r30, r2
    2daa:	62 8b       	std	Z+18, r22	; 0x12
    2dac:	73 8b       	std	Z+19, r23	; 0x13
    2dae:	84 8b       	std	Z+20, r24	; 0x14
    2db0:	95 8b       	std	Z+21, r25	; 0x15
			}
			if (clst != 0) {
    2db2:	61 15       	cp	r22, r1
    2db4:	71 05       	cpc	r23, r1
    2db6:	81 05       	cpc	r24, r1
    2db8:	91 05       	cpc	r25, r1
    2dba:	09 f4       	brne	.+2      	; 0x2dbe <f_lseek+0x1a4>
    2dbc:	9f c0       	rjmp	.+318    	; 0x2efc <f_lseek+0x2e2>
				while (ofs > bcs) {						/* Cluster following loop */
    2dbe:	8c 14       	cp	r8, r12
    2dc0:	9d 04       	cpc	r9, r13
    2dc2:	ae 04       	cpc	r10, r14
    2dc4:	bf 04       	cpc	r11, r15
    2dc6:	08 f0       	brcs	.+2      	; 0x2dca <f_lseek+0x1b0>
    2dc8:	62 c0       	rjmp	.+196    	; 0x2e8e <f_lseek+0x274>
    2dca:	ab 01       	movw	r20, r22
    2dcc:	bc 01       	movw	r22, r24
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2dce:	d1 01       	movw	r26, r2
    2dd0:	14 96       	adiw	r26, 0x04	; 4
    2dd2:	2c 91       	ld	r18, X
    2dd4:	14 97       	sbiw	r26, 0x04	; 4
    2dd6:	21 ff       	sbrs	r18, 1
    2dd8:	0c c0       	rjmp	.+24     	; 0x2df2 <f_lseek+0x1d8>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2dda:	8d 91       	ld	r24, X+
    2ddc:	9c 91       	ld	r25, X
    2dde:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <create_chain>
    2de2:	ab 01       	movw	r20, r22
    2de4:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2de6:	41 15       	cp	r20, r1
    2de8:	51 05       	cpc	r21, r1
    2dea:	61 05       	cpc	r22, r1
    2dec:	71 05       	cpc	r23, r1
    2dee:	41 f4       	brne	.+16     	; 0x2e00 <f_lseek+0x1e6>
    2df0:	4a c0       	rjmp	.+148    	; 0x2e86 <f_lseek+0x26c>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2df2:	f1 01       	movw	r30, r2
    2df4:	80 81       	ld	r24, Z
    2df6:	91 81       	ldd	r25, Z+1	; 0x01
    2df8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <get_fat>
    2dfc:	ab 01       	movw	r20, r22
    2dfe:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2e00:	4f 3f       	cpi	r20, 0xFF	; 255
    2e02:	ff ef       	ldi	r31, 0xFF	; 255
    2e04:	5f 07       	cpc	r21, r31
    2e06:	6f 07       	cpc	r22, r31
    2e08:	7f 07       	cpc	r23, r31
    2e0a:	29 f4       	brne	.+10     	; 0x2e16 <f_lseek+0x1fc>
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	d1 01       	movw	r26, r2
    2e10:	15 96       	adiw	r26, 0x05	; 5
    2e12:	8c 93       	st	X, r24
    2e14:	dc c0       	rjmp	.+440    	; 0x2fce <f_lseek+0x3b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2e16:	42 30       	cpi	r20, 0x02	; 2
    2e18:	51 05       	cpc	r21, r1
    2e1a:	61 05       	cpc	r22, r1
    2e1c:	71 05       	cpc	r23, r1
    2e1e:	60 f0       	brcs	.+24     	; 0x2e38 <f_lseek+0x21e>
    2e20:	d1 01       	movw	r26, r2
    2e22:	ed 91       	ld	r30, X+
    2e24:	fc 91       	ld	r31, X
    2e26:	02 89       	ldd	r16, Z+18	; 0x12
    2e28:	13 89       	ldd	r17, Z+19	; 0x13
    2e2a:	24 89       	ldd	r18, Z+20	; 0x14
    2e2c:	35 89       	ldd	r19, Z+21	; 0x15
    2e2e:	40 17       	cp	r20, r16
    2e30:	51 07       	cpc	r21, r17
    2e32:	62 07       	cpc	r22, r18
    2e34:	73 07       	cpc	r23, r19
    2e36:	20 f0       	brcs	.+8      	; 0x2e40 <f_lseek+0x226>
    2e38:	82 e0       	ldi	r24, 0x02	; 2
    2e3a:	f1 01       	movw	r30, r2
    2e3c:	85 83       	std	Z+5, r24	; 0x05
    2e3e:	c7 c0       	rjmp	.+398    	; 0x2fce <f_lseek+0x3b4>
					fp->clust = clst;
    2e40:	d1 01       	movw	r26, r2
    2e42:	52 96       	adiw	r26, 0x12	; 18
    2e44:	4d 93       	st	X+, r20
    2e46:	5d 93       	st	X+, r21
    2e48:	6d 93       	st	X+, r22
    2e4a:	7c 93       	st	X, r23
    2e4c:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2e4e:	16 96       	adiw	r26, 0x06	; 6
    2e50:	0d 91       	ld	r16, X+
    2e52:	1d 91       	ld	r17, X+
    2e54:	2d 91       	ld	r18, X+
    2e56:	3c 91       	ld	r19, X
    2e58:	19 97       	sbiw	r26, 0x09	; 9
    2e5a:	08 0d       	add	r16, r8
    2e5c:	19 1d       	adc	r17, r9
    2e5e:	2a 1d       	adc	r18, r10
    2e60:	3b 1d       	adc	r19, r11
    2e62:	f1 01       	movw	r30, r2
    2e64:	06 83       	std	Z+6, r16	; 0x06
    2e66:	17 83       	std	Z+7, r17	; 0x07
    2e68:	20 87       	std	Z+8, r18	; 0x08
    2e6a:	31 87       	std	Z+9, r19	; 0x09
					ofs -= bcs;
    2e6c:	c8 18       	sub	r12, r8
    2e6e:	d9 08       	sbc	r13, r9
    2e70:	ea 08       	sbc	r14, r10
    2e72:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2e74:	8c 14       	cp	r8, r12
    2e76:	9d 04       	cpc	r9, r13
    2e78:	ae 04       	cpc	r10, r14
    2e7a:	bf 04       	cpc	r11, r15
    2e7c:	08 f4       	brcc	.+2      	; 0x2e80 <f_lseek+0x266>
    2e7e:	a7 cf       	rjmp	.-178    	; 0x2dce <f_lseek+0x1b4>
    2e80:	cb 01       	movw	r24, r22
    2e82:	ba 01       	movw	r22, r20
    2e84:	04 c0       	rjmp	.+8      	; 0x2e8e <f_lseek+0x274>
    2e86:	cb 01       	movw	r24, r22
    2e88:	ba 01       	movw	r22, r20
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    2e8a:	75 01       	movw	r14, r10
    2e8c:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2e8e:	d1 01       	movw	r26, r2
    2e90:	16 96       	adiw	r26, 0x06	; 6
    2e92:	0d 91       	ld	r16, X+
    2e94:	1d 91       	ld	r17, X+
    2e96:	2d 91       	ld	r18, X+
    2e98:	3c 91       	ld	r19, X
    2e9a:	19 97       	sbiw	r26, 0x09	; 9
    2e9c:	0c 0d       	add	r16, r12
    2e9e:	1d 1d       	adc	r17, r13
    2ea0:	2e 1d       	adc	r18, r14
    2ea2:	3f 1d       	adc	r19, r15
    2ea4:	f1 01       	movw	r30, r2
    2ea6:	06 83       	std	Z+6, r16	; 0x06
    2ea8:	17 83       	std	Z+7, r17	; 0x07
    2eaa:	20 87       	std	Z+8, r18	; 0x08
    2eac:	31 87       	std	Z+9, r19	; 0x09
				if (ofs % SS(fp->fs)) {
    2eae:	97 01       	movw	r18, r14
    2eb0:	86 01       	movw	r16, r12
    2eb2:	11 70       	andi	r17, 0x01	; 1
    2eb4:	22 27       	eor	r18, r18
    2eb6:	33 27       	eor	r19, r19
    2eb8:	01 2b       	or	r16, r17
    2eba:	02 2b       	or	r16, r18
    2ebc:	03 2b       	or	r16, r19
    2ebe:	11 f1       	breq	.+68     	; 0x2f04 <f_lseek+0x2ea>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2ec0:	ab 01       	movw	r20, r22
    2ec2:	bc 01       	movw	r22, r24
    2ec4:	80 81       	ld	r24, Z
    2ec6:	91 81       	ldd	r25, Z+1	; 0x01
    2ec8:	0e 94 b8 0a 	call	0x1570	; 0x1570 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2ecc:	61 15       	cp	r22, r1
    2ece:	71 05       	cpc	r23, r1
    2ed0:	81 05       	cpc	r24, r1
    2ed2:	91 05       	cpc	r25, r1
    2ed4:	29 f4       	brne	.+10     	; 0x2ee0 <f_lseek+0x2c6>
    2ed6:	82 e0       	ldi	r24, 0x02	; 2
    2ed8:	d1 01       	movw	r26, r2
    2eda:	15 96       	adiw	r26, 0x05	; 5
    2edc:	8c 93       	st	X, r24
    2ede:	77 c0       	rjmp	.+238    	; 0x2fce <f_lseek+0x3b4>
					nsect += ofs / SS(fp->fs);
    2ee0:	0b 2e       	mov	r0, r27
    2ee2:	b9 e0       	ldi	r27, 0x09	; 9
    2ee4:	f6 94       	lsr	r15
    2ee6:	e7 94       	ror	r14
    2ee8:	d7 94       	ror	r13
    2eea:	c7 94       	ror	r12
    2eec:	ba 95       	dec	r27
    2eee:	d1 f7       	brne	.-12     	; 0x2ee4 <f_lseek+0x2ca>
    2ef0:	b0 2d       	mov	r27, r0
    2ef2:	c6 0e       	add	r12, r22
    2ef4:	d7 1e       	adc	r13, r23
    2ef6:	e8 1e       	adc	r14, r24
    2ef8:	f9 1e       	adc	r15, r25
    2efa:	07 c0       	rjmp	.+14     	; 0x2f0a <f_lseek+0x2f0>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2efc:	c1 2c       	mov	r12, r1
    2efe:	d1 2c       	mov	r13, r1
    2f00:	76 01       	movw	r14, r12
    2f02:	03 c0       	rjmp	.+6      	; 0x2f0a <f_lseek+0x2f0>
    2f04:	c1 2c       	mov	r12, r1
    2f06:	d1 2c       	mov	r13, r1
    2f08:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    2f0a:	f1 01       	movw	r30, r2
    2f0c:	86 81       	ldd	r24, Z+6	; 0x06
    2f0e:	97 81       	ldd	r25, Z+7	; 0x07
    2f10:	a0 85       	ldd	r26, Z+8	; 0x08
    2f12:	b1 85       	ldd	r27, Z+9	; 0x09
    2f14:	91 70       	andi	r25, 0x01	; 1
    2f16:	aa 27       	eor	r26, r26
    2f18:	bb 27       	eor	r27, r27
    2f1a:	89 2b       	or	r24, r25
    2f1c:	8a 2b       	or	r24, r26
    2f1e:	8b 2b       	or	r24, r27
    2f20:	e1 f1       	breq	.+120    	; 0x2f9a <f_lseek+0x380>
    2f22:	26 89       	ldd	r18, Z+22	; 0x16
    2f24:	37 89       	ldd	r19, Z+23	; 0x17
    2f26:	40 8d       	ldd	r20, Z+24	; 0x18
    2f28:	51 8d       	ldd	r21, Z+25	; 0x19
    2f2a:	2c 15       	cp	r18, r12
    2f2c:	3d 05       	cpc	r19, r13
    2f2e:	4e 05       	cpc	r20, r14
    2f30:	5f 05       	cpc	r21, r15
    2f32:	99 f1       	breq	.+102    	; 0x2f9a <f_lseek+0x380>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    2f34:	84 81       	ldd	r24, Z+4	; 0x04
    2f36:	86 ff       	sbrs	r24, 6
    2f38:	16 c0       	rjmp	.+44     	; 0x2f66 <f_lseek+0x34c>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    2f3a:	01 90       	ld	r0, Z+
    2f3c:	f0 81       	ld	r31, Z
    2f3e:	e0 2d       	mov	r30, r0
    2f40:	01 e0       	ldi	r16, 0x01	; 1
    2f42:	10 e0       	ldi	r17, 0x00	; 0
    2f44:	b1 01       	movw	r22, r2
    2f46:	60 5e       	subi	r22, 0xE0	; 224
    2f48:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4a:	81 81       	ldd	r24, Z+1	; 0x01
    2f4c:	0e 94 12 04 	call	0x824	; 0x824 <disk_write>
    2f50:	88 23       	and	r24, r24
    2f52:	29 f0       	breq	.+10     	; 0x2f5e <f_lseek+0x344>
					ABORT(fp->fs, FR_DISK_ERR);
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	d1 01       	movw	r26, r2
    2f58:	15 96       	adiw	r26, 0x05	; 5
    2f5a:	8c 93       	st	X, r24
    2f5c:	38 c0       	rjmp	.+112    	; 0x2fce <f_lseek+0x3b4>
				fp->flag &= ~FA__DIRTY;
    2f5e:	f1 01       	movw	r30, r2
    2f60:	84 81       	ldd	r24, Z+4	; 0x04
    2f62:	8f 7b       	andi	r24, 0xBF	; 191
    2f64:	84 83       	std	Z+4, r24	; 0x04
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
    2f66:	d1 01       	movw	r26, r2
    2f68:	ed 91       	ld	r30, X+
    2f6a:	fc 91       	ld	r31, X
    2f6c:	01 e0       	ldi	r16, 0x01	; 1
    2f6e:	10 e0       	ldi	r17, 0x00	; 0
    2f70:	a7 01       	movw	r20, r14
    2f72:	96 01       	movw	r18, r12
    2f74:	b1 01       	movw	r22, r2
    2f76:	60 5e       	subi	r22, 0xE0	; 224
    2f78:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7a:	81 81       	ldd	r24, Z+1	; 0x01
    2f7c:	0e 94 c4 03 	call	0x788	; 0x788 <disk_read>
    2f80:	88 23       	and	r24, r24
    2f82:	21 f0       	breq	.+8      	; 0x2f8c <f_lseek+0x372>
				ABORT(fp->fs, FR_DISK_ERR);
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	f1 01       	movw	r30, r2
    2f88:	85 83       	std	Z+5, r24	; 0x05
    2f8a:	21 c0       	rjmp	.+66     	; 0x2fce <f_lseek+0x3b4>
#endif
			fp->dsect = nsect;
    2f8c:	d1 01       	movw	r26, r2
    2f8e:	56 96       	adiw	r26, 0x16	; 22
    2f90:	cd 92       	st	X+, r12
    2f92:	dd 92       	st	X+, r13
    2f94:	ed 92       	st	X+, r14
    2f96:	fc 92       	st	X, r15
    2f98:	59 97       	sbiw	r26, 0x19	; 25
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    2f9a:	f1 01       	movw	r30, r2
    2f9c:	86 81       	ldd	r24, Z+6	; 0x06
    2f9e:	97 81       	ldd	r25, Z+7	; 0x07
    2fa0:	a0 85       	ldd	r26, Z+8	; 0x08
    2fa2:	b1 85       	ldd	r27, Z+9	; 0x09
    2fa4:	42 85       	ldd	r20, Z+10	; 0x0a
    2fa6:	53 85       	ldd	r21, Z+11	; 0x0b
    2fa8:	64 85       	ldd	r22, Z+12	; 0x0c
    2faa:	75 85       	ldd	r23, Z+13	; 0x0d
    2fac:	48 17       	cp	r20, r24
    2fae:	59 07       	cpc	r21, r25
    2fb0:	6a 07       	cpc	r22, r26
    2fb2:	7b 07       	cpc	r23, r27
    2fb4:	58 f4       	brcc	.+22     	; 0x2fcc <f_lseek+0x3b2>
			fp->fsize = fp->fptr;
    2fb6:	82 87       	std	Z+10, r24	; 0x0a
    2fb8:	93 87       	std	Z+11, r25	; 0x0b
    2fba:	a4 87       	std	Z+12, r26	; 0x0c
    2fbc:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    2fbe:	84 81       	ldd	r24, Z+4	; 0x04
    2fc0:	80 62       	ori	r24, 0x20	; 32
    2fc2:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	03 c0       	rjmp	.+6      	; 0x2fce <f_lseek+0x3b4>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	01 c0       	rjmp	.+2      	; 0x2fce <f_lseek+0x3b4>
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
}
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	ff 90       	pop	r15
    2fe0:	ef 90       	pop	r14
    2fe2:	df 90       	pop	r13
    2fe4:	cf 90       	pop	r12
    2fe6:	bf 90       	pop	r11
    2fe8:	af 90       	pop	r10
    2fea:	9f 90       	pop	r9
    2fec:	8f 90       	pop	r8
    2fee:	7f 90       	pop	r7
    2ff0:	6f 90       	pop	r6
    2ff2:	5f 90       	pop	r5
    2ff4:	4f 90       	pop	r4
    2ff6:	3f 90       	pop	r3
    2ff8:	2f 90       	pop	r2
    2ffa:	08 95       	ret

00002ffc <SDCardManager_Init>:

	
	//printf_P(PSTR("SD blocks: %li\r\n"), TotalBlocks);
	
	return CachedTotalBlocks;
}
    2ffc:	58 98       	cbi	0x0b, 0	; 11
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	0c 94 03 03 	jmp	0x606	; 0x606 <disk_initialize>
    3004:	08 95       	ret

00003006 <SDCardManager_WriteBlockHandler>:
 *
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
uintptr_t SDCardManager_WriteBlockHandler(uint8_t* buffer, uint8_t offset)
{
    3006:	1f 93       	push	r17
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	ec 01       	movw	r28, r24
    300e:	16 2f       	mov	r17, r22
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3010:	80 91 e8 00 	lds	r24, 0x00E8
	/* Check if the endpoint is currently empty */
	if (!(Endpoint_IsReadWriteAllowed()))
    3014:	85 fd       	sbrc	r24, 5
    3016:	09 c0       	rjmp	.+18     	; 0x302a <SDCardManager_WriteBlockHandler+0x24>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3018:	e8 ee       	ldi	r30, 0xE8	; 232
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	8b 77       	andi	r24, 0x7B	; 123
    3020:	80 83       	st	Z, r24
	{
		/* Clear the current endpoint bank */
		Endpoint_ClearOUT();
		
		/* Wait until the host has sent another packet */
		if (Endpoint_WaitUntilReady())
    3022:	0e 94 4a 23 	call	0x4694	; 0x4694 <Endpoint_WaitUntilReady>
    3026:	81 11       	cpse	r24, r1
    3028:	28 c0       	rjmp	.+80     	; 0x307a <SDCardManager_WriteBlockHandler+0x74>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    302a:	a1 ef       	ldi	r26, 0xF1	; 241
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	8c 91       	ld	r24, X
		  return 0;
	}
	
	/* Write one 16-byte chunk of data to the dataflash */
	buffer[0+offset] = Endpoint_Read_8();
    3030:	fe 01       	movw	r30, r28
    3032:	e1 0f       	add	r30, r17
    3034:	f1 1d       	adc	r31, r1
    3036:	80 83       	st	Z, r24
    3038:	8c 91       	ld	r24, X
	buffer[1+offset] = Endpoint_Read_8();
    303a:	81 83       	std	Z+1, r24	; 0x01
    303c:	8c 91       	ld	r24, X
	buffer[2+offset] = Endpoint_Read_8();
    303e:	82 83       	std	Z+2, r24	; 0x02
    3040:	8c 91       	ld	r24, X
	buffer[3+offset] = Endpoint_Read_8();
    3042:	83 83       	std	Z+3, r24	; 0x03
    3044:	8c 91       	ld	r24, X
	buffer[4+offset] = Endpoint_Read_8();
    3046:	84 83       	std	Z+4, r24	; 0x04
    3048:	8c 91       	ld	r24, X
	buffer[5+offset] = Endpoint_Read_8();
    304a:	85 83       	std	Z+5, r24	; 0x05
    304c:	8c 91       	ld	r24, X
	buffer[6+offset] = Endpoint_Read_8();
    304e:	86 83       	std	Z+6, r24	; 0x06
    3050:	8c 91       	ld	r24, X
	buffer[7+offset] = Endpoint_Read_8();
    3052:	87 83       	std	Z+7, r24	; 0x07
    3054:	8c 91       	ld	r24, X
	buffer[8+offset] = Endpoint_Read_8();
    3056:	80 87       	std	Z+8, r24	; 0x08
    3058:	8c 91       	ld	r24, X
	buffer[9+offset] = Endpoint_Read_8();
    305a:	81 87       	std	Z+9, r24	; 0x09
    305c:	8c 91       	ld	r24, X
	buffer[10+offset] = Endpoint_Read_8();
    305e:	82 87       	std	Z+10, r24	; 0x0a
    3060:	8c 91       	ld	r24, X
	buffer[11+offset] = Endpoint_Read_8();
    3062:	83 87       	std	Z+11, r24	; 0x0b
    3064:	8c 91       	ld	r24, X
	buffer[12+offset] = Endpoint_Read_8();
    3066:	84 87       	std	Z+12, r24	; 0x0c
    3068:	8c 91       	ld	r24, X
	buffer[13+offset] = Endpoint_Read_8();
    306a:	85 87       	std	Z+13, r24	; 0x0d
    306c:	8c 91       	ld	r24, X
	buffer[14+offset] = Endpoint_Read_8();
    306e:	86 87       	std	Z+14, r24	; 0x0e
    3070:	8c 91       	ld	r24, X
	buffer[15+offset] = Endpoint_Read_8();
    3072:	87 87       	std	Z+15, r24	; 0x0f
	
	return 16;
    3074:	80 e1       	ldi	r24, 0x10	; 16
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	02 c0       	rjmp	.+4      	; 0x307e <SDCardManager_WriteBlockHandler+0x78>
		/* Clear the current endpoint bank */
		Endpoint_ClearOUT();
		
		/* Wait until the host has sent another packet */
		if (Endpoint_WaitUntilReady())
		  return 0;
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	90 e0       	ldi	r25, 0x00	; 0
	buffer[13+offset] = Endpoint_Read_8();
	buffer[14+offset] = Endpoint_Read_8();
	buffer[15+offset] = Endpoint_Read_8();
	
	return 16;
}
    307e:	df 91       	pop	r29
    3080:	cf 91       	pop	r28
    3082:	1f 91       	pop	r17
    3084:	08 95       	ret

00003086 <SDCardManager_WriteBlocks>:

void SDCardManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
    3086:	af 92       	push	r10
    3088:	bf 92       	push	r11
    308a:	cf 92       	push	r12
    308c:	df 92       	push	r13
    308e:	ef 92       	push	r14
    3090:	ff 92       	push	r15
    3092:	0f 93       	push	r16
    3094:	1f 93       	push	r17
    3096:	cf 93       	push	r28
    3098:	df 93       	push	r29
    309a:	5c 01       	movw	r10, r24
    309c:	6a 01       	movw	r12, r20
    309e:	7b 01       	movw	r14, r22
    30a0:	e9 01       	movw	r28, r18
	uint8_t  BytesWritten = 0;

//	printf_P(PSTR("W %li %i\r\n"), BlockAddress, TotalBlocks);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    30a2:	0e 94 4a 23 	call	0x4694	; 0x4694 <Endpoint_WaitUntilReady>
    30a6:	88 23       	and	r24, r24
    30a8:	c9 f0       	breq	.+50     	; 0x30dc <SDCardManager_WriteBlocks+0x56>
    30aa:	26 c0       	rjmp	.+76     	; 0x30f8 <SDCardManager_WriteBlocks+0x72>
	  return;
	
	while (TotalBlocks)
	{
	//	sd_raw_write_interval(BlockAddress *  VIRTUAL_MEMORY_BLOCK_SIZE, Buffer, VIRTUAL_MEMORY_BLOCK_SIZE, &SDCardManager_WriteBlockHandler, NULL);
	disk_write (0, Buffer, BlockAddress, 1);//write to disk 0, from Buffer array, into BlockAddress, Write only 1 sector (block);
    30ac:	01 e0       	ldi	r16, 0x01	; 1
    30ae:	10 e0       	ldi	r17, 0x00	; 0
    30b0:	a7 01       	movw	r20, r14
    30b2:	96 01       	movw	r18, r12
    30b4:	69 ee       	ldi	r22, 0xE9	; 233
    30b6:	71 e0       	ldi	r23, 0x01	; 1
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	0e 94 12 04 	call	0x824	; 0x824 <disk_write>
	SDCardManager_WriteBlockHandler(Buffer, BytesWritten);
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	89 ee       	ldi	r24, 0xE9	; 233
    30c2:	91 e0       	ldi	r25, 0x01	; 1
    30c4:	a0 df       	rcall	.-192    	; 0x3006 <SDCardManager_WriteBlockHandler>
	
		/* Decrement the blocks remaining counter and reset the sub block counter */
		BlockAddress++;
    30c6:	8f ef       	ldi	r24, 0xFF	; 255
    30c8:	c8 1a       	sub	r12, r24
    30ca:	d8 0a       	sbc	r13, r24
    30cc:	e8 0a       	sbc	r14, r24
    30ce:	f8 0a       	sbc	r15, r24
		TotalBlocks--;
    30d0:	21 97       	sbiw	r28, 0x01	; 1
		
		if (MSInterfaceInfo->State.IsMassStoreReset)
    30d2:	f5 01       	movw	r30, r10
    30d4:	80 ad       	ldd	r24, Z+56	; 0x38
    30d6:	88 23       	and	r24, r24
    30d8:	21 f0       	breq	.+8      	; 0x30e2 <SDCardManager_WriteBlocks+0x5c>
    30da:	0e c0       	rjmp	.+28     	; 0x30f8 <SDCardManager_WriteBlocks+0x72>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
    30dc:	20 97       	sbiw	r28, 0x00	; 0
    30de:	31 f7       	brne	.-52     	; 0x30ac <SDCardManager_WriteBlocks+0x26>
    30e0:	02 c0       	rjmp	.+4      	; 0x30e6 <SDCardManager_WriteBlocks+0x60>
    30e2:	20 97       	sbiw	r28, 0x00	; 0
    30e4:	19 f7       	brne	.-58     	; 0x30ac <SDCardManager_WriteBlocks+0x26>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    30e6:	80 91 e8 00 	lds	r24, 0x00E8
			
		
	}

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    30ea:	85 fd       	sbrc	r24, 5
    30ec:	05 c0       	rjmp	.+10     	; 0x30f8 <SDCardManager_WriteBlocks+0x72>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    30ee:	e8 ee       	ldi	r30, 0xE8	; 232
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	8b 77       	andi	r24, 0x7B	; 123
    30f6:	80 83       	st	Z, r24
	  Endpoint_ClearOUT();
}
    30f8:	df 91       	pop	r29
    30fa:	cf 91       	pop	r28
    30fc:	1f 91       	pop	r17
    30fe:	0f 91       	pop	r16
    3100:	ff 90       	pop	r15
    3102:	ef 90       	pop	r14
    3104:	df 90       	pop	r13
    3106:	cf 90       	pop	r12
    3108:	bf 90       	pop	r11
    310a:	af 90       	pop	r10
    310c:	08 95       	ret

0000310e <SDCardManager_ReadBlockHandler>:
 *  \param[in] BlockAddress  Data block starting address for the read sequence
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */

uint8_t SDCardManager_ReadBlockHandler(uint8_t* buffer, uint8_t offset)
{
    310e:	1f 93       	push	r17
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
    3114:	ec 01       	movw	r28, r24
    3116:	16 2f       	mov	r17, r22
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3118:	80 91 e8 00 	lds	r24, 0x00E8
	

	/* Check if the endpoint is currently full */
	if (!(Endpoint_IsReadWriteAllowed()))
    311c:	85 fd       	sbrc	r24, 5
    311e:	09 c0       	rjmp	.+18     	; 0x3132 <SDCardManager_ReadBlockHandler+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3120:	e8 ee       	ldi	r30, 0xE8	; 232
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	8e 77       	andi	r24, 0x7E	; 126
    3128:	80 83       	st	Z, r24
	{
		/* Clear the endpoint bank to send its contents to the host */
		Endpoint_ClearIN();
		
		/* Wait until the endpoint is ready for more data */
		if (Endpoint_WaitUntilReady())
    312a:	0e 94 4a 23 	call	0x4694	; 0x4694 <Endpoint_WaitUntilReady>
    312e:	81 11       	cpse	r24, r1
    3130:	44 c0       	rjmp	.+136    	; 0x31ba <SDCardManager_ReadBlockHandler+0xac>
		  return 0;
	}
		
	Endpoint_Write_8(buffer[0+offset]);
    3132:	de 01       	movw	r26, r28
    3134:	a1 0f       	add	r26, r17
    3136:	b1 1d       	adc	r27, r1
    3138:	8c 91       	ld	r24, X
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    313a:	e1 ef       	ldi	r30, 0xF1	; 241
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[1+offset]);
    3140:	11 96       	adiw	r26, 0x01	; 1
    3142:	8c 91       	ld	r24, X
    3144:	11 97       	sbiw	r26, 0x01	; 1
    3146:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[2+offset]);
    3148:	12 96       	adiw	r26, 0x02	; 2
    314a:	8c 91       	ld	r24, X
    314c:	12 97       	sbiw	r26, 0x02	; 2
    314e:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[3+offset]);
    3150:	13 96       	adiw	r26, 0x03	; 3
    3152:	8c 91       	ld	r24, X
    3154:	13 97       	sbiw	r26, 0x03	; 3
    3156:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[4+offset]);
    3158:	14 96       	adiw	r26, 0x04	; 4
    315a:	8c 91       	ld	r24, X
    315c:	14 97       	sbiw	r26, 0x04	; 4
    315e:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[5+offset]);
    3160:	15 96       	adiw	r26, 0x05	; 5
    3162:	8c 91       	ld	r24, X
    3164:	15 97       	sbiw	r26, 0x05	; 5
    3166:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[6+offset]);
    3168:	16 96       	adiw	r26, 0x06	; 6
    316a:	8c 91       	ld	r24, X
    316c:	16 97       	sbiw	r26, 0x06	; 6
    316e:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[7+offset]);
    3170:	17 96       	adiw	r26, 0x07	; 7
    3172:	8c 91       	ld	r24, X
    3174:	17 97       	sbiw	r26, 0x07	; 7
    3176:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[8+offset]);
    3178:	18 96       	adiw	r26, 0x08	; 8
    317a:	8c 91       	ld	r24, X
    317c:	18 97       	sbiw	r26, 0x08	; 8
    317e:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[9+offset]);
    3180:	19 96       	adiw	r26, 0x09	; 9
    3182:	8c 91       	ld	r24, X
    3184:	19 97       	sbiw	r26, 0x09	; 9
    3186:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[10+offset]);
    3188:	1a 96       	adiw	r26, 0x0a	; 10
    318a:	8c 91       	ld	r24, X
    318c:	1a 97       	sbiw	r26, 0x0a	; 10
    318e:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[11+offset]);
    3190:	1b 96       	adiw	r26, 0x0b	; 11
    3192:	8c 91       	ld	r24, X
    3194:	1b 97       	sbiw	r26, 0x0b	; 11
    3196:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[12+offset]);
    3198:	1c 96       	adiw	r26, 0x0c	; 12
    319a:	8c 91       	ld	r24, X
    319c:	1c 97       	sbiw	r26, 0x0c	; 12
    319e:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[13+offset]);
    31a0:	1d 96       	adiw	r26, 0x0d	; 13
    31a2:	8c 91       	ld	r24, X
    31a4:	1d 97       	sbiw	r26, 0x0d	; 13
    31a6:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[14+offset]);
    31a8:	1e 96       	adiw	r26, 0x0e	; 14
    31aa:	8c 91       	ld	r24, X
    31ac:	1e 97       	sbiw	r26, 0x0e	; 14
    31ae:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[15+offset]);
    31b0:	1f 96       	adiw	r26, 0x0f	; 15
    31b2:	8c 91       	ld	r24, X
    31b4:	80 83       	st	Z, r24
	
	/* Check if the current command is being aborted by the host */
//	if (IsMassStoreReset)
//	  return 0;
	
	return 1;
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	01 c0       	rjmp	.+2      	; 0x31bc <SDCardManager_ReadBlockHandler+0xae>
		/* Clear the endpoint bank to send its contents to the host */
		Endpoint_ClearIN();
		
		/* Wait until the endpoint is ready for more data */
		if (Endpoint_WaitUntilReady())
		  return 0;
    31ba:	80 e0       	ldi	r24, 0x00	; 0
	/* Check if the current command is being aborted by the host */
//	if (IsMassStoreReset)
//	  return 0;
	
	return 1;
}
    31bc:	df 91       	pop	r29
    31be:	cf 91       	pop	r28
    31c0:	1f 91       	pop	r17
    31c2:	08 95       	ret

000031c4 <SDCardManager_ReadBlocks>:

void SDCardManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ef 92       	push	r14
    31ca:	ff 92       	push	r15
    31cc:	0f 93       	push	r16
    31ce:	1f 93       	push	r17
    31d0:	cf 93       	push	r28
    31d2:	df 93       	push	r29
    31d4:	6a 01       	movw	r12, r20
    31d6:	7b 01       	movw	r14, r22
    31d8:	e9 01       	movw	r28, r18
	uint8_t BytesRead			= 0;

//	printf_P(PSTR("R %li %i\r\n"), BlockAddress, TotalBlocks);
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    31da:	0e 94 4a 23 	call	0x4694	; 0x4694 <Endpoint_WaitUntilReady>
    31de:	88 23       	and	r24, r24
    31e0:	81 f0       	breq	.+32     	; 0x3202 <SDCardManager_ReadBlocks+0x3e>
    31e2:	1a c0       	rjmp	.+52     	; 0x3218 <SDCardManager_ReadBlocks+0x54>
	while (TotalBlocks)
	{
		/* Read a data block from the SD card */
		//sd_raw_read_interval(BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE, Buffer, 16, 512, &SDCardManager_ReadBlockHandler, NULL);
		
		disk_read (0, Buffer, BlockAddress, 1);//  read disk 0,  into buffer,  starting at block address,  read only 1 sector (block=sector)
    31e4:	01 e0       	ldi	r16, 0x01	; 1
    31e6:	10 e0       	ldi	r17, 0x00	; 0
    31e8:	a7 01       	movw	r20, r14
    31ea:	96 01       	movw	r18, r12
    31ec:	69 ee       	ldi	r22, 0xE9	; 233
    31ee:	71 e0       	ldi	r23, 0x01	; 1
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	0e 94 c4 03 	call	0x788	; 0x788 <disk_read>
void SDCardManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
	uint16_t CurrPage          = BlockAddress;
	uint16_t CurrPageByte      = 0;
	
	uint8_t BytesRead			= 0;
    31f6:	80 e0       	ldi	r24, 0x00	; 0
		/* Read a data block from the SD card */
		//sd_raw_read_interval(BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE, Buffer, 16, 512, &SDCardManager_ReadBlockHandler, NULL);
		
		disk_read (0, Buffer, BlockAddress, 1);//  read disk 0,  into buffer,  starting at block address,  read only 1 sector (block=sector)
		while(BytesRead<512){  //send the results to the usb endpoint buffer, 16 bytes at a time.
			BytesRead = SDCardManager_ReadBlockHandler(Buffer, BytesRead); // Bytes Read increases 16 every time handler is called, if all goes well.
    31f8:	68 2f       	mov	r22, r24
    31fa:	89 ee       	ldi	r24, 0xE9	; 233
    31fc:	91 e0       	ldi	r25, 0x01	; 1
    31fe:	87 df       	rcall	.-242    	; 0x310e <SDCardManager_ReadBlockHandler>
    3200:	fb cf       	rjmp	.-10     	; 0x31f8 <SDCardManager_ReadBlocks+0x34>
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
    3202:	cd 2b       	or	r28, r29
    3204:	79 f7       	brne	.-34     	; 0x31e4 <SDCardManager_ReadBlocks+0x20>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3206:	80 91 e8 00 	lds	r24, 0x00E8
				return;
		
	}
	
	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    320a:	85 fd       	sbrc	r24, 5
    320c:	05 c0       	rjmp	.+10     	; 0x3218 <SDCardManager_ReadBlocks+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    320e:	e8 ee       	ldi	r30, 0xE8	; 232
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	8e 77       	andi	r24, 0x7E	; 126
    3216:	80 83       	st	Z, r24
	  Endpoint_ClearIN();
}
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	1f 91       	pop	r17
    321e:	0f 91       	pop	r16
    3220:	ff 90       	pop	r15
    3222:	ef 90       	pop	r14
    3224:	df 90       	pop	r13
    3226:	cf 90       	pop	r12
    3228:	08 95       	ret

0000322a <SDCardManager_CheckDataflashOperation>:
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool SDCardManager_CheckDataflashOperation(void)
{	
	return true;
}
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	08 95       	ret

0000322e <__vector_17>:



/** ISR to handle the 500ms ticks for sampling and data logging */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    322e:	1f 92       	push	r1
    3230:	0f 92       	push	r0
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	0f 92       	push	r0
    3236:	11 24       	eor	r1, r1
    3238:	2f 93       	push	r18
    323a:	3f 93       	push	r19
    323c:	4f 93       	push	r20
    323e:	5f 93       	push	r21
    3240:	6f 93       	push	r22
    3242:	7f 93       	push	r23
    3244:	8f 93       	push	r24
    3246:	9f 93       	push	r25
    3248:	af 93       	push	r26
    324a:	bf 93       	push	r27
    324c:	ef 93       	push	r30
    324e:	ff 93       	push	r31
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
    3258:	c6 56       	subi	r28, 0x66	; 102
    325a:	d1 09       	sbc	r29, r1
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	cd bf       	out	0x3d, r28	; 61
	/* Only log when not connected to a USB host */
	if (USB_DeviceState != DEVICE_STATE_Configured)
    3260:	8e b3       	in	r24, 0x1e	; 30
    3262:	84 30       	cpi	r24, 0x04	; 4
    3264:	e9 f0       	breq	.+58     	; 0x32a0 <__vector_17+0x72>
	{
		char     LineBuffer[100];
		uint16_t BytesWritten;

		BytesWritten = sprintf(LineBuffer, "TEST1 TEST2 TEST3/r/n");//write the letter a to the write buffer.  BytesWritten is the number of bytes, conveniently returned by sprintf
    3266:	86 e1       	ldi	r24, 0x16	; 22
    3268:	ef e9       	ldi	r30, 0x9F	; 159
    326a:	f1 e0       	ldi	r31, 0x01	; 1
    326c:	de 01       	movw	r26, r28
    326e:	11 96       	adiw	r26, 0x01	; 1
    3270:	01 90       	ld	r0, Z+
    3272:	0d 92       	st	X+, r0
    3274:	8a 95       	dec	r24
    3276:	e1 f7       	brne	.-8      	; 0x3270 <__vector_17+0x42>
    3278:	85 e1       	ldi	r24, 0x15	; 21
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	a7 96       	adiw	r28, 0x27	; 39
    327e:	9f af       	std	Y+63, r25	; 0x3f
    3280:	8e af       	std	Y+62, r24	; 0x3e
    3282:	a7 97       	sbiw	r28, 0x27	; 39
		
		f_write(&TempLogFile, LineBuffer, BytesWritten, &BytesWritten);
    3284:	9e 01       	movw	r18, r28
    3286:	2b 59       	subi	r18, 0x9B	; 155
    3288:	3f 4f       	sbci	r19, 0xFF	; 255
    328a:	45 e1       	ldi	r20, 0x15	; 21
    328c:	50 e0       	ldi	r21, 0x00	; 0
    328e:	be 01       	movw	r22, r28
    3290:	6f 5f       	subi	r22, 0xFF	; 255
    3292:	7f 4f       	sbci	r23, 0xFF	; 255
    3294:	8c ee       	ldi	r24, 0xEC	; 236
    3296:	93 e0       	ldi	r25, 0x03	; 3
    3298:	62 da       	rcall	.-2876   	; 0x275e <f_write>
		f_sync(&TempLogFile);
    329a:	8c ee       	ldi	r24, 0xEC	; 236
    329c:	93 e0       	ldi	r25, 0x03	; 3
    329e:	4e dc       	rcall	.-1892   	; 0x2b3c <f_sync>
	}
}
    32a0:	ca 59       	subi	r28, 0x9A	; 154
    32a2:	df 4f       	sbci	r29, 0xFF	; 255
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	f8 94       	cli
    32a8:	de bf       	out	0x3e, r29	; 62
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	cd bf       	out	0x3d, r28	; 61
    32ae:	df 91       	pop	r29
    32b0:	cf 91       	pop	r28
    32b2:	ff 91       	pop	r31
    32b4:	ef 91       	pop	r30
    32b6:	bf 91       	pop	r27
    32b8:	af 91       	pop	r26
    32ba:	9f 91       	pop	r25
    32bc:	8f 91       	pop	r24
    32be:	7f 91       	pop	r23
    32c0:	6f 91       	pop	r22
    32c2:	5f 91       	pop	r21
    32c4:	4f 91       	pop	r20
    32c6:	3f 91       	pop	r19
    32c8:	2f 91       	pop	r18
    32ca:	0f 90       	pop	r0
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	0f 90       	pop	r0
    32d0:	1f 90       	pop	r1
    32d2:	18 95       	reti

000032d4 <OpenLogFile>:
	}
}

/** Opens the log file on the Dataflash's FAT formatted partition according to the current date */
void OpenLogFile(void)
{
    32d4:	cf 93       	push	r28
    32d6:	df 93       	push	r29
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
    32dc:	2c 97       	sbiw	r28, 0x0c	; 12
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	cd bf       	out	0x3d, r28	; 61
	char LogFileName[12]; // max length of file name is 12 characters, I guess
	static uint16_t FileNumber=0; // defaults to 0
	FileNumber ++; //Increment the Filenumber
    32e8:	80 91 e9 03 	lds	r24, 0x03E9
    32ec:	90 91 ea 03 	lds	r25, 0x03EA
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	90 93 ea 03 	sts	0x03EA, r25
    32f6:	80 93 e9 03 	sts	0x03E9, r24
	/* Get the current date for the filename as "DDMMYY.csv" */
	sprintf(LogFileName, "F%05d.csv", FileNumber);
    32fa:	9f 93       	push	r25
    32fc:	8f 93       	push	r24
    32fe:	85 eb       	ldi	r24, 0xB5	; 181
    3300:	91 e0       	ldi	r25, 0x01	; 1
    3302:	9f 93       	push	r25
    3304:	8f 93       	push	r24
    3306:	ce 01       	movw	r24, r28
    3308:	01 96       	adiw	r24, 0x01	; 1
    330a:	9f 93       	push	r25
    330c:	8f 93       	push	r24
    330e:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <sprintf>
	FRESULT diskstatus;


	
	diskstatus = f_mount(&DiskFATState,"",1);
    3312:	41 e0       	ldi	r20, 0x01	; 1
    3314:	6e e9       	ldi	r22, 0x9E	; 158
    3316:	71 e0       	ldi	r23, 0x01	; 1
    3318:	8c e0       	ldi	r24, 0x0C	; 12
    331a:	96 e0       	ldi	r25, 0x06	; 6
    331c:	a4 d8       	rcall	.-3768   	; 0x2466 <f_mount>
	if (diskstatus == FR_DISK_ERR){set_low(LED1);while(1);}
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	81 30       	cpi	r24, 0x01	; 1
    332c:	11 f4       	brne	.+4      	; 0x3332 <OpenLogFile+0x5e>
    332e:	89 98       	cbi	0x11, 1	; 17
    3330:	ff cf       	rjmp	.-2      	; 0x3330 <OpenLogFile+0x5c>
//		if(diskstatus == FR_NO_FILESYSTEM){//if there is no file system,
//			set_low(LED1);
//			diskstatus = f_mkfs("", 0,0); //make a new fat file system in default partition with automatically determined sector size.
//		}
//		set_high(LED1);
	if (diskstatus == FR_OK){
    3332:	81 11       	cpse	r24, r1
    3334:	16 c0       	rjmp	.+44     	; 0x3362 <OpenLogFile+0x8e>
		set_low(LED1);
    3336:	89 98       	cbi	0x11, 1	; 17
		f_open(&TempLogFile, LogFileName, FA_OPEN_ALWAYS | FA_WRITE);
    3338:	42 e1       	ldi	r20, 0x12	; 18
    333a:	be 01       	movw	r22, r28
    333c:	6f 5f       	subi	r22, 0xFF	; 255
    333e:	7f 4f       	sbci	r23, 0xFF	; 255
    3340:	8c ee       	ldi	r24, 0xEC	; 236
    3342:	93 e0       	ldi	r25, 0x03	; 3
    3344:	e3 d8       	rcall	.-3642   	; 0x250c <f_open>
		f_lseek(&TempLogFile, TempLogFile.fsize);
    3346:	40 91 f6 03 	lds	r20, 0x03F6
    334a:	50 91 f7 03 	lds	r21, 0x03F7
    334e:	60 91 f8 03 	lds	r22, 0x03F8
    3352:	70 91 f9 03 	lds	r23, 0x03F9
    3356:	8c ee       	ldi	r24, 0xEC	; 236
    3358:	93 e0       	ldi	r25, 0x03	; 3
    335a:	5f dc       	rcall	.-1858   	; 0x2c1a <f_lseek>
		FileIsOpen = true;
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	80 93 eb 03 	sts	0x03EB, r24

	}
}
    3362:	2c 96       	adiw	r28, 0x0c	; 12
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	df 91       	pop	r29
    3370:	cf 91       	pop	r28
    3372:	08 95       	ret

00003374 <CloseLogFile>:

/** Closes the open data log file on the Dataflash's FAT formatted partition */
void CloseLogFile(void)
{
	/* Sync any data waiting to be written, unmount the storage device */
	f_sync(&TempLogFile);
    3374:	8c ee       	ldi	r24, 0xEC	; 236
    3376:	93 e0       	ldi	r25, 0x03	; 3
    3378:	e1 db       	rcall	.-2110   	; 0x2b3c <f_sync>
	f_close(&TempLogFile);
    337a:	8c ee       	ldi	r24, 0xEC	; 236
    337c:	93 e0       	ldi	r25, 0x03	; 3
    337e:	3d dc       	rcall	.-1926   	; 0x2bfa <f_close>
	FileIsOpen = false;
    3380:	10 92 eb 03 	sts	0x03EB, r1
    3384:	08 95       	ret

00003386 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    3386:	84 b7       	in	r24, 0x34	; 52
    3388:	87 7f       	andi	r24, 0xF7	; 247
    338a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    338c:	88 e1       	ldi	r24, 0x18	; 24
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	80 93 60 00 	sts	0x0060, r24
    3396:	10 92 60 00 	sts	0x0060, r1
    339a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	80 e8       	ldi	r24, 0x80	; 128
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	80 93 61 00 	sts	0x0061, r24
    33a8:	90 93 61 00 	sts	0x0061, r25
    33ac:	0f be       	out	0x3f, r0	; 63
	/* Disable clock division */
	clock_prescale_set(clock_div_1);
#endif

	/* Hardware Initialization */
	Config_IO();
    33ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Config_IO>
	SDCardManager_Init();
    33b2:	24 de       	rcall	.-952    	; 0x2ffc <SDCardManager_Init>
	USB_Init();
    33b4:	0e 94 ca 23 	call	0x4794	; 0x4794 <USB_Init>

	/* Check if the Dataflash/SD is working, abort if not */ // this function does not currently do anything -- just returns true
	if (!(SDCardManager_CheckDataflashOperation()))
    33b8:	38 df       	rcall	.-400    	; 0x322a <SDCardManager_CheckDataflashOperation>
    33ba:	81 11       	cpse	r24, r1
    33bc:	01 c0       	rjmp	.+2      	; 0x33c0 <SetupHardware+0x3a>
    33be:	ff cf       	rjmp	.-2      	; 0x33be <SetupHardware+0x38>
    33c0:	08 95       	ret

000033c2 <main>:
 *  setup of all components and the main program loop.
 */
int main(void)
{

	SetupHardware();
    33c2:	e1 df       	rcall	.-62     	; 0x3386 <SetupHardware>

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
    33c4:	87 df       	rcall	.-242    	; 0x32d4 <OpenLogFile>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    33c6:	78 94       	sei
	
	GlobalInterruptEnable();

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
    33c8:	81 e1       	ldi	r24, 0x11	; 17
    33ca:	91 e0       	ldi	r25, 0x01	; 1
    33cc:	62 d4       	rcall	.+2244   	; 0x3c92 <MS_Device_USBTask>
		HID_Device_USBTask(&Generic_HID_Interface);
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	91 e0       	ldi	r25, 0x01	; 1
    33d2:	4a d3       	rcall	.+1684   	; 0x3a68 <HID_Device_USBTask>
		USB_USBTask();
    33d4:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <USB_USBTask>
		if(FileIsOpen && USB_DeviceState == DEVICE_STATE_Configured){
    33d8:	80 91 eb 03 	lds	r24, 0x03EB
    33dc:	88 23       	and	r24, r24
    33de:	29 f0       	breq	.+10     	; 0x33ea <main+0x28>
    33e0:	8e b3       	in	r24, 0x1e	; 30
    33e2:	84 30       	cpi	r24, 0x04	; 4
    33e4:	89 f7       	brne	.-30     	; 0x33c8 <main+0x6>
			CloseLogFile();
    33e6:	c6 df       	rcall	.-116    	; 0x3374 <CloseLogFile>
    33e8:	ef cf       	rjmp	.-34     	; 0x33c8 <main+0x6>
		}
		else if(!FileIsOpen){
			OpenLogFile();
    33ea:	74 df       	rcall	.-280    	; 0x32d4 <OpenLogFile>
    33ec:	ed cf       	rjmp	.-38     	; 0x33c8 <main+0x6>

000033ee <get_num_of_sectors>:
	/* Clear Dataflash sector protections, if enabled */
//	SDCardManager_ResetDataflashProtections(); //THIS FUNCTION NO LONGER EXISTS
}

uint32_t get_num_of_sectors(){
	return 	DiskFATState.fsize;
    33ee:	60 91 22 06 	lds	r22, 0x0622
    33f2:	70 91 23 06 	lds	r23, 0x0623
    33f6:	80 91 24 06 	lds	r24, 0x0624
    33fa:	90 91 25 06 	lds	r25, 0x0625
}
    33fe:	08 95       	ret

00003400 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    3400:	08 95       	ret

00003402 <EVENT_USB_Device_Disconnect>:

}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    3402:	08 95       	ret

00003404 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	91 e0       	ldi	r25, 0x01	; 1
    3408:	1b d3       	rcall	.+1590   	; 0x3a40 <HID_Device_ConfigureEndpoints>
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
    340a:	81 e1       	ldi	r24, 0x11	; 17
    340c:	91 e0       	ldi	r25, 0x01	; 1
    340e:	27 c4       	rjmp	.+2126   	; 0x3c5e <MS_Device_ConfigureEndpoints>
    3410:	08 95       	ret

00003412 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
    3412:	81 e1       	ldi	r24, 0x11	; 17
    3414:	91 e0       	ldi	r25, 0x01	; 1
    3416:	e7 d3       	rcall	.+1998   	; 0x3be6 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	91 e0       	ldi	r25, 0x01	; 1
    341c:	c7 c1       	rjmp	.+910    	; 0x37ac <HID_Device_ProcessControlRequest>
    341e:	08 95       	ret

00003420 <CALLBACK_MS_Device_SCSICommandReceived>:
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;
	
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
    3420:	75 c0       	rjmp	.+234    	; 0x350c <SCSI_DecodeSCSICommand>

	return CommandSuccess;
}
    3422:	08 95       	ret

00003424 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;

//	RTC_GetTimeDate(&ReportParams->TimeDate);

	ReportParams->LogInterval500MS = LoggingInterval500MS_SRAM;
    3428:	80 91 3a 08 	lds	r24, 0x083A
    342c:	f9 01       	movw	r30, r18
    342e:	81 83       	std	Z+1, r24	; 0x01

	*ReportSize = sizeof(Device_Report_t);
    3430:	82 e0       	ldi	r24, 0x02	; 2
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	f8 01       	movw	r30, r16
    3436:	91 83       	std	Z+1, r25	; 0x01
    3438:	80 83       	st	Z, r24
	return true;
}
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	08 95       	ret

00003442 <CALLBACK_HID_Device_ProcessHIDReport>:
{
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;


	/* If the logging interval has changed from its current value, write it to EEPROM */
	if (LoggingInterval500MS_SRAM != ReportParams->LogInterval500MS)
    3442:	f9 01       	movw	r30, r18
    3444:	61 81       	ldd	r22, Z+1	; 0x01
    3446:	80 91 3a 08 	lds	r24, 0x083A
    344a:	68 17       	cp	r22, r24
    344c:	31 f0       	breq	.+12     	; 0x345a <CALLBACK_HID_Device_ProcessHIDReport+0x18>
	{
		LoggingInterval500MS_SRAM = ReportParams->LogInterval500MS;
    344e:	60 93 3a 08 	sts	0x083A, r22
		eeprom_update_byte(&LoggingInterval500MS_EEPROM, LoggingInterval500MS_SRAM);
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	0c 94 a3 28 	jmp	0x5146	; 0x5146 <__eeupd_byte_m32u4>
    345a:	08 95       	ret

0000345c <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    345c:	bf 92       	push	r11
    345e:	cf 92       	push	r12
    3460:	df 92       	push	r13
    3462:	ef 92       	push	r14
    3464:	ff 92       	push	r15
    3466:	0f 93       	push	r16
    3468:	1f 93       	push	r17
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	ec 01       	movw	r28, r24
    3470:	b6 2e       	mov	r11, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    3472:	c8 a0       	ldd	r12, Y+32	; 0x20
    3474:	df 8c       	ldd	r13, Y+31	; 0x1f
    3476:	ee 8c       	ldd	r14, Y+30	; 0x1e
    3478:	fd 8c       	ldd	r15, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    347a:	0b a1       	ldd	r16, Y+35	; 0x23
    347c:	1a a1       	ldd	r17, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= get_num_of_sectors()-1)
    347e:	b7 df       	rcall	.-146    	; 0x33ee <get_num_of_sectors>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	a1 09       	sbc	r26, r1
    3488:	b1 09       	sbc	r27, r1
    348a:	c8 16       	cp	r12, r24
    348c:	d9 06       	cpc	r13, r25
    348e:	ea 06       	cpc	r14, r26
    3490:	fb 06       	cpc	r15, r27
    3492:	68 f0       	brcs	.+26     	; 0x34ae <SCSI_Command_ReadWrite_10+0x52>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    3494:	ec e4       	ldi	r30, 0x4C	; 76
    3496:	f1 e0       	ldi	r31, 0x01	; 1
    3498:	80 81       	ld	r24, Z
    349a:	80 7f       	andi	r24, 0xF0	; 240
    349c:	85 60       	ori	r24, 0x05	; 5
    349e:	80 83       	st	Z, r24
    34a0:	81 e2       	ldi	r24, 0x21	; 33
    34a2:	80 93 56 01 	sts	0x0156, r24
    34a6:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	25 c0       	rjmp	.+74     	; 0x34f8 <SCSI_Command_ReadWrite_10+0x9c>
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    34ae:	bb 20       	and	r11, r11
    34b0:	31 f0       	breq	.+12     	; 0x34be <SCSI_Command_ReadWrite_10+0x62>
	  //SDCardManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
	  SDCardManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    34b2:	98 01       	movw	r18, r16
    34b4:	b7 01       	movw	r22, r14
    34b6:	a6 01       	movw	r20, r12
    34b8:	ce 01       	movw	r24, r28
    34ba:	84 de       	rcall	.-760    	; 0x31c4 <SDCardManager_ReadBlocks>
    34bc:	05 c0       	rjmp	.+10     	; 0x34c8 <SCSI_Command_ReadWrite_10+0x6c>
	else
	  SDCardManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    34be:	98 01       	movw	r18, r16
    34c0:	b7 01       	movw	r22, r14
    34c2:	a6 01       	movw	r20, r12
    34c4:	ce 01       	movw	r24, r28
    34c6:	df dd       	rcall	.-1090   	; 0x3086 <SDCardManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	0f 2e       	mov	r0, r31
    34ce:	f9 e0       	ldi	r31, 0x09	; 9
    34d0:	00 0f       	add	r16, r16
    34d2:	11 1f       	adc	r17, r17
    34d4:	22 1f       	adc	r18, r18
    34d6:	33 1f       	adc	r19, r19
    34d8:	fa 95       	dec	r31
    34da:	d1 f7       	brne	.-12     	; 0x34d0 <SCSI_Command_ReadWrite_10+0x74>
    34dc:	f0 2d       	mov	r31, r0
    34de:	8c 89       	ldd	r24, Y+20	; 0x14
    34e0:	9d 89       	ldd	r25, Y+21	; 0x15
    34e2:	ae 89       	ldd	r26, Y+22	; 0x16
    34e4:	bf 89       	ldd	r27, Y+23	; 0x17
    34e6:	80 1b       	sub	r24, r16
    34e8:	91 0b       	sbc	r25, r17
    34ea:	a2 0b       	sbc	r26, r18
    34ec:	b3 0b       	sbc	r27, r19
    34ee:	8c 8b       	std	Y+20, r24	; 0x14
    34f0:	9d 8b       	std	Y+21, r25	; 0x15
    34f2:	ae 8b       	std	Y+22, r26	; 0x16
    34f4:	bf 8b       	std	Y+23, r27	; 0x17

	return true;
    34f6:	81 e0       	ldi	r24, 0x01	; 1
}
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	1f 91       	pop	r17
    34fe:	0f 91       	pop	r16
    3500:	ff 90       	pop	r15
    3502:	ef 90       	pop	r14
    3504:	df 90       	pop	r13
    3506:	cf 90       	pop	r12
    3508:	bf 90       	pop	r11
    350a:	08 95       	ret

0000350c <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    350c:	cf 92       	push	r12
    350e:	df 92       	push	r13
    3510:	ef 92       	push	r14
    3512:	ff 92       	push	r15
    3514:	0f 93       	push	r16
    3516:	1f 93       	push	r17
    3518:	cf 93       	push	r28
    351a:	df 93       	push	r29
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	28 97       	sbiw	r28, 0x08	; 8
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    352e:	fc 01       	movw	r30, r24
    3530:	83 8d       	ldd	r24, Z+27	; 0x1b
    3532:	8d 31       	cpi	r24, 0x1D	; 29
    3534:	09 f4       	brne	.+2      	; 0x3538 <SCSI_DecodeSCSICommand+0x2c>
    3536:	c2 c0       	rjmp	.+388    	; 0x36bc <SCSI_DecodeSCSICommand+0x1b0>
    3538:	88 f4       	brcc	.+34     	; 0x355c <SCSI_DecodeSCSICommand+0x50>
    353a:	82 31       	cpi	r24, 0x12	; 18
    353c:	09 f1       	breq	.+66     	; 0x3580 <SCSI_DecodeSCSICommand+0x74>
    353e:	38 f4       	brcc	.+14     	; 0x354e <SCSI_DecodeSCSICommand+0x42>
    3540:	88 23       	and	r24, r24
    3542:	09 f4       	brne	.+2      	; 0x3546 <SCSI_DecodeSCSICommand+0x3a>
    3544:	03 c1       	rjmp	.+518    	; 0x374c <SCSI_DecodeSCSICommand+0x240>
    3546:	83 30       	cpi	r24, 0x03	; 3
    3548:	09 f4       	brne	.+2      	; 0x354c <SCSI_DecodeSCSICommand+0x40>
    354a:	5a c0       	rjmp	.+180    	; 0x3600 <SCSI_DecodeSCSICommand+0xf4>
    354c:	05 c1       	rjmp	.+522    	; 0x3758 <SCSI_DecodeSCSICommand+0x24c>
    354e:	8a 31       	cpi	r24, 0x1A	; 26
    3550:	09 f4       	brne	.+2      	; 0x3554 <SCSI_DecodeSCSICommand+0x48>
    3552:	e3 c0       	rjmp	.+454    	; 0x371a <SCSI_DecodeSCSICommand+0x20e>
    3554:	8b 31       	cpi	r24, 0x1B	; 27
    3556:	09 f4       	brne	.+2      	; 0x355a <SCSI_DecodeSCSICommand+0x4e>
    3558:	f9 c0       	rjmp	.+498    	; 0x374c <SCSI_DecodeSCSICommand+0x240>
    355a:	fe c0       	rjmp	.+508    	; 0x3758 <SCSI_DecodeSCSICommand+0x24c>
    355c:	88 32       	cpi	r24, 0x28	; 40
    355e:	09 f4       	brne	.+2      	; 0x3562 <SCSI_DecodeSCSICommand+0x56>
    3560:	d8 c0       	rjmp	.+432    	; 0x3712 <SCSI_DecodeSCSICommand+0x206>
    3562:	38 f4       	brcc	.+14     	; 0x3572 <SCSI_DecodeSCSICommand+0x66>
    3564:	8e 31       	cpi	r24, 0x1E	; 30
    3566:	09 f4       	brne	.+2      	; 0x356a <SCSI_DecodeSCSICommand+0x5e>
    3568:	f1 c0       	rjmp	.+482    	; 0x374c <SCSI_DecodeSCSICommand+0x240>
    356a:	85 32       	cpi	r24, 0x25	; 37
    356c:	09 f4       	brne	.+2      	; 0x3570 <SCSI_DecodeSCSICommand+0x64>
    356e:	74 c0       	rjmp	.+232    	; 0x3658 <SCSI_DecodeSCSICommand+0x14c>
    3570:	f3 c0       	rjmp	.+486    	; 0x3758 <SCSI_DecodeSCSICommand+0x24c>
    3572:	8a 32       	cpi	r24, 0x2A	; 42
    3574:	09 f4       	brne	.+2      	; 0x3578 <SCSI_DecodeSCSICommand+0x6c>
    3576:	c9 c0       	rjmp	.+402    	; 0x370a <SCSI_DecodeSCSICommand+0x1fe>
    3578:	8f 32       	cpi	r24, 0x2F	; 47
    357a:	09 f4       	brne	.+2      	; 0x357e <SCSI_DecodeSCSICommand+0x72>
    357c:	e7 c0       	rjmp	.+462    	; 0x374c <SCSI_DecodeSCSICommand+0x240>
    357e:	ec c0       	rjmp	.+472    	; 0x3758 <SCSI_DecodeSCSICommand+0x24c>
    3580:	f8 01       	movw	r30, r16
    3582:	c7 8c       	ldd	r12, Z+31	; 0x1f
    3584:	d6 8c       	ldd	r13, Z+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    3586:	84 8d       	ldd	r24, Z+28	; 0x1c
    3588:	83 70       	andi	r24, 0x03	; 3
    358a:	19 f4       	brne	.+6      	; 0x3592 <SCSI_DecodeSCSICommand+0x86>
    358c:	85 8d       	ldd	r24, Z+29	; 0x1d
    358e:	88 23       	and	r24, r24
    3590:	69 f0       	breq	.+26     	; 0x35ac <SCSI_DecodeSCSICommand+0xa0>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    3592:	ec e4       	ldi	r30, 0x4C	; 76
    3594:	f1 e0       	ldi	r31, 0x01	; 1
    3596:	80 81       	ld	r24, Z
    3598:	80 7f       	andi	r24, 0xF0	; 240
    359a:	85 60       	ori	r24, 0x05	; 5
    359c:	80 83       	st	Z, r24
    359e:	84 e2       	ldi	r24, 0x24	; 36
    35a0:	80 93 56 01 	sts	0x0156, r24
    35a4:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	e3 c0       	rjmp	.+454    	; 0x3772 <SCSI_DecodeSCSICommand+0x266>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    35ac:	76 01       	movw	r14, r12
    35ae:	f5 e2       	ldi	r31, 0x25	; 37
    35b0:	cf 16       	cp	r12, r31
    35b2:	d1 04       	cpc	r13, r1
    35b4:	28 f0       	brcs	.+10     	; 0x35c0 <SCSI_DecodeSCSICommand+0xb4>
    35b6:	0f 2e       	mov	r0, r31
    35b8:	f4 e2       	ldi	r31, 0x24	; 36
    35ba:	ef 2e       	mov	r14, r31
    35bc:	f1 2c       	mov	r15, r1
    35be:	f0 2d       	mov	r31, r0
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    35c0:	40 e0       	ldi	r20, 0x00	; 0
    35c2:	50 e0       	ldi	r21, 0x00	; 0
    35c4:	b7 01       	movw	r22, r14
    35c6:	8f eb       	ldi	r24, 0xBF	; 191
    35c8:	91 e0       	ldi	r25, 0x01	; 1
    35ca:	e6 d4       	rcall	.+2508   	; 0x3f98 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    35cc:	60 e0       	ldi	r22, 0x00	; 0
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	c6 01       	movw	r24, r12
    35d2:	8e 19       	sub	r24, r14
    35d4:	9f 09       	sbc	r25, r15
    35d6:	90 d4       	rcall	.+2336   	; 0x3ef8 <Endpoint_Null_Stream>
    35d8:	e8 ee       	ldi	r30, 0xE8	; 232
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	80 81       	ld	r24, Z
    35de:	8e 77       	andi	r24, 0x7E	; 126
    35e0:	80 83       	st	Z, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    35e2:	f8 01       	movw	r30, r16
    35e4:	84 89       	ldd	r24, Z+20	; 0x14
    35e6:	95 89       	ldd	r25, Z+21	; 0x15
    35e8:	a6 89       	ldd	r26, Z+22	; 0x16
    35ea:	b7 89       	ldd	r27, Z+23	; 0x17
    35ec:	8e 19       	sub	r24, r14
    35ee:	9f 09       	sbc	r25, r15
    35f0:	a1 09       	sbc	r26, r1
    35f2:	b1 09       	sbc	r27, r1
    35f4:	84 8b       	std	Z+20, r24	; 0x14
    35f6:	95 8b       	std	Z+21, r25	; 0x15
    35f8:	a6 8b       	std	Z+22, r26	; 0x16
    35fa:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
    35fc:	81 e0       	ldi	r24, 0x01	; 1
	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
	{
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
			break;
    35fe:	b9 c0       	rjmp	.+370    	; 0x3772 <SCSI_DecodeSCSICommand+0x266>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    3600:	f8 01       	movw	r30, r16
    3602:	d7 8c       	ldd	r13, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    3604:	cd 2c       	mov	r12, r13
    3606:	f2 e1       	ldi	r31, 0x12	; 18
    3608:	fd 15       	cp	r31, r13
    360a:	20 f4       	brcc	.+8      	; 0x3614 <SCSI_DecodeSCSICommand+0x108>
    360c:	0f 2e       	mov	r0, r31
    360e:	f2 e1       	ldi	r31, 0x12	; 18
    3610:	cf 2e       	mov	r12, r31
    3612:	f0 2d       	mov	r31, r0

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    3614:	ec 2c       	mov	r14, r12
    3616:	f1 2c       	mov	r15, r1
    3618:	40 e0       	ldi	r20, 0x00	; 0
    361a:	50 e0       	ldi	r21, 0x00	; 0
    361c:	b7 01       	movw	r22, r14
    361e:	8a e4       	ldi	r24, 0x4A	; 74
    3620:	91 e0       	ldi	r25, 0x01	; 1
    3622:	ba d4       	rcall	.+2420   	; 0x3f98 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    3624:	8d 2d       	mov	r24, r13
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	8e 19       	sub	r24, r14
    362e:	9f 09       	sbc	r25, r15
    3630:	63 d4       	rcall	.+2246   	; 0x3ef8 <Endpoint_Null_Stream>
    3632:	e8 ee       	ldi	r30, 0xE8	; 232
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	80 81       	ld	r24, Z
    3638:	8e 77       	andi	r24, 0x7E	; 126
    363a:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    363c:	f8 01       	movw	r30, r16
    363e:	84 89       	ldd	r24, Z+20	; 0x14
    3640:	95 89       	ldd	r25, Z+21	; 0x15
    3642:	a6 89       	ldd	r26, Z+22	; 0x16
    3644:	b7 89       	ldd	r27, Z+23	; 0x17
    3646:	8c 19       	sub	r24, r12
    3648:	91 09       	sbc	r25, r1
    364a:	a1 09       	sbc	r26, r1
    364c:	b1 09       	sbc	r27, r1
    364e:	84 8b       	std	Z+20, r24	; 0x14
    3650:	95 8b       	std	Z+21, r25	; 0x15
    3652:	a6 8b       	std	Z+22, r26	; 0x16
    3654:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
			break;
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
			break;
    3656:	8f c0       	rjmp	.+286    	; 0x3776 <SCSI_DecodeSCSICommand+0x26a>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN;
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	92 e0       	ldi	r25, 0x02	; 2
    365c:	a0 e0       	ldi	r26, 0x00	; 0
    365e:	b0 e0       	ldi	r27, 0x00	; 0
    3660:	89 83       	std	Y+1, r24	; 0x01
    3662:	9a 83       	std	Y+2, r25	; 0x02
    3664:	ab 83       	std	Y+3, r26	; 0x03
    3666:	bc 83       	std	Y+4, r27	; 0x04

	LastBlockAddressInLUN = get_num_of_sectors()-1;
    3668:	c2 de       	rcall	.-636    	; 0x33ee <get_num_of_sectors>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	a1 09       	sbc	r26, r1
    3672:	b1 09       	sbc	r27, r1
    3674:	8d 83       	std	Y+5, r24	; 0x05
    3676:	9e 83       	std	Y+6, r25	; 0x06
    3678:	af 83       	std	Y+7, r26	; 0x07
    367a:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
    367c:	40 e0       	ldi	r20, 0x00	; 0
    367e:	50 e0       	ldi	r21, 0x00	; 0
    3680:	64 e0       	ldi	r22, 0x04	; 4
    3682:	70 e0       	ldi	r23, 0x00	; 0
    3684:	ce 01       	movw	r24, r28
    3686:	05 96       	adiw	r24, 0x05	; 5
    3688:	e3 d4       	rcall	.+2502   	; 0x4050 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    368a:	40 e0       	ldi	r20, 0x00	; 0
    368c:	50 e0       	ldi	r21, 0x00	; 0
    368e:	64 e0       	ldi	r22, 0x04	; 4
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	ce 01       	movw	r24, r28
    3694:	01 96       	adiw	r24, 0x01	; 1
    3696:	dc d4       	rcall	.+2488   	; 0x4050 <Endpoint_Write_Stream_BE>
    3698:	e8 ee       	ldi	r30, 0xE8	; 232
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	80 81       	ld	r24, Z
    369e:	8e 77       	andi	r24, 0x7E	; 126
    36a0:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    36a2:	f8 01       	movw	r30, r16
    36a4:	84 89       	ldd	r24, Z+20	; 0x14
    36a6:	95 89       	ldd	r25, Z+21	; 0x15
    36a8:	a6 89       	ldd	r26, Z+22	; 0x16
    36aa:	b7 89       	ldd	r27, Z+23	; 0x17
    36ac:	08 97       	sbiw	r24, 0x08	; 8
    36ae:	a1 09       	sbc	r26, r1
    36b0:	b1 09       	sbc	r27, r1
    36b2:	84 8b       	std	Z+20, r24	; 0x14
    36b4:	95 8b       	std	Z+21, r25	; 0x15
    36b6:	a6 8b       	std	Z+22, r26	; 0x16
    36b8:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
			break;
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
			break;
    36ba:	5d c0       	rjmp	.+186    	; 0x3776 <SCSI_DecodeSCSICommand+0x26a>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    36bc:	f8 01       	movw	r30, r16
    36be:	84 8d       	ldd	r24, Z+28	; 0x1c
    36c0:	82 fd       	sbrc	r24, 2
    36c2:	0d c0       	rjmp	.+26     	; 0x36de <SCSI_DecodeSCSICommand+0x1d2>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    36c4:	ec e4       	ldi	r30, 0x4C	; 76
    36c6:	f1 e0       	ldi	r31, 0x01	; 1
    36c8:	80 81       	ld	r24, Z
    36ca:	80 7f       	andi	r24, 0xF0	; 240
    36cc:	85 60       	ori	r24, 0x05	; 5
    36ce:	80 83       	st	Z, r24
    36d0:	84 e2       	ldi	r24, 0x24	; 36
    36d2:	80 93 56 01 	sts	0x0156, r24
    36d6:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	4a c0       	rjmp	.+148    	; 0x3772 <SCSI_DecodeSCSICommand+0x266>
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(SDCardManager_CheckDataflashOperation()))
    36de:	a5 dd       	rcall	.-1206   	; 0x322a <SDCardManager_CheckDataflashOperation>
    36e0:	81 11       	cpse	r24, r1
    36e2:	0c c0       	rjmp	.+24     	; 0x36fc <SCSI_DecodeSCSICommand+0x1f0>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    36e4:	ec e4       	ldi	r30, 0x4C	; 76
    36e6:	f1 e0       	ldi	r31, 0x01	; 1
    36e8:	80 81       	ld	r24, Z
    36ea:	80 7f       	andi	r24, 0xF0	; 240
    36ec:	84 60       	ori	r24, 0x04	; 4
    36ee:	80 83       	st	Z, r24
    36f0:	10 92 56 01 	sts	0x0156, r1
    36f4:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	3b c0       	rjmp	.+118    	; 0x3772 <SCSI_DecodeSCSICommand+0x266>
	}

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    36fc:	f8 01       	movw	r30, r16
    36fe:	14 8a       	std	Z+20, r1	; 0x14
    3700:	15 8a       	std	Z+21, r1	; 0x15
    3702:	16 8a       	std	Z+22, r1	; 0x16
    3704:	17 8a       	std	Z+23, r1	; 0x17

	return true;
    3706:	81 e0       	ldi	r24, 0x01	; 1
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
    3708:	34 c0       	rjmp	.+104    	; 0x3772 <SCSI_DecodeSCSICommand+0x266>
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    370a:	60 e0       	ldi	r22, 0x00	; 0
    370c:	c8 01       	movw	r24, r16
    370e:	a6 de       	rcall	.-692    	; 0x345c <SCSI_Command_ReadWrite_10>
			break;
    3710:	30 c0       	rjmp	.+96     	; 0x3772 <SCSI_DecodeSCSICommand+0x266>
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    3712:	61 e0       	ldi	r22, 0x01	; 1
    3714:	c8 01       	movw	r24, r16
    3716:	a2 de       	rcall	.-700    	; 0x345c <SCSI_Command_ReadWrite_10>
			break;
    3718:	2c c0       	rjmp	.+88     	; 0x3772 <SCSI_DecodeSCSICommand+0x266>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    371a:	e1 ef       	ldi	r30, 0xF1	; 241
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	10 82       	st	Z, r1
    3720:	10 82       	st	Z, r1
    3722:	10 82       	st	Z, r1
    3724:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3726:	e8 ee       	ldi	r30, 0xE8	; 232
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	8e 77       	andi	r24, 0x7E	; 126
    372e:	80 83       	st	Z, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    3730:	f8 01       	movw	r30, r16
    3732:	44 89       	ldd	r20, Z+20	; 0x14
    3734:	55 89       	ldd	r21, Z+21	; 0x15
    3736:	66 89       	ldd	r22, Z+22	; 0x16
    3738:	77 89       	ldd	r23, Z+23	; 0x17
    373a:	44 50       	subi	r20, 0x04	; 4
    373c:	51 09       	sbc	r21, r1
    373e:	61 09       	sbc	r22, r1
    3740:	71 09       	sbc	r23, r1
    3742:	44 8b       	std	Z+20, r20	; 0x14
    3744:	55 8b       	std	Z+21, r21	; 0x15
    3746:	66 8b       	std	Z+22, r22	; 0x16
    3748:	77 8b       	std	Z+23, r23	; 0x17
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
    374a:	15 c0       	rjmp	.+42     	; 0x3776 <SCSI_DecodeSCSICommand+0x26a>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    374c:	f8 01       	movw	r30, r16
    374e:	14 8a       	std	Z+20, r1	; 0x14
    3750:	15 8a       	std	Z+21, r1	; 0x15
    3752:	16 8a       	std	Z+22, r1	; 0x16
    3754:	17 8a       	std	Z+23, r1	; 0x17
			break;
    3756:	0f c0       	rjmp	.+30     	; 0x3776 <SCSI_DecodeSCSICommand+0x26a>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    3758:	ec e4       	ldi	r30, 0x4C	; 76
    375a:	f1 e0       	ldi	r31, 0x01	; 1
    375c:	80 81       	ld	r24, Z
    375e:	80 7f       	andi	r24, 0xF0	; 240
    3760:	85 60       	ori	r24, 0x05	; 5
    3762:	80 83       	st	Z, r24
    3764:	80 e2       	ldi	r24, 0x20	; 32
    3766:	80 93 56 01 	sts	0x0156, r24
    376a:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
	}

	return false;
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	0e c0       	rjmp	.+28     	; 0x378e <SCSI_DecodeSCSICommand+0x282>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    3772:	88 23       	and	r24, r24
    3774:	59 f0       	breq	.+22     	; 0x378c <SCSI_DecodeSCSICommand+0x280>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    3776:	ec e4       	ldi	r30, 0x4C	; 76
    3778:	f1 e0       	ldi	r31, 0x01	; 1
    377a:	80 81       	ld	r24, Z
    377c:	80 7f       	andi	r24, 0xF0	; 240
    377e:	80 83       	st	Z, r24
    3780:	10 92 56 01 	sts	0x0156, r1
    3784:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	01 c0       	rjmp	.+2      	; 0x378e <SCSI_DecodeSCSICommand+0x282>
	}

	return false;
    378c:	80 e0       	ldi	r24, 0x00	; 0
}
    378e:	28 96       	adiw	r28, 0x08	; 8
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	1f 91       	pop	r17
    37a0:	0f 91       	pop	r16
    37a2:	ff 90       	pop	r15
    37a4:	ef 90       	pop	r14
    37a6:	df 90       	pop	r13
    37a8:	cf 90       	pop	r12
    37aa:	08 95       	ret

000037ac <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    37ac:	3f 92       	push	r3
    37ae:	4f 92       	push	r4
    37b0:	5f 92       	push	r5
    37b2:	6f 92       	push	r6
    37b4:	7f 92       	push	r7
    37b6:	8f 92       	push	r8
    37b8:	9f 92       	push	r9
    37ba:	af 92       	push	r10
    37bc:	bf 92       	push	r11
    37be:	cf 92       	push	r12
    37c0:	df 92       	push	r13
    37c2:	ef 92       	push	r14
    37c4:	ff 92       	push	r15
    37c6:	0f 93       	push	r16
    37c8:	1f 93       	push	r17
    37ca:	cf 93       	push	r28
    37cc:	df 93       	push	r29
    37ce:	00 d0       	rcall	.+0      	; 0x37d0 <HID_Device_ProcessControlRequest+0x24>
    37d0:	1f 92       	push	r1
    37d2:	cd b7       	in	r28, 0x3d	; 61
    37d4:	de b7       	in	r29, 0x3e	; 62
    37d6:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    37d8:	ed b6       	in	r14, 0x3d	; 61
    37da:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    37dc:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    37e0:	83 ff       	sbrs	r24, 3
    37e2:	14 c1       	rjmp	.+552    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    37e4:	f6 01       	movw	r30, r12
    37e6:	80 81       	ld	r24, Z
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	20 91 45 08 	lds	r18, 0x0845
    37ee:	30 91 46 08 	lds	r19, 0x0846
    37f2:	28 17       	cp	r18, r24
    37f4:	39 07       	cpc	r19, r25
    37f6:	09 f0       	breq	.+2      	; 0x37fa <HID_Device_ProcessControlRequest+0x4e>
    37f8:	09 c1       	rjmp	.+530    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
	  return;

	switch (USB_ControlRequest.bRequest)
    37fa:	80 91 42 08 	lds	r24, 0x0842
    37fe:	83 30       	cpi	r24, 0x03	; 3
    3800:	09 f4       	brne	.+2      	; 0x3804 <HID_Device_ProcessControlRequest+0x58>
    3802:	a1 c0       	rjmp	.+322    	; 0x3946 <HID_Device_ProcessControlRequest+0x19a>
    3804:	30 f4       	brcc	.+12     	; 0x3812 <HID_Device_ProcessControlRequest+0x66>
    3806:	81 30       	cpi	r24, 0x01	; 1
    3808:	71 f0       	breq	.+28     	; 0x3826 <HID_Device_ProcessControlRequest+0x7a>
    380a:	82 30       	cpi	r24, 0x02	; 2
    380c:	09 f4       	brne	.+2      	; 0x3810 <HID_Device_ProcessControlRequest+0x64>
    380e:	e3 c0       	rjmp	.+454    	; 0x39d6 <HID_Device_ProcessControlRequest+0x22a>
    3810:	fd c0       	rjmp	.+506    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
    3812:	8a 30       	cpi	r24, 0x0A	; 10
    3814:	09 f4       	brne	.+2      	; 0x3818 <HID_Device_ProcessControlRequest+0x6c>
    3816:	c3 c0       	rjmp	.+390    	; 0x399e <HID_Device_ProcessControlRequest+0x1f2>
    3818:	8b 30       	cpi	r24, 0x0B	; 11
    381a:	09 f4       	brne	.+2      	; 0x381e <HID_Device_ProcessControlRequest+0x72>
    381c:	ac c0       	rjmp	.+344    	; 0x3976 <HID_Device_ProcessControlRequest+0x1ca>
    381e:	89 30       	cpi	r24, 0x09	; 9
    3820:	09 f0       	breq	.+2      	; 0x3824 <HID_Device_ProcessControlRequest+0x78>
    3822:	f4 c0       	rjmp	.+488    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
    3824:	52 c0       	rjmp	.+164    	; 0x38ca <HID_Device_ProcessControlRequest+0x11e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3826:	80 91 41 08 	lds	r24, 0x0841
    382a:	81 3a       	cpi	r24, 0xA1	; 161
    382c:	09 f0       	breq	.+2      	; 0x3830 <HID_Device_ProcessControlRequest+0x84>
    382e:	ee c0       	rjmp	.+476    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
    3830:	8d b6       	in	r8, 0x3d	; 61
    3832:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    3834:	1a 82       	std	Y+2, r1	; 0x02
    3836:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    3838:	e3 e4       	ldi	r30, 0x43	; 67
    383a:	f8 e0       	ldi	r31, 0x08	; 8
    383c:	80 81       	ld	r24, Z
    383e:	11 81       	ldd	r17, Z+1	; 0x01
    3840:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    3842:	f6 01       	movw	r30, r12
    3844:	40 85       	ldd	r20, Z+8	; 0x08
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	8d b7       	in	r24, 0x3d	; 61
    384a:	9e b7       	in	r25, 0x3e	; 62
    384c:	84 1b       	sub	r24, r20
    384e:	95 0b       	sbc	r25, r21
    3850:	0f b6       	in	r0, 0x3f	; 63
    3852:	f8 94       	cli
    3854:	9e bf       	out	0x3e, r25	; 62
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	8d bf       	out	0x3d, r24	; 61
    385a:	ed b7       	in	r30, 0x3d	; 61
    385c:	fe b7       	in	r31, 0x3e	; 62
    385e:	31 96       	adiw	r30, 0x01	; 1
    3860:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
    3862:	60 e0       	ldi	r22, 0x00	; 0
    3864:	70 e0       	ldi	r23, 0x00	; 0
    3866:	cf 01       	movw	r24, r30
    3868:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    386c:	4f ef       	ldi	r20, 0xFF	; 255
    386e:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    3870:	8e 01       	movw	r16, r28
    3872:	0f 5f       	subi	r16, 0xFF	; 255
    3874:	1f 4f       	sbci	r17, 0xFF	; 255
    3876:	95 01       	movw	r18, r10
    3878:	be 01       	movw	r22, r28
    387a:	6d 5f       	subi	r22, 0xFD	; 253
    387c:	7f 4f       	sbci	r23, 0xFF	; 255
    387e:	c6 01       	movw	r24, r12
    3880:	d1 dd       	rcall	.-1118   	; 0x3424 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    3882:	f6 01       	movw	r30, r12
    3884:	86 81       	ldd	r24, Z+6	; 0x06
    3886:	97 81       	ldd	r25, Z+7	; 0x07
    3888:	00 97       	sbiw	r24, 0x00	; 0
    388a:	29 f0       	breq	.+10     	; 0x3896 <HID_Device_ProcessControlRequest+0xea>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    388c:	40 85       	ldd	r20, Z+8	; 0x08
    388e:	50 e0       	ldi	r21, 0x00	; 0
    3890:	b5 01       	movw	r22, r10
    3892:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3896:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    389a:	e8 ee       	ldi	r30, 0xE8	; 232
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	87 7f       	andi	r24, 0xF7	; 247
    38a2:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    38a4:	8b 81       	ldd	r24, Y+3	; 0x03
    38a6:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    38a8:	80 93 f1 00 	sts	0x00F1, r24
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    38ac:	69 81       	ldd	r22, Y+1	; 0x01
    38ae:	7a 81       	ldd	r23, Y+2	; 0x02
    38b0:	c5 01       	movw	r24, r10
    38b2:	8c d4       	rcall	.+2328   	; 0x41cc <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    38b4:	e8 ee       	ldi	r30, 0xE8	; 232
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	80 81       	ld	r24, Z
    38ba:	8b 77       	andi	r24, 0x7B	; 123
    38bc:	80 83       	st	Z, r24
    38be:	0f b6       	in	r0, 0x3f	; 63
    38c0:	f8 94       	cli
    38c2:	9e be       	out	0x3e, r9	; 62
    38c4:	0f be       	out	0x3f, r0	; 63
    38c6:	8d be       	out	0x3d, r8	; 61
    38c8:	a1 c0       	rjmp	.+322    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    38ca:	80 91 41 08 	lds	r24, 0x0841
    38ce:	81 32       	cpi	r24, 0x21	; 33
    38d0:	09 f0       	breq	.+2      	; 0x38d4 <HID_Device_ProcessControlRequest+0x128>
    38d2:	9c c0       	rjmp	.+312    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
    38d4:	6d b6       	in	r6, 0x3d	; 61
    38d6:	7e b6       	in	r7, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    38d8:	a0 90 47 08 	lds	r10, 0x0847
    38dc:	b0 90 48 08 	lds	r11, 0x0848
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    38e0:	e3 e4       	ldi	r30, 0x43	; 67
    38e2:	f8 e0       	ldi	r31, 0x08	; 8
    38e4:	50 80       	ld	r5, Z
    38e6:	41 80       	ldd	r4, Z+1	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    38e8:	8d b7       	in	r24, 0x3d	; 61
    38ea:	9e b7       	in	r25, 0x3e	; 62
    38ec:	8a 19       	sub	r24, r10
    38ee:	9b 09       	sbc	r25, r11
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	9e bf       	out	0x3e, r25	; 62
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	8d bf       	out	0x3d, r24	; 61
    38fa:	ed b7       	in	r30, 0x3d	; 61
    38fc:	fe b7       	in	r31, 0x3e	; 62
    38fe:	31 96       	adiw	r30, 0x01	; 1
    3900:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3902:	08 ee       	ldi	r16, 0xE8	; 232
    3904:	10 e0       	ldi	r17, 0x00	; 0
    3906:	f8 01       	movw	r30, r16
    3908:	80 81       	ld	r24, Z
    390a:	87 7f       	andi	r24, 0xF7	; 247
    390c:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    390e:	b5 01       	movw	r22, r10
    3910:	c4 01       	movw	r24, r8
    3912:	df d4       	rcall	.+2494   	; 0x42d2 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3914:	f8 01       	movw	r30, r16
    3916:	80 81       	ld	r24, Z
    3918:	8e 77       	andi	r24, 0x7E	; 126
    391a:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    391c:	21 e0       	ldi	r18, 0x01	; 1
    391e:	51 10       	cpse	r5, r1
    3920:	01 c0       	rjmp	.+2      	; 0x3924 <HID_Device_ProcessControlRequest+0x178>
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	85 01       	movw	r16, r10
    3928:	02 1b       	sub	r16, r18
    392a:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    392c:	28 0d       	add	r18, r8
    392e:	39 1d       	adc	r19, r9
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    3930:	4f ef       	ldi	r20, 0xFF	; 255
    3932:	44 0d       	add	r20, r4

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    3934:	65 2d       	mov	r22, r5
    3936:	c6 01       	movw	r24, r12
    3938:	84 dd       	rcall	.-1272   	; 0x3442 <CALLBACK_HID_Device_ProcessHIDReport>
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	f8 94       	cli
    393e:	7e be       	out	0x3e, r7	; 62
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	6d be       	out	0x3d, r6	; 61
    3944:	63 c0       	rjmp	.+198    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3946:	80 91 41 08 	lds	r24, 0x0841
    394a:	81 3a       	cpi	r24, 0xA1	; 161
    394c:	09 f0       	breq	.+2      	; 0x3950 <HID_Device_ProcessControlRequest+0x1a4>
    394e:	5e c0       	rjmp	.+188    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3950:	e8 ee       	ldi	r30, 0xE8	; 232
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	87 7f       	andi	r24, 0xF7	; 247
    3958:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    395a:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    395c:	80 ff       	sbrs	r24, 0
    395e:	fd cf       	rjmp	.-6      	; 0x395a <HID_Device_ProcessControlRequest+0x1ae>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    3960:	f6 01       	movw	r30, r12
    3962:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3964:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3968:	e8 ee       	ldi	r30, 0xE8	; 232
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	8e 77       	andi	r24, 0x7E	; 126
    3970:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    3972:	6e d6       	rcall	.+3292   	; 0x4650 <Endpoint_ClearStatusStage>
    3974:	4b c0       	rjmp	.+150    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3976:	80 91 41 08 	lds	r24, 0x0841
    397a:	81 32       	cpi	r24, 0x21	; 33
    397c:	09 f0       	breq	.+2      	; 0x3980 <HID_Device_ProcessControlRequest+0x1d4>
    397e:	46 c0       	rjmp	.+140    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3980:	e8 ee       	ldi	r30, 0xE8	; 232
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	80 81       	ld	r24, Z
    3986:	87 7f       	andi	r24, 0xF7	; 247
    3988:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    398a:	62 d6       	rcall	.+3268   	; 0x4650 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    398c:	90 91 43 08 	lds	r25, 0x0843
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	91 11       	cpse	r25, r1
    3994:	01 c0       	rjmp	.+2      	; 0x3998 <HID_Device_ProcessControlRequest+0x1ec>
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	f6 01       	movw	r30, r12
    399a:	81 87       	std	Z+9, r24	; 0x09
    399c:	37 c0       	rjmp	.+110    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    399e:	80 91 41 08 	lds	r24, 0x0841
    39a2:	81 32       	cpi	r24, 0x21	; 33
    39a4:	99 f5       	brne	.+102    	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
    39a6:	e8 ee       	ldi	r30, 0xE8	; 232
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	80 81       	ld	r24, Z
    39ac:	87 7f       	andi	r24, 0xF7	; 247
    39ae:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    39b0:	4f d6       	rcall	.+3230   	; 0x4650 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    39b2:	80 91 43 08 	lds	r24, 0x0843
    39b6:	90 91 44 08 	lds	r25, 0x0844
    39ba:	88 27       	eor	r24, r24
    39bc:	00 24       	eor	r0, r0
    39be:	88 0f       	add	r24, r24
    39c0:	99 1f       	adc	r25, r25
    39c2:	00 1c       	adc	r0, r0
    39c4:	88 0f       	add	r24, r24
    39c6:	99 1f       	adc	r25, r25
    39c8:	00 1c       	adc	r0, r0
    39ca:	89 2f       	mov	r24, r25
    39cc:	90 2d       	mov	r25, r0
    39ce:	f6 01       	movw	r30, r12
    39d0:	95 87       	std	Z+13, r25	; 0x0d
    39d2:	84 87       	std	Z+12, r24	; 0x0c
    39d4:	1b c0       	rjmp	.+54     	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    39d6:	80 91 41 08 	lds	r24, 0x0841
    39da:	81 3a       	cpi	r24, 0xA1	; 161
    39dc:	b9 f4       	brne	.+46     	; 0x3a0c <HID_Device_ProcessControlRequest+0x260>
    39de:	e8 ee       	ldi	r30, 0xE8	; 232
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	80 81       	ld	r24, Z
    39e4:	87 7f       	andi	r24, 0xF7	; 247
    39e6:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    39e8:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    39ea:	80 ff       	sbrs	r24, 0
    39ec:	fd cf       	rjmp	.-6      	; 0x39e8 <HID_Device_ProcessControlRequest+0x23c>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    39ee:	f6 01       	movw	r30, r12
    39f0:	84 85       	ldd	r24, Z+12	; 0x0c
    39f2:	95 85       	ldd	r25, Z+13	; 0x0d
    39f4:	96 95       	lsr	r25
    39f6:	87 95       	ror	r24
    39f8:	96 95       	lsr	r25
    39fa:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    39fc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3a00:	e8 ee       	ldi	r30, 0xE8	; 232
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	80 81       	ld	r24, Z
    3a06:	8e 77       	andi	r24, 0x7E	; 126
    3a08:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    3a0a:	22 d6       	rcall	.+3140   	; 0x4650 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	fe be       	out	0x3e, r15	; 62
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	ed be       	out	0x3d, r14	; 61
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	1f 91       	pop	r17
    3a22:	0f 91       	pop	r16
    3a24:	ff 90       	pop	r15
    3a26:	ef 90       	pop	r14
    3a28:	df 90       	pop	r13
    3a2a:	cf 90       	pop	r12
    3a2c:	bf 90       	pop	r11
    3a2e:	af 90       	pop	r10
    3a30:	9f 90       	pop	r9
    3a32:	8f 90       	pop	r8
    3a34:	7f 90       	pop	r7
    3a36:	6f 90       	pop	r6
    3a38:	5f 90       	pop	r5
    3a3a:	4f 90       	pop	r4
    3a3c:	3f 90       	pop	r3
    3a3e:	08 95       	ret

00003a40 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    3a40:	fc 01       	movw	r30, r24
    3a42:	39 96       	adiw	r30, 0x09	; 9
    3a44:	27 e0       	ldi	r18, 0x07	; 7
    3a46:	df 01       	movw	r26, r30
    3a48:	1d 92       	st	X+, r1
    3a4a:	2a 95       	dec	r18
    3a4c:	e9 f7       	brne	.-6      	; 0x3a48 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    3a4e:	21 e0       	ldi	r18, 0x01	; 1
    3a50:	fc 01       	movw	r30, r24
    3a52:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    3a54:	24 ef       	ldi	r18, 0xF4	; 244
    3a56:	31 e0       	ldi	r19, 0x01	; 1
    3a58:	35 87       	std	Z+13, r19	; 0x0d
    3a5a:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    3a5c:	23 e0       	ldi	r18, 0x03	; 3
    3a5e:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    3a60:	61 e0       	ldi	r22, 0x01	; 1
    3a62:	01 96       	adiw	r24, 0x01	; 1
    3a64:	98 c5       	rjmp	.+2864   	; 0x4596 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    3a66:	08 95       	ret

00003a68 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    3a68:	5f 92       	push	r5
    3a6a:	6f 92       	push	r6
    3a6c:	7f 92       	push	r7
    3a6e:	8f 92       	push	r8
    3a70:	9f 92       	push	r9
    3a72:	af 92       	push	r10
    3a74:	bf 92       	push	r11
    3a76:	cf 92       	push	r12
    3a78:	df 92       	push	r13
    3a7a:	ef 92       	push	r14
    3a7c:	ff 92       	push	r15
    3a7e:	0f 93       	push	r16
    3a80:	1f 93       	push	r17
    3a82:	cf 93       	push	r28
    3a84:	df 93       	push	r29
    3a86:	00 d0       	rcall	.+0      	; 0x3a88 <HID_Device_USBTask+0x20>
    3a88:	1f 92       	push	r1
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
    3a8e:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    3a90:	cd b6       	in	r12, 0x3d	; 61
    3a92:	de b6       	in	r13, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    3a94:	8e b3       	in	r24, 0x1e	; 30
    3a96:	84 30       	cpi	r24, 0x04	; 4
    3a98:	09 f0       	breq	.+2      	; 0x3a9c <HID_Device_USBTask+0x34>
    3a9a:	8d c0       	rjmp	.+282    	; 0x3bb6 <HID_Device_USBTask+0x14e>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3a9c:	80 91 e4 00 	lds	r24, 0x00E4
    3aa0:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    3aa4:	f7 01       	movw	r30, r14
    3aa6:	22 85       	ldd	r18, Z+10	; 0x0a
    3aa8:	33 85       	ldd	r19, Z+11	; 0x0b
    3aaa:	28 17       	cp	r18, r24
    3aac:	39 07       	cpc	r19, r25
    3aae:	09 f4       	brne	.+2      	; 0x3ab2 <HID_Device_USBTask+0x4a>
    3ab0:	82 c0       	rjmp	.+260    	; 0x3bb6 <HID_Device_USBTask+0x14e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3ab2:	81 81       	ldd	r24, Z+1	; 0x01
    3ab4:	8f 70       	andi	r24, 0x0F	; 15
    3ab6:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3aba:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    3abe:	85 ff       	sbrs	r24, 5
    3ac0:	7a c0       	rjmp	.+244    	; 0x3bb6 <HID_Device_USBTask+0x14e>
    3ac2:	8d b6       	in	r8, 0x3d	; 61
    3ac4:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    3ac6:	40 85       	ldd	r20, Z+8	; 0x08
    3ac8:	50 e0       	ldi	r21, 0x00	; 0
    3aca:	8d b7       	in	r24, 0x3d	; 61
    3acc:	9e b7       	in	r25, 0x3e	; 62
    3ace:	84 1b       	sub	r24, r20
    3ad0:	95 0b       	sbc	r25, r21
    3ad2:	0f b6       	in	r0, 0x3f	; 63
    3ad4:	f8 94       	cli
    3ad6:	9e bf       	out	0x3e, r25	; 62
    3ad8:	0f be       	out	0x3f, r0	; 63
    3ada:	8d bf       	out	0x3d, r24	; 61
    3adc:	ed b7       	in	r30, 0x3d	; 61
    3ade:	fe b7       	in	r31, 0x3e	; 62
    3ae0:	31 96       	adiw	r30, 0x01	; 1
    3ae2:	5f 01       	movw	r10, r30
		uint8_t  ReportID     = 0;
    3ae4:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    3ae6:	1a 82       	std	Y+2, r1	; 0x02
    3ae8:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    3aea:	60 e0       	ldi	r22, 0x00	; 0
    3aec:	70 e0       	ldi	r23, 0x00	; 0
    3aee:	cf 01       	movw	r24, r30
    3af0:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    3af4:	8e 01       	movw	r16, r28
    3af6:	0f 5f       	subi	r16, 0xFF	; 255
    3af8:	1f 4f       	sbci	r17, 0xFF	; 255
    3afa:	95 01       	movw	r18, r10
    3afc:	40 e0       	ldi	r20, 0x00	; 0
    3afe:	be 01       	movw	r22, r28
    3b00:	6d 5f       	subi	r22, 0xFD	; 253
    3b02:	7f 4f       	sbci	r23, 0xFF	; 255
    3b04:	c7 01       	movw	r24, r14
    3b06:	8e dc       	rcall	.-1764   	; 0x3424 <CALLBACK_HID_Device_CreateHIDReport>
    3b08:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    3b0a:	f7 01       	movw	r30, r14
    3b0c:	24 85       	ldd	r18, Z+12	; 0x0c
    3b0e:	35 85       	ldd	r19, Z+13	; 0x0d
    3b10:	23 2b       	or	r18, r19
    3b12:	41 f0       	breq	.+16     	; 0x3b24 <HID_Device_USBTask+0xbc>
    3b14:	21 e0       	ldi	r18, 0x01	; 1
    3b16:	86 85       	ldd	r24, Z+14	; 0x0e
    3b18:	97 85       	ldd	r25, Z+15	; 0x0f
    3b1a:	89 2b       	or	r24, r25
    3b1c:	09 f0       	breq	.+2      	; 0x3b20 <HID_Device_USBTask+0xb8>
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	52 2e       	mov	r5, r18
    3b22:	01 c0       	rjmp	.+2      	; 0x3b26 <HID_Device_USBTask+0xbe>
    3b24:	51 2c       	mov	r5, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    3b26:	f7 01       	movw	r30, r14
    3b28:	06 81       	ldd	r16, Z+6	; 0x06
    3b2a:	17 81       	ldd	r17, Z+7	; 0x07
    3b2c:	01 15       	cp	r16, r1
    3b2e:	11 05       	cpc	r17, r1
    3b30:	99 f0       	breq	.+38     	; 0x3b58 <HID_Device_USBTask+0xf0>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    3b32:	49 81       	ldd	r20, Y+1	; 0x01
    3b34:	5a 81       	ldd	r21, Y+2	; 0x02
    3b36:	b8 01       	movw	r22, r16
    3b38:	c5 01       	movw	r24, r10
    3b3a:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <memcmp>
    3b3e:	77 24       	eor	r7, r7
    3b40:	73 94       	inc	r7
    3b42:	89 2b       	or	r24, r25
    3b44:	09 f4       	brne	.+2      	; 0x3b48 <HID_Device_USBTask+0xe0>
    3b46:	71 2c       	mov	r7, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    3b48:	f7 01       	movw	r30, r14
    3b4a:	40 85       	ldd	r20, Z+8	; 0x08
    3b4c:	50 e0       	ldi	r21, 0x00	; 0
    3b4e:	b5 01       	movw	r22, r10
    3b50:	c8 01       	movw	r24, r16
    3b52:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <memcpy>
    3b56:	01 c0       	rjmp	.+2      	; 0x3b5a <HID_Device_USBTask+0xf2>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    3b58:	71 2c       	mov	r7, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    3b5a:	29 81       	ldd	r18, Y+1	; 0x01
    3b5c:	3a 81       	ldd	r19, Y+2	; 0x02
    3b5e:	23 2b       	or	r18, r19
    3b60:	f1 f0       	breq	.+60     	; 0x3b9e <HID_Device_USBTask+0x136>
    3b62:	61 10       	cpse	r6, r1
    3b64:	04 c0       	rjmp	.+8      	; 0x3b6e <HID_Device_USBTask+0x106>
    3b66:	71 10       	cpse	r7, r1
    3b68:	02 c0       	rjmp	.+4      	; 0x3b6e <HID_Device_USBTask+0x106>
    3b6a:	50 fe       	sbrs	r5, 0
    3b6c:	18 c0       	rjmp	.+48     	; 0x3b9e <HID_Device_USBTask+0x136>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    3b6e:	f7 01       	movw	r30, r14
    3b70:	84 85       	ldd	r24, Z+12	; 0x0c
    3b72:	95 85       	ldd	r25, Z+13	; 0x0d
    3b74:	97 87       	std	Z+15, r25	; 0x0f
    3b76:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3b78:	81 81       	ldd	r24, Z+1	; 0x01
    3b7a:	8f 70       	andi	r24, 0x0F	; 15
    3b7c:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    3b80:	8b 81       	ldd	r24, Y+3	; 0x03
    3b82:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3b84:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    3b88:	69 81       	ldd	r22, Y+1	; 0x01
    3b8a:	7a 81       	ldd	r23, Y+2	; 0x02
    3b8c:	40 e0       	ldi	r20, 0x00	; 0
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	c5 01       	movw	r24, r10
    3b92:	02 d2       	rcall	.+1028   	; 0x3f98 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3b94:	e8 ee       	ldi	r30, 0xE8	; 232
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	80 81       	ld	r24, Z
    3b9a:	8e 77       	andi	r24, 0x7E	; 126
    3b9c:	80 83       	st	Z, r24
    3b9e:	80 91 e4 00 	lds	r24, 0x00E4
    3ba2:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    3ba6:	f7 01       	movw	r30, r14
    3ba8:	93 87       	std	Z+11, r25	; 0x0b
    3baa:	82 87       	std	Z+10, r24	; 0x0a
    3bac:	0f b6       	in	r0, 0x3f	; 63
    3bae:	f8 94       	cli
    3bb0:	9e be       	out	0x3e, r9	; 62
    3bb2:	0f be       	out	0x3f, r0	; 63
    3bb4:	8d be       	out	0x3d, r8	; 61
	}
}
    3bb6:	0f b6       	in	r0, 0x3f	; 63
    3bb8:	f8 94       	cli
    3bba:	de be       	out	0x3e, r13	; 62
    3bbc:	0f be       	out	0x3f, r0	; 63
    3bbe:	cd be       	out	0x3d, r12	; 61
    3bc0:	0f 90       	pop	r0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	df 91       	pop	r29
    3bc8:	cf 91       	pop	r28
    3bca:	1f 91       	pop	r17
    3bcc:	0f 91       	pop	r16
    3bce:	ff 90       	pop	r15
    3bd0:	ef 90       	pop	r14
    3bd2:	df 90       	pop	r13
    3bd4:	cf 90       	pop	r12
    3bd6:	bf 90       	pop	r11
    3bd8:	af 90       	pop	r10
    3bda:	9f 90       	pop	r9
    3bdc:	8f 90       	pop	r8
    3bde:	7f 90       	pop	r7
    3be0:	6f 90       	pop	r6
    3be2:	5f 90       	pop	r5
    3be4:	08 95       	ret

00003be6 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    3be6:	cf 93       	push	r28
    3be8:	df 93       	push	r29
    3bea:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3bec:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    3bf0:	83 ff       	sbrs	r24, 3
    3bf2:	32 c0       	rjmp	.+100    	; 0x3c58 <MS_Device_ProcessControlRequest+0x72>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    3bf4:	88 81       	ld	r24, Y
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	20 91 45 08 	lds	r18, 0x0845
    3bfc:	30 91 46 08 	lds	r19, 0x0846
    3c00:	28 17       	cp	r18, r24
    3c02:	39 07       	cpc	r19, r25
    3c04:	49 f5       	brne	.+82     	; 0x3c58 <MS_Device_ProcessControlRequest+0x72>
	  return;

	switch (USB_ControlRequest.bRequest)
    3c06:	80 91 42 08 	lds	r24, 0x0842
    3c0a:	8e 3f       	cpi	r24, 0xFE	; 254
    3c0c:	79 f0       	breq	.+30     	; 0x3c2c <MS_Device_ProcessControlRequest+0x46>
    3c0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c10:	19 f5       	brne	.+70     	; 0x3c58 <MS_Device_ProcessControlRequest+0x72>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    3c12:	80 91 41 08 	lds	r24, 0x0841
    3c16:	81 32       	cpi	r24, 0x21	; 33
    3c18:	f9 f4       	brne	.+62     	; 0x3c58 <MS_Device_ProcessControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3c1a:	e8 ee       	ldi	r30, 0xE8	; 232
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	80 81       	ld	r24, Z
    3c20:	87 7f       	andi	r24, 0xF7	; 247
    3c22:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    3c24:	15 d5       	rcall	.+2602   	; 0x4650 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	88 af       	std	Y+56, r24	; 0x38
    3c2a:	16 c0       	rjmp	.+44     	; 0x3c58 <MS_Device_ProcessControlRequest+0x72>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3c2c:	80 91 41 08 	lds	r24, 0x0841
    3c30:	81 3a       	cpi	r24, 0xA1	; 161
    3c32:	91 f4       	brne	.+36     	; 0x3c58 <MS_Device_ProcessControlRequest+0x72>
    3c34:	e8 ee       	ldi	r30, 0xE8	; 232
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	80 81       	ld	r24, Z
    3c3a:	87 7f       	andi	r24, 0xF7	; 247
    3c3c:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3c3e:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    3c40:	80 ff       	sbrs	r24, 0
    3c42:	fd cf       	rjmp	.-6      	; 0x3c3e <MS_Device_ProcessControlRequest+0x58>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    3c44:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c46:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3c48:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3c4c:	e8 ee       	ldi	r30, 0xE8	; 232
    3c4e:	f0 e0       	ldi	r31, 0x00	; 0
    3c50:	80 81       	ld	r24, Z
    3c52:	8e 77       	andi	r24, 0x7E	; 126
    3c54:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    3c56:	fc d4       	rcall	.+2552   	; 0x4650 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    3c58:	df 91       	pop	r29
    3c5a:	cf 91       	pop	r28
    3c5c:	08 95       	ret

00003c5e <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    3c64:	fc 01       	movw	r30, r24
    3c66:	3c 96       	adiw	r30, 0x0c	; 12
    3c68:	8d e2       	ldi	r24, 0x2D	; 45
    3c6a:	df 01       	movw	r26, r30
    3c6c:	1d 92       	st	X+, r1
    3c6e:	8a 95       	dec	r24
    3c70:	e9 f7       	brne	.-6      	; 0x3c6c <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    3c72:	82 e0       	ldi	r24, 0x02	; 2
    3c74:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    3c76:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    3c78:	61 e0       	ldi	r22, 0x01	; 1
    3c7a:	ce 01       	movw	r24, r28
    3c7c:	01 96       	adiw	r24, 0x01	; 1
    3c7e:	8b d4       	rcall	.+2326   	; 0x4596 <Endpoint_ConfigureEndpointTable>
    3c80:	88 23       	and	r24, r24
    3c82:	21 f0       	breq	.+8      	; 0x3c8c <MS_Device_ConfigureEndpoints+0x2e>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    3c84:	61 e0       	ldi	r22, 0x01	; 1
    3c86:	ce 01       	movw	r24, r28
    3c88:	06 96       	adiw	r24, 0x06	; 6
    3c8a:	85 d4       	rcall	.+2314   	; 0x4596 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    3c8c:	df 91       	pop	r29
    3c8e:	cf 91       	pop	r28
    3c90:	08 95       	ret

00003c92 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    3c92:	ef 92       	push	r14
    3c94:	ff 92       	push	r15
    3c96:	0f 93       	push	r16
    3c98:	1f 93       	push	r17
    3c9a:	cf 93       	push	r28
    3c9c:	df 93       	push	r29
    3c9e:	00 d0       	rcall	.+0      	; 0x3ca0 <MS_Device_USBTask+0xe>
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
    3ca4:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    3ca6:	8e b3       	in	r24, 0x1e	; 30
    3ca8:	84 30       	cpi	r24, 0x04	; 4
    3caa:	09 f0       	breq	.+2      	; 0x3cae <MS_Device_USBTask+0x1c>
    3cac:	1c c1       	rjmp	.+568    	; 0x3ee6 <MS_Device_USBTask+0x254>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3cae:	d8 01       	movw	r26, r16
    3cb0:	16 96       	adiw	r26, 0x06	; 6
    3cb2:	8c 91       	ld	r24, X
    3cb4:	16 97       	sbiw	r26, 0x06	; 6
    3cb6:	8f 70       	andi	r24, 0x0F	; 15
    3cb8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3cbc:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    3cc0:	82 ff       	sbrs	r24, 2
    3cc2:	d2 c0       	rjmp	.+420    	; 0x3e68 <MS_Device_USBTask+0x1d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3cc4:	16 96       	adiw	r26, 0x06	; 6
    3cc6:	8c 91       	ld	r24, X
    3cc8:	8f 70       	andi	r24, 0x0F	; 15
    3cca:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
    3cce:	1a 82       	std	Y+2, r1	; 0x02
    3cd0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    3cd2:	78 01       	movw	r14, r16
    3cd4:	bc e0       	ldi	r27, 0x0C	; 12
    3cd6:	eb 0e       	add	r14, r27
    3cd8:	f1 1c       	adc	r15, r1
    3cda:	04 c0       	rjmp	.+8      	; 0x3ce4 <MS_Device_USBTask+0x52>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    3cdc:	f8 01       	movw	r30, r16
    3cde:	80 ad       	ldd	r24, Z+56	; 0x38
    3ce0:	81 11       	cpse	r24, r1
    3ce2:	c2 c0       	rjmp	.+388    	; 0x3e68 <MS_Device_USBTask+0x1d6>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    3ce4:	ae 01       	movw	r20, r28
    3ce6:	4f 5f       	subi	r20, 0xFF	; 255
    3ce8:	5f 4f       	sbci	r21, 0xFF	; 255
    3cea:	6f e0       	ldi	r22, 0x0F	; 15
    3cec:	70 e0       	ldi	r23, 0x00	; 0
    3cee:	c7 01       	movw	r24, r14
    3cf0:	11 d2       	rcall	.+1058   	; 0x4114 <Endpoint_Read_Stream_LE>
    3cf2:	85 30       	cpi	r24, 0x05	; 5
    3cf4:	99 f3       	breq	.-26     	; 0x3cdc <MS_Device_USBTask+0x4a>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    3cf6:	f8 01       	movw	r30, r16
    3cf8:	84 85       	ldd	r24, Z+12	; 0x0c
    3cfa:	95 85       	ldd	r25, Z+13	; 0x0d
    3cfc:	a6 85       	ldd	r26, Z+14	; 0x0e
    3cfe:	b7 85       	ldd	r27, Z+15	; 0x0f
    3d00:	85 35       	cpi	r24, 0x55	; 85
    3d02:	93 45       	sbci	r25, 0x53	; 83
    3d04:	a2 44       	sbci	r26, 0x42	; 66
    3d06:	b3 44       	sbci	r27, 0x43	; 67
    3d08:	99 f4       	brne	.+38     	; 0x3d30 <MS_Device_USBTask+0x9e>
    3d0a:	d8 01       	movw	r26, r16
    3d0c:	59 96       	adiw	r26, 0x19	; 25
    3d0e:	9c 91       	ld	r25, X
    3d10:	59 97       	sbiw	r26, 0x19	; 25
    3d12:	1b 96       	adiw	r26, 0x0b	; 11
    3d14:	8c 91       	ld	r24, X
    3d16:	1b 97       	sbiw	r26, 0x0b	; 11
    3d18:	98 17       	cp	r25, r24
    3d1a:	50 f4       	brcc	.+20     	; 0x3d30 <MS_Device_USBTask+0x9e>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    3d1c:	58 96       	adiw	r26, 0x18	; 24
    3d1e:	8c 91       	ld	r24, X
    3d20:	58 97       	sbiw	r26, 0x18	; 24
    3d22:	8f 71       	andi	r24, 0x1F	; 31
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    3d24:	29 f4       	brne	.+10     	; 0x3d30 <MS_Device_USBTask+0x9e>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    3d26:	5a 96       	adiw	r26, 0x1a	; 26
    3d28:	8c 91       	ld	r24, X
    3d2a:	81 50       	subi	r24, 0x01	; 1
    3d2c:	80 31       	cpi	r24, 0x10	; 16
    3d2e:	78 f0       	brcs	.+30     	; 0x3d4e <MS_Device_USBTask+0xbc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3d30:	eb ee       	ldi	r30, 0xEB	; 235
    3d32:	f0 e0       	ldi	r31, 0x00	; 0
    3d34:	80 81       	ld	r24, Z
    3d36:	80 62       	ori	r24, 0x20	; 32
    3d38:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d3a:	d8 01       	movw	r26, r16
    3d3c:	11 96       	adiw	r26, 0x01	; 1
    3d3e:	8c 91       	ld	r24, X
    3d40:	8f 70       	andi	r24, 0x0F	; 15
    3d42:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3d46:	80 81       	ld	r24, Z
    3d48:	80 62       	ori	r24, 0x20	; 32
    3d4a:	80 83       	st	Z, r24
    3d4c:	8d c0       	rjmp	.+282    	; 0x3e68 <MS_Device_USBTask+0x1d6>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    3d4e:	1a 82       	std	Y+2, r1	; 0x02
    3d50:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    3d52:	78 01       	movw	r14, r16
    3d54:	bb e1       	ldi	r27, 0x1B	; 27
    3d56:	eb 0e       	add	r14, r27
    3d58:	f1 1c       	adc	r15, r1
    3d5a:	04 c0       	rjmp	.+8      	; 0x3d64 <MS_Device_USBTask+0xd2>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    3d5c:	f8 01       	movw	r30, r16
    3d5e:	80 ad       	ldd	r24, Z+56	; 0x38
    3d60:	81 11       	cpse	r24, r1
    3d62:	82 c0       	rjmp	.+260    	; 0x3e68 <MS_Device_USBTask+0x1d6>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    3d64:	d8 01       	movw	r26, r16
    3d66:	5a 96       	adiw	r26, 0x1a	; 26
    3d68:	6c 91       	ld	r22, X
    3d6a:	70 e0       	ldi	r23, 0x00	; 0
    3d6c:	ae 01       	movw	r20, r28
    3d6e:	4f 5f       	subi	r20, 0xFF	; 255
    3d70:	5f 4f       	sbci	r21, 0xFF	; 255
    3d72:	c7 01       	movw	r24, r14
    3d74:	cf d1       	rcall	.+926    	; 0x4114 <Endpoint_Read_Stream_LE>
    3d76:	85 30       	cpi	r24, 0x05	; 5
    3d78:	89 f3       	breq	.-30     	; 0x3d5c <MS_Device_USBTask+0xca>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3d7a:	e8 ee       	ldi	r30, 0xE8	; 232
    3d7c:	f0 e0       	ldi	r31, 0x00	; 0
    3d7e:	80 81       	ld	r24, Z
    3d80:	8b 77       	andi	r24, 0x7B	; 123
    3d82:	80 83       	st	Z, r24

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    3d84:	f8 01       	movw	r30, r16
    3d86:	80 8d       	ldd	r24, Z+24	; 0x18
    3d88:	88 23       	and	r24, r24
    3d8a:	24 f4       	brge	.+8      	; 0x3d94 <MS_Device_USBTask+0x102>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d8c:	81 81       	ldd	r24, Z+1	; 0x01
    3d8e:	8f 70       	andi	r24, 0x0F	; 15
    3d90:	80 93 e9 00 	sts	0x00E9, r24
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    3d94:	c8 01       	movw	r24, r16
    3d96:	44 db       	rcall	.-2424   	; 0x3420 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    3d98:	91 e0       	ldi	r25, 0x01	; 1
    3d9a:	98 27       	eor	r25, r24
    3d9c:	d8 01       	movw	r26, r16
    3d9e:	d7 96       	adiw	r26, 0x37	; 55
    3da0:	9c 93       	st	X, r25
    3da2:	d7 97       	sbiw	r26, 0x37	; 55
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    3da4:	45 e5       	ldi	r20, 0x55	; 85
    3da6:	53 e5       	ldi	r21, 0x53	; 83
    3da8:	62 e4       	ldi	r22, 0x42	; 66
    3daa:	73 e5       	ldi	r23, 0x53	; 83
    3dac:	f8 01       	movw	r30, r16
    3dae:	43 a7       	std	Z+43, r20	; 0x2b
    3db0:	54 a7       	std	Z+44, r21	; 0x2c
    3db2:	65 a7       	std	Z+45, r22	; 0x2d
    3db4:	76 a7       	std	Z+46, r23	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    3db6:	40 89       	ldd	r20, Z+16	; 0x10
    3db8:	51 89       	ldd	r21, Z+17	; 0x11
    3dba:	62 89       	ldd	r22, Z+18	; 0x12
    3dbc:	73 89       	ldd	r23, Z+19	; 0x13
    3dbe:	9f 96       	adiw	r26, 0x2f	; 47
    3dc0:	4d 93       	st	X+, r20
    3dc2:	5d 93       	st	X+, r21
    3dc4:	6d 93       	st	X+, r22
    3dc6:	7c 93       	st	X, r23
    3dc8:	d2 97       	sbiw	r26, 0x32	; 50
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    3dca:	54 96       	adiw	r26, 0x14	; 20
    3dcc:	4d 91       	ld	r20, X+
    3dce:	5d 91       	ld	r21, X+
    3dd0:	6d 91       	ld	r22, X+
    3dd2:	7c 91       	ld	r23, X
    3dd4:	57 97       	sbiw	r26, 0x17	; 23
    3dd6:	43 ab       	std	Z+51, r20	; 0x33
    3dd8:	54 ab       	std	Z+52, r21	; 0x34
    3dda:	65 ab       	std	Z+53, r22	; 0x35
    3ddc:	76 ab       	std	Z+54, r23	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    3dde:	81 11       	cpse	r24, r1
    3de0:	09 c0       	rjmp	.+18     	; 0x3df4 <MS_Device_USBTask+0x162>
    3de2:	45 2b       	or	r20, r21
    3de4:	46 2b       	or	r20, r22
    3de6:	47 2b       	or	r20, r23
    3de8:	29 f0       	breq	.+10     	; 0x3df4 <MS_Device_USBTask+0x162>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3dea:	eb ee       	ldi	r30, 0xEB	; 235
    3dec:	f0 e0       	ldi	r31, 0x00	; 0
    3dee:	80 81       	ld	r24, Z
    3df0:	80 62       	ori	r24, 0x20	; 32
    3df2:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3df4:	d8 01       	movw	r26, r16
    3df6:	16 96       	adiw	r26, 0x06	; 6
    3df8:	8c 91       	ld	r24, X
    3dfa:	8f 70       	andi	r24, 0x0F	; 15
    3dfc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3e00:	eb ee       	ldi	r30, 0xEB	; 235
    3e02:	f0 e0       	ldi	r31, 0x00	; 0
    3e04:	05 c0       	rjmp	.+10     	; 0x3e10 <MS_Device_USBTask+0x17e>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    3e06:	d8 01       	movw	r26, r16
    3e08:	d8 96       	adiw	r26, 0x38	; 56
    3e0a:	8c 91       	ld	r24, X
    3e0c:	81 11       	cpse	r24, r1
    3e0e:	2c c0       	rjmp	.+88     	; 0x3e68 <MS_Device_USBTask+0x1d6>
    3e10:	80 81       	ld	r24, Z

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    3e12:	85 fd       	sbrc	r24, 5
    3e14:	f8 cf       	rjmp	.-16     	; 0x3e06 <MS_Device_USBTask+0x174>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e16:	f8 01       	movw	r30, r16
    3e18:	81 81       	ldd	r24, Z+1	; 0x01
    3e1a:	8f 70       	andi	r24, 0x0F	; 15
    3e1c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3e20:	eb ee       	ldi	r30, 0xEB	; 235
    3e22:	f0 e0       	ldi	r31, 0x00	; 0
    3e24:	05 c0       	rjmp	.+10     	; 0x3e30 <MS_Device_USBTask+0x19e>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    3e26:	d8 01       	movw	r26, r16
    3e28:	d8 96       	adiw	r26, 0x38	; 56
    3e2a:	8c 91       	ld	r24, X
    3e2c:	81 11       	cpse	r24, r1
    3e2e:	1c c0       	rjmp	.+56     	; 0x3e68 <MS_Device_USBTask+0x1d6>
    3e30:	80 81       	ld	r24, Z
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    3e32:	85 fd       	sbrc	r24, 5
    3e34:	f8 cf       	rjmp	.-16     	; 0x3e26 <MS_Device_USBTask+0x194>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    3e36:	1a 82       	std	Y+2, r1	; 0x02
    3e38:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    3e3a:	78 01       	movw	r14, r16
    3e3c:	bb e2       	ldi	r27, 0x2B	; 43
    3e3e:	eb 0e       	add	r14, r27
    3e40:	f1 1c       	adc	r15, r1
    3e42:	04 c0       	rjmp	.+8      	; 0x3e4c <MS_Device_USBTask+0x1ba>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    3e44:	f8 01       	movw	r30, r16
    3e46:	80 ad       	ldd	r24, Z+56	; 0x38
    3e48:	81 11       	cpse	r24, r1
    3e4a:	0e c0       	rjmp	.+28     	; 0x3e68 <MS_Device_USBTask+0x1d6>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    3e4c:	ae 01       	movw	r20, r28
    3e4e:	4f 5f       	subi	r20, 0xFF	; 255
    3e50:	5f 4f       	sbci	r21, 0xFF	; 255
    3e52:	6d e0       	ldi	r22, 0x0D	; 13
    3e54:	70 e0       	ldi	r23, 0x00	; 0
    3e56:	c7 01       	movw	r24, r14
    3e58:	9f d0       	rcall	.+318    	; 0x3f98 <Endpoint_Write_Stream_LE>
    3e5a:	85 30       	cpi	r24, 0x05	; 5
    3e5c:	99 f3       	breq	.-26     	; 0x3e44 <MS_Device_USBTask+0x1b2>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3e5e:	e8 ee       	ldi	r30, 0xE8	; 232
    3e60:	f0 e0       	ldi	r31, 0x00	; 0
    3e62:	80 81       	ld	r24, Z
    3e64:	8e 77       	andi	r24, 0x7E	; 126
    3e66:	80 83       	st	Z, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    3e68:	d8 01       	movw	r26, r16
    3e6a:	d8 96       	adiw	r26, 0x38	; 56
    3e6c:	8c 91       	ld	r24, X
    3e6e:	d8 97       	sbiw	r26, 0x38	; 56
    3e70:	88 23       	and	r24, r24
    3e72:	c9 f1       	breq	.+114    	; 0x3ee6 <MS_Device_USBTask+0x254>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3e74:	16 96       	adiw	r26, 0x06	; 6
    3e76:	2c 91       	ld	r18, X
    3e78:	16 97       	sbiw	r26, 0x06	; 6
    3e7a:	2f 70       	andi	r18, 0x0F	; 15
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	fc 01       	movw	r30, r24
    3e82:	02 c0       	rjmp	.+4      	; 0x3e88 <MS_Device_USBTask+0x1f6>
    3e84:	ee 0f       	add	r30, r30
    3e86:	ff 1f       	adc	r31, r31
    3e88:	2a 95       	dec	r18
    3e8a:	e2 f7       	brpl	.-8      	; 0x3e84 <MS_Device_USBTask+0x1f2>
    3e8c:	9f 01       	movw	r18, r30
    3e8e:	ea ee       	ldi	r30, 0xEA	; 234
    3e90:	f0 e0       	ldi	r31, 0x00	; 0
    3e92:	20 83       	st	Z, r18
				UERST = 0;
    3e94:	10 82       	st	Z, r1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3e96:	11 96       	adiw	r26, 0x01	; 1
    3e98:	2c 91       	ld	r18, X
    3e9a:	11 97       	sbiw	r26, 0x01	; 1
    3e9c:	2f 70       	andi	r18, 0x0F	; 15
    3e9e:	02 c0       	rjmp	.+4      	; 0x3ea4 <MS_Device_USBTask+0x212>
    3ea0:	88 0f       	add	r24, r24
    3ea2:	99 1f       	adc	r25, r25
    3ea4:	2a 95       	dec	r18
    3ea6:	e2 f7       	brpl	.-8      	; 0x3ea0 <MS_Device_USBTask+0x20e>
    3ea8:	80 83       	st	Z, r24
				UERST = 0;
    3eaa:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3eac:	16 96       	adiw	r26, 0x06	; 6
    3eae:	8c 91       	ld	r24, X
    3eb0:	8f 70       	andi	r24, 0x0F	; 15
    3eb2:	29 ee       	ldi	r18, 0xE9	; 233
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	d9 01       	movw	r26, r18
    3eb8:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3eba:	eb ee       	ldi	r30, 0xEB	; 235
    3ebc:	f0 e0       	ldi	r31, 0x00	; 0
    3ebe:	80 81       	ld	r24, Z
    3ec0:	80 61       	ori	r24, 0x10	; 16
    3ec2:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3ec4:	80 81       	ld	r24, Z
    3ec6:	88 60       	ori	r24, 0x08	; 8
    3ec8:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3eca:	d8 01       	movw	r26, r16
    3ecc:	11 96       	adiw	r26, 0x01	; 1
    3ece:	8c 91       	ld	r24, X
    3ed0:	8f 70       	andi	r24, 0x0F	; 15
    3ed2:	d9 01       	movw	r26, r18
    3ed4:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3ed6:	80 81       	ld	r24, Z
    3ed8:	80 61       	ori	r24, 0x10	; 16
    3eda:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3edc:	80 81       	ld	r24, Z
    3ede:	88 60       	ori	r24, 0x08	; 8
    3ee0:	80 83       	st	Z, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    3ee2:	f8 01       	movw	r30, r16
    3ee4:	10 ae       	std	Z+56, r1	; 0x38
	}
}
    3ee6:	0f 90       	pop	r0
    3ee8:	0f 90       	pop	r0
    3eea:	df 91       	pop	r29
    3eec:	cf 91       	pop	r28
    3eee:	1f 91       	pop	r17
    3ef0:	0f 91       	pop	r16
    3ef2:	ff 90       	pop	r15
    3ef4:	ef 90       	pop	r14
    3ef6:	08 95       	ret

00003ef8 <Endpoint_Null_Stream>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3ef8:	af 92       	push	r10
    3efa:	bf 92       	push	r11
    3efc:	cf 92       	push	r12
    3efe:	df 92       	push	r13
    3f00:	ef 92       	push	r14
    3f02:	ff 92       	push	r15
    3f04:	0f 93       	push	r16
    3f06:	1f 93       	push	r17
    3f08:	cf 93       	push	r28
    3f0a:	df 93       	push	r29
    3f0c:	ec 01       	movw	r28, r24
    3f0e:	6b 01       	movw	r12, r22
    3f10:	c1 d3       	rcall	.+1922   	; 0x4694 <Endpoint_WaitUntilReady>
    3f12:	81 11       	cpse	r24, r1
    3f14:	36 c0       	rjmp	.+108    	; 0x3f82 <Endpoint_Null_Stream+0x8a>
    3f16:	c1 14       	cp	r12, r1
    3f18:	d1 04       	cpc	r13, r1
    3f1a:	29 f0       	breq	.+10     	; 0x3f26 <Endpoint_Null_Stream+0x2e>
    3f1c:	f6 01       	movw	r30, r12
    3f1e:	80 81       	ld	r24, Z
    3f20:	91 81       	ldd	r25, Z+1	; 0x01
    3f22:	c8 1b       	sub	r28, r24
    3f24:	d9 0b       	sbc	r29, r25
    3f26:	20 97       	sbiw	r28, 0x00	; 0
    3f28:	49 f1       	breq	.+82     	; 0x3f7c <Endpoint_Null_Stream+0x84>
    3f2a:	e1 2c       	mov	r14, r1
    3f2c:	f1 2c       	mov	r15, r1
    3f2e:	08 ee       	ldi	r16, 0xE8	; 232
    3f30:	10 e0       	ldi	r17, 0x00	; 0
    3f32:	0f 2e       	mov	r0, r31
    3f34:	f1 ef       	ldi	r31, 0xF1	; 241
    3f36:	af 2e       	mov	r10, r31
    3f38:	b1 2c       	mov	r11, r1
    3f3a:	f0 2d       	mov	r31, r0
    3f3c:	f8 01       	movw	r30, r16
    3f3e:	80 81       	ld	r24, Z
    3f40:	85 fd       	sbrc	r24, 5
    3f42:	13 c0       	rjmp	.+38     	; 0x3f6a <Endpoint_Null_Stream+0x72>
    3f44:	80 81       	ld	r24, Z
    3f46:	8e 77       	andi	r24, 0x7E	; 126
    3f48:	80 83       	st	Z, r24
    3f4a:	c1 14       	cp	r12, r1
    3f4c:	d1 04       	cpc	r13, r1
    3f4e:	49 f0       	breq	.+18     	; 0x3f62 <Endpoint_Null_Stream+0x6a>
    3f50:	f6 01       	movw	r30, r12
    3f52:	80 81       	ld	r24, Z
    3f54:	91 81       	ldd	r25, Z+1	; 0x01
    3f56:	e8 0e       	add	r14, r24
    3f58:	f9 1e       	adc	r15, r25
    3f5a:	f1 82       	std	Z+1, r15	; 0x01
    3f5c:	e0 82       	st	Z, r14
    3f5e:	85 e0       	ldi	r24, 0x05	; 5
    3f60:	10 c0       	rjmp	.+32     	; 0x3f82 <Endpoint_Null_Stream+0x8a>
    3f62:	98 d3       	rcall	.+1840   	; 0x4694 <Endpoint_WaitUntilReady>
    3f64:	88 23       	and	r24, r24
    3f66:	39 f0       	breq	.+14     	; 0x3f76 <Endpoint_Null_Stream+0x7e>
    3f68:	0c c0       	rjmp	.+24     	; 0x3f82 <Endpoint_Null_Stream+0x8a>
    3f6a:	f5 01       	movw	r30, r10
    3f6c:	10 82       	st	Z, r1
    3f6e:	21 97       	sbiw	r28, 0x01	; 1
    3f70:	ff ef       	ldi	r31, 0xFF	; 255
    3f72:	ef 1a       	sub	r14, r31
    3f74:	ff 0a       	sbc	r15, r31
    3f76:	20 97       	sbiw	r28, 0x00	; 0
    3f78:	09 f7       	brne	.-62     	; 0x3f3c <Endpoint_Null_Stream+0x44>
    3f7a:	02 c0       	rjmp	.+4      	; 0x3f80 <Endpoint_Null_Stream+0x88>
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	01 c0       	rjmp	.+2      	; 0x3f82 <Endpoint_Null_Stream+0x8a>
    3f80:	80 e0       	ldi	r24, 0x00	; 0
    3f82:	df 91       	pop	r29
    3f84:	cf 91       	pop	r28
    3f86:	1f 91       	pop	r17
    3f88:	0f 91       	pop	r16
    3f8a:	ff 90       	pop	r15
    3f8c:	ef 90       	pop	r14
    3f8e:	df 90       	pop	r13
    3f90:	cf 90       	pop	r12
    3f92:	bf 90       	pop	r11
    3f94:	af 90       	pop	r10
    3f96:	08 95       	ret

00003f98 <Endpoint_Write_Stream_LE>:
    3f98:	8f 92       	push	r8
    3f9a:	9f 92       	push	r9
    3f9c:	af 92       	push	r10
    3f9e:	bf 92       	push	r11
    3fa0:	cf 92       	push	r12
    3fa2:	df 92       	push	r13
    3fa4:	ef 92       	push	r14
    3fa6:	ff 92       	push	r15
    3fa8:	0f 93       	push	r16
    3faa:	1f 93       	push	r17
    3fac:	cf 93       	push	r28
    3fae:	df 93       	push	r29
    3fb0:	7c 01       	movw	r14, r24
    3fb2:	eb 01       	movw	r28, r22
    3fb4:	6a 01       	movw	r12, r20
    3fb6:	6e d3       	rcall	.+1756   	; 0x4694 <Endpoint_WaitUntilReady>
    3fb8:	81 11       	cpse	r24, r1
    3fba:	3d c0       	rjmp	.+122    	; 0x4036 <Endpoint_Write_Stream_LE+0x9e>
    3fbc:	c1 14       	cp	r12, r1
    3fbe:	d1 04       	cpc	r13, r1
    3fc0:	39 f0       	breq	.+14     	; 0x3fd0 <Endpoint_Write_Stream_LE+0x38>
    3fc2:	f6 01       	movw	r30, r12
    3fc4:	80 81       	ld	r24, Z
    3fc6:	91 81       	ldd	r25, Z+1	; 0x01
    3fc8:	c8 1b       	sub	r28, r24
    3fca:	d9 0b       	sbc	r29, r25
    3fcc:	e8 0e       	add	r14, r24
    3fce:	f9 1e       	adc	r15, r25
    3fd0:	20 97       	sbiw	r28, 0x00	; 0
    3fd2:	71 f1       	breq	.+92     	; 0x4030 <Endpoint_Write_Stream_LE+0x98>
    3fd4:	00 e0       	ldi	r16, 0x00	; 0
    3fd6:	10 e0       	ldi	r17, 0x00	; 0
    3fd8:	0f 2e       	mov	r0, r31
    3fda:	f8 ee       	ldi	r31, 0xE8	; 232
    3fdc:	8f 2e       	mov	r8, r31
    3fde:	91 2c       	mov	r9, r1
    3fe0:	f0 2d       	mov	r31, r0
    3fe2:	0f 2e       	mov	r0, r31
    3fe4:	f1 ef       	ldi	r31, 0xF1	; 241
    3fe6:	af 2e       	mov	r10, r31
    3fe8:	b1 2c       	mov	r11, r1
    3fea:	f0 2d       	mov	r31, r0
    3fec:	f4 01       	movw	r30, r8
    3fee:	80 81       	ld	r24, Z
    3ff0:	85 fd       	sbrc	r24, 5
    3ff2:	13 c0       	rjmp	.+38     	; 0x401a <Endpoint_Write_Stream_LE+0x82>
    3ff4:	80 81       	ld	r24, Z
    3ff6:	8e 77       	andi	r24, 0x7E	; 126
    3ff8:	80 83       	st	Z, r24
    3ffa:	c1 14       	cp	r12, r1
    3ffc:	d1 04       	cpc	r13, r1
    3ffe:	49 f0       	breq	.+18     	; 0x4012 <Endpoint_Write_Stream_LE+0x7a>
    4000:	f6 01       	movw	r30, r12
    4002:	80 81       	ld	r24, Z
    4004:	91 81       	ldd	r25, Z+1	; 0x01
    4006:	08 0f       	add	r16, r24
    4008:	19 1f       	adc	r17, r25
    400a:	11 83       	std	Z+1, r17	; 0x01
    400c:	00 83       	st	Z, r16
    400e:	85 e0       	ldi	r24, 0x05	; 5
    4010:	12 c0       	rjmp	.+36     	; 0x4036 <Endpoint_Write_Stream_LE+0x9e>
    4012:	40 d3       	rcall	.+1664   	; 0x4694 <Endpoint_WaitUntilReady>
    4014:	88 23       	and	r24, r24
    4016:	49 f0       	breq	.+18     	; 0x402a <Endpoint_Write_Stream_LE+0x92>
    4018:	0e c0       	rjmp	.+28     	; 0x4036 <Endpoint_Write_Stream_LE+0x9e>
    401a:	f7 01       	movw	r30, r14
    401c:	81 91       	ld	r24, Z+
    401e:	7f 01       	movw	r14, r30
    4020:	f5 01       	movw	r30, r10
    4022:	80 83       	st	Z, r24
    4024:	21 97       	sbiw	r28, 0x01	; 1
    4026:	0f 5f       	subi	r16, 0xFF	; 255
    4028:	1f 4f       	sbci	r17, 0xFF	; 255
    402a:	20 97       	sbiw	r28, 0x00	; 0
    402c:	f9 f6       	brne	.-66     	; 0x3fec <Endpoint_Write_Stream_LE+0x54>
    402e:	02 c0       	rjmp	.+4      	; 0x4034 <Endpoint_Write_Stream_LE+0x9c>
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	01 c0       	rjmp	.+2      	; 0x4036 <Endpoint_Write_Stream_LE+0x9e>
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	df 91       	pop	r29
    4038:	cf 91       	pop	r28
    403a:	1f 91       	pop	r17
    403c:	0f 91       	pop	r16
    403e:	ff 90       	pop	r15
    4040:	ef 90       	pop	r14
    4042:	df 90       	pop	r13
    4044:	cf 90       	pop	r12
    4046:	bf 90       	pop	r11
    4048:	af 90       	pop	r10
    404a:	9f 90       	pop	r9
    404c:	8f 90       	pop	r8
    404e:	08 95       	ret

00004050 <Endpoint_Write_Stream_BE>:
    4050:	8f 92       	push	r8
    4052:	9f 92       	push	r9
    4054:	af 92       	push	r10
    4056:	bf 92       	push	r11
    4058:	cf 92       	push	r12
    405a:	df 92       	push	r13
    405c:	ef 92       	push	r14
    405e:	ff 92       	push	r15
    4060:	0f 93       	push	r16
    4062:	1f 93       	push	r17
    4064:	cf 93       	push	r28
    4066:	df 93       	push	r29
    4068:	8c 01       	movw	r16, r24
    406a:	eb 01       	movw	r28, r22
    406c:	6a 01       	movw	r12, r20
    406e:	12 d3       	rcall	.+1572   	; 0x4694 <Endpoint_WaitUntilReady>
    4070:	81 11       	cpse	r24, r1
    4072:	43 c0       	rjmp	.+134    	; 0x40fa <Endpoint_Write_Stream_BE+0xaa>
    4074:	4e 01       	movw	r8, r28
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	88 1a       	sub	r8, r24
    407a:	91 08       	sbc	r9, r1
    407c:	80 0e       	add	r8, r16
    407e:	91 1e       	adc	r9, r17
    4080:	c1 14       	cp	r12, r1
    4082:	d1 04       	cpc	r13, r1
    4084:	39 f0       	breq	.+14     	; 0x4094 <Endpoint_Write_Stream_BE+0x44>
    4086:	f6 01       	movw	r30, r12
    4088:	80 81       	ld	r24, Z
    408a:	91 81       	ldd	r25, Z+1	; 0x01
    408c:	c8 1b       	sub	r28, r24
    408e:	d9 0b       	sbc	r29, r25
    4090:	88 1a       	sub	r8, r24
    4092:	99 0a       	sbc	r9, r25
    4094:	20 97       	sbiw	r28, 0x00	; 0
    4096:	71 f1       	breq	.+92     	; 0x40f4 <Endpoint_Write_Stream_BE+0xa4>
    4098:	e1 2c       	mov	r14, r1
    409a:	f1 2c       	mov	r15, r1
    409c:	08 ee       	ldi	r16, 0xE8	; 232
    409e:	10 e0       	ldi	r17, 0x00	; 0
    40a0:	0f 2e       	mov	r0, r31
    40a2:	f1 ef       	ldi	r31, 0xF1	; 241
    40a4:	af 2e       	mov	r10, r31
    40a6:	b1 2c       	mov	r11, r1
    40a8:	f0 2d       	mov	r31, r0
    40aa:	f8 01       	movw	r30, r16
    40ac:	80 81       	ld	r24, Z
    40ae:	85 fd       	sbrc	r24, 5
    40b0:	13 c0       	rjmp	.+38     	; 0x40d8 <Endpoint_Write_Stream_BE+0x88>
    40b2:	80 81       	ld	r24, Z
    40b4:	8e 77       	andi	r24, 0x7E	; 126
    40b6:	80 83       	st	Z, r24
    40b8:	c1 14       	cp	r12, r1
    40ba:	d1 04       	cpc	r13, r1
    40bc:	49 f0       	breq	.+18     	; 0x40d0 <Endpoint_Write_Stream_BE+0x80>
    40be:	f6 01       	movw	r30, r12
    40c0:	80 81       	ld	r24, Z
    40c2:	91 81       	ldd	r25, Z+1	; 0x01
    40c4:	e8 0e       	add	r14, r24
    40c6:	f9 1e       	adc	r15, r25
    40c8:	f1 82       	std	Z+1, r15	; 0x01
    40ca:	e0 82       	st	Z, r14
    40cc:	85 e0       	ldi	r24, 0x05	; 5
    40ce:	15 c0       	rjmp	.+42     	; 0x40fa <Endpoint_Write_Stream_BE+0xaa>
    40d0:	e1 d2       	rcall	.+1474   	; 0x4694 <Endpoint_WaitUntilReady>
    40d2:	88 23       	and	r24, r24
    40d4:	61 f0       	breq	.+24     	; 0x40ee <Endpoint_Write_Stream_BE+0x9e>
    40d6:	11 c0       	rjmp	.+34     	; 0x40fa <Endpoint_Write_Stream_BE+0xaa>
    40d8:	f4 01       	movw	r30, r8
    40da:	80 81       	ld	r24, Z
    40dc:	f5 01       	movw	r30, r10
    40de:	80 83       	st	Z, r24
    40e0:	f1 e0       	ldi	r31, 0x01	; 1
    40e2:	8f 1a       	sub	r8, r31
    40e4:	91 08       	sbc	r9, r1
    40e6:	21 97       	sbiw	r28, 0x01	; 1
    40e8:	8f ef       	ldi	r24, 0xFF	; 255
    40ea:	e8 1a       	sub	r14, r24
    40ec:	f8 0a       	sbc	r15, r24
    40ee:	20 97       	sbiw	r28, 0x00	; 0
    40f0:	e1 f6       	brne	.-72     	; 0x40aa <Endpoint_Write_Stream_BE+0x5a>
    40f2:	02 c0       	rjmp	.+4      	; 0x40f8 <Endpoint_Write_Stream_BE+0xa8>
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	01 c0       	rjmp	.+2      	; 0x40fa <Endpoint_Write_Stream_BE+0xaa>
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	df 91       	pop	r29
    40fc:	cf 91       	pop	r28
    40fe:	1f 91       	pop	r17
    4100:	0f 91       	pop	r16
    4102:	ff 90       	pop	r15
    4104:	ef 90       	pop	r14
    4106:	df 90       	pop	r13
    4108:	cf 90       	pop	r12
    410a:	bf 90       	pop	r11
    410c:	af 90       	pop	r10
    410e:	9f 90       	pop	r9
    4110:	8f 90       	pop	r8
    4112:	08 95       	ret

00004114 <Endpoint_Read_Stream_LE>:
    4114:	8f 92       	push	r8
    4116:	9f 92       	push	r9
    4118:	af 92       	push	r10
    411a:	bf 92       	push	r11
    411c:	cf 92       	push	r12
    411e:	df 92       	push	r13
    4120:	ef 92       	push	r14
    4122:	ff 92       	push	r15
    4124:	0f 93       	push	r16
    4126:	1f 93       	push	r17
    4128:	cf 93       	push	r28
    412a:	df 93       	push	r29
    412c:	7c 01       	movw	r14, r24
    412e:	eb 01       	movw	r28, r22
    4130:	6a 01       	movw	r12, r20
    4132:	b0 d2       	rcall	.+1376   	; 0x4694 <Endpoint_WaitUntilReady>
    4134:	81 11       	cpse	r24, r1
    4136:	3d c0       	rjmp	.+122    	; 0x41b2 <Endpoint_Read_Stream_LE+0x9e>
    4138:	c1 14       	cp	r12, r1
    413a:	d1 04       	cpc	r13, r1
    413c:	39 f0       	breq	.+14     	; 0x414c <Endpoint_Read_Stream_LE+0x38>
    413e:	f6 01       	movw	r30, r12
    4140:	80 81       	ld	r24, Z
    4142:	91 81       	ldd	r25, Z+1	; 0x01
    4144:	c8 1b       	sub	r28, r24
    4146:	d9 0b       	sbc	r29, r25
    4148:	e8 0e       	add	r14, r24
    414a:	f9 1e       	adc	r15, r25
    414c:	20 97       	sbiw	r28, 0x00	; 0
    414e:	71 f1       	breq	.+92     	; 0x41ac <Endpoint_Read_Stream_LE+0x98>
    4150:	00 e0       	ldi	r16, 0x00	; 0
    4152:	10 e0       	ldi	r17, 0x00	; 0
    4154:	0f 2e       	mov	r0, r31
    4156:	f8 ee       	ldi	r31, 0xE8	; 232
    4158:	8f 2e       	mov	r8, r31
    415a:	91 2c       	mov	r9, r1
    415c:	f0 2d       	mov	r31, r0
    415e:	0f 2e       	mov	r0, r31
    4160:	f1 ef       	ldi	r31, 0xF1	; 241
    4162:	af 2e       	mov	r10, r31
    4164:	b1 2c       	mov	r11, r1
    4166:	f0 2d       	mov	r31, r0
    4168:	f4 01       	movw	r30, r8
    416a:	80 81       	ld	r24, Z
    416c:	85 fd       	sbrc	r24, 5
    416e:	13 c0       	rjmp	.+38     	; 0x4196 <Endpoint_Read_Stream_LE+0x82>
    4170:	80 81       	ld	r24, Z
    4172:	8b 77       	andi	r24, 0x7B	; 123
    4174:	80 83       	st	Z, r24
    4176:	c1 14       	cp	r12, r1
    4178:	d1 04       	cpc	r13, r1
    417a:	49 f0       	breq	.+18     	; 0x418e <Endpoint_Read_Stream_LE+0x7a>
    417c:	f6 01       	movw	r30, r12
    417e:	80 81       	ld	r24, Z
    4180:	91 81       	ldd	r25, Z+1	; 0x01
    4182:	08 0f       	add	r16, r24
    4184:	19 1f       	adc	r17, r25
    4186:	11 83       	std	Z+1, r17	; 0x01
    4188:	00 83       	st	Z, r16
    418a:	85 e0       	ldi	r24, 0x05	; 5
    418c:	12 c0       	rjmp	.+36     	; 0x41b2 <Endpoint_Read_Stream_LE+0x9e>
    418e:	82 d2       	rcall	.+1284   	; 0x4694 <Endpoint_WaitUntilReady>
    4190:	88 23       	and	r24, r24
    4192:	49 f0       	breq	.+18     	; 0x41a6 <Endpoint_Read_Stream_LE+0x92>
    4194:	0e c0       	rjmp	.+28     	; 0x41b2 <Endpoint_Read_Stream_LE+0x9e>
    4196:	f5 01       	movw	r30, r10
    4198:	80 81       	ld	r24, Z
    419a:	f7 01       	movw	r30, r14
    419c:	81 93       	st	Z+, r24
    419e:	7f 01       	movw	r14, r30
    41a0:	21 97       	sbiw	r28, 0x01	; 1
    41a2:	0f 5f       	subi	r16, 0xFF	; 255
    41a4:	1f 4f       	sbci	r17, 0xFF	; 255
    41a6:	20 97       	sbiw	r28, 0x00	; 0
    41a8:	f9 f6       	brne	.-66     	; 0x4168 <Endpoint_Read_Stream_LE+0x54>
    41aa:	02 c0       	rjmp	.+4      	; 0x41b0 <Endpoint_Read_Stream_LE+0x9c>
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	01 c0       	rjmp	.+2      	; 0x41b2 <Endpoint_Read_Stream_LE+0x9e>
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	df 91       	pop	r29
    41b4:	cf 91       	pop	r28
    41b6:	1f 91       	pop	r17
    41b8:	0f 91       	pop	r16
    41ba:	ff 90       	pop	r15
    41bc:	ef 90       	pop	r14
    41be:	df 90       	pop	r13
    41c0:	cf 90       	pop	r12
    41c2:	bf 90       	pop	r11
    41c4:	af 90       	pop	r10
    41c6:	9f 90       	pop	r9
    41c8:	8f 90       	pop	r8
    41ca:	08 95       	ret

000041cc <Endpoint_Write_Control_Stream_LE>:
    41cc:	df 92       	push	r13
    41ce:	ef 92       	push	r14
    41d0:	ff 92       	push	r15
    41d2:	0f 93       	push	r16
    41d4:	1f 93       	push	r17
    41d6:	cf 93       	push	r28
    41d8:	df 93       	push	r29
    41da:	20 91 47 08 	lds	r18, 0x0847
    41de:	30 91 48 08 	lds	r19, 0x0848
    41e2:	26 17       	cp	r18, r22
    41e4:	37 07       	cpc	r19, r23
    41e6:	58 f0       	brcs	.+22     	; 0x41fe <Endpoint_Write_Control_Stream_LE+0x32>
    41e8:	61 15       	cp	r22, r1
    41ea:	71 05       	cpc	r23, r1
    41ec:	39 f4       	brne	.+14     	; 0x41fc <Endpoint_Write_Control_Stream_LE+0x30>
    41ee:	e8 ee       	ldi	r30, 0xE8	; 232
    41f0:	f0 e0       	ldi	r31, 0x00	; 0
    41f2:	20 81       	ld	r18, Z
    41f4:	2e 77       	andi	r18, 0x7E	; 126
    41f6:	20 83       	st	Z, r18
    41f8:	9b 01       	movw	r18, r22
    41fa:	01 c0       	rjmp	.+2      	; 0x41fe <Endpoint_Write_Control_Stream_LE+0x32>
    41fc:	9b 01       	movw	r18, r22
    41fe:	a0 e0       	ldi	r26, 0x00	; 0
    4200:	e8 ee       	ldi	r30, 0xE8	; 232
    4202:	f0 e0       	ldi	r31, 0x00	; 0
    4204:	03 ef       	ldi	r16, 0xF3	; 243
    4206:	10 e0       	ldi	r17, 0x00	; 0
    4208:	62 ef       	ldi	r22, 0xF2	; 242
    420a:	70 e0       	ldi	r23, 0x00	; 0
    420c:	c1 ef       	ldi	r28, 0xF1	; 241
    420e:	d0 e0       	ldi	r29, 0x00	; 0
    4210:	ff 24       	eor	r15, r15
    4212:	f3 94       	inc	r15
    4214:	e1 2c       	mov	r14, r1
    4216:	37 c0       	rjmp	.+110    	; 0x4286 <Endpoint_Write_Control_Stream_LE+0xba>
    4218:	4e b3       	in	r20, 0x1e	; 30
    421a:	44 23       	and	r20, r20
    421c:	09 f4       	brne	.+2      	; 0x4220 <Endpoint_Write_Control_Stream_LE+0x54>
    421e:	46 c0       	rjmp	.+140    	; 0x42ac <Endpoint_Write_Control_Stream_LE+0xe0>
    4220:	45 30       	cpi	r20, 0x05	; 5
    4222:	09 f4       	brne	.+2      	; 0x4226 <Endpoint_Write_Control_Stream_LE+0x5a>
    4224:	45 c0       	rjmp	.+138    	; 0x42b0 <Endpoint_Write_Control_Stream_LE+0xe4>
    4226:	40 81       	ld	r20, Z
    4228:	43 fd       	sbrc	r20, 3
    422a:	44 c0       	rjmp	.+136    	; 0x42b4 <Endpoint_Write_Control_Stream_LE+0xe8>
    422c:	40 81       	ld	r20, Z
    422e:	42 ff       	sbrs	r20, 2
    4230:	03 c0       	rjmp	.+6      	; 0x4238 <Endpoint_Write_Control_Stream_LE+0x6c>
    4232:	e8 ee       	ldi	r30, 0xE8	; 232
    4234:	f0 e0       	ldi	r31, 0x00	; 0
    4236:	35 c0       	rjmp	.+106    	; 0x42a2 <Endpoint_Write_Control_Stream_LE+0xd6>
    4238:	40 81       	ld	r20, Z
    423a:	40 ff       	sbrs	r20, 0
    423c:	24 c0       	rjmp	.+72     	; 0x4286 <Endpoint_Write_Control_Stream_LE+0xba>
    423e:	d8 01       	movw	r26, r16
    4240:	dc 90       	ld	r13, X
    4242:	db 01       	movw	r26, r22
    4244:	4c 91       	ld	r20, X
    4246:	50 e0       	ldi	r21, 0x00	; 0
    4248:	5d 29       	or	r21, r13
    424a:	21 15       	cp	r18, r1
    424c:	31 05       	cpc	r19, r1
    424e:	99 f0       	breq	.+38     	; 0x4276 <Endpoint_Write_Control_Stream_LE+0xaa>
    4250:	48 30       	cpi	r20, 0x08	; 8
    4252:	51 05       	cpc	r21, r1
    4254:	80 f4       	brcc	.+32     	; 0x4276 <Endpoint_Write_Control_Stream_LE+0xaa>
    4256:	a8 2f       	mov	r26, r24
    4258:	b9 2f       	mov	r27, r25
    425a:	8d 91       	ld	r24, X+
    425c:	88 83       	st	Y, r24
    425e:	8a 2f       	mov	r24, r26
    4260:	9b 2f       	mov	r25, r27
    4262:	21 50       	subi	r18, 0x01	; 1
    4264:	31 09       	sbc	r19, r1
    4266:	4f 5f       	subi	r20, 0xFF	; 255
    4268:	5f 4f       	sbci	r21, 0xFF	; 255
    426a:	21 15       	cp	r18, r1
    426c:	31 05       	cpc	r19, r1
    426e:	19 f0       	breq	.+6      	; 0x4276 <Endpoint_Write_Control_Stream_LE+0xaa>
    4270:	48 30       	cpi	r20, 0x08	; 8
    4272:	51 05       	cpc	r21, r1
    4274:	91 f7       	brne	.-28     	; 0x425a <Endpoint_Write_Control_Stream_LE+0x8e>
    4276:	af 2d       	mov	r26, r15
    4278:	48 30       	cpi	r20, 0x08	; 8
    427a:	51 05       	cpc	r21, r1
    427c:	09 f0       	breq	.+2      	; 0x4280 <Endpoint_Write_Control_Stream_LE+0xb4>
    427e:	ae 2d       	mov	r26, r14
    4280:	40 81       	ld	r20, Z
    4282:	4e 77       	andi	r20, 0x7E	; 126
    4284:	40 83       	st	Z, r20
    4286:	21 15       	cp	r18, r1
    4288:	31 05       	cpc	r19, r1
    428a:	31 f6       	brne	.-116    	; 0x4218 <Endpoint_Write_Control_Stream_LE+0x4c>
    428c:	a1 11       	cpse	r26, r1
    428e:	c4 cf       	rjmp	.-120    	; 0x4218 <Endpoint_Write_Control_Stream_LE+0x4c>
    4290:	d0 cf       	rjmp	.-96     	; 0x4232 <Endpoint_Write_Control_Stream_LE+0x66>
    4292:	8e b3       	in	r24, 0x1e	; 30
    4294:	88 23       	and	r24, r24
    4296:	81 f0       	breq	.+32     	; 0x42b8 <Endpoint_Write_Control_Stream_LE+0xec>
    4298:	85 30       	cpi	r24, 0x05	; 5
    429a:	81 f0       	breq	.+32     	; 0x42bc <Endpoint_Write_Control_Stream_LE+0xf0>
    429c:	80 81       	ld	r24, Z
    429e:	83 fd       	sbrc	r24, 3
    42a0:	0f c0       	rjmp	.+30     	; 0x42c0 <Endpoint_Write_Control_Stream_LE+0xf4>
    42a2:	80 81       	ld	r24, Z
    42a4:	82 ff       	sbrs	r24, 2
    42a6:	f5 cf       	rjmp	.-22     	; 0x4292 <Endpoint_Write_Control_Stream_LE+0xc6>
    42a8:	80 e0       	ldi	r24, 0x00	; 0
    42aa:	0b c0       	rjmp	.+22     	; 0x42c2 <Endpoint_Write_Control_Stream_LE+0xf6>
    42ac:	82 e0       	ldi	r24, 0x02	; 2
    42ae:	09 c0       	rjmp	.+18     	; 0x42c2 <Endpoint_Write_Control_Stream_LE+0xf6>
    42b0:	83 e0       	ldi	r24, 0x03	; 3
    42b2:	07 c0       	rjmp	.+14     	; 0x42c2 <Endpoint_Write_Control_Stream_LE+0xf6>
    42b4:	81 e0       	ldi	r24, 0x01	; 1
    42b6:	05 c0       	rjmp	.+10     	; 0x42c2 <Endpoint_Write_Control_Stream_LE+0xf6>
    42b8:	82 e0       	ldi	r24, 0x02	; 2
    42ba:	03 c0       	rjmp	.+6      	; 0x42c2 <Endpoint_Write_Control_Stream_LE+0xf6>
    42bc:	83 e0       	ldi	r24, 0x03	; 3
    42be:	01 c0       	rjmp	.+2      	; 0x42c2 <Endpoint_Write_Control_Stream_LE+0xf6>
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	df 91       	pop	r29
    42c4:	cf 91       	pop	r28
    42c6:	1f 91       	pop	r17
    42c8:	0f 91       	pop	r16
    42ca:	ff 90       	pop	r15
    42cc:	ef 90       	pop	r14
    42ce:	df 90       	pop	r13
    42d0:	08 95       	ret

000042d2 <Endpoint_Read_Control_Stream_LE>:
    42d2:	cf 92       	push	r12
    42d4:	df 92       	push	r13
    42d6:	ff 92       	push	r15
    42d8:	0f 93       	push	r16
    42da:	1f 93       	push	r17
    42dc:	cf 93       	push	r28
    42de:	df 93       	push	r29
    42e0:	61 15       	cp	r22, r1
    42e2:	71 05       	cpc	r23, r1
    42e4:	29 f4       	brne	.+10     	; 0x42f0 <Endpoint_Read_Control_Stream_LE+0x1e>
    42e6:	e8 ee       	ldi	r30, 0xE8	; 232
    42e8:	f0 e0       	ldi	r31, 0x00	; 0
    42ea:	20 81       	ld	r18, Z
    42ec:	2b 77       	andi	r18, 0x7B	; 123
    42ee:	20 83       	st	Z, r18
    42f0:	e8 ee       	ldi	r30, 0xE8	; 232
    42f2:	f0 e0       	ldi	r31, 0x00	; 0
    42f4:	43 ef       	ldi	r20, 0xF3	; 243
    42f6:	50 e0       	ldi	r21, 0x00	; 0
    42f8:	0f 2e       	mov	r0, r31
    42fa:	f2 ef       	ldi	r31, 0xF2	; 242
    42fc:	cf 2e       	mov	r12, r31
    42fe:	d1 2c       	mov	r13, r1
    4300:	f0 2d       	mov	r31, r0
    4302:	01 ef       	ldi	r16, 0xF1	; 241
    4304:	10 e0       	ldi	r17, 0x00	; 0
    4306:	21 c0       	rjmp	.+66     	; 0x434a <Endpoint_Read_Control_Stream_LE+0x78>
    4308:	2e b3       	in	r18, 0x1e	; 30
    430a:	22 23       	and	r18, r18
    430c:	d1 f1       	breq	.+116    	; 0x4382 <Endpoint_Read_Control_Stream_LE+0xb0>
    430e:	25 30       	cpi	r18, 0x05	; 5
    4310:	d1 f1       	breq	.+116    	; 0x4386 <Endpoint_Read_Control_Stream_LE+0xb4>
    4312:	20 81       	ld	r18, Z
    4314:	23 fd       	sbrc	r18, 3
    4316:	39 c0       	rjmp	.+114    	; 0x438a <Endpoint_Read_Control_Stream_LE+0xb8>
    4318:	20 81       	ld	r18, Z
    431a:	22 ff       	sbrs	r18, 2
    431c:	f5 cf       	rjmp	.-22     	; 0x4308 <Endpoint_Read_Control_Stream_LE+0x36>
    431e:	41 c0       	rjmp	.+130    	; 0x43a2 <Endpoint_Read_Control_Stream_LE+0xd0>
    4320:	e8 01       	movw	r28, r16
    4322:	88 81       	ld	r24, Y
    4324:	8d 93       	st	X+, r24
    4326:	8a 2f       	mov	r24, r26
    4328:	9b 2f       	mov	r25, r27
    432a:	61 50       	subi	r22, 0x01	; 1
    432c:	71 09       	sbc	r23, r1
    432e:	61 15       	cp	r22, r1
    4330:	71 05       	cpc	r23, r1
    4332:	41 f0       	breq	.+16     	; 0x4344 <Endpoint_Read_Control_Stream_LE+0x72>
    4334:	ea 01       	movw	r28, r20
    4336:	f8 80       	ld	r15, Y
    4338:	e6 01       	movw	r28, r12
    433a:	28 81       	ld	r18, Y
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	3f 29       	or	r19, r15
    4340:	23 2b       	or	r18, r19
    4342:	71 f7       	brne	.-36     	; 0x4320 <Endpoint_Read_Control_Stream_LE+0x4e>
    4344:	20 81       	ld	r18, Z
    4346:	2b 77       	andi	r18, 0x7B	; 123
    4348:	20 83       	st	Z, r18
    434a:	61 15       	cp	r22, r1
    434c:	71 05       	cpc	r23, r1
    434e:	19 f4       	brne	.+6      	; 0x4356 <Endpoint_Read_Control_Stream_LE+0x84>
    4350:	e8 ee       	ldi	r30, 0xE8	; 232
    4352:	f0 e0       	ldi	r31, 0x00	; 0
    4354:	11 c0       	rjmp	.+34     	; 0x4378 <Endpoint_Read_Control_Stream_LE+0xa6>
    4356:	2e b3       	in	r18, 0x1e	; 30
    4358:	22 23       	and	r18, r18
    435a:	c9 f0       	breq	.+50     	; 0x438e <Endpoint_Read_Control_Stream_LE+0xbc>
    435c:	25 30       	cpi	r18, 0x05	; 5
    435e:	c9 f0       	breq	.+50     	; 0x4392 <Endpoint_Read_Control_Stream_LE+0xc0>
    4360:	20 81       	ld	r18, Z
    4362:	23 fd       	sbrc	r18, 3
    4364:	18 c0       	rjmp	.+48     	; 0x4396 <Endpoint_Read_Control_Stream_LE+0xc4>
    4366:	20 81       	ld	r18, Z
    4368:	22 fd       	sbrc	r18, 2
    436a:	1b c0       	rjmp	.+54     	; 0x43a2 <Endpoint_Read_Control_Stream_LE+0xd0>
    436c:	cd cf       	rjmp	.-102    	; 0x4308 <Endpoint_Read_Control_Stream_LE+0x36>
    436e:	8e b3       	in	r24, 0x1e	; 30
    4370:	88 23       	and	r24, r24
    4372:	99 f0       	breq	.+38     	; 0x439a <Endpoint_Read_Control_Stream_LE+0xc8>
    4374:	85 30       	cpi	r24, 0x05	; 5
    4376:	99 f0       	breq	.+38     	; 0x439e <Endpoint_Read_Control_Stream_LE+0xcc>
    4378:	80 81       	ld	r24, Z
    437a:	80 ff       	sbrs	r24, 0
    437c:	f8 cf       	rjmp	.-16     	; 0x436e <Endpoint_Read_Control_Stream_LE+0x9c>
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	1b c0       	rjmp	.+54     	; 0x43b8 <Endpoint_Read_Control_Stream_LE+0xe6>
    4382:	82 e0       	ldi	r24, 0x02	; 2
    4384:	19 c0       	rjmp	.+50     	; 0x43b8 <Endpoint_Read_Control_Stream_LE+0xe6>
    4386:	83 e0       	ldi	r24, 0x03	; 3
    4388:	17 c0       	rjmp	.+46     	; 0x43b8 <Endpoint_Read_Control_Stream_LE+0xe6>
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	15 c0       	rjmp	.+42     	; 0x43b8 <Endpoint_Read_Control_Stream_LE+0xe6>
    438e:	82 e0       	ldi	r24, 0x02	; 2
    4390:	13 c0       	rjmp	.+38     	; 0x43b8 <Endpoint_Read_Control_Stream_LE+0xe6>
    4392:	83 e0       	ldi	r24, 0x03	; 3
    4394:	11 c0       	rjmp	.+34     	; 0x43b8 <Endpoint_Read_Control_Stream_LE+0xe6>
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	0f c0       	rjmp	.+30     	; 0x43b8 <Endpoint_Read_Control_Stream_LE+0xe6>
    439a:	82 e0       	ldi	r24, 0x02	; 2
    439c:	0d c0       	rjmp	.+26     	; 0x43b8 <Endpoint_Read_Control_Stream_LE+0xe6>
    439e:	83 e0       	ldi	r24, 0x03	; 3
    43a0:	0b c0       	rjmp	.+22     	; 0x43b8 <Endpoint_Read_Control_Stream_LE+0xe6>
    43a2:	ea 01       	movw	r28, r20
    43a4:	a8 81       	ld	r26, Y
    43a6:	e6 01       	movw	r28, r12
    43a8:	28 81       	ld	r18, Y
    43aa:	30 e0       	ldi	r19, 0x00	; 0
    43ac:	3a 2b       	or	r19, r26
    43ae:	23 2b       	or	r18, r19
    43b0:	49 f2       	breq	.-110    	; 0x4344 <Endpoint_Read_Control_Stream_LE+0x72>
    43b2:	a8 2f       	mov	r26, r24
    43b4:	b9 2f       	mov	r27, r25
    43b6:	b4 cf       	rjmp	.-152    	; 0x4320 <Endpoint_Read_Control_Stream_LE+0x4e>
    43b8:	df 91       	pop	r29
    43ba:	cf 91       	pop	r28
    43bc:	1f 91       	pop	r17
    43be:	0f 91       	pop	r16
    43c0:	ff 90       	pop	r15
    43c2:	df 90       	pop	r13
    43c4:	cf 90       	pop	r12
    43c6:	08 95       	ret

000043c8 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    43c8:	cf 92       	push	r12
    43ca:	df 92       	push	r13
    43cc:	ff 92       	push	r15
    43ce:	0f 93       	push	r16
    43d0:	1f 93       	push	r17
    43d2:	cf 93       	push	r28
    43d4:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    43d6:	20 91 47 08 	lds	r18, 0x0847
    43da:	30 91 48 08 	lds	r19, 0x0848
    43de:	26 17       	cp	r18, r22
    43e0:	37 07       	cpc	r19, r23
    43e2:	58 f0       	brcs	.+22     	; 0x43fa <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    43e4:	61 15       	cp	r22, r1
    43e6:	71 05       	cpc	r23, r1
    43e8:	39 f4       	brne	.+14     	; 0x43f8 <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    43ea:	e8 ee       	ldi	r30, 0xE8	; 232
    43ec:	f0 e0       	ldi	r31, 0x00	; 0
    43ee:	20 81       	ld	r18, Z
    43f0:	2e 77       	andi	r18, 0x7E	; 126
    43f2:	20 83       	st	Z, r18
    43f4:	9b 01       	movw	r18, r22
    43f6:	01 c0       	rjmp	.+2      	; 0x43fa <Endpoint_Write_Control_PStream_LE+0x32>
    43f8:	9b 01       	movw	r18, r22
    43fa:	e8 2f       	mov	r30, r24
    43fc:	f9 2f       	mov	r31, r25
    43fe:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4400:	a8 ee       	ldi	r26, 0xE8	; 232
    4402:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    4404:	63 ef       	ldi	r22, 0xF3	; 243
    4406:	70 e0       	ldi	r23, 0x00	; 0
    4408:	42 ef       	ldi	r20, 0xF2	; 242
    440a:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    440c:	0f 2e       	mov	r0, r31
    440e:	f1 ef       	ldi	r31, 0xF1	; 241
    4410:	cf 2e       	mov	r12, r31
    4412:	d1 2c       	mov	r13, r1
    4414:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    4416:	01 e0       	ldi	r16, 0x01	; 1
    4418:	f1 2c       	mov	r15, r1
    441a:	33 c0       	rjmp	.+102    	; 0x4482 <Endpoint_Write_Control_PStream_LE+0xba>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    441c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    441e:	88 23       	and	r24, r24
    4420:	09 f4       	brne	.+2      	; 0x4424 <Endpoint_Write_Control_PStream_LE+0x5c>
    4422:	42 c0       	rjmp	.+132    	; 0x44a8 <Endpoint_Write_Control_PStream_LE+0xe0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4424:	85 30       	cpi	r24, 0x05	; 5
    4426:	09 f4       	brne	.+2      	; 0x442a <Endpoint_Write_Control_PStream_LE+0x62>
    4428:	41 c0       	rjmp	.+130    	; 0x44ac <Endpoint_Write_Control_PStream_LE+0xe4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    442a:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    442c:	83 fd       	sbrc	r24, 3
    442e:	40 c0       	rjmp	.+128    	; 0x44b0 <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4430:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    4432:	82 ff       	sbrs	r24, 2
    4434:	03 c0       	rjmp	.+6      	; 0x443c <Endpoint_Write_Control_PStream_LE+0x74>
    4436:	e8 ee       	ldi	r30, 0xE8	; 232
    4438:	f0 e0       	ldi	r31, 0x00	; 0
    443a:	31 c0       	rjmp	.+98     	; 0x449e <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    443c:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    443e:	80 ff       	sbrs	r24, 0
    4440:	20 c0       	rjmp	.+64     	; 0x4482 <Endpoint_Write_Control_PStream_LE+0xba>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    4442:	eb 01       	movw	r28, r22
    4444:	18 81       	ld	r17, Y
    4446:	ea 01       	movw	r28, r20
    4448:	88 81       	ld	r24, Y
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    444e:	21 15       	cp	r18, r1
    4450:	31 05       	cpc	r19, r1
    4452:	81 f0       	breq	.+32     	; 0x4474 <Endpoint_Write_Control_PStream_LE+0xac>
    4454:	88 30       	cpi	r24, 0x08	; 8
    4456:	91 05       	cpc	r25, r1
    4458:	68 f4       	brcc	.+26     	; 0x4474 <Endpoint_Write_Control_PStream_LE+0xac>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    445a:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    445c:	e6 01       	movw	r28, r12
    445e:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    4460:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    4462:	21 50       	subi	r18, 0x01	; 1
    4464:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    4466:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    4468:	21 15       	cp	r18, r1
    446a:	31 05       	cpc	r19, r1
    446c:	19 f0       	breq	.+6      	; 0x4474 <Endpoint_Write_Control_PStream_LE+0xac>
    446e:	88 30       	cpi	r24, 0x08	; 8
    4470:	91 05       	cpc	r25, r1
    4472:	99 f7       	brne	.-26     	; 0x445a <Endpoint_Write_Control_PStream_LE+0x92>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    4474:	10 2f       	mov	r17, r16
    4476:	08 97       	sbiw	r24, 0x08	; 8
    4478:	09 f0       	breq	.+2      	; 0x447c <Endpoint_Write_Control_PStream_LE+0xb4>
    447a:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    447c:	8c 91       	ld	r24, X
    447e:	8e 77       	andi	r24, 0x7E	; 126
    4480:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    4482:	21 15       	cp	r18, r1
    4484:	31 05       	cpc	r19, r1
    4486:	51 f6       	brne	.-108    	; 0x441c <Endpoint_Write_Control_PStream_LE+0x54>
    4488:	11 11       	cpse	r17, r1
    448a:	c8 cf       	rjmp	.-112    	; 0x441c <Endpoint_Write_Control_PStream_LE+0x54>
    448c:	d4 cf       	rjmp	.-88     	; 0x4436 <Endpoint_Write_Control_PStream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    448e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4490:	88 23       	and	r24, r24
    4492:	81 f0       	breq	.+32     	; 0x44b4 <Endpoint_Write_Control_PStream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4494:	85 30       	cpi	r24, 0x05	; 5
    4496:	81 f0       	breq	.+32     	; 0x44b8 <Endpoint_Write_Control_PStream_LE+0xf0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4498:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    449a:	83 fd       	sbrc	r24, 3
    449c:	0f c0       	rjmp	.+30     	; 0x44bc <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    449e:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    44a0:	82 ff       	sbrs	r24, 2
    44a2:	f5 cf       	rjmp	.-22     	; 0x448e <Endpoint_Write_Control_PStream_LE+0xc6>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    44a4:	80 e0       	ldi	r24, 0x00	; 0
    44a6:	0b c0       	rjmp	.+22     	; 0x44be <Endpoint_Write_Control_PStream_LE+0xf6>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    44a8:	82 e0       	ldi	r24, 0x02	; 2
    44aa:	09 c0       	rjmp	.+18     	; 0x44be <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    44ac:	83 e0       	ldi	r24, 0x03	; 3
    44ae:	07 c0       	rjmp	.+14     	; 0x44be <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    44b0:	81 e0       	ldi	r24, 0x01	; 1
    44b2:	05 c0       	rjmp	.+10     	; 0x44be <Endpoint_Write_Control_PStream_LE+0xf6>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    44b4:	82 e0       	ldi	r24, 0x02	; 2
    44b6:	03 c0       	rjmp	.+6      	; 0x44be <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    44b8:	83 e0       	ldi	r24, 0x03	; 3
    44ba:	01 c0       	rjmp	.+2      	; 0x44be <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    44bc:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    44be:	df 91       	pop	r29
    44c0:	cf 91       	pop	r28
    44c2:	1f 91       	pop	r17
    44c4:	0f 91       	pop	r16
    44c6:	ff 90       	pop	r15
    44c8:	df 90       	pop	r13
    44ca:	cf 90       	pop	r12
    44cc:	08 95       	ret

000044ce <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    44ce:	8f 92       	push	r8
    44d0:	9f 92       	push	r9
    44d2:	bf 92       	push	r11
    44d4:	cf 92       	push	r12
    44d6:	df 92       	push	r13
    44d8:	ef 92       	push	r14
    44da:	ff 92       	push	r15
    44dc:	0f 93       	push	r16
    44de:	1f 93       	push	r17
    44e0:	cf 93       	push	r28
    44e2:	df 93       	push	r29
    44e4:	87 30       	cpi	r24, 0x07	; 7
    44e6:	70 f1       	brcs	.+92     	; 0x4544 <Endpoint_ConfigureEndpoint_Prv+0x76>
    44e8:	26 c0       	rjmp	.+76     	; 0x4536 <Endpoint_ConfigureEndpoint_Prv+0x68>
    44ea:	59 2f       	mov	r21, r25
    44ec:	5f 70       	andi	r21, 0x0F	; 15
    44ee:	e8 01       	movw	r28, r16
    44f0:	58 83       	st	Y, r21
    44f2:	89 17       	cp	r24, r25
    44f4:	31 f0       	breq	.+12     	; 0x4502 <Endpoint_ConfigureEndpoint_Prv+0x34>
    44f6:	e9 01       	movw	r28, r18
    44f8:	d8 80       	ld	r13, Y
    44fa:	50 81       	ld	r21, Z
    44fc:	e4 01       	movw	r28, r8
    44fe:	78 81       	ld	r23, Y
    4500:	03 c0       	rjmp	.+6      	; 0x4508 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    4502:	5b 2d       	mov	r21, r11
    4504:	d6 2e       	mov	r13, r22
    4506:	7c 2d       	mov	r23, r12
    4508:	51 ff       	sbrs	r21, 1
    450a:	12 c0       	rjmp	.+36     	; 0x4530 <Endpoint_ConfigureEndpoint_Prv+0x62>
    450c:	4c 91       	ld	r20, X
    450e:	4e 7f       	andi	r20, 0xFE	; 254
    4510:	4c 93       	st	X, r20
    4512:	40 81       	ld	r20, Z
    4514:	4d 7f       	andi	r20, 0xFD	; 253
    4516:	40 83       	st	Z, r20
    4518:	4c 91       	ld	r20, X
    451a:	41 60       	ori	r20, 0x01	; 1
    451c:	4c 93       	st	X, r20
    451e:	e9 01       	movw	r28, r18
    4520:	d8 82       	st	Y, r13
    4522:	50 83       	st	Z, r21
    4524:	e4 01       	movw	r28, r8
    4526:	78 83       	st	Y, r23
    4528:	e7 01       	movw	r28, r14
    452a:	58 81       	ld	r21, Y
    452c:	55 23       	and	r21, r21
    452e:	44 f4       	brge	.+16     	; 0x4540 <Endpoint_ConfigureEndpoint_Prv+0x72>
    4530:	9f 5f       	subi	r25, 0xFF	; 255
    4532:	97 30       	cpi	r25, 0x07	; 7
    4534:	d1 f6       	brne	.-76     	; 0x44ea <Endpoint_ConfigureEndpoint_Prv+0x1c>
    4536:	8f 70       	andi	r24, 0x0F	; 15
    4538:	80 93 e9 00 	sts	0x00E9, r24
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	1f c0       	rjmp	.+62     	; 0x457e <Endpoint_ConfigureEndpoint_Prv+0xb0>
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	1d c0       	rjmp	.+58     	; 0x457e <Endpoint_ConfigureEndpoint_Prv+0xb0>
    4544:	98 2f       	mov	r25, r24
    4546:	9f 70       	andi	r25, 0x0F	; 15
    4548:	90 93 e9 00 	sts	0x00E9, r25
    454c:	98 2f       	mov	r25, r24
    454e:	54 2f       	mov	r21, r20
    4550:	d6 2e       	mov	r13, r22
    4552:	70 e0       	ldi	r23, 0x00	; 0
    4554:	ab ee       	ldi	r26, 0xEB	; 235
    4556:	b0 e0       	ldi	r27, 0x00	; 0
    4558:	ed ee       	ldi	r30, 0xED	; 237
    455a:	f0 e0       	ldi	r31, 0x00	; 0
    455c:	2c ee       	ldi	r18, 0xEC	; 236
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	0f 2e       	mov	r0, r31
    4562:	f0 ef       	ldi	r31, 0xF0	; 240
    4564:	8f 2e       	mov	r8, r31
    4566:	91 2c       	mov	r9, r1
    4568:	f0 2d       	mov	r31, r0
    456a:	0f 2e       	mov	r0, r31
    456c:	fe ee       	ldi	r31, 0xEE	; 238
    456e:	ef 2e       	mov	r14, r31
    4570:	f1 2c       	mov	r15, r1
    4572:	f0 2d       	mov	r31, r0
    4574:	09 ee       	ldi	r16, 0xE9	; 233
    4576:	10 e0       	ldi	r17, 0x00	; 0
    4578:	b4 2e       	mov	r11, r20
    457a:	c1 2c       	mov	r12, r1
    457c:	c5 cf       	rjmp	.-118    	; 0x4508 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    457e:	df 91       	pop	r29
    4580:	cf 91       	pop	r28
    4582:	1f 91       	pop	r17
    4584:	0f 91       	pop	r16
    4586:	ff 90       	pop	r15
    4588:	ef 90       	pop	r14
    458a:	df 90       	pop	r13
    458c:	cf 90       	pop	r12
    458e:	bf 90       	pop	r11
    4590:	9f 90       	pop	r9
    4592:	8f 90       	pop	r8
    4594:	08 95       	ret

00004596 <Endpoint_ConfigureEndpointTable>:
    4596:	bf 92       	push	r11
    4598:	cf 92       	push	r12
    459a:	df 92       	push	r13
    459c:	ef 92       	push	r14
    459e:	ff 92       	push	r15
    45a0:	0f 93       	push	r16
    45a2:	1f 93       	push	r17
    45a4:	cf 93       	push	r28
    45a6:	df 93       	push	r29
    45a8:	06 2f       	mov	r16, r22
    45aa:	66 23       	and	r22, r22
    45ac:	09 f4       	brne	.+2      	; 0x45b0 <Endpoint_ConfigureEndpointTable+0x1a>
    45ae:	41 c0       	rjmp	.+130    	; 0x4632 <Endpoint_ConfigureEndpointTable+0x9c>
    45b0:	c8 2f       	mov	r28, r24
    45b2:	d9 2f       	mov	r29, r25
    45b4:	10 e0       	ldi	r17, 0x00	; 0
    45b6:	f1 2c       	mov	r15, r1
    45b8:	68 94       	set
    45ba:	dd 24       	eor	r13, r13
    45bc:	d3 f8       	bld	r13, 3
    45be:	e1 2c       	mov	r14, r1
    45c0:	68 94       	set
    45c2:	bb 24       	eor	r11, r11
    45c4:	b1 f8       	bld	r11, 1
    45c6:	0f 2e       	mov	r0, r31
    45c8:	f6 e0       	ldi	r31, 0x06	; 6
    45ca:	cf 2e       	mov	r12, r31
    45cc:	f0 2d       	mov	r31, r0
    45ce:	58 81       	ld	r21, Y
    45d0:	55 23       	and	r21, r21
    45d2:	51 f1       	breq	.+84     	; 0x4628 <Endpoint_ConfigureEndpointTable+0x92>
    45d4:	9c 81       	ldd	r25, Y+4	; 0x04
    45d6:	e9 81       	ldd	r30, Y+1	; 0x01
    45d8:	fa 81       	ldd	r31, Y+2	; 0x02
    45da:	7b 81       	ldd	r23, Y+3	; 0x03
    45dc:	85 2f       	mov	r24, r21
    45de:	8f 70       	andi	r24, 0x0F	; 15
    45e0:	87 30       	cpi	r24, 0x07	; 7
    45e2:	48 f5       	brcc	.+82     	; 0x4636 <Endpoint_ConfigureEndpointTable+0xa0>
    45e4:	92 30       	cpi	r25, 0x02	; 2
    45e6:	10 f0       	brcs	.+4      	; 0x45ec <Endpoint_ConfigureEndpointTable+0x56>
    45e8:	4c 2d       	mov	r20, r12
    45ea:	01 c0       	rjmp	.+2      	; 0x45ee <Endpoint_ConfigureEndpointTable+0x58>
    45ec:	4b 2d       	mov	r20, r11
    45ee:	e9 30       	cpi	r30, 0x09	; 9
    45f0:	f1 05       	cpc	r31, r1
    45f2:	50 f0       	brcs	.+20     	; 0x4608 <Endpoint_ConfigureEndpointTable+0x72>
    45f4:	2d 2d       	mov	r18, r13
    45f6:	3e 2d       	mov	r19, r14
    45f8:	9f 2d       	mov	r25, r15
    45fa:	9f 5f       	subi	r25, 0xFF	; 255
    45fc:	22 0f       	add	r18, r18
    45fe:	33 1f       	adc	r19, r19
    4600:	2e 17       	cp	r18, r30
    4602:	3f 07       	cpc	r19, r31
    4604:	d0 f3       	brcs	.-12     	; 0x45fa <Endpoint_ConfigureEndpointTable+0x64>
    4606:	01 c0       	rjmp	.+2      	; 0x460a <Endpoint_ConfigureEndpointTable+0x74>
    4608:	9f 2d       	mov	r25, r15
    460a:	92 95       	swap	r25
    460c:	90 7f       	andi	r25, 0xF0	; 240
    460e:	49 2b       	or	r20, r25
    4610:	55 1f       	adc	r21, r21
    4612:	55 27       	eor	r21, r21
    4614:	55 1f       	adc	r21, r21
    4616:	90 e4       	ldi	r25, 0x40	; 64
    4618:	79 9f       	mul	r23, r25
    461a:	90 01       	movw	r18, r0
    461c:	11 24       	eor	r1, r1
    461e:	65 2f       	mov	r22, r21
    4620:	62 2b       	or	r22, r18
    4622:	55 df       	rcall	.-342    	; 0x44ce <Endpoint_ConfigureEndpoint_Prv>
    4624:	88 23       	and	r24, r24
    4626:	51 f0       	breq	.+20     	; 0x463c <Endpoint_ConfigureEndpointTable+0xa6>
    4628:	1f 5f       	subi	r17, 0xFF	; 255
    462a:	25 96       	adiw	r28, 0x05	; 5
    462c:	10 13       	cpse	r17, r16
    462e:	cf cf       	rjmp	.-98     	; 0x45ce <Endpoint_ConfigureEndpointTable+0x38>
    4630:	04 c0       	rjmp	.+8      	; 0x463a <Endpoint_ConfigureEndpointTable+0xa4>
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	03 c0       	rjmp	.+6      	; 0x463c <Endpoint_ConfigureEndpointTable+0xa6>
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	01 c0       	rjmp	.+2      	; 0x463c <Endpoint_ConfigureEndpointTable+0xa6>
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	df 91       	pop	r29
    463e:	cf 91       	pop	r28
    4640:	1f 91       	pop	r17
    4642:	0f 91       	pop	r16
    4644:	ff 90       	pop	r15
    4646:	ef 90       	pop	r14
    4648:	df 90       	pop	r13
    464a:	cf 90       	pop	r12
    464c:	bf 90       	pop	r11
    464e:	08 95       	ret

00004650 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    4650:	80 91 41 08 	lds	r24, 0x0841
    4654:	88 23       	and	r24, r24
    4656:	1c f0       	brlt	.+6      	; 0x465e <Endpoint_ClearStatusStage+0xe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4658:	e8 ee       	ldi	r30, 0xE8	; 232
    465a:	f0 e0       	ldi	r31, 0x00	; 0
    465c:	12 c0       	rjmp	.+36     	; 0x4682 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    465e:	e8 ee       	ldi	r30, 0xE8	; 232
    4660:	f0 e0       	ldi	r31, 0x00	; 0
    4662:	03 c0       	rjmp	.+6      	; 0x466a <Endpoint_ClearStatusStage+0x1a>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    4664:	8e b3       	in	r24, 0x1e	; 30
    4666:	88 23       	and	r24, r24
    4668:	a1 f0       	breq	.+40     	; 0x4692 <Endpoint_ClearStatusStage+0x42>
    466a:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    466c:	82 ff       	sbrs	r24, 2
    466e:	fa cf       	rjmp	.-12     	; 0x4664 <Endpoint_ClearStatusStage+0x14>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4670:	e8 ee       	ldi	r30, 0xE8	; 232
    4672:	f0 e0       	ldi	r31, 0x00	; 0
    4674:	80 81       	ld	r24, Z
    4676:	8b 77       	andi	r24, 0x7B	; 123
    4678:	80 83       	st	Z, r24
    467a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    467c:	8e b3       	in	r24, 0x1e	; 30
    467e:	88 23       	and	r24, r24
    4680:	41 f0       	breq	.+16     	; 0x4692 <Endpoint_ClearStatusStage+0x42>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4682:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    4684:	80 ff       	sbrs	r24, 0
    4686:	fa cf       	rjmp	.-12     	; 0x467c <Endpoint_ClearStatusStage+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4688:	e8 ee       	ldi	r30, 0xE8	; 232
    468a:	f0 e0       	ldi	r31, 0x00	; 0
    468c:	80 81       	ld	r24, Z
    468e:	8e 77       	andi	r24, 0x7E	; 126
    4690:	80 83       	st	Z, r24
    4692:	08 95       	ret

00004694 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    4694:	0f 93       	push	r16
    4696:	1f 93       	push	r17
    4698:	cf 93       	push	r28
    469a:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    469c:	20 91 e4 00 	lds	r18, 0x00E4
    46a0:	30 91 e5 00 	lds	r19, 0x00E5
    46a4:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    46a6:	ac ee       	ldi	r26, 0xEC	; 236
    46a8:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    46aa:	e8 ee       	ldi	r30, 0xE8	; 232
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    46ae:	0b ee       	ldi	r16, 0xEB	; 235
    46b0:	10 e0       	ldi	r17, 0x00	; 0
    46b2:	44 ee       	ldi	r20, 0xE4	; 228
    46b4:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    46b6:	8c 91       	ld	r24, X
    46b8:	80 fd       	sbrc	r24, 0
    46ba:	20 c0       	rjmp	.+64     	; 0x46fc <Endpoint_WaitUntilReady+0x68>
    46bc:	23 c0       	rjmp	.+70     	; 0x4704 <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    46be:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    46c0:	88 23       	and	r24, r24
    46c2:	81 f0       	breq	.+32     	; 0x46e4 <Endpoint_WaitUntilReady+0x50>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    46c4:	85 30       	cpi	r24, 0x05	; 5
    46c6:	81 f0       	breq	.+32     	; 0x46e8 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    46c8:	e8 01       	movw	r28, r16
    46ca:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    46cc:	85 fd       	sbrc	r24, 5
    46ce:	0e c0       	rjmp	.+28     	; 0x46ec <Endpoint_WaitUntilReady+0x58>
    46d0:	ea 01       	movw	r28, r20
    46d2:	88 81       	ld	r24, Y
    46d4:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    46d6:	28 17       	cp	r18, r24
    46d8:	39 07       	cpc	r19, r25
    46da:	69 f3       	breq	.-38     	; 0x46b6 <Endpoint_WaitUntilReady+0x22>
    46dc:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    46de:	41 f0       	breq	.+16     	; 0x46f0 <Endpoint_WaitUntilReady+0x5c>
    46e0:	9c 01       	movw	r18, r24
    46e2:	e9 cf       	rjmp	.-46     	; 0x46b6 <Endpoint_WaitUntilReady+0x22>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    46e4:	82 e0       	ldi	r24, 0x02	; 2
    46e6:	12 c0       	rjmp	.+36     	; 0x470c <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    46e8:	83 e0       	ldi	r24, 0x03	; 3
    46ea:	10 c0       	rjmp	.+32     	; 0x470c <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	0e c0       	rjmp	.+28     	; 0x470c <Endpoint_WaitUntilReady+0x78>
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    46f0:	84 e0       	ldi	r24, 0x04	; 4
    46f2:	0c c0       	rjmp	.+24     	; 0x470c <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	0a c0       	rjmp	.+20     	; 0x470c <Endpoint_WaitUntilReady+0x78>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	08 c0       	rjmp	.+16     	; 0x470c <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    46fc:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    46fe:	80 ff       	sbrs	r24, 0
    4700:	de cf       	rjmp	.-68     	; 0x46be <Endpoint_WaitUntilReady+0x2a>
    4702:	f8 cf       	rjmp	.-16     	; 0x46f4 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4704:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    4706:	82 ff       	sbrs	r24, 2
    4708:	da cf       	rjmp	.-76     	; 0x46be <Endpoint_WaitUntilReady+0x2a>
    470a:	f6 cf       	rjmp	.-20     	; 0x46f8 <Endpoint_WaitUntilReady+0x64>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    470c:	df 91       	pop	r29
    470e:	cf 91       	pop	r28
    4710:	1f 91       	pop	r17
    4712:	0f 91       	pop	r16
    4714:	08 95       	ret

00004716 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    4716:	0f 93       	push	r16
    4718:	1f 93       	push	r17
    471a:	cf 93       	push	r28
    471c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    471e:	4b d0       	rcall	.+150    	; 0x47b6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    4720:	52 d0       	rcall	.+164    	; 0x47c6 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    4722:	c8 ed       	ldi	r28, 0xD8	; 216
    4724:	d0 e0       	ldi	r29, 0x00	; 0
    4726:	88 81       	ld	r24, Y
    4728:	8f 77       	andi	r24, 0x7F	; 127
    472a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    472c:	88 81       	ld	r24, Y
    472e:	80 68       	ori	r24, 0x80	; 128
    4730:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    4732:	88 81       	ld	r24, Y
    4734:	8f 7d       	andi	r24, 0xDF	; 223
    4736:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    4738:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    473a:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    473c:	10 92 3d 08 	sts	0x083D, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    4740:	10 92 3f 08 	sts	0x083F, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    4744:	10 92 3e 08 	sts	0x083E, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    4748:	00 ee       	ldi	r16, 0xE0	; 224
    474a:	10 e0       	ldi	r17, 0x00	; 0
    474c:	f8 01       	movw	r30, r16
    474e:	80 81       	ld	r24, Z
    4750:	8b 7f       	andi	r24, 0xFB	; 251
    4752:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    4754:	88 81       	ld	r24, Y
    4756:	81 60       	ori	r24, 0x01	; 1
    4758:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    475a:	42 e0       	ldi	r20, 0x02	; 2
    475c:	60 e0       	ldi	r22, 0x00	; 0
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	b6 de       	rcall	.-660    	; 0x44ce <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    4762:	e1 ee       	ldi	r30, 0xE1	; 225
    4764:	f0 e0       	ldi	r31, 0x00	; 0
    4766:	80 81       	ld	r24, Z
    4768:	8e 7f       	andi	r24, 0xFE	; 254
    476a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    476c:	e2 ee       	ldi	r30, 0xE2	; 226
    476e:	f0 e0       	ldi	r31, 0x00	; 0
    4770:	80 81       	ld	r24, Z
    4772:	81 60       	ori	r24, 0x01	; 1
    4774:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    4776:	80 81       	ld	r24, Z
    4778:	88 60       	ori	r24, 0x08	; 8
    477a:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    477c:	f8 01       	movw	r30, r16
    477e:	80 81       	ld	r24, Z
    4780:	8e 7f       	andi	r24, 0xFE	; 254
    4782:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    4784:	88 81       	ld	r24, Y
    4786:	80 61       	ori	r24, 0x10	; 16
    4788:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    478a:	df 91       	pop	r29
    478c:	cf 91       	pop	r28
    478e:	1f 91       	pop	r17
    4790:	0f 91       	pop	r16
    4792:	08 95       	ret

00004794 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    4794:	e8 ed       	ldi	r30, 0xD8	; 216
    4796:	f0 e0       	ldi	r31, 0x00	; 0
    4798:	80 81       	ld	r24, Z
    479a:	8f 7e       	andi	r24, 0xEF	; 239
    479c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    479e:	e7 ed       	ldi	r30, 0xD7	; 215
    47a0:	f0 e0       	ldi	r31, 0x00	; 0
    47a2:	80 81       	ld	r24, Z
    47a4:	81 60       	ori	r24, 0x01	; 1
    47a6:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    47a8:	84 e0       	ldi	r24, 0x04	; 4
    47aa:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    47ac:	81 e0       	ldi	r24, 0x01	; 1
    47ae:	80 93 40 08 	sts	0x0840, r24

	USB_ResetInterface();
    47b2:	b1 cf       	rjmp	.-158    	; 0x4716 <USB_ResetInterface>
    47b4:	08 95       	ret

000047b6 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    47b6:	e8 ed       	ldi	r30, 0xD8	; 216
    47b8:	f0 e0       	ldi	r31, 0x00	; 0
    47ba:	80 81       	ld	r24, Z
    47bc:	8e 7f       	andi	r24, 0xFE	; 254
    47be:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    47c0:	10 92 e2 00 	sts	0x00E2, r1
    47c4:	08 95       	ret

000047c6 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    47c6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    47ca:	10 92 e1 00 	sts	0x00E1, r1
    47ce:	08 95       	ret

000047d0 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    47d0:	1f 92       	push	r1
    47d2:	0f 92       	push	r0
    47d4:	0f b6       	in	r0, 0x3f	; 63
    47d6:	0f 92       	push	r0
    47d8:	11 24       	eor	r1, r1
    47da:	2f 93       	push	r18
    47dc:	3f 93       	push	r19
    47de:	4f 93       	push	r20
    47e0:	5f 93       	push	r21
    47e2:	6f 93       	push	r22
    47e4:	7f 93       	push	r23
    47e6:	8f 93       	push	r24
    47e8:	9f 93       	push	r25
    47ea:	af 93       	push	r26
    47ec:	bf 93       	push	r27
    47ee:	ef 93       	push	r30
    47f0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    47f2:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    47f6:	82 ff       	sbrs	r24, 2
    47f8:	0a c0       	rjmp	.+20     	; 0x480e <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    47fa:	80 91 e2 00 	lds	r24, 0x00E2
    47fe:	82 ff       	sbrs	r24, 2
    4800:	06 c0       	rjmp	.+12     	; 0x480e <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    4802:	e1 ee       	ldi	r30, 0xE1	; 225
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	80 81       	ld	r24, Z
    4808:	8b 7f       	andi	r24, 0xFB	; 251
    480a:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    480c:	47 d2       	rcall	.+1166   	; 0x4c9c <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    480e:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    4812:	80 ff       	sbrs	r24, 0
    4814:	1c c0       	rjmp	.+56     	; 0x484e <__vector_10+0x7e>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    4816:	80 91 d8 00 	lds	r24, 0x00D8
    481a:	80 ff       	sbrs	r24, 0
    481c:	18 c0       	rjmp	.+48     	; 0x484e <__vector_10+0x7e>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    481e:	ea ed       	ldi	r30, 0xDA	; 218
    4820:	f0 e0       	ldi	r31, 0x00	; 0
    4822:	80 81       	ld	r24, Z
    4824:	8e 7f       	andi	r24, 0xFE	; 254
    4826:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    4828:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    482c:	80 ff       	sbrs	r24, 0
    482e:	0b c0       	rjmp	.+22     	; 0x4846 <__vector_10+0x76>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    4830:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    4832:	82 e0       	ldi	r24, 0x02	; 2
    4834:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    4836:	09 b4       	in	r0, 0x29	; 41
    4838:	00 fe       	sbrs	r0, 0
    483a:	fd cf       	rjmp	.-6      	; 0x4836 <__vector_10+0x66>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    4840:	0e 94 00 1a 	call	0x3400	; 0x3400 <EVENT_USB_Device_Connect>
    4844:	04 c0       	rjmp	.+8      	; 0x484e <__vector_10+0x7e>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    4846:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    4848:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    484a:	0e 94 01 1a 	call	0x3402	; 0x3402 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    484e:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    4852:	80 ff       	sbrs	r24, 0
    4854:	15 c0       	rjmp	.+42     	; 0x4880 <__vector_10+0xb0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    4856:	80 91 e2 00 	lds	r24, 0x00E2
    485a:	80 ff       	sbrs	r24, 0
    485c:	11 c0       	rjmp	.+34     	; 0x4880 <__vector_10+0xb0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    485e:	e2 ee       	ldi	r30, 0xE2	; 226
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	80 81       	ld	r24, Z
    4864:	8e 7f       	andi	r24, 0xFE	; 254
    4866:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    4868:	80 81       	ld	r24, Z
    486a:	80 61       	ori	r24, 0x10	; 16
    486c:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    486e:	e8 ed       	ldi	r30, 0xD8	; 216
    4870:	f0 e0       	ldi	r31, 0x00	; 0
    4872:	80 81       	ld	r24, Z
    4874:	80 62       	ori	r24, 0x20	; 32
    4876:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    4878:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    487a:	85 e0       	ldi	r24, 0x05	; 5
    487c:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    487e:	0e d2       	rcall	.+1052   	; 0x4c9c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    4880:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    4884:	84 ff       	sbrs	r24, 4
    4886:	2c c0       	rjmp	.+88     	; 0x48e0 <__vector_10+0x110>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    4888:	80 91 e2 00 	lds	r24, 0x00E2
    488c:	84 ff       	sbrs	r24, 4
    488e:	28 c0       	rjmp	.+80     	; 0x48e0 <__vector_10+0x110>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    4890:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    4892:	82 e0       	ldi	r24, 0x02	; 2
    4894:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    4896:	09 b4       	in	r0, 0x29	; 41
    4898:	00 fe       	sbrs	r0, 0
    489a:	fd cf       	rjmp	.-6      	; 0x4896 <__vector_10+0xc6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    489c:	e8 ed       	ldi	r30, 0xD8	; 216
    489e:	f0 e0       	ldi	r31, 0x00	; 0
    48a0:	80 81       	ld	r24, Z
    48a2:	8f 7d       	andi	r24, 0xDF	; 223
    48a4:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    48a6:	e1 ee       	ldi	r30, 0xE1	; 225
    48a8:	f0 e0       	ldi	r31, 0x00	; 0
    48aa:	80 81       	ld	r24, Z
    48ac:	8f 7e       	andi	r24, 0xEF	; 239
    48ae:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    48b0:	e2 ee       	ldi	r30, 0xE2	; 226
    48b2:	f0 e0       	ldi	r31, 0x00	; 0
    48b4:	80 81       	ld	r24, Z
    48b6:	8f 7e       	andi	r24, 0xEF	; 239
    48b8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    48ba:	80 81       	ld	r24, Z
    48bc:	81 60       	ori	r24, 0x01	; 1
    48be:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    48c0:	80 91 3d 08 	lds	r24, 0x083D
    48c4:	88 23       	and	r24, r24
    48c6:	19 f0       	breq	.+6      	; 0x48ce <__vector_10+0xfe>
		  USB_DeviceState = DEVICE_STATE_Configured;
    48c8:	84 e0       	ldi	r24, 0x04	; 4
    48ca:	8e bb       	out	0x1e, r24	; 30
    48cc:	08 c0       	rjmp	.+16     	; 0x48de <__vector_10+0x10e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    48ce:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    48d2:	88 23       	and	r24, r24
    48d4:	14 f4       	brge	.+4      	; 0x48da <__vector_10+0x10a>
    48d6:	83 e0       	ldi	r24, 0x03	; 3
    48d8:	01 c0       	rjmp	.+2      	; 0x48dc <__vector_10+0x10c>
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    48de:	de d1       	rcall	.+956    	; 0x4c9c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    48e0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    48e4:	83 ff       	sbrs	r24, 3
    48e6:	22 c0       	rjmp	.+68     	; 0x492c <__vector_10+0x15c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    48e8:	80 91 e2 00 	lds	r24, 0x00E2
    48ec:	83 ff       	sbrs	r24, 3
    48ee:	1e c0       	rjmp	.+60     	; 0x492c <__vector_10+0x15c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    48f0:	e1 ee       	ldi	r30, 0xE1	; 225
    48f2:	f0 e0       	ldi	r31, 0x00	; 0
    48f4:	80 81       	ld	r24, Z
    48f6:	87 7f       	andi	r24, 0xF7	; 247
    48f8:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    48fa:	82 e0       	ldi	r24, 0x02	; 2
    48fc:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    48fe:	10 92 3d 08 	sts	0x083D, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    4902:	80 81       	ld	r24, Z
    4904:	8e 7f       	andi	r24, 0xFE	; 254
    4906:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    4908:	e2 ee       	ldi	r30, 0xE2	; 226
    490a:	f0 e0       	ldi	r31, 0x00	; 0
    490c:	80 81       	ld	r24, Z
    490e:	8e 7f       	andi	r24, 0xFE	; 254
    4910:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    4912:	80 81       	ld	r24, Z
    4914:	80 61       	ori	r24, 0x10	; 16
    4916:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    4918:	42 e0       	ldi	r20, 0x02	; 2
    491a:	60 e0       	ldi	r22, 0x00	; 0
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	d7 dd       	rcall	.-1106   	; 0x44ce <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    4920:	e0 ef       	ldi	r30, 0xF0	; 240
    4922:	f0 e0       	ldi	r31, 0x00	; 0
    4924:	80 81       	ld	r24, Z
    4926:	88 60       	ori	r24, 0x08	; 8
    4928:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    492a:	b8 d1       	rcall	.+880    	; 0x4c9c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    492c:	ff 91       	pop	r31
    492e:	ef 91       	pop	r30
    4930:	bf 91       	pop	r27
    4932:	af 91       	pop	r26
    4934:	9f 91       	pop	r25
    4936:	8f 91       	pop	r24
    4938:	7f 91       	pop	r23
    493a:	6f 91       	pop	r22
    493c:	5f 91       	pop	r21
    493e:	4f 91       	pop	r20
    4940:	3f 91       	pop	r19
    4942:	2f 91       	pop	r18
    4944:	0f 90       	pop	r0
    4946:	0f be       	out	0x3f, r0	; 63
    4948:	0f 90       	pop	r0
    494a:	1f 90       	pop	r1
    494c:	18 95       	reti

0000494e <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    494e:	1f 92       	push	r1
    4950:	0f 92       	push	r0
    4952:	0f b6       	in	r0, 0x3f	; 63
    4954:	0f 92       	push	r0
    4956:	11 24       	eor	r1, r1
    4958:	2f 93       	push	r18
    495a:	3f 93       	push	r19
    495c:	4f 93       	push	r20
    495e:	5f 93       	push	r21
    4960:	6f 93       	push	r22
    4962:	7f 93       	push	r23
    4964:	8f 93       	push	r24
    4966:	9f 93       	push	r25
    4968:	af 93       	push	r26
    496a:	bf 93       	push	r27
    496c:	cf 93       	push	r28
    496e:	ef 93       	push	r30
    4970:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    4972:	c0 91 e9 00 	lds	r28, 0x00E9
    4976:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    4978:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    497c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    4980:	e0 ef       	ldi	r30, 0xF0	; 240
    4982:	f0 e0       	ldi	r31, 0x00	; 0
    4984:	80 81       	ld	r24, Z
    4986:	87 7f       	andi	r24, 0xF7	; 247
    4988:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    498a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    498c:	1b d0       	rcall	.+54     	; 0x49c4 <USB_Device_ProcessControlRequest>
    498e:	e9 ee       	ldi	r30, 0xE9	; 233
    4990:	f0 e0       	ldi	r31, 0x00	; 0
    4992:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    4994:	a0 ef       	ldi	r26, 0xF0	; 240
    4996:	b0 e0       	ldi	r27, 0x00	; 0
    4998:	8c 91       	ld	r24, X
    499a:	88 60       	ori	r24, 0x08	; 8
    499c:	8c 93       	st	X, r24
    499e:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    49a0:	ff 91       	pop	r31
    49a2:	ef 91       	pop	r30
    49a4:	cf 91       	pop	r28
    49a6:	bf 91       	pop	r27
    49a8:	af 91       	pop	r26
    49aa:	9f 91       	pop	r25
    49ac:	8f 91       	pop	r24
    49ae:	7f 91       	pop	r23
    49b0:	6f 91       	pop	r22
    49b2:	5f 91       	pop	r21
    49b4:	4f 91       	pop	r20
    49b6:	3f 91       	pop	r19
    49b8:	2f 91       	pop	r18
    49ba:	0f 90       	pop	r0
    49bc:	0f be       	out	0x3f, r0	; 63
    49be:	0f 90       	pop	r0
    49c0:	1f 90       	pop	r1
    49c2:	18 95       	reti

000049c4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    49c4:	0f 93       	push	r16
    49c6:	1f 93       	push	r17
    49c8:	cf 93       	push	r28
    49ca:	df 93       	push	r29
    49cc:	cd b7       	in	r28, 0x3d	; 61
    49ce:	de b7       	in	r29, 0x3e	; 62
    49d0:	aa 97       	sbiw	r28, 0x2a	; 42
    49d2:	0f b6       	in	r0, 0x3f	; 63
    49d4:	f8 94       	cli
    49d6:	de bf       	out	0x3e, r29	; 62
    49d8:	0f be       	out	0x3f, r0	; 63
    49da:	cd bf       	out	0x3d, r28	; 61
    49dc:	e1 e4       	ldi	r30, 0x41	; 65
    49de:	f8 e0       	ldi	r31, 0x08	; 8
    49e0:	89 e4       	ldi	r24, 0x49	; 73
    49e2:	98 e0       	ldi	r25, 0x08	; 8
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    49e4:	a1 ef       	ldi	r26, 0xF1	; 241
    49e6:	b0 e0       	ldi	r27, 0x00	; 0
    49e8:	2c 91       	ld	r18, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    49ea:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    49ec:	e8 17       	cp	r30, r24
    49ee:	f9 07       	cpc	r31, r25
    49f0:	d9 f7       	brne	.-10     	; 0x49e8 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    49f2:	0e 94 09 1a 	call	0x3412	; 0x3412 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    49f6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    49fa:	83 ff       	sbrs	r24, 3
    49fc:	2a c1       	rjmp	.+596    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    49fe:	90 91 41 08 	lds	r25, 0x0841

		switch (USB_ControlRequest.bRequest)
    4a02:	80 91 42 08 	lds	r24, 0x0842
    4a06:	85 30       	cpi	r24, 0x05	; 5
    4a08:	09 f4       	brne	.+2      	; 0x4a0c <USB_Device_ProcessControlRequest+0x48>
    4a0a:	78 c0       	rjmp	.+240    	; 0x4afc <USB_Device_ProcessControlRequest+0x138>
    4a0c:	30 f4       	brcc	.+12     	; 0x4a1a <USB_Device_ProcessControlRequest+0x56>
    4a0e:	81 30       	cpi	r24, 0x01	; 1
    4a10:	b1 f1       	breq	.+108    	; 0x4a7e <USB_Device_ProcessControlRequest+0xba>
    4a12:	68 f0       	brcs	.+26     	; 0x4a2e <USB_Device_ProcessControlRequest+0x6a>
    4a14:	83 30       	cpi	r24, 0x03	; 3
    4a16:	99 f1       	breq	.+102    	; 0x4a7e <USB_Device_ProcessControlRequest+0xba>
    4a18:	1c c1       	rjmp	.+568    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
    4a1a:	88 30       	cpi	r24, 0x08	; 8
    4a1c:	09 f4       	brne	.+2      	; 0x4a20 <USB_Device_ProcessControlRequest+0x5c>
    4a1e:	e8 c0       	rjmp	.+464    	; 0x4bf0 <USB_Device_ProcessControlRequest+0x22c>
    4a20:	89 30       	cpi	r24, 0x09	; 9
    4a22:	09 f4       	brne	.+2      	; 0x4a26 <USB_Device_ProcessControlRequest+0x62>
    4a24:	f5 c0       	rjmp	.+490    	; 0x4c10 <USB_Device_ProcessControlRequest+0x24c>
    4a26:	86 30       	cpi	r24, 0x06	; 6
    4a28:	09 f0       	breq	.+2      	; 0x4a2c <USB_Device_ProcessControlRequest+0x68>
    4a2a:	13 c1       	rjmp	.+550    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
    4a2c:	89 c0       	rjmp	.+274    	; 0x4b40 <USB_Device_ProcessControlRequest+0x17c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    4a2e:	90 38       	cpi	r25, 0x80	; 128
    4a30:	21 f0       	breq	.+8      	; 0x4a3a <USB_Device_ProcessControlRequest+0x76>
    4a32:	92 38       	cpi	r25, 0x82	; 130
    4a34:	09 f0       	breq	.+2      	; 0x4a38 <USB_Device_ProcessControlRequest+0x74>
    4a36:	0d c1       	rjmp	.+538    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
    4a38:	08 c0       	rjmp	.+16     	; 0x4a4a <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    4a3a:	80 91 3e 08 	lds	r24, 0x083E
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    4a3e:	90 91 3f 08 	lds	r25, 0x083F
    4a42:	99 23       	and	r25, r25
    4a44:	71 f0       	breq	.+28     	; 0x4a62 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    4a46:	82 60       	ori	r24, 0x02	; 2
    4a48:	0c c0       	rjmp	.+24     	; 0x4a62 <USB_Device_ProcessControlRequest+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4a4a:	80 91 45 08 	lds	r24, 0x0845
    4a4e:	8f 70       	andi	r24, 0x0F	; 15
    4a50:	e9 ee       	ldi	r30, 0xE9	; 233
    4a52:	f0 e0       	ldi	r31, 0x00	; 0
    4a54:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    4a56:	80 91 eb 00 	lds	r24, 0x00EB
    4a5a:	85 fb       	bst	r24, 5
    4a5c:	88 27       	eor	r24, r24
    4a5e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4a60:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4a62:	e8 ee       	ldi	r30, 0xE8	; 232
    4a64:	f0 e0       	ldi	r31, 0x00	; 0
    4a66:	90 81       	ld	r25, Z
    4a68:	97 7f       	andi	r25, 0xF7	; 247
    4a6a:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    4a6c:	a1 ef       	ldi	r26, 0xF1	; 241
    4a6e:	b0 e0       	ldi	r27, 0x00	; 0
    4a70:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    4a72:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4a74:	80 81       	ld	r24, Z
    4a76:	8e 77       	andi	r24, 0x7E	; 126
    4a78:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    4a7a:	ea dd       	rcall	.-1068   	; 0x4650 <Endpoint_ClearStatusStage>
    4a7c:	ea c0       	rjmp	.+468    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    4a7e:	99 23       	and	r25, r25
    4a80:	09 f4       	brne	.+2      	; 0x4a84 <USB_Device_ProcessControlRequest+0xc0>
    4a82:	f6 c0       	rjmp	.+492    	; 0x4c70 <USB_Device_ProcessControlRequest+0x2ac>
    4a84:	92 30       	cpi	r25, 0x02	; 2
    4a86:	09 f0       	breq	.+2      	; 0x4a8a <USB_Device_ProcessControlRequest+0xc6>
    4a88:	e4 c0       	rjmp	.+456    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
    4a8a:	f7 c0       	rjmp	.+494    	; 0x4c7a <USB_Device_ProcessControlRequest+0x2b6>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    4a8c:	91 e0       	ldi	r25, 0x01	; 1
    4a8e:	83 30       	cpi	r24, 0x03	; 3
    4a90:	09 f0       	breq	.+2      	; 0x4a94 <USB_Device_ProcessControlRequest+0xd0>
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	90 93 3f 08 	sts	0x083F, r25
    4a98:	28 c0       	rjmp	.+80     	; 0x4aea <USB_Device_ProcessControlRequest+0x126>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    4a9a:	20 91 45 08 	lds	r18, 0x0845
    4a9e:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    4aa0:	09 f4       	brne	.+2      	; 0x4aa4 <USB_Device_ProcessControlRequest+0xe0>
    4aa2:	d7 c0       	rjmp	.+430    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4aa4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    4aa8:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    4aac:	80 ff       	sbrs	r24, 0
    4aae:	1d c0       	rjmp	.+58     	; 0x4aea <USB_Device_ProcessControlRequest+0x126>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    4ab0:	80 91 42 08 	lds	r24, 0x0842
    4ab4:	83 30       	cpi	r24, 0x03	; 3
    4ab6:	31 f4       	brne	.+12     	; 0x4ac4 <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4ab8:	eb ee       	ldi	r30, 0xEB	; 235
    4aba:	f0 e0       	ldi	r31, 0x00	; 0
    4abc:	80 81       	ld	r24, Z
    4abe:	80 62       	ori	r24, 0x20	; 32
    4ac0:	80 83       	st	Z, r24
    4ac2:	13 c0       	rjmp	.+38     	; 0x4aea <USB_Device_ProcessControlRequest+0x126>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    4ac4:	eb ee       	ldi	r30, 0xEB	; 235
    4ac6:	f0 e0       	ldi	r31, 0x00	; 0
    4ac8:	80 81       	ld	r24, Z
    4aca:	80 61       	ori	r24, 0x10	; 16
    4acc:	80 83       	st	Z, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	02 c0       	rjmp	.+4      	; 0x4ad8 <USB_Device_ProcessControlRequest+0x114>
    4ad4:	88 0f       	add	r24, r24
    4ad6:	99 1f       	adc	r25, r25
    4ad8:	2a 95       	dec	r18
    4ada:	e2 f7       	brpl	.-8      	; 0x4ad4 <USB_Device_ProcessControlRequest+0x110>
    4adc:	aa ee       	ldi	r26, 0xEA	; 234
    4ade:	b0 e0       	ldi	r27, 0x00	; 0
    4ae0:	8c 93       	st	X, r24
				UERST = 0;
    4ae2:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4ae4:	80 81       	ld	r24, Z
    4ae6:	88 60       	ori	r24, 0x08	; 8
    4ae8:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4aea:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4aee:	e8 ee       	ldi	r30, 0xE8	; 232
    4af0:	f0 e0       	ldi	r31, 0x00	; 0
    4af2:	80 81       	ld	r24, Z
    4af4:	87 7f       	andi	r24, 0xF7	; 247
    4af6:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    4af8:	ab dd       	rcall	.-1194   	; 0x4650 <Endpoint_ClearStatusStage>
    4afa:	ab c0       	rjmp	.+342    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    4afc:	91 11       	cpse	r25, r1
    4afe:	a9 c0       	rjmp	.+338    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    4b00:	10 91 43 08 	lds	r17, 0x0843
    4b04:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    4b06:	e3 ee       	ldi	r30, 0xE3	; 227
    4b08:	f0 e0       	ldi	r31, 0x00	; 0
    4b0a:	80 81       	ld	r24, Z
    4b0c:	80 78       	andi	r24, 0x80	; 128
    4b0e:	81 2b       	or	r24, r17
    4b10:	80 83       	st	Z, r24
    4b12:	e8 ee       	ldi	r30, 0xE8	; 232
    4b14:	f0 e0       	ldi	r31, 0x00	; 0
    4b16:	80 81       	ld	r24, Z
    4b18:	87 7f       	andi	r24, 0xF7	; 247
    4b1a:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    4b1c:	99 dd       	rcall	.-1230   	; 0x4650 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4b1e:	e8 ee       	ldi	r30, 0xE8	; 232
    4b20:	f0 e0       	ldi	r31, 0x00	; 0
    4b22:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    4b24:	80 ff       	sbrs	r24, 0
    4b26:	fd cf       	rjmp	.-6      	; 0x4b22 <USB_Device_ProcessControlRequest+0x15e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    4b28:	e3 ee       	ldi	r30, 0xE3	; 227
    4b2a:	f0 e0       	ldi	r31, 0x00	; 0
    4b2c:	80 81       	ld	r24, Z
    4b2e:	80 68       	ori	r24, 0x80	; 128
    4b30:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    4b32:	11 23       	and	r17, r17
    4b34:	11 f0       	breq	.+4      	; 0x4b3a <USB_Device_ProcessControlRequest+0x176>
    4b36:	83 e0       	ldi	r24, 0x03	; 3
    4b38:	01 c0       	rjmp	.+2      	; 0x4b3c <USB_Device_ProcessControlRequest+0x178>
    4b3a:	82 e0       	ldi	r24, 0x02	; 2
    4b3c:	8e bb       	out	0x1e, r24	; 30
    4b3e:	89 c0       	rjmp	.+274    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    4b40:	90 58       	subi	r25, 0x80	; 128
    4b42:	92 30       	cpi	r25, 0x02	; 2
    4b44:	08 f0       	brcs	.+2      	; 0x4b48 <USB_Device_ProcessControlRequest+0x184>
    4b46:	85 c0       	rjmp	.+266    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    4b48:	80 91 43 08 	lds	r24, 0x0843
    4b4c:	90 91 44 08 	lds	r25, 0x0844
    4b50:	8c 3d       	cpi	r24, 0xDC	; 220
    4b52:	23 e0       	ldi	r18, 0x03	; 3
    4b54:	92 07       	cpc	r25, r18
    4b56:	99 f5       	brne	.+102    	; 0x4bbe <USB_Device_ProcessControlRequest+0x1fa>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    4b58:	83 e0       	ldi	r24, 0x03	; 3
    4b5a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    4b5c:	8a e2       	ldi	r24, 0x2A	; 42
    4b5e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    4b60:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    4b62:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    4b64:	de 01       	movw	r26, r28
    4b66:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    4b68:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    4b6a:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    4b6c:	41 e2       	ldi	r20, 0x21	; 33
    4b6e:	e3 2f       	mov	r30, r19
    4b70:	f0 e0       	ldi	r31, 0x00	; 0
    4b72:	40 93 57 00 	sts	0x0057, r20
    4b76:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    4b78:	20 ff       	sbrs	r18, 0
    4b7a:	03 c0       	rjmp	.+6      	; 0x4b82 <USB_Device_ProcessControlRequest+0x1be>
					{
						SerialByte >>= 4;
    4b7c:	82 95       	swap	r24
    4b7e:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    4b80:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    4b82:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    4b84:	8a 30       	cpi	r24, 0x0A	; 10
    4b86:	18 f0       	brcs	.+6      	; 0x4b8e <USB_Device_ProcessControlRequest+0x1ca>
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	c7 96       	adiw	r24, 0x37	; 55
    4b8c:	02 c0       	rjmp	.+4      	; 0x4b92 <USB_Device_ProcessControlRequest+0x1ce>
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	c0 96       	adiw	r24, 0x30	; 48
    4b92:	8d 93       	st	X+, r24
    4b94:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    4b96:	2f 5f       	subi	r18, 0xFF	; 255
    4b98:	24 31       	cpi	r18, 0x14	; 20
    4b9a:	49 f7       	brne	.-46     	; 0x4b6e <USB_Device_ProcessControlRequest+0x1aa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    4b9c:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4b9e:	08 ee       	ldi	r16, 0xE8	; 232
    4ba0:	10 e0       	ldi	r17, 0x00	; 0
    4ba2:	f8 01       	movw	r30, r16
    4ba4:	80 81       	ld	r24, Z
    4ba6:	87 7f       	andi	r24, 0xF7	; 247
    4ba8:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    4baa:	6a e2       	ldi	r22, 0x2A	; 42
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	ce 01       	movw	r24, r28
    4bb0:	01 96       	adiw	r24, 0x01	; 1
    4bb2:	0c db       	rcall	.-2536   	; 0x41cc <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4bb4:	f8 01       	movw	r30, r16
    4bb6:	80 81       	ld	r24, Z
    4bb8:	8b 77       	andi	r24, 0x7B	; 123
    4bba:	80 83       	st	Z, r24
    4bbc:	4a c0       	rjmp	.+148    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    4bbe:	ae 01       	movw	r20, r28
    4bc0:	4f 5f       	subi	r20, 0xFF	; 255
    4bc2:	5f 4f       	sbci	r21, 0xFF	; 255
    4bc4:	60 91 45 08 	lds	r22, 0x0845
    4bc8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <CALLBACK_USB_GetDescriptor>
    4bcc:	00 97       	sbiw	r24, 0x00	; 0
    4bce:	09 f4       	brne	.+2      	; 0x4bd2 <USB_Device_ProcessControlRequest+0x20e>
    4bd0:	40 c0       	rjmp	.+128    	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4bd2:	08 ee       	ldi	r16, 0xE8	; 232
    4bd4:	10 e0       	ldi	r17, 0x00	; 0
    4bd6:	f8 01       	movw	r30, r16
    4bd8:	20 81       	ld	r18, Z
    4bda:	27 7f       	andi	r18, 0xF7	; 247
    4bdc:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    4bde:	bc 01       	movw	r22, r24
    4be0:	89 81       	ldd	r24, Y+1	; 0x01
    4be2:	9a 81       	ldd	r25, Y+2	; 0x02
    4be4:	f1 db       	rcall	.-2078   	; 0x43c8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4be6:	f8 01       	movw	r30, r16
    4be8:	80 81       	ld	r24, Z
    4bea:	8b 77       	andi	r24, 0x7B	; 123
    4bec:	80 83       	st	Z, r24
    4bee:	31 c0       	rjmp	.+98     	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    4bf0:	90 38       	cpi	r25, 0x80	; 128
    4bf2:	79 f5       	brne	.+94     	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4bf4:	e8 ee       	ldi	r30, 0xE8	; 232
    4bf6:	f0 e0       	ldi	r31, 0x00	; 0
    4bf8:	80 81       	ld	r24, Z
    4bfa:	87 7f       	andi	r24, 0xF7	; 247
    4bfc:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    4bfe:	80 91 3d 08 	lds	r24, 0x083D
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4c02:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4c06:	80 81       	ld	r24, Z
    4c08:	8e 77       	andi	r24, 0x7E	; 126
    4c0a:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    4c0c:	21 dd       	rcall	.-1470   	; 0x4650 <Endpoint_ClearStatusStage>
    4c0e:	21 c0       	rjmp	.+66     	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    4c10:	91 11       	cpse	r25, r1
    4c12:	1f c0       	rjmp	.+62     	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    4c14:	80 91 43 08 	lds	r24, 0x0843
    4c18:	82 30       	cpi	r24, 0x02	; 2
    4c1a:	d8 f4       	brcc	.+54     	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4c1c:	e8 ee       	ldi	r30, 0xE8	; 232
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	80 81       	ld	r24, Z
    4c22:	87 7f       	andi	r24, 0xF7	; 247
    4c24:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    4c26:	80 91 43 08 	lds	r24, 0x0843
    4c2a:	80 93 3d 08 	sts	0x083D, r24

	Endpoint_ClearStatusStage();
    4c2e:	10 dd       	rcall	.-1504   	; 0x4650 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    4c30:	80 91 3d 08 	lds	r24, 0x083D
    4c34:	88 23       	and	r24, r24
    4c36:	19 f0       	breq	.+6      	; 0x4c3e <USB_Device_ProcessControlRequest+0x27a>
	  USB_DeviceState = DEVICE_STATE_Configured;
    4c38:	84 e0       	ldi	r24, 0x04	; 4
    4c3a:	8e bb       	out	0x1e, r24	; 30
    4c3c:	08 c0       	rjmp	.+16     	; 0x4c4e <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    4c3e:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    4c42:	88 23       	and	r24, r24
    4c44:	14 f4       	brge	.+4      	; 0x4c4a <USB_Device_ProcessControlRequest+0x286>
    4c46:	84 e0       	ldi	r24, 0x04	; 4
    4c48:	01 c0       	rjmp	.+2      	; 0x4c4c <USB_Device_ProcessControlRequest+0x288>
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    4c4c:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    4c4e:	0e 94 02 1a 	call	0x3404	; 0x3404 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4c52:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    4c56:	83 ff       	sbrs	r24, 3
    4c58:	16 c0       	rjmp	.+44     	; 0x4c86 <USB_Device_ProcessControlRequest+0x2c2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4c5a:	e8 ee       	ldi	r30, 0xE8	; 232
    4c5c:	f0 e0       	ldi	r31, 0x00	; 0
    4c5e:	80 81       	ld	r24, Z
    4c60:	87 7f       	andi	r24, 0xF7	; 247
    4c62:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4c64:	eb ee       	ldi	r30, 0xEB	; 235
    4c66:	f0 e0       	ldi	r31, 0x00	; 0
    4c68:	80 81       	ld	r24, Z
    4c6a:	80 62       	ori	r24, 0x20	; 32
    4c6c:	80 83       	st	Z, r24
    4c6e:	0b c0       	rjmp	.+22     	; 0x4c86 <USB_Device_ProcessControlRequest+0x2c2>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    4c70:	90 91 43 08 	lds	r25, 0x0843
    4c74:	91 30       	cpi	r25, 0x01	; 1
    4c76:	69 f7       	brne	.-38     	; 0x4c52 <USB_Device_ProcessControlRequest+0x28e>
    4c78:	09 cf       	rjmp	.-494    	; 0x4a8c <USB_Device_ProcessControlRequest+0xc8>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    4c7a:	80 91 43 08 	lds	r24, 0x0843
    4c7e:	88 23       	and	r24, r24
    4c80:	09 f4       	brne	.+2      	; 0x4c84 <USB_Device_ProcessControlRequest+0x2c0>
    4c82:	0b cf       	rjmp	.-490    	; 0x4a9a <USB_Device_ProcessControlRequest+0xd6>
    4c84:	32 cf       	rjmp	.-412    	; 0x4aea <USB_Device_ProcessControlRequest+0x126>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    4c86:	aa 96       	adiw	r28, 0x2a	; 42
    4c88:	0f b6       	in	r0, 0x3f	; 63
    4c8a:	f8 94       	cli
    4c8c:	de bf       	out	0x3e, r29	; 62
    4c8e:	0f be       	out	0x3f, r0	; 63
    4c90:	cd bf       	out	0x3d, r28	; 61
    4c92:	df 91       	pop	r29
    4c94:	cf 91       	pop	r28
    4c96:	1f 91       	pop	r17
    4c98:	0f 91       	pop	r16
    4c9a:	08 95       	ret

00004c9c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    4c9c:	08 95       	ret

00004c9e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    4c9e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    4ca0:	8e b3       	in	r24, 0x1e	; 30
    4ca2:	88 23       	and	r24, r24
    4ca4:	a1 f0       	breq	.+40     	; 0x4cce <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    4ca6:	c0 91 e9 00 	lds	r28, 0x00E9
    4caa:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    4cac:	80 91 ec 00 	lds	r24, 0x00EC
    4cb0:	80 ff       	sbrs	r24, 0
    4cb2:	02 c0       	rjmp	.+4      	; 0x4cb8 <USB_USBTask+0x1a>
    4cb4:	80 e8       	ldi	r24, 0x80	; 128
    4cb6:	01 c0       	rjmp	.+2      	; 0x4cba <USB_USBTask+0x1c>
    4cb8:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    4cba:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4cbc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4cc0:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    4cc4:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    4cc6:	7e de       	rcall	.-772    	; 0x49c4 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4cc8:	cf 70       	andi	r28, 0x0F	; 15
    4cca:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    4cce:	cf 91       	pop	r28
    4cd0:	08 95       	ret

00004cd2 <__udivmodsi4>:
    4cd2:	a1 e2       	ldi	r26, 0x21	; 33
    4cd4:	1a 2e       	mov	r1, r26
    4cd6:	aa 1b       	sub	r26, r26
    4cd8:	bb 1b       	sub	r27, r27
    4cda:	fd 01       	movw	r30, r26
    4cdc:	0d c0       	rjmp	.+26     	; 0x4cf8 <__udivmodsi4_ep>

00004cde <__udivmodsi4_loop>:
    4cde:	aa 1f       	adc	r26, r26
    4ce0:	bb 1f       	adc	r27, r27
    4ce2:	ee 1f       	adc	r30, r30
    4ce4:	ff 1f       	adc	r31, r31
    4ce6:	a2 17       	cp	r26, r18
    4ce8:	b3 07       	cpc	r27, r19
    4cea:	e4 07       	cpc	r30, r20
    4cec:	f5 07       	cpc	r31, r21
    4cee:	20 f0       	brcs	.+8      	; 0x4cf8 <__udivmodsi4_ep>
    4cf0:	a2 1b       	sub	r26, r18
    4cf2:	b3 0b       	sbc	r27, r19
    4cf4:	e4 0b       	sbc	r30, r20
    4cf6:	f5 0b       	sbc	r31, r21

00004cf8 <__udivmodsi4_ep>:
    4cf8:	66 1f       	adc	r22, r22
    4cfa:	77 1f       	adc	r23, r23
    4cfc:	88 1f       	adc	r24, r24
    4cfe:	99 1f       	adc	r25, r25
    4d00:	1a 94       	dec	r1
    4d02:	69 f7       	brne	.-38     	; 0x4cde <__udivmodsi4_loop>
    4d04:	60 95       	com	r22
    4d06:	70 95       	com	r23
    4d08:	80 95       	com	r24
    4d0a:	90 95       	com	r25
    4d0c:	9b 01       	movw	r18, r22
    4d0e:	ac 01       	movw	r20, r24
    4d10:	bd 01       	movw	r22, r26
    4d12:	cf 01       	movw	r24, r30
    4d14:	08 95       	ret

00004d16 <__muluhisi3>:
    4d16:	09 d0       	rcall	.+18     	; 0x4d2a <__umulhisi3>
    4d18:	a5 9f       	mul	r26, r21
    4d1a:	90 0d       	add	r25, r0
    4d1c:	b4 9f       	mul	r27, r20
    4d1e:	90 0d       	add	r25, r0
    4d20:	a4 9f       	mul	r26, r20
    4d22:	80 0d       	add	r24, r0
    4d24:	91 1d       	adc	r25, r1
    4d26:	11 24       	eor	r1, r1
    4d28:	08 95       	ret

00004d2a <__umulhisi3>:
    4d2a:	a2 9f       	mul	r26, r18
    4d2c:	b0 01       	movw	r22, r0
    4d2e:	b3 9f       	mul	r27, r19
    4d30:	c0 01       	movw	r24, r0
    4d32:	a3 9f       	mul	r26, r19
    4d34:	70 0d       	add	r23, r0
    4d36:	81 1d       	adc	r24, r1
    4d38:	11 24       	eor	r1, r1
    4d3a:	91 1d       	adc	r25, r1
    4d3c:	b2 9f       	mul	r27, r18
    4d3e:	70 0d       	add	r23, r0
    4d40:	81 1d       	adc	r24, r1
    4d42:	11 24       	eor	r1, r1
    4d44:	91 1d       	adc	r25, r1
    4d46:	08 95       	ret

00004d48 <memcmp>:
    4d48:	fb 01       	movw	r30, r22
    4d4a:	dc 01       	movw	r26, r24
    4d4c:	04 c0       	rjmp	.+8      	; 0x4d56 <memcmp+0xe>
    4d4e:	8d 91       	ld	r24, X+
    4d50:	01 90       	ld	r0, Z+
    4d52:	80 19       	sub	r24, r0
    4d54:	21 f4       	brne	.+8      	; 0x4d5e <memcmp+0x16>
    4d56:	41 50       	subi	r20, 0x01	; 1
    4d58:	50 40       	sbci	r21, 0x00	; 0
    4d5a:	c8 f7       	brcc	.-14     	; 0x4d4e <memcmp+0x6>
    4d5c:	88 1b       	sub	r24, r24
    4d5e:	99 0b       	sbc	r25, r25
    4d60:	08 95       	ret

00004d62 <memcpy>:
    4d62:	fb 01       	movw	r30, r22
    4d64:	dc 01       	movw	r26, r24
    4d66:	02 c0       	rjmp	.+4      	; 0x4d6c <memcpy+0xa>
    4d68:	01 90       	ld	r0, Z+
    4d6a:	0d 92       	st	X+, r0
    4d6c:	41 50       	subi	r20, 0x01	; 1
    4d6e:	50 40       	sbci	r21, 0x00	; 0
    4d70:	d8 f7       	brcc	.-10     	; 0x4d68 <memcpy+0x6>
    4d72:	08 95       	ret

00004d74 <memset>:
    4d74:	dc 01       	movw	r26, r24
    4d76:	01 c0       	rjmp	.+2      	; 0x4d7a <memset+0x6>
    4d78:	6d 93       	st	X+, r22
    4d7a:	41 50       	subi	r20, 0x01	; 1
    4d7c:	50 40       	sbci	r21, 0x00	; 0
    4d7e:	e0 f7       	brcc	.-8      	; 0x4d78 <memset+0x4>
    4d80:	08 95       	ret

00004d82 <sprintf>:
    4d82:	ae e0       	ldi	r26, 0x0E	; 14
    4d84:	b0 e0       	ldi	r27, 0x00	; 0
    4d86:	e6 ec       	ldi	r30, 0xC6	; 198
    4d88:	f6 e2       	ldi	r31, 0x26	; 38
    4d8a:	a3 c2       	rjmp	.+1350   	; 0x52d2 <__prologue_saves__+0x1c>
    4d8c:	0d 89       	ldd	r16, Y+21	; 0x15
    4d8e:	1e 89       	ldd	r17, Y+22	; 0x16
    4d90:	86 e0       	ldi	r24, 0x06	; 6
    4d92:	8c 83       	std	Y+4, r24	; 0x04
    4d94:	1a 83       	std	Y+2, r17	; 0x02
    4d96:	09 83       	std	Y+1, r16	; 0x01
    4d98:	8f ef       	ldi	r24, 0xFF	; 255
    4d9a:	9f e7       	ldi	r25, 0x7F	; 127
    4d9c:	9e 83       	std	Y+6, r25	; 0x06
    4d9e:	8d 83       	std	Y+5, r24	; 0x05
    4da0:	ae 01       	movw	r20, r28
    4da2:	47 5e       	subi	r20, 0xE7	; 231
    4da4:	5f 4f       	sbci	r21, 0xFF	; 255
    4da6:	6f 89       	ldd	r22, Y+23	; 0x17
    4da8:	78 8d       	ldd	r23, Y+24	; 0x18
    4daa:	ce 01       	movw	r24, r28
    4dac:	01 96       	adiw	r24, 0x01	; 1
    4dae:	08 d0       	rcall	.+16     	; 0x4dc0 <vfprintf>
    4db0:	ef 81       	ldd	r30, Y+7	; 0x07
    4db2:	f8 85       	ldd	r31, Y+8	; 0x08
    4db4:	e0 0f       	add	r30, r16
    4db6:	f1 1f       	adc	r31, r17
    4db8:	10 82       	st	Z, r1
    4dba:	2e 96       	adiw	r28, 0x0e	; 14
    4dbc:	e4 e0       	ldi	r30, 0x04	; 4
    4dbe:	a5 c2       	rjmp	.+1354   	; 0x530a <__epilogue_restores__+0x1c>

00004dc0 <vfprintf>:
    4dc0:	ac e0       	ldi	r26, 0x0C	; 12
    4dc2:	b0 e0       	ldi	r27, 0x00	; 0
    4dc4:	e5 ee       	ldi	r30, 0xE5	; 229
    4dc6:	f6 e2       	ldi	r31, 0x26	; 38
    4dc8:	76 c2       	rjmp	.+1260   	; 0x52b6 <__prologue_saves__>
    4dca:	7c 01       	movw	r14, r24
    4dcc:	6b 01       	movw	r12, r22
    4dce:	8a 01       	movw	r16, r20
    4dd0:	fc 01       	movw	r30, r24
    4dd2:	17 82       	std	Z+7, r1	; 0x07
    4dd4:	16 82       	std	Z+6, r1	; 0x06
    4dd6:	83 81       	ldd	r24, Z+3	; 0x03
    4dd8:	81 ff       	sbrs	r24, 1
    4dda:	b0 c1       	rjmp	.+864    	; 0x513c <vfprintf+0x37c>
    4ddc:	ce 01       	movw	r24, r28
    4dde:	01 96       	adiw	r24, 0x01	; 1
    4de0:	4c 01       	movw	r8, r24
    4de2:	f7 01       	movw	r30, r14
    4de4:	93 81       	ldd	r25, Z+3	; 0x03
    4de6:	f6 01       	movw	r30, r12
    4de8:	93 fd       	sbrc	r25, 3
    4dea:	85 91       	lpm	r24, Z+
    4dec:	93 ff       	sbrs	r25, 3
    4dee:	81 91       	ld	r24, Z+
    4df0:	6f 01       	movw	r12, r30
    4df2:	88 23       	and	r24, r24
    4df4:	09 f4       	brne	.+2      	; 0x4df8 <vfprintf+0x38>
    4df6:	9e c1       	rjmp	.+828    	; 0x5134 <vfprintf+0x374>
    4df8:	85 32       	cpi	r24, 0x25	; 37
    4dfa:	39 f4       	brne	.+14     	; 0x4e0a <vfprintf+0x4a>
    4dfc:	93 fd       	sbrc	r25, 3
    4dfe:	85 91       	lpm	r24, Z+
    4e00:	93 ff       	sbrs	r25, 3
    4e02:	81 91       	ld	r24, Z+
    4e04:	6f 01       	movw	r12, r30
    4e06:	85 32       	cpi	r24, 0x25	; 37
    4e08:	21 f4       	brne	.+8      	; 0x4e12 <vfprintf+0x52>
    4e0a:	b7 01       	movw	r22, r14
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	c3 d1       	rcall	.+902    	; 0x5196 <fputc>
    4e10:	e8 cf       	rjmp	.-48     	; 0x4de2 <vfprintf+0x22>
    4e12:	51 2c       	mov	r5, r1
    4e14:	31 2c       	mov	r3, r1
    4e16:	20 e0       	ldi	r18, 0x00	; 0
    4e18:	20 32       	cpi	r18, 0x20	; 32
    4e1a:	a0 f4       	brcc	.+40     	; 0x4e44 <vfprintf+0x84>
    4e1c:	8b 32       	cpi	r24, 0x2B	; 43
    4e1e:	69 f0       	breq	.+26     	; 0x4e3a <vfprintf+0x7a>
    4e20:	30 f4       	brcc	.+12     	; 0x4e2e <vfprintf+0x6e>
    4e22:	80 32       	cpi	r24, 0x20	; 32
    4e24:	59 f0       	breq	.+22     	; 0x4e3c <vfprintf+0x7c>
    4e26:	83 32       	cpi	r24, 0x23	; 35
    4e28:	69 f4       	brne	.+26     	; 0x4e44 <vfprintf+0x84>
    4e2a:	20 61       	ori	r18, 0x10	; 16
    4e2c:	2c c0       	rjmp	.+88     	; 0x4e86 <vfprintf+0xc6>
    4e2e:	8d 32       	cpi	r24, 0x2D	; 45
    4e30:	39 f0       	breq	.+14     	; 0x4e40 <vfprintf+0x80>
    4e32:	80 33       	cpi	r24, 0x30	; 48
    4e34:	39 f4       	brne	.+14     	; 0x4e44 <vfprintf+0x84>
    4e36:	21 60       	ori	r18, 0x01	; 1
    4e38:	26 c0       	rjmp	.+76     	; 0x4e86 <vfprintf+0xc6>
    4e3a:	22 60       	ori	r18, 0x02	; 2
    4e3c:	24 60       	ori	r18, 0x04	; 4
    4e3e:	23 c0       	rjmp	.+70     	; 0x4e86 <vfprintf+0xc6>
    4e40:	28 60       	ori	r18, 0x08	; 8
    4e42:	21 c0       	rjmp	.+66     	; 0x4e86 <vfprintf+0xc6>
    4e44:	27 fd       	sbrc	r18, 7
    4e46:	27 c0       	rjmp	.+78     	; 0x4e96 <vfprintf+0xd6>
    4e48:	30 ed       	ldi	r19, 0xD0	; 208
    4e4a:	38 0f       	add	r19, r24
    4e4c:	3a 30       	cpi	r19, 0x0A	; 10
    4e4e:	78 f4       	brcc	.+30     	; 0x4e6e <vfprintf+0xae>
    4e50:	26 ff       	sbrs	r18, 6
    4e52:	06 c0       	rjmp	.+12     	; 0x4e60 <vfprintf+0xa0>
    4e54:	fa e0       	ldi	r31, 0x0A	; 10
    4e56:	5f 9e       	mul	r5, r31
    4e58:	30 0d       	add	r19, r0
    4e5a:	11 24       	eor	r1, r1
    4e5c:	53 2e       	mov	r5, r19
    4e5e:	13 c0       	rjmp	.+38     	; 0x4e86 <vfprintf+0xc6>
    4e60:	8a e0       	ldi	r24, 0x0A	; 10
    4e62:	38 9e       	mul	r3, r24
    4e64:	30 0d       	add	r19, r0
    4e66:	11 24       	eor	r1, r1
    4e68:	33 2e       	mov	r3, r19
    4e6a:	20 62       	ori	r18, 0x20	; 32
    4e6c:	0c c0       	rjmp	.+24     	; 0x4e86 <vfprintf+0xc6>
    4e6e:	8e 32       	cpi	r24, 0x2E	; 46
    4e70:	21 f4       	brne	.+8      	; 0x4e7a <vfprintf+0xba>
    4e72:	26 fd       	sbrc	r18, 6
    4e74:	5f c1       	rjmp	.+702    	; 0x5134 <vfprintf+0x374>
    4e76:	20 64       	ori	r18, 0x40	; 64
    4e78:	06 c0       	rjmp	.+12     	; 0x4e86 <vfprintf+0xc6>
    4e7a:	8c 36       	cpi	r24, 0x6C	; 108
    4e7c:	11 f4       	brne	.+4      	; 0x4e82 <vfprintf+0xc2>
    4e7e:	20 68       	ori	r18, 0x80	; 128
    4e80:	02 c0       	rjmp	.+4      	; 0x4e86 <vfprintf+0xc6>
    4e82:	88 36       	cpi	r24, 0x68	; 104
    4e84:	41 f4       	brne	.+16     	; 0x4e96 <vfprintf+0xd6>
    4e86:	f6 01       	movw	r30, r12
    4e88:	93 fd       	sbrc	r25, 3
    4e8a:	85 91       	lpm	r24, Z+
    4e8c:	93 ff       	sbrs	r25, 3
    4e8e:	81 91       	ld	r24, Z+
    4e90:	6f 01       	movw	r12, r30
    4e92:	81 11       	cpse	r24, r1
    4e94:	c1 cf       	rjmp	.-126    	; 0x4e18 <vfprintf+0x58>
    4e96:	98 2f       	mov	r25, r24
    4e98:	9f 7d       	andi	r25, 0xDF	; 223
    4e9a:	95 54       	subi	r25, 0x45	; 69
    4e9c:	93 30       	cpi	r25, 0x03	; 3
    4e9e:	28 f4       	brcc	.+10     	; 0x4eaa <vfprintf+0xea>
    4ea0:	0c 5f       	subi	r16, 0xFC	; 252
    4ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ea4:	ff e3       	ldi	r31, 0x3F	; 63
    4ea6:	f9 83       	std	Y+1, r31	; 0x01
    4ea8:	0d c0       	rjmp	.+26     	; 0x4ec4 <vfprintf+0x104>
    4eaa:	83 36       	cpi	r24, 0x63	; 99
    4eac:	31 f0       	breq	.+12     	; 0x4eba <vfprintf+0xfa>
    4eae:	83 37       	cpi	r24, 0x73	; 115
    4eb0:	71 f0       	breq	.+28     	; 0x4ece <vfprintf+0x10e>
    4eb2:	83 35       	cpi	r24, 0x53	; 83
    4eb4:	09 f0       	breq	.+2      	; 0x4eb8 <vfprintf+0xf8>
    4eb6:	57 c0       	rjmp	.+174    	; 0x4f66 <vfprintf+0x1a6>
    4eb8:	21 c0       	rjmp	.+66     	; 0x4efc <vfprintf+0x13c>
    4eba:	f8 01       	movw	r30, r16
    4ebc:	80 81       	ld	r24, Z
    4ebe:	89 83       	std	Y+1, r24	; 0x01
    4ec0:	0e 5f       	subi	r16, 0xFE	; 254
    4ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec4:	44 24       	eor	r4, r4
    4ec6:	43 94       	inc	r4
    4ec8:	51 2c       	mov	r5, r1
    4eca:	54 01       	movw	r10, r8
    4ecc:	14 c0       	rjmp	.+40     	; 0x4ef6 <vfprintf+0x136>
    4ece:	38 01       	movw	r6, r16
    4ed0:	f2 e0       	ldi	r31, 0x02	; 2
    4ed2:	6f 0e       	add	r6, r31
    4ed4:	71 1c       	adc	r7, r1
    4ed6:	f8 01       	movw	r30, r16
    4ed8:	a0 80       	ld	r10, Z
    4eda:	b1 80       	ldd	r11, Z+1	; 0x01
    4edc:	26 ff       	sbrs	r18, 6
    4ede:	03 c0       	rjmp	.+6      	; 0x4ee6 <vfprintf+0x126>
    4ee0:	65 2d       	mov	r22, r5
    4ee2:	70 e0       	ldi	r23, 0x00	; 0
    4ee4:	02 c0       	rjmp	.+4      	; 0x4eea <vfprintf+0x12a>
    4ee6:	6f ef       	ldi	r22, 0xFF	; 255
    4ee8:	7f ef       	ldi	r23, 0xFF	; 255
    4eea:	c5 01       	movw	r24, r10
    4eec:	2c 87       	std	Y+12, r18	; 0x0c
    4eee:	48 d1       	rcall	.+656    	; 0x5180 <strnlen>
    4ef0:	2c 01       	movw	r4, r24
    4ef2:	83 01       	movw	r16, r6
    4ef4:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ef6:	2f 77       	andi	r18, 0x7F	; 127
    4ef8:	22 2e       	mov	r2, r18
    4efa:	16 c0       	rjmp	.+44     	; 0x4f28 <vfprintf+0x168>
    4efc:	38 01       	movw	r6, r16
    4efe:	f2 e0       	ldi	r31, 0x02	; 2
    4f00:	6f 0e       	add	r6, r31
    4f02:	71 1c       	adc	r7, r1
    4f04:	f8 01       	movw	r30, r16
    4f06:	a0 80       	ld	r10, Z
    4f08:	b1 80       	ldd	r11, Z+1	; 0x01
    4f0a:	26 ff       	sbrs	r18, 6
    4f0c:	03 c0       	rjmp	.+6      	; 0x4f14 <vfprintf+0x154>
    4f0e:	65 2d       	mov	r22, r5
    4f10:	70 e0       	ldi	r23, 0x00	; 0
    4f12:	02 c0       	rjmp	.+4      	; 0x4f18 <vfprintf+0x158>
    4f14:	6f ef       	ldi	r22, 0xFF	; 255
    4f16:	7f ef       	ldi	r23, 0xFF	; 255
    4f18:	c5 01       	movw	r24, r10
    4f1a:	2c 87       	std	Y+12, r18	; 0x0c
    4f1c:	26 d1       	rcall	.+588    	; 0x516a <strnlen_P>
    4f1e:	2c 01       	movw	r4, r24
    4f20:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f22:	20 68       	ori	r18, 0x80	; 128
    4f24:	22 2e       	mov	r2, r18
    4f26:	83 01       	movw	r16, r6
    4f28:	23 fc       	sbrc	r2, 3
    4f2a:	19 c0       	rjmp	.+50     	; 0x4f5e <vfprintf+0x19e>
    4f2c:	83 2d       	mov	r24, r3
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	48 16       	cp	r4, r24
    4f32:	59 06       	cpc	r5, r25
    4f34:	a0 f4       	brcc	.+40     	; 0x4f5e <vfprintf+0x19e>
    4f36:	b7 01       	movw	r22, r14
    4f38:	80 e2       	ldi	r24, 0x20	; 32
    4f3a:	90 e0       	ldi	r25, 0x00	; 0
    4f3c:	2c d1       	rcall	.+600    	; 0x5196 <fputc>
    4f3e:	3a 94       	dec	r3
    4f40:	f5 cf       	rjmp	.-22     	; 0x4f2c <vfprintf+0x16c>
    4f42:	f5 01       	movw	r30, r10
    4f44:	27 fc       	sbrc	r2, 7
    4f46:	85 91       	lpm	r24, Z+
    4f48:	27 fe       	sbrs	r2, 7
    4f4a:	81 91       	ld	r24, Z+
    4f4c:	5f 01       	movw	r10, r30
    4f4e:	b7 01       	movw	r22, r14
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	21 d1       	rcall	.+578    	; 0x5196 <fputc>
    4f54:	31 10       	cpse	r3, r1
    4f56:	3a 94       	dec	r3
    4f58:	f1 e0       	ldi	r31, 0x01	; 1
    4f5a:	4f 1a       	sub	r4, r31
    4f5c:	51 08       	sbc	r5, r1
    4f5e:	41 14       	cp	r4, r1
    4f60:	51 04       	cpc	r5, r1
    4f62:	79 f7       	brne	.-34     	; 0x4f42 <vfprintf+0x182>
    4f64:	de c0       	rjmp	.+444    	; 0x5122 <vfprintf+0x362>
    4f66:	84 36       	cpi	r24, 0x64	; 100
    4f68:	11 f0       	breq	.+4      	; 0x4f6e <vfprintf+0x1ae>
    4f6a:	89 36       	cpi	r24, 0x69	; 105
    4f6c:	31 f5       	brne	.+76     	; 0x4fba <vfprintf+0x1fa>
    4f6e:	f8 01       	movw	r30, r16
    4f70:	27 ff       	sbrs	r18, 7
    4f72:	07 c0       	rjmp	.+14     	; 0x4f82 <vfprintf+0x1c2>
    4f74:	60 81       	ld	r22, Z
    4f76:	71 81       	ldd	r23, Z+1	; 0x01
    4f78:	82 81       	ldd	r24, Z+2	; 0x02
    4f7a:	93 81       	ldd	r25, Z+3	; 0x03
    4f7c:	0c 5f       	subi	r16, 0xFC	; 252
    4f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f80:	08 c0       	rjmp	.+16     	; 0x4f92 <vfprintf+0x1d2>
    4f82:	60 81       	ld	r22, Z
    4f84:	71 81       	ldd	r23, Z+1	; 0x01
    4f86:	88 27       	eor	r24, r24
    4f88:	77 fd       	sbrc	r23, 7
    4f8a:	80 95       	com	r24
    4f8c:	98 2f       	mov	r25, r24
    4f8e:	0e 5f       	subi	r16, 0xFE	; 254
    4f90:	1f 4f       	sbci	r17, 0xFF	; 255
    4f92:	2f 76       	andi	r18, 0x6F	; 111
    4f94:	b2 2e       	mov	r11, r18
    4f96:	97 ff       	sbrs	r25, 7
    4f98:	09 c0       	rjmp	.+18     	; 0x4fac <vfprintf+0x1ec>
    4f9a:	90 95       	com	r25
    4f9c:	80 95       	com	r24
    4f9e:	70 95       	com	r23
    4fa0:	61 95       	neg	r22
    4fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    4fa4:	8f 4f       	sbci	r24, 0xFF	; 255
    4fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    4fa8:	20 68       	ori	r18, 0x80	; 128
    4faa:	b2 2e       	mov	r11, r18
    4fac:	2a e0       	ldi	r18, 0x0A	; 10
    4fae:	30 e0       	ldi	r19, 0x00	; 0
    4fb0:	a4 01       	movw	r20, r8
    4fb2:	23 d1       	rcall	.+582    	; 0x51fa <__ultoa_invert>
    4fb4:	a8 2e       	mov	r10, r24
    4fb6:	a8 18       	sub	r10, r8
    4fb8:	43 c0       	rjmp	.+134    	; 0x5040 <vfprintf+0x280>
    4fba:	85 37       	cpi	r24, 0x75	; 117
    4fbc:	29 f4       	brne	.+10     	; 0x4fc8 <vfprintf+0x208>
    4fbe:	2f 7e       	andi	r18, 0xEF	; 239
    4fc0:	b2 2e       	mov	r11, r18
    4fc2:	2a e0       	ldi	r18, 0x0A	; 10
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	25 c0       	rjmp	.+74     	; 0x5012 <vfprintf+0x252>
    4fc8:	f2 2f       	mov	r31, r18
    4fca:	f9 7f       	andi	r31, 0xF9	; 249
    4fcc:	bf 2e       	mov	r11, r31
    4fce:	8f 36       	cpi	r24, 0x6F	; 111
    4fd0:	c1 f0       	breq	.+48     	; 0x5002 <vfprintf+0x242>
    4fd2:	18 f4       	brcc	.+6      	; 0x4fda <vfprintf+0x21a>
    4fd4:	88 35       	cpi	r24, 0x58	; 88
    4fd6:	79 f0       	breq	.+30     	; 0x4ff6 <vfprintf+0x236>
    4fd8:	ad c0       	rjmp	.+346    	; 0x5134 <vfprintf+0x374>
    4fda:	80 37       	cpi	r24, 0x70	; 112
    4fdc:	19 f0       	breq	.+6      	; 0x4fe4 <vfprintf+0x224>
    4fde:	88 37       	cpi	r24, 0x78	; 120
    4fe0:	21 f0       	breq	.+8      	; 0x4fea <vfprintf+0x22a>
    4fe2:	a8 c0       	rjmp	.+336    	; 0x5134 <vfprintf+0x374>
    4fe4:	2f 2f       	mov	r18, r31
    4fe6:	20 61       	ori	r18, 0x10	; 16
    4fe8:	b2 2e       	mov	r11, r18
    4fea:	b4 fe       	sbrs	r11, 4
    4fec:	0d c0       	rjmp	.+26     	; 0x5008 <vfprintf+0x248>
    4fee:	8b 2d       	mov	r24, r11
    4ff0:	84 60       	ori	r24, 0x04	; 4
    4ff2:	b8 2e       	mov	r11, r24
    4ff4:	09 c0       	rjmp	.+18     	; 0x5008 <vfprintf+0x248>
    4ff6:	24 ff       	sbrs	r18, 4
    4ff8:	0a c0       	rjmp	.+20     	; 0x500e <vfprintf+0x24e>
    4ffa:	9f 2f       	mov	r25, r31
    4ffc:	96 60       	ori	r25, 0x06	; 6
    4ffe:	b9 2e       	mov	r11, r25
    5000:	06 c0       	rjmp	.+12     	; 0x500e <vfprintf+0x24e>
    5002:	28 e0       	ldi	r18, 0x08	; 8
    5004:	30 e0       	ldi	r19, 0x00	; 0
    5006:	05 c0       	rjmp	.+10     	; 0x5012 <vfprintf+0x252>
    5008:	20 e1       	ldi	r18, 0x10	; 16
    500a:	30 e0       	ldi	r19, 0x00	; 0
    500c:	02 c0       	rjmp	.+4      	; 0x5012 <vfprintf+0x252>
    500e:	20 e1       	ldi	r18, 0x10	; 16
    5010:	32 e0       	ldi	r19, 0x02	; 2
    5012:	f8 01       	movw	r30, r16
    5014:	b7 fe       	sbrs	r11, 7
    5016:	07 c0       	rjmp	.+14     	; 0x5026 <vfprintf+0x266>
    5018:	60 81       	ld	r22, Z
    501a:	71 81       	ldd	r23, Z+1	; 0x01
    501c:	82 81       	ldd	r24, Z+2	; 0x02
    501e:	93 81       	ldd	r25, Z+3	; 0x03
    5020:	0c 5f       	subi	r16, 0xFC	; 252
    5022:	1f 4f       	sbci	r17, 0xFF	; 255
    5024:	06 c0       	rjmp	.+12     	; 0x5032 <vfprintf+0x272>
    5026:	60 81       	ld	r22, Z
    5028:	71 81       	ldd	r23, Z+1	; 0x01
    502a:	80 e0       	ldi	r24, 0x00	; 0
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	0e 5f       	subi	r16, 0xFE	; 254
    5030:	1f 4f       	sbci	r17, 0xFF	; 255
    5032:	a4 01       	movw	r20, r8
    5034:	e2 d0       	rcall	.+452    	; 0x51fa <__ultoa_invert>
    5036:	a8 2e       	mov	r10, r24
    5038:	a8 18       	sub	r10, r8
    503a:	fb 2d       	mov	r31, r11
    503c:	ff 77       	andi	r31, 0x7F	; 127
    503e:	bf 2e       	mov	r11, r31
    5040:	b6 fe       	sbrs	r11, 6
    5042:	0b c0       	rjmp	.+22     	; 0x505a <vfprintf+0x29a>
    5044:	2b 2d       	mov	r18, r11
    5046:	2e 7f       	andi	r18, 0xFE	; 254
    5048:	a5 14       	cp	r10, r5
    504a:	50 f4       	brcc	.+20     	; 0x5060 <vfprintf+0x2a0>
    504c:	b4 fe       	sbrs	r11, 4
    504e:	0a c0       	rjmp	.+20     	; 0x5064 <vfprintf+0x2a4>
    5050:	b2 fc       	sbrc	r11, 2
    5052:	08 c0       	rjmp	.+16     	; 0x5064 <vfprintf+0x2a4>
    5054:	2b 2d       	mov	r18, r11
    5056:	2e 7e       	andi	r18, 0xEE	; 238
    5058:	05 c0       	rjmp	.+10     	; 0x5064 <vfprintf+0x2a4>
    505a:	7a 2c       	mov	r7, r10
    505c:	2b 2d       	mov	r18, r11
    505e:	03 c0       	rjmp	.+6      	; 0x5066 <vfprintf+0x2a6>
    5060:	7a 2c       	mov	r7, r10
    5062:	01 c0       	rjmp	.+2      	; 0x5066 <vfprintf+0x2a6>
    5064:	75 2c       	mov	r7, r5
    5066:	24 ff       	sbrs	r18, 4
    5068:	0d c0       	rjmp	.+26     	; 0x5084 <vfprintf+0x2c4>
    506a:	fe 01       	movw	r30, r28
    506c:	ea 0d       	add	r30, r10
    506e:	f1 1d       	adc	r31, r1
    5070:	80 81       	ld	r24, Z
    5072:	80 33       	cpi	r24, 0x30	; 48
    5074:	11 f4       	brne	.+4      	; 0x507a <vfprintf+0x2ba>
    5076:	29 7e       	andi	r18, 0xE9	; 233
    5078:	09 c0       	rjmp	.+18     	; 0x508c <vfprintf+0x2cc>
    507a:	22 ff       	sbrs	r18, 2
    507c:	06 c0       	rjmp	.+12     	; 0x508a <vfprintf+0x2ca>
    507e:	73 94       	inc	r7
    5080:	73 94       	inc	r7
    5082:	04 c0       	rjmp	.+8      	; 0x508c <vfprintf+0x2cc>
    5084:	82 2f       	mov	r24, r18
    5086:	86 78       	andi	r24, 0x86	; 134
    5088:	09 f0       	breq	.+2      	; 0x508c <vfprintf+0x2cc>
    508a:	73 94       	inc	r7
    508c:	23 fd       	sbrc	r18, 3
    508e:	12 c0       	rjmp	.+36     	; 0x50b4 <vfprintf+0x2f4>
    5090:	20 ff       	sbrs	r18, 0
    5092:	06 c0       	rjmp	.+12     	; 0x50a0 <vfprintf+0x2e0>
    5094:	5a 2c       	mov	r5, r10
    5096:	73 14       	cp	r7, r3
    5098:	18 f4       	brcc	.+6      	; 0x50a0 <vfprintf+0x2e0>
    509a:	53 0c       	add	r5, r3
    509c:	57 18       	sub	r5, r7
    509e:	73 2c       	mov	r7, r3
    50a0:	73 14       	cp	r7, r3
    50a2:	60 f4       	brcc	.+24     	; 0x50bc <vfprintf+0x2fc>
    50a4:	b7 01       	movw	r22, r14
    50a6:	80 e2       	ldi	r24, 0x20	; 32
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	2c 87       	std	Y+12, r18	; 0x0c
    50ac:	74 d0       	rcall	.+232    	; 0x5196 <fputc>
    50ae:	73 94       	inc	r7
    50b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    50b2:	f6 cf       	rjmp	.-20     	; 0x50a0 <vfprintf+0x2e0>
    50b4:	73 14       	cp	r7, r3
    50b6:	10 f4       	brcc	.+4      	; 0x50bc <vfprintf+0x2fc>
    50b8:	37 18       	sub	r3, r7
    50ba:	01 c0       	rjmp	.+2      	; 0x50be <vfprintf+0x2fe>
    50bc:	31 2c       	mov	r3, r1
    50be:	24 ff       	sbrs	r18, 4
    50c0:	11 c0       	rjmp	.+34     	; 0x50e4 <vfprintf+0x324>
    50c2:	b7 01       	movw	r22, r14
    50c4:	80 e3       	ldi	r24, 0x30	; 48
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	2c 87       	std	Y+12, r18	; 0x0c
    50ca:	65 d0       	rcall	.+202    	; 0x5196 <fputc>
    50cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    50ce:	22 ff       	sbrs	r18, 2
    50d0:	16 c0       	rjmp	.+44     	; 0x50fe <vfprintf+0x33e>
    50d2:	21 ff       	sbrs	r18, 1
    50d4:	03 c0       	rjmp	.+6      	; 0x50dc <vfprintf+0x31c>
    50d6:	88 e5       	ldi	r24, 0x58	; 88
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	02 c0       	rjmp	.+4      	; 0x50e0 <vfprintf+0x320>
    50dc:	88 e7       	ldi	r24, 0x78	; 120
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	b7 01       	movw	r22, r14
    50e2:	0c c0       	rjmp	.+24     	; 0x50fc <vfprintf+0x33c>
    50e4:	82 2f       	mov	r24, r18
    50e6:	86 78       	andi	r24, 0x86	; 134
    50e8:	51 f0       	breq	.+20     	; 0x50fe <vfprintf+0x33e>
    50ea:	21 fd       	sbrc	r18, 1
    50ec:	02 c0       	rjmp	.+4      	; 0x50f2 <vfprintf+0x332>
    50ee:	80 e2       	ldi	r24, 0x20	; 32
    50f0:	01 c0       	rjmp	.+2      	; 0x50f4 <vfprintf+0x334>
    50f2:	8b e2       	ldi	r24, 0x2B	; 43
    50f4:	27 fd       	sbrc	r18, 7
    50f6:	8d e2       	ldi	r24, 0x2D	; 45
    50f8:	b7 01       	movw	r22, r14
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	4c d0       	rcall	.+152    	; 0x5196 <fputc>
    50fe:	a5 14       	cp	r10, r5
    5100:	30 f4       	brcc	.+12     	; 0x510e <vfprintf+0x34e>
    5102:	b7 01       	movw	r22, r14
    5104:	80 e3       	ldi	r24, 0x30	; 48
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	46 d0       	rcall	.+140    	; 0x5196 <fputc>
    510a:	5a 94       	dec	r5
    510c:	f8 cf       	rjmp	.-16     	; 0x50fe <vfprintf+0x33e>
    510e:	aa 94       	dec	r10
    5110:	f4 01       	movw	r30, r8
    5112:	ea 0d       	add	r30, r10
    5114:	f1 1d       	adc	r31, r1
    5116:	80 81       	ld	r24, Z
    5118:	b7 01       	movw	r22, r14
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	3c d0       	rcall	.+120    	; 0x5196 <fputc>
    511e:	a1 10       	cpse	r10, r1
    5120:	f6 cf       	rjmp	.-20     	; 0x510e <vfprintf+0x34e>
    5122:	33 20       	and	r3, r3
    5124:	09 f4       	brne	.+2      	; 0x5128 <vfprintf+0x368>
    5126:	5d ce       	rjmp	.-838    	; 0x4de2 <vfprintf+0x22>
    5128:	b7 01       	movw	r22, r14
    512a:	80 e2       	ldi	r24, 0x20	; 32
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	33 d0       	rcall	.+102    	; 0x5196 <fputc>
    5130:	3a 94       	dec	r3
    5132:	f7 cf       	rjmp	.-18     	; 0x5122 <vfprintf+0x362>
    5134:	f7 01       	movw	r30, r14
    5136:	86 81       	ldd	r24, Z+6	; 0x06
    5138:	97 81       	ldd	r25, Z+7	; 0x07
    513a:	02 c0       	rjmp	.+4      	; 0x5140 <vfprintf+0x380>
    513c:	8f ef       	ldi	r24, 0xFF	; 255
    513e:	9f ef       	ldi	r25, 0xFF	; 255
    5140:	2c 96       	adiw	r28, 0x0c	; 12
    5142:	e2 e1       	ldi	r30, 0x12	; 18
    5144:	d4 c0       	rjmp	.+424    	; 0x52ee <__epilogue_restores__>

00005146 <__eeupd_byte_m32u4>:
    5146:	26 2f       	mov	r18, r22

00005148 <__eeupd_r18_m32u4>:
    5148:	f9 99       	sbic	0x1f, 1	; 31
    514a:	fe cf       	rjmp	.-4      	; 0x5148 <__eeupd_r18_m32u4>
    514c:	92 bd       	out	0x22, r25	; 34
    514e:	81 bd       	out	0x21, r24	; 33
    5150:	f8 9a       	sbi	0x1f, 0	; 31
    5152:	01 97       	sbiw	r24, 0x01	; 1
    5154:	00 b4       	in	r0, 0x20	; 32
    5156:	02 16       	cp	r0, r18
    5158:	39 f0       	breq	.+14     	; 0x5168 <__eeupd_r18_m32u4+0x20>
    515a:	1f ba       	out	0x1f, r1	; 31
    515c:	20 bd       	out	0x20, r18	; 32
    515e:	0f b6       	in	r0, 0x3f	; 63
    5160:	f8 94       	cli
    5162:	fa 9a       	sbi	0x1f, 2	; 31
    5164:	f9 9a       	sbi	0x1f, 1	; 31
    5166:	0f be       	out	0x3f, r0	; 63
    5168:	08 95       	ret

0000516a <strnlen_P>:
    516a:	fc 01       	movw	r30, r24
    516c:	05 90       	lpm	r0, Z+
    516e:	61 50       	subi	r22, 0x01	; 1
    5170:	70 40       	sbci	r23, 0x00	; 0
    5172:	01 10       	cpse	r0, r1
    5174:	d8 f7       	brcc	.-10     	; 0x516c <strnlen_P+0x2>
    5176:	80 95       	com	r24
    5178:	90 95       	com	r25
    517a:	8e 0f       	add	r24, r30
    517c:	9f 1f       	adc	r25, r31
    517e:	08 95       	ret

00005180 <strnlen>:
    5180:	fc 01       	movw	r30, r24
    5182:	61 50       	subi	r22, 0x01	; 1
    5184:	70 40       	sbci	r23, 0x00	; 0
    5186:	01 90       	ld	r0, Z+
    5188:	01 10       	cpse	r0, r1
    518a:	d8 f7       	brcc	.-10     	; 0x5182 <strnlen+0x2>
    518c:	80 95       	com	r24
    518e:	90 95       	com	r25
    5190:	8e 0f       	add	r24, r30
    5192:	9f 1f       	adc	r25, r31
    5194:	08 95       	ret

00005196 <fputc>:
    5196:	0f 93       	push	r16
    5198:	1f 93       	push	r17
    519a:	cf 93       	push	r28
    519c:	df 93       	push	r29
    519e:	18 2f       	mov	r17, r24
    51a0:	09 2f       	mov	r16, r25
    51a2:	eb 01       	movw	r28, r22
    51a4:	8b 81       	ldd	r24, Y+3	; 0x03
    51a6:	81 fd       	sbrc	r24, 1
    51a8:	03 c0       	rjmp	.+6      	; 0x51b0 <fputc+0x1a>
    51aa:	8f ef       	ldi	r24, 0xFF	; 255
    51ac:	9f ef       	ldi	r25, 0xFF	; 255
    51ae:	20 c0       	rjmp	.+64     	; 0x51f0 <fputc+0x5a>
    51b0:	82 ff       	sbrs	r24, 2
    51b2:	10 c0       	rjmp	.+32     	; 0x51d4 <fputc+0x3e>
    51b4:	4e 81       	ldd	r20, Y+6	; 0x06
    51b6:	5f 81       	ldd	r21, Y+7	; 0x07
    51b8:	2c 81       	ldd	r18, Y+4	; 0x04
    51ba:	3d 81       	ldd	r19, Y+5	; 0x05
    51bc:	42 17       	cp	r20, r18
    51be:	53 07       	cpc	r21, r19
    51c0:	7c f4       	brge	.+30     	; 0x51e0 <fputc+0x4a>
    51c2:	e8 81       	ld	r30, Y
    51c4:	f9 81       	ldd	r31, Y+1	; 0x01
    51c6:	9f 01       	movw	r18, r30
    51c8:	2f 5f       	subi	r18, 0xFF	; 255
    51ca:	3f 4f       	sbci	r19, 0xFF	; 255
    51cc:	39 83       	std	Y+1, r19	; 0x01
    51ce:	28 83       	st	Y, r18
    51d0:	10 83       	st	Z, r17
    51d2:	06 c0       	rjmp	.+12     	; 0x51e0 <fputc+0x4a>
    51d4:	e8 85       	ldd	r30, Y+8	; 0x08
    51d6:	f9 85       	ldd	r31, Y+9	; 0x09
    51d8:	81 2f       	mov	r24, r17
    51da:	09 95       	icall
    51dc:	89 2b       	or	r24, r25
    51de:	29 f7       	brne	.-54     	; 0x51aa <fputc+0x14>
    51e0:	2e 81       	ldd	r18, Y+6	; 0x06
    51e2:	3f 81       	ldd	r19, Y+7	; 0x07
    51e4:	2f 5f       	subi	r18, 0xFF	; 255
    51e6:	3f 4f       	sbci	r19, 0xFF	; 255
    51e8:	3f 83       	std	Y+7, r19	; 0x07
    51ea:	2e 83       	std	Y+6, r18	; 0x06
    51ec:	81 2f       	mov	r24, r17
    51ee:	90 2f       	mov	r25, r16
    51f0:	df 91       	pop	r29
    51f2:	cf 91       	pop	r28
    51f4:	1f 91       	pop	r17
    51f6:	0f 91       	pop	r16
    51f8:	08 95       	ret

000051fa <__ultoa_invert>:
    51fa:	fa 01       	movw	r30, r20
    51fc:	aa 27       	eor	r26, r26
    51fe:	28 30       	cpi	r18, 0x08	; 8
    5200:	51 f1       	breq	.+84     	; 0x5256 <__ultoa_invert+0x5c>
    5202:	20 31       	cpi	r18, 0x10	; 16
    5204:	81 f1       	breq	.+96     	; 0x5266 <__ultoa_invert+0x6c>
    5206:	e8 94       	clt
    5208:	6f 93       	push	r22
    520a:	6e 7f       	andi	r22, 0xFE	; 254
    520c:	6e 5f       	subi	r22, 0xFE	; 254
    520e:	7f 4f       	sbci	r23, 0xFF	; 255
    5210:	8f 4f       	sbci	r24, 0xFF	; 255
    5212:	9f 4f       	sbci	r25, 0xFF	; 255
    5214:	af 4f       	sbci	r26, 0xFF	; 255
    5216:	b1 e0       	ldi	r27, 0x01	; 1
    5218:	3e d0       	rcall	.+124    	; 0x5296 <__ultoa_invert+0x9c>
    521a:	b4 e0       	ldi	r27, 0x04	; 4
    521c:	3c d0       	rcall	.+120    	; 0x5296 <__ultoa_invert+0x9c>
    521e:	67 0f       	add	r22, r23
    5220:	78 1f       	adc	r23, r24
    5222:	89 1f       	adc	r24, r25
    5224:	9a 1f       	adc	r25, r26
    5226:	a1 1d       	adc	r26, r1
    5228:	68 0f       	add	r22, r24
    522a:	79 1f       	adc	r23, r25
    522c:	8a 1f       	adc	r24, r26
    522e:	91 1d       	adc	r25, r1
    5230:	a1 1d       	adc	r26, r1
    5232:	6a 0f       	add	r22, r26
    5234:	71 1d       	adc	r23, r1
    5236:	81 1d       	adc	r24, r1
    5238:	91 1d       	adc	r25, r1
    523a:	a1 1d       	adc	r26, r1
    523c:	20 d0       	rcall	.+64     	; 0x527e <__ultoa_invert+0x84>
    523e:	09 f4       	brne	.+2      	; 0x5242 <__ultoa_invert+0x48>
    5240:	68 94       	set
    5242:	3f 91       	pop	r19
    5244:	2a e0       	ldi	r18, 0x0A	; 10
    5246:	26 9f       	mul	r18, r22
    5248:	11 24       	eor	r1, r1
    524a:	30 19       	sub	r19, r0
    524c:	30 5d       	subi	r19, 0xD0	; 208
    524e:	31 93       	st	Z+, r19
    5250:	de f6       	brtc	.-74     	; 0x5208 <__ultoa_invert+0xe>
    5252:	cf 01       	movw	r24, r30
    5254:	08 95       	ret
    5256:	46 2f       	mov	r20, r22
    5258:	47 70       	andi	r20, 0x07	; 7
    525a:	40 5d       	subi	r20, 0xD0	; 208
    525c:	41 93       	st	Z+, r20
    525e:	b3 e0       	ldi	r27, 0x03	; 3
    5260:	0f d0       	rcall	.+30     	; 0x5280 <__ultoa_invert+0x86>
    5262:	c9 f7       	brne	.-14     	; 0x5256 <__ultoa_invert+0x5c>
    5264:	f6 cf       	rjmp	.-20     	; 0x5252 <__ultoa_invert+0x58>
    5266:	46 2f       	mov	r20, r22
    5268:	4f 70       	andi	r20, 0x0F	; 15
    526a:	40 5d       	subi	r20, 0xD0	; 208
    526c:	4a 33       	cpi	r20, 0x3A	; 58
    526e:	18 f0       	brcs	.+6      	; 0x5276 <__ultoa_invert+0x7c>
    5270:	49 5d       	subi	r20, 0xD9	; 217
    5272:	31 fd       	sbrc	r19, 1
    5274:	40 52       	subi	r20, 0x20	; 32
    5276:	41 93       	st	Z+, r20
    5278:	02 d0       	rcall	.+4      	; 0x527e <__ultoa_invert+0x84>
    527a:	a9 f7       	brne	.-22     	; 0x5266 <__ultoa_invert+0x6c>
    527c:	ea cf       	rjmp	.-44     	; 0x5252 <__ultoa_invert+0x58>
    527e:	b4 e0       	ldi	r27, 0x04	; 4
    5280:	a6 95       	lsr	r26
    5282:	97 95       	ror	r25
    5284:	87 95       	ror	r24
    5286:	77 95       	ror	r23
    5288:	67 95       	ror	r22
    528a:	ba 95       	dec	r27
    528c:	c9 f7       	brne	.-14     	; 0x5280 <__ultoa_invert+0x86>
    528e:	00 97       	sbiw	r24, 0x00	; 0
    5290:	61 05       	cpc	r22, r1
    5292:	71 05       	cpc	r23, r1
    5294:	08 95       	ret
    5296:	9b 01       	movw	r18, r22
    5298:	ac 01       	movw	r20, r24
    529a:	0a 2e       	mov	r0, r26
    529c:	06 94       	lsr	r0
    529e:	57 95       	ror	r21
    52a0:	47 95       	ror	r20
    52a2:	37 95       	ror	r19
    52a4:	27 95       	ror	r18
    52a6:	ba 95       	dec	r27
    52a8:	c9 f7       	brne	.-14     	; 0x529c <__ultoa_invert+0xa2>
    52aa:	62 0f       	add	r22, r18
    52ac:	73 1f       	adc	r23, r19
    52ae:	84 1f       	adc	r24, r20
    52b0:	95 1f       	adc	r25, r21
    52b2:	a0 1d       	adc	r26, r0
    52b4:	08 95       	ret

000052b6 <__prologue_saves__>:
    52b6:	2f 92       	push	r2
    52b8:	3f 92       	push	r3
    52ba:	4f 92       	push	r4
    52bc:	5f 92       	push	r5
    52be:	6f 92       	push	r6
    52c0:	7f 92       	push	r7
    52c2:	8f 92       	push	r8
    52c4:	9f 92       	push	r9
    52c6:	af 92       	push	r10
    52c8:	bf 92       	push	r11
    52ca:	cf 92       	push	r12
    52cc:	df 92       	push	r13
    52ce:	ef 92       	push	r14
    52d0:	ff 92       	push	r15
    52d2:	0f 93       	push	r16
    52d4:	1f 93       	push	r17
    52d6:	cf 93       	push	r28
    52d8:	df 93       	push	r29
    52da:	cd b7       	in	r28, 0x3d	; 61
    52dc:	de b7       	in	r29, 0x3e	; 62
    52de:	ca 1b       	sub	r28, r26
    52e0:	db 0b       	sbc	r29, r27
    52e2:	0f b6       	in	r0, 0x3f	; 63
    52e4:	f8 94       	cli
    52e6:	de bf       	out	0x3e, r29	; 62
    52e8:	0f be       	out	0x3f, r0	; 63
    52ea:	cd bf       	out	0x3d, r28	; 61
    52ec:	09 94       	ijmp

000052ee <__epilogue_restores__>:
    52ee:	2a 88       	ldd	r2, Y+18	; 0x12
    52f0:	39 88       	ldd	r3, Y+17	; 0x11
    52f2:	48 88       	ldd	r4, Y+16	; 0x10
    52f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    52f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    52f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    52fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    52fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    52fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    5300:	b9 84       	ldd	r11, Y+9	; 0x09
    5302:	c8 84       	ldd	r12, Y+8	; 0x08
    5304:	df 80       	ldd	r13, Y+7	; 0x07
    5306:	ee 80       	ldd	r14, Y+6	; 0x06
    5308:	fd 80       	ldd	r15, Y+5	; 0x05
    530a:	0c 81       	ldd	r16, Y+4	; 0x04
    530c:	1b 81       	ldd	r17, Y+3	; 0x03
    530e:	aa 81       	ldd	r26, Y+2	; 0x02
    5310:	b9 81       	ldd	r27, Y+1	; 0x01
    5312:	ce 0f       	add	r28, r30
    5314:	d1 1d       	adc	r29, r1
    5316:	0f b6       	in	r0, 0x3f	; 63
    5318:	f8 94       	cli
    531a:	de bf       	out	0x3e, r29	; 62
    531c:	0f be       	out	0x3f, r0	; 63
    531e:	cd bf       	out	0x3d, r28	; 61
    5320:	ed 01       	movw	r28, r26
    5322:	08 95       	ret

00005324 <_exit>:
    5324:	f8 94       	cli

00005326 <__stop_program>:
    5326:	ff cf       	rjmp	.-2      	; 0x5326 <__stop_program>
