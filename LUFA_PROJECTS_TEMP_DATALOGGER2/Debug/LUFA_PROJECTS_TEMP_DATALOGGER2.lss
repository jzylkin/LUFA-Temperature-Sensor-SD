
LUFA_PROJECTS_TEMP_DATALOGGER2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000036ce  00003782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036ce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000464  0080016a  0080016a  000037ec  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  000037ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000037ed  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000528  00000000  00000000  00003849  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ac4b  00000000  00000000  00003d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ed4  00000000  00000000  0000e9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000d9a0  00000000  00000000  00010890  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001940  00000000  00000000  0001e230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00019fe4  00000000  00000000  0001fb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b36b  00000000  00000000  00039b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001048  00000000  00000000  00044ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008bea  00000000  00000000  00045f07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	cd c0       	rjmp	.+410    	; 0x1a0 <__bad_interrupt>
       6:	00 00       	nop
       8:	cb c0       	rjmp	.+406    	; 0x1a0 <__bad_interrupt>
       a:	00 00       	nop
       c:	c9 c0       	rjmp	.+402    	; 0x1a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c0       	rjmp	.+398    	; 0x1a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c0       	rjmp	.+394    	; 0x1a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c0       	rjmp	.+390    	; 0x1a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c0       	rjmp	.+386    	; 0x1a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c0       	rjmp	.+382    	; 0x1a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c0       	rjmp	.+378    	; 0x1a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__vector_10>
      2c:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__vector_11>
      30:	b7 c0       	rjmp	.+366    	; 0x1a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c0       	rjmp	.+362    	; 0x1a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c0       	rjmp	.+358    	; 0x1a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c0       	rjmp	.+354    	; 0x1a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c0       	rjmp	.+350    	; 0x1a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__vector_17>
      48:	ab c0       	rjmp	.+342    	; 0x1a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a9 c0       	rjmp	.+338    	; 0x1a0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a7 c0       	rjmp	.+334    	; 0x1a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c0       	rjmp	.+330    	; 0x1a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c0       	rjmp	.+326    	; 0x1a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c0       	rjmp	.+322    	; 0x1a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c0       	rjmp	.+318    	; 0x1a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c0       	rjmp	.+314    	; 0x1a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c0       	rjmp	.+310    	; 0x1a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c0       	rjmp	.+306    	; 0x1a0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	97 c0       	rjmp	.+302    	; 0x1a0 <__bad_interrupt>
      72:	00 00       	nop
      74:	95 c0       	rjmp	.+298    	; 0x1a0 <__bad_interrupt>
      76:	00 00       	nop
      78:	93 c0       	rjmp	.+294    	; 0x1a0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	91 c0       	rjmp	.+290    	; 0x1a0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	8f c0       	rjmp	.+286    	; 0x1a0 <__bad_interrupt>
      82:	00 00       	nop
      84:	8d c0       	rjmp	.+282    	; 0x1a0 <__bad_interrupt>
      86:	00 00       	nop
      88:	8b c0       	rjmp	.+278    	; 0x1a0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	89 c0       	rjmp	.+274    	; 0x1a0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	87 c0       	rjmp	.+270    	; 0x1a0 <__bad_interrupt>
      92:	00 00       	nop
      94:	85 c0       	rjmp	.+266    	; 0x1a0 <__bad_interrupt>
      96:	00 00       	nop
      98:	83 c0       	rjmp	.+262    	; 0x1a0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	81 c0       	rjmp	.+258    	; 0x1a0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	7f c0       	rjmp	.+254    	; 0x1a0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7d c0       	rjmp	.+250    	; 0x1a0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7b c0       	rjmp	.+246    	; 0x1a0 <__bad_interrupt>
	...

000000ac <ProductString>:
      ac:	2e 03 54 00 65 00 6d 00 70 00 65 00 72 00 61 00     ..T.e.m.p.e.r.a.
      bc:	74 00 75 00 72 00 65 00 20 00 44 00 61 00 74 00     t.u.r.e. .D.a.t.
      cc:	61 00 6c 00 6f 00 67 00 67 00 65 00 72 00 00 00     a.l.o.g.g.e.r...

000000dc <ManufacturerString>:
      dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
      f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
      fa:	09 02 39 00 02 01 00 c0 32 09 04 00 00 02 08 06     ..9.....2.......
     10a:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..
     11a:	09 04 01 00 01 03 00 00 00 09 21 11 01 00 01 22     ..........!...."
     12a:	20 00 07 05 81 03 10 00 05                           ........

00000133 <DeviceDescriptor>:
     133:	12 01 10 01 00 00 00 08 eb 03 63 20 01 00 01 02     ..........c ....
     143:	dc 01                                               ..

00000145 <GenericReport>:
     145:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     155:	02 81 02 09 03 15 00 25 ff 75 08 95 02 91 02 c0     .......%.u......
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	da e0       	ldi	r29, 0x0A	; 10
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	ee ec       	ldi	r30, 0xCE	; 206
     17a:	f6 e3       	ldi	r31, 0x36	; 54
     17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x10>
     17e:	05 90       	lpm	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	aa 36       	cpi	r26, 0x6A	; 106
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0xc>

00000188 <__do_clear_bss>:
     188:	25 e0       	ldi	r18, 0x05	; 5
     18a:	aa e6       	ldi	r26, 0x6A	; 106
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	ae 3c       	cpi	r26, 0xCE	; 206
     194:	b2 07       	cpc	r27, r18
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
     198:	0e 94 45 11 	call	0x228a	; 0x228a <main>
     19c:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <_exit>

000001a0 <__bad_interrupt>:
     1a0:	2f cf       	rjmp	.-418    	; 0x0 <__vectors>

000001a2 <Config_IO>:
#include "IO_Macros.h"
#include <avr/io.h>

void Config_IO(){
	
	configure_as_input(SD_DETECT);
     1a2:	27 98       	cbi	0x04, 7	; 4
	pullup_on(SD_DETECT);
     1a4:	2f 9a       	sbi	0x05, 7	; 5
	
	configure_as_input(REED_1);
     1a6:	56 98       	cbi	0x0a, 6	; 10
	pullup_on(REED_1);
     1a8:	5e 9a       	sbi	0x0b, 6	; 11
	
	configure_as_input(REED_2);
     1aa:	57 98       	cbi	0x0a, 7	; 10
	pullup_on(REED_2);	
     1ac:	5f 9a       	sbi	0x0b, 7	; 11

	configure_as_input(REED_3);
     1ae:	24 98       	cbi	0x04, 4	; 4
	pullup_on(REED_3);	
     1b0:	2c 9a       	sbi	0x05, 4	; 5
	
	configure_as_input(REED_4);
     1b2:	25 98       	cbi	0x04, 5	; 4
	pullup_on(REED_4);	
     1b4:	2d 9a       	sbi	0x05, 5	; 5

	configure_as_input(SD_MISO);
     1b6:	23 98       	cbi	0x04, 3	; 4
	pullup_on(SD_MISO);
     1b8:	2b 9a       	sbi	0x05, 3	; 5
	
	configure_as_output(SD_MOSI);
     1ba:	22 9a       	sbi	0x04, 2	; 4

	configure_as_output(SENSE_CLK);
     1bc:	26 9a       	sbi	0x04, 6	; 4
	
	configure_as_input(SENSE_SER);
     1be:	3e 98       	cbi	0x07, 6	; 7
	pullup_on(SENSE_SER);
     1c0:	46 9a       	sbi	0x08, 6	; 8
	
	configure_as_output(SD_CLK);
     1c2:	21 9a       	sbi	0x04, 1	; 4
	
	configure_as_input(PIO_5);
     1c4:	20 98       	cbi	0x04, 0	; 4
	pullup_on(PIO_5);
     1c6:	28 9a       	sbi	0x05, 0	; 5
	
	configure_as_input(PIO_6);
     1c8:	6e 98       	cbi	0x0d, 6	; 13
	pullup_on(PIO_6);
     1ca:	76 9a       	sbi	0x0e, 6	; 14
	
	set_low(DUMMY_LOAD);
     1cc:	5d 98       	cbi	0x0b, 5	; 11
	configure_as_output(DUMMY_LOAD);
     1ce:	55 9a       	sbi	0x0a, 5	; 10
	
	configure_as_input(POK);
     1d0:	54 98       	cbi	0x0a, 4	; 10
	pullup_on(POK);
     1d2:	5c 9a       	sbi	0x0b, 4	; 11
	
	set_high(TX);
     1d4:	5b 9a       	sbi	0x0b, 3	; 11
	configure_as_output(TX);
     1d6:	53 9a       	sbi	0x0a, 3	; 10
	
	configure_as_input(RX);
     1d8:	52 98       	cbi	0x0a, 2	; 10
	pullup_on(RX);
     1da:	5a 9a       	sbi	0x0b, 2	; 11
	
	set_high(SD_CHIP_SELECT);
     1dc:	59 9a       	sbi	0x0b, 1	; 11
	configure_as_output(SD_CHIP_SELECT);
     1de:	51 9a       	sbi	0x0a, 1	; 10
	
	set_high(SD_POWER);
     1e0:	58 9a       	sbi	0x0b, 0	; 11
	configure_as_output(SD_POWER);
     1e2:	50 9a       	sbi	0x0a, 0	; 10
	
	set_high(SENSE_POWER);
     1e4:	72 9a       	sbi	0x0e, 2	; 14
	configure_as_output(SENSE_POWER);
     1e6:	6a 9a       	sbi	0x0d, 2	; 13
	
	configure_as_input(S1);
     1e8:	85 98       	cbi	0x10, 5	; 16
	pullup_on(S1);
     1ea:	8d 9a       	sbi	0x11, 5	; 17
	
	configure_as_input(S2);
     1ec:	86 98       	cbi	0x10, 6	; 16
	pullup_on(S2);
     1ee:	8e 9a       	sbi	0x11, 6	; 17
	
	configure_as_input(S3);
     1f0:	87 98       	cbi	0x10, 7	; 16
	pullup_on(S3);
     1f2:	8f 9a       	sbi	0x11, 7	; 17
	
	set_low(BT_RESET);
     1f4:	8c 98       	cbi	0x11, 4	; 17
	configure_as_output(BT_RESET);
     1f6:	84 9a       	sbi	0x10, 4	; 16
	
	set_high(LED1);
     1f8:	89 9a       	sbi	0x11, 1	; 17
	configure_as_output(LED1);
     1fa:	81 9a       	sbi	0x10, 1	; 16
	
	set_high(LED2);
     1fc:	88 9a       	sbi	0x11, 0	; 17
	configure_as_output(LED2);
     1fe:	80 9a       	sbi	0x10, 0	; 16
     200:	08 95       	ret

00000202 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     202:	29 2f       	mov	r18, r25
     204:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     206:	23 30       	cpi	r18, 0x03	; 3
     208:	31 05       	cpc	r19, r1
     20a:	c9 f0       	breq	.+50     	; 0x23e <CALLBACK_USB_GetDescriptor+0x3c>
     20c:	44 f4       	brge	.+16     	; 0x21e <CALLBACK_USB_GetDescriptor+0x1c>
     20e:	21 30       	cpi	r18, 0x01	; 1
     210:	31 05       	cpc	r19, r1
     212:	09 f4       	brne	.+2      	; 0x216 <CALLBACK_USB_GetDescriptor+0x14>
     214:	39 c0       	rjmp	.+114    	; 0x288 <CALLBACK_USB_GetDescriptor+0x86>
     216:	22 30       	cpi	r18, 0x02	; 2
     218:	31 05       	cpc	r19, r1
     21a:	61 f0       	breq	.+24     	; 0x234 <CALLBACK_USB_GetDescriptor+0x32>
     21c:	06 c0       	rjmp	.+12     	; 0x22a <CALLBACK_USB_GetDescriptor+0x28>
     21e:	21 32       	cpi	r18, 0x21	; 33
     220:	31 05       	cpc	r19, r1
     222:	41 f1       	breq	.+80     	; 0x274 <CALLBACK_USB_GetDescriptor+0x72>
     224:	22 32       	cpi	r18, 0x22	; 34
     226:	31 05       	cpc	r19, r1
     228:	51 f1       	breq	.+84     	; 0x27e <CALLBACK_USB_GetDescriptor+0x7c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	33 c0       	rjmp	.+102    	; 0x29a <CALLBACK_USB_GetDescriptor+0x98>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     234:	89 e3       	ldi	r24, 0x39	; 57
     236:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     238:	2a ef       	ldi	r18, 0xFA	; 250
     23a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     23c:	2e c0       	rjmp	.+92     	; 0x29a <CALLBACK_USB_GetDescriptor+0x98>
     23e:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	91 05       	cpc	r25, r1
     244:	59 f0       	breq	.+22     	; 0x25c <CALLBACK_USB_GetDescriptor+0x5a>
     246:	82 30       	cpi	r24, 0x02	; 2
     248:	91 05       	cpc	r25, r1
     24a:	71 f0       	breq	.+28     	; 0x268 <CALLBACK_USB_GetDescriptor+0x66>
     24c:	89 2b       	or	r24, r25
     24e:	09 f5       	brne	.+66     	; 0x292 <CALLBACK_USB_GetDescriptor+0x90>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     250:	e6 ef       	ldi	r30, 0xF6	; 246
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	84 91       	lpm	r24, Z
     256:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     258:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     25a:	1f c0       	rjmp	.+62     	; 0x29a <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     25c:	ec ed       	ldi	r30, 0xDC	; 220
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	84 91       	lpm	r24, Z
     262:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     264:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     266:	19 c0       	rjmp	.+50     	; 0x29a <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     268:	ec ea       	ldi	r30, 0xAC	; 172
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	84 91       	lpm	r24, Z
     26e:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     270:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     272:	13 c0       	rjmp	.+38     	; 0x29a <CALLBACK_USB_GetDescriptor+0x98>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     274:	89 e0       	ldi	r24, 0x09	; 9
     276:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     278:	23 e2       	ldi	r18, 0x23	; 35
     27a:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     27c:	0e c0       	rjmp	.+28     	; 0x29a <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     27e:	80 e2       	ldi	r24, 0x20	; 32
     280:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     282:	25 e4       	ldi	r18, 0x45	; 69
     284:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
     286:	09 c0       	rjmp	.+18     	; 0x29a <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     288:	82 e1       	ldi	r24, 0x12	; 18
     28a:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     28c:	23 e3       	ldi	r18, 0x33	; 51
     28e:	31 e0       	ldi	r19, 0x01	; 1
     290:	04 c0       	rjmp	.+8      	; 0x29a <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     29a:	fa 01       	movw	r30, r20
     29c:	31 83       	std	Z+1, r19	; 0x01
     29e:	20 83       	st	Z, r18
	return Size;
}
     2a0:	08 95       	ret

000002a2 <dly_us>:

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
     2a2:	23 b1       	in	r18, 0x03	; 3
#if F_CPU >= 6000000
		PINB;
     2a4:	23 b1       	in	r18, 0x03	; 3
#endif
#if F_CPU >= 7000000
		PINB;
     2a6:	23 b1       	in	r18, 0x03	; 3
#endif
#if F_CPU >= 8000000
		PINB;
     2a8:	23 b1       	in	r18, 0x03	; 3
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	00 97       	sbiw	r24, 0x00	; 0
     2ae:	c9 f7       	brne	.-14     	; 0x2a2 <dly_us>
}
     2b0:	08 95       	ret

000002b2 <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
     2b2:	fc 01       	movw	r30, r24
     2b4:	68 0f       	add	r22, r24
     2b6:	79 1f       	adc	r23, r25
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
     2b8:	81 91       	ld	r24, Z+
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
     2ba:	88 23       	and	r24, r24
     2bc:	14 f4       	brge	.+4      	; 0x2c2 <xmit_mmc+0x10>
     2be:	2a 9a       	sbi	0x05, 2	; 5
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <xmit_mmc+0x12>
     2c2:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     2c4:	29 9a       	sbi	0x05, 1	; 5
     2c6:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
     2c8:	86 ff       	sbrs	r24, 6
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <xmit_mmc+0x1e>
     2cc:	2a 9a       	sbi	0x05, 2	; 5
     2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <xmit_mmc+0x20>
     2d0:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     2d2:	29 9a       	sbi	0x05, 1	; 5
     2d4:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
     2d6:	85 ff       	sbrs	r24, 5
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <xmit_mmc+0x2c>
     2da:	2a 9a       	sbi	0x05, 2	; 5
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <xmit_mmc+0x2e>
     2de:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     2e0:	29 9a       	sbi	0x05, 1	; 5
     2e2:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
     2e4:	84 ff       	sbrs	r24, 4
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <xmit_mmc+0x3a>
     2e8:	2a 9a       	sbi	0x05, 2	; 5
     2ea:	01 c0       	rjmp	.+2      	; 0x2ee <xmit_mmc+0x3c>
     2ec:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     2ee:	29 9a       	sbi	0x05, 1	; 5
     2f0:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
     2f2:	83 ff       	sbrs	r24, 3
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <xmit_mmc+0x48>
     2f6:	2a 9a       	sbi	0x05, 2	; 5
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <xmit_mmc+0x4a>
     2fa:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     2fc:	29 9a       	sbi	0x05, 1	; 5
     2fe:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
     300:	82 ff       	sbrs	r24, 2
     302:	02 c0       	rjmp	.+4      	; 0x308 <xmit_mmc+0x56>
     304:	2a 9a       	sbi	0x05, 2	; 5
     306:	01 c0       	rjmp	.+2      	; 0x30a <xmit_mmc+0x58>
     308:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     30a:	29 9a       	sbi	0x05, 1	; 5
     30c:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
     30e:	81 ff       	sbrs	r24, 1
     310:	02 c0       	rjmp	.+4      	; 0x316 <xmit_mmc+0x64>
     312:	2a 9a       	sbi	0x05, 2	; 5
     314:	01 c0       	rjmp	.+2      	; 0x318 <xmit_mmc+0x66>
     316:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     318:	29 9a       	sbi	0x05, 1	; 5
     31a:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
     31c:	80 ff       	sbrs	r24, 0
     31e:	02 c0       	rjmp	.+4      	; 0x324 <xmit_mmc+0x72>
     320:	2a 9a       	sbi	0x05, 2	; 5
     322:	01 c0       	rjmp	.+2      	; 0x326 <xmit_mmc+0x74>
     324:	2a 98       	cbi	0x05, 2	; 5
		CK_H(); CK_L();
     326:	29 9a       	sbi	0x05, 1	; 5
     328:	29 98       	cbi	0x05, 1	; 5
	} while (--bc);
     32a:	e6 17       	cp	r30, r22
     32c:	f7 07       	cpc	r31, r23
     32e:	21 f6       	brne	.-120    	; 0x2b8 <xmit_mmc+0x6>
}
     330:	08 95       	ret

00000332 <rcvr_mmc>:
)
{
	BYTE r;


	DI_H();	/* Send 0xFF */
     332:	2a 9a       	sbi	0x05, 2	; 5
     334:	fc 01       	movw	r30, r24
     336:	68 0f       	add	r22, r24
     338:	79 1f       	adc	r23, r25

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
     33a:	83 b1       	in	r24, 0x03	; 3
		CK_H(); CK_L();
     33c:	29 9a       	sbi	0x05, 1	; 5
     33e:	29 98       	cbi	0x05, 1	; 5


	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
     340:	83 fb       	bst	r24, 3
     342:	88 27       	eor	r24, r24
     344:	80 f9       	bld	r24, 0
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit6 */
     346:	88 0f       	add	r24, r24
     348:	1b 99       	sbic	0x03, 3	; 3
     34a:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     34c:	29 9a       	sbi	0x05, 1	; 5
     34e:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit5 */
     350:	88 0f       	add	r24, r24
     352:	1b 99       	sbic	0x03, 3	; 3
     354:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     356:	29 9a       	sbi	0x05, 1	; 5
     358:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit4 */
     35a:	88 0f       	add	r24, r24
     35c:	1b 99       	sbic	0x03, 3	; 3
     35e:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     360:	29 9a       	sbi	0x05, 1	; 5
     362:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit3 */
     364:	88 0f       	add	r24, r24
     366:	1b 99       	sbic	0x03, 3	; 3
     368:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     36a:	29 9a       	sbi	0x05, 1	; 5
     36c:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit2 */
     36e:	88 0f       	add	r24, r24
     370:	1b 99       	sbic	0x03, 3	; 3
     372:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     374:	29 9a       	sbi	0x05, 1	; 5
     376:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit1 */
     378:	88 0f       	add	r24, r24
     37a:	1b 99       	sbic	0x03, 3	; 3
     37c:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     37e:	29 9a       	sbi	0x05, 1	; 5
     380:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit0 */
     382:	88 0f       	add	r24, r24
     384:	1b 99       	sbic	0x03, 3	; 3
     386:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
     388:	29 9a       	sbi	0x05, 1	; 5
     38a:	29 98       	cbi	0x05, 1	; 5
		*buff++ = r;			/* Store a received byte */
     38c:	81 93       	st	Z+, r24
	} while (--bc);
     38e:	e6 17       	cp	r30, r22
     390:	f7 07       	cpc	r31, r23
     392:	99 f6       	brne	.-90     	; 0x33a <rcvr_mmc+0x8>
}
     394:	08 95       	ret

00000396 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	1f 92       	push	r1
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
     3a4:	08 e8       	ldi	r16, 0x88	; 136
     3a6:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	c0 df       	rcall	.-128    	; 0x332 <rcvr_mmc>
		if (d == 0xFF) break;
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	8f 3f       	cpi	r24, 0xFF	; 255
     3b6:	41 f0       	breq	.+16     	; 0x3c8 <wait_ready+0x32>
		dly_us(100);
     3b8:	84 e6       	ldi	r24, 0x64	; 100
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	72 df       	rcall	.-284    	; 0x2a2 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
     3be:	01 50       	subi	r16, 0x01	; 1
     3c0:	11 09       	sbc	r17, r1
     3c2:	01 15       	cp	r16, r1
     3c4:	11 05       	cpc	r17, r1
     3c6:	81 f7       	brne	.-32     	; 0x3a8 <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	01 2b       	or	r16, r17
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <wait_ready+0x3e>
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
}
     3d4:	0f 90       	pop	r0
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	08 95       	ret

000003e0 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	1f 92       	push	r1
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();
     3ea:	59 9a       	sbi	0x0b, 1	; 11
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	ce 01       	movw	r24, r28
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	9e df       	rcall	.-196    	; 0x332 <rcvr_mmc>
}
     3f6:	0f 90       	pop	r0
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	1f 92       	push	r1
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();
     40c:	59 98       	cbi	0x0b, 1	; 11
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	ce 01       	movw	r24, r28
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	8d df       	rcall	.-230    	; 0x332 <rcvr_mmc>

	if (wait_ready()) return 1;	/* OK */
     418:	be df       	rcall	.-132    	; 0x396 <wait_ready>
     41a:	8c 01       	movw	r16, r24
     41c:	00 97       	sbiw	r24, 0x00	; 0
     41e:	11 f4       	brne	.+4      	; 0x424 <select+0x26>
	deselect();
     420:	df df       	rcall	.-66     	; 0x3e0 <deselect>
	return 0;			/* Failed */
     422:	02 c0       	rjmp	.+4      	; 0x428 <select+0x2a>
	BYTE d;

	CS_L();
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
     424:	01 e0       	ldi	r16, 0x01	; 1
     426:	10 e0       	ldi	r17, 0x00	; 0
	deselect();
	return 0;			/* Failed */
}
     428:	c8 01       	movw	r24, r16
     42a:	0f 90       	pop	r0
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	08 95       	ret

00000436 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
     436:	cf 92       	push	r12
     438:	df 92       	push	r13
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	00 d0       	rcall	.+0      	; 0x448 <rcvr_datablock+0x12>
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	7c 01       	movw	r14, r24
     44e:	6b 01       	movw	r12, r22
     450:	08 ee       	ldi	r16, 0xE8	; 232
     452:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	ce 01       	movw	r24, r28
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	6a df       	rcall	.-300    	; 0x332 <rcvr_mmc>
		if (d[0] != 0xFF) break;
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	8f 3f       	cpi	r24, 0xFF	; 255
     462:	41 f4       	brne	.+16     	; 0x474 <rcvr_datablock+0x3e>
		dly_us(100);
     464:	84 e6       	ldi	r24, 0x64	; 100
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	1c df       	rcall	.-456    	; 0x2a2 <dly_us>
     46a:	01 50       	subi	r16, 0x01	; 1
     46c:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
     46e:	01 15       	cp	r16, r1
     470:	11 05       	cpc	r17, r1
     472:	81 f7       	brne	.-32     	; 0x454 <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	8e 3f       	cpi	r24, 0xFE	; 254
     478:	59 f4       	brne	.+22     	; 0x490 <rcvr_datablock+0x5a>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
     47a:	b6 01       	movw	r22, r12
     47c:	c7 01       	movw	r24, r14
     47e:	59 df       	rcall	.-334    	; 0x332 <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
     480:	62 e0       	ldi	r22, 0x02	; 2
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	ce 01       	movw	r24, r28
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	54 df       	rcall	.-344    	; 0x332 <rcvr_mmc>

	return 1;						/* Return with success */
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	02 c0       	rjmp	.+4      	; 0x494 <rcvr_datablock+0x5e>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	08 95       	ret

000004aa <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <xmit_datablock+0xc>
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	8c 01       	movw	r16, r24
     4bc:	f6 2e       	mov	r15, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
     4be:	6b df       	rcall	.-298    	; 0x396 <wait_ready>
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	19 f1       	breq	.+70     	; 0x50a <xmit_datablock+0x60>

	d[0] = token;
     4c4:	f9 82       	std	Y+1, r15	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	ce 01       	movw	r24, r28
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	f1 de       	rcall	.-542    	; 0x2b2 <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
     4d0:	8d ef       	ldi	r24, 0xFD	; 253
     4d2:	f8 16       	cp	r15, r24
     4d4:	c1 f0       	breq	.+48     	; 0x506 <xmit_datablock+0x5c>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	72 e0       	ldi	r23, 0x02	; 2
     4da:	c8 01       	movw	r24, r16
     4dc:	ea de       	rcall	.-556    	; 0x2b2 <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
     4de:	62 e0       	ldi	r22, 0x02	; 2
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	ce 01       	movw	r24, r28
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	25 df       	rcall	.-438    	; 0x332 <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	ce 01       	movw	r24, r28
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	20 df       	rcall	.-448    	; 0x332 <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	8f 71       	andi	r24, 0x1F	; 31
     4f6:	31 e0       	ldi	r19, 0x01	; 1
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	85 30       	cpi	r24, 0x05	; 5
     4fc:	09 f0       	breq	.+2      	; 0x500 <xmit_datablock+0x56>
     4fe:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
     500:	83 2f       	mov	r24, r19
     502:	92 2f       	mov	r25, r18
     504:	02 c0       	rjmp	.+4      	; 0x50a <xmit_datablock+0x60>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
}
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	08 95       	ret

0000051a <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	27 97       	sbiw	r28, 0x07	; 7
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
     538:	18 2f       	mov	r17, r24
     53a:	04 2f       	mov	r16, r20
     53c:	f5 2e       	mov	r15, r21
     53e:	e6 2e       	mov	r14, r22
     540:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     542:	88 23       	and	r24, r24
     544:	4c f4       	brge	.+18     	; 0x558 <send_cmd+0x3e>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	ba 01       	movw	r22, r20
     54c:	87 e3       	ldi	r24, 0x37	; 55
     54e:	e5 df       	rcall	.-54     	; 0x51a <send_cmd>
		if (n > 1) return n;
     550:	82 30       	cpi	r24, 0x02	; 2
     552:	08 f0       	brcs	.+2      	; 0x556 <send_cmd+0x3c>
     554:	45 c0       	rjmp	.+138    	; 0x5e0 <send_cmd+0xc6>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     556:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     558:	1c 30       	cpi	r17, 0x0C	; 12
     55a:	59 f1       	breq	.+86     	; 0x5b2 <send_cmd+0x98>
		deselect();
     55c:	41 df       	rcall	.-382    	; 0x3e0 <deselect>
		if (!select()) return 0xFF;
     55e:	4f df       	rcall	.-354    	; 0x3fe <select>
     560:	89 2b       	or	r24, r25
     562:	29 f1       	breq	.+74     	; 0x5ae <send_cmd+0x94>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
     564:	81 2f       	mov	r24, r17
     566:	80 64       	ori	r24, 0x40	; 64
     568:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
     56a:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
     56c:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
     56e:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
     570:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
     572:	11 23       	and	r17, r17
     574:	69 f1       	breq	.+90     	; 0x5d0 <send_cmd+0xb6>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
     576:	18 30       	cpi	r17, 0x08	; 8
     578:	19 f1       	breq	.+70     	; 0x5c0 <send_cmd+0xa6>
	buf[5] = n;
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     57e:	66 e0       	ldi	r22, 0x06	; 6
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	ce 01       	movw	r24, r28
     584:	02 96       	adiw	r24, 0x02	; 2
     586:	95 de       	rcall	.-726    	; 0x2b2 <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
     588:	1c 30       	cpi	r17, 0x0C	; 12
     58a:	29 f4       	brne	.+10     	; 0x596 <send_cmd+0x7c>
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	ce 01       	movw	r24, r28
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	ce de       	rcall	.-612    	; 0x332 <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     596:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	ce 01       	movw	r24, r28
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	c8 de       	rcall	.-624    	; 0x332 <rcvr_mmc>
	while ((d & 0x80) && --n);
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	88 23       	and	r24, r24
     5a6:	e4 f4       	brge	.+56     	; 0x5e0 <send_cmd+0xc6>
     5a8:	11 50       	subi	r17, 0x01	; 1
     5aa:	b1 f7       	brne	.-20     	; 0x598 <send_cmd+0x7e>
     5ac:	19 c0       	rjmp	.+50     	; 0x5e0 <send_cmd+0xc6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
     5b0:	17 c0       	rjmp	.+46     	; 0x5e0 <send_cmd+0xc6>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
     5b2:	8c e4       	ldi	r24, 0x4C	; 76
     5b4:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
     5b6:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
     5b8:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
     5ba:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
     5bc:	0e 83       	std	Y+6, r16	; 0x06
     5be:	dd cf       	rjmp	.-70     	; 0x57a <send_cmd+0x60>
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
     5c0:	87 e8       	ldi	r24, 0x87	; 135
     5c2:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     5c4:	66 e0       	ldi	r22, 0x06	; 6
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	ce 01       	movw	r24, r28
     5ca:	02 96       	adiw	r24, 0x02	; 2
     5cc:	72 de       	rcall	.-796    	; 0x2b2 <xmit_mmc>
     5ce:	e3 cf       	rjmp	.-58     	; 0x596 <send_cmd+0x7c>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
     5d0:	85 e9       	ldi	r24, 0x95	; 149
     5d2:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     5d4:	66 e0       	ldi	r22, 0x06	; 6
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	ce 01       	movw	r24, r28
     5da:	02 96       	adiw	r24, 0x02	; 2
     5dc:	6a de       	rcall	.-812    	; 0x2b2 <xmit_mmc>
     5de:	db cf       	rjmp	.-74     	; 0x596 <send_cmd+0x7c>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
     5e0:	27 96       	adiw	r28, 0x07	; 7
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	08 95       	ret

000005fc <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     5fc:	81 11       	cpse	r24, r1
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <disk_status+0xa>

	return Stat;
     600:	80 91 00 01 	lds	r24, 0x0100
     604:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     606:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
     608:	08 95       	ret

0000060a <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	00 d0       	rcall	.+0      	; 0x618 <disk_initialize+0xe>
     618:	00 d0       	rcall	.+0      	; 0x61a <disk_initialize+0x10>
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
     61e:	81 11       	cpse	r24, r1
     620:	a7 c0       	rjmp	.+334    	; 0x770 <disk_initialize+0x166>

	dly_us(10000);			/* 10ms */
     622:	80 e1       	ldi	r24, 0x10	; 16
     624:	97 e2       	ldi	r25, 0x27	; 39
     626:	3d de       	rcall	.-902    	; 0x2a2 <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
     628:	51 9a       	sbi	0x0a, 1	; 10
     62a:	59 9a       	sbi	0x0b, 1	; 11
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
     62c:	21 9a       	sbi	0x04, 1	; 4
     62e:	29 98       	cbi	0x05, 1	; 5
	DI_INIT();				/* Initialize port pin tied to DI */
     630:	22 9a       	sbi	0x04, 2	; 4
	DO_INIT();				/* Initialize port pin tied to DO */
     632:	23 98       	cbi	0x04, 3	; 4
     634:	1a e0       	ldi	r17, 0x0A	; 10

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
     636:	61 e0       	ldi	r22, 0x01	; 1
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	79 de       	rcall	.-782    	; 0x332 <rcvr_mmc>
     640:	11 50       	subi	r17, 0x01	; 1
     642:	c9 f7       	brne	.-14     	; 0x636 <disk_initialize+0x2c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	ba 01       	movw	r22, r20
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	66 df       	rcall	.-308    	; 0x51a <send_cmd>
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	09 f0       	breq	.+2      	; 0x654 <disk_initialize+0x4a>
     652:	6f c0       	rjmp	.+222    	; 0x732 <disk_initialize+0x128>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     654:	4a ea       	ldi	r20, 0xAA	; 170
     656:	51 e0       	ldi	r21, 0x01	; 1
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	88 e0       	ldi	r24, 0x08	; 8
     65e:	5d df       	rcall	.-326    	; 0x51a <send_cmd>
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	b9 f5       	brne	.+110    	; 0x6d2 <disk_initialize+0xc8>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
     664:	64 e0       	ldi	r22, 0x04	; 4
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	ce 01       	movw	r24, r28
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	62 de       	rcall	.-828    	; 0x332 <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	09 f0       	breq	.+2      	; 0x676 <disk_initialize+0x6c>
     674:	60 c0       	rjmp	.+192    	; 0x736 <disk_initialize+0x12c>
     676:	8c 81       	ldd	r24, Y+4	; 0x04
     678:	8a 3a       	cpi	r24, 0xAA	; 170
     67a:	09 f0       	breq	.+2      	; 0x67e <disk_initialize+0x74>
     67c:	5e c0       	rjmp	.+188    	; 0x73a <disk_initialize+0x130>
     67e:	08 ee       	ldi	r16, 0xE8	; 232
     680:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e4       	ldi	r23, 0x40	; 64
     68a:	89 ea       	ldi	r24, 0xA9	; 169
     68c:	46 df       	rcall	.-372    	; 0x51a <send_cmd>
     68e:	88 23       	and	r24, r24
     690:	49 f0       	breq	.+18     	; 0x6a4 <disk_initialize+0x9a>
					dly_us(1000);
     692:	88 ee       	ldi	r24, 0xE8	; 232
     694:	93 e0       	ldi	r25, 0x03	; 3
     696:	05 de       	rcall	.-1014   	; 0x2a2 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
     698:	01 50       	subi	r16, 0x01	; 1
     69a:	11 09       	sbc	r17, r1
     69c:	01 15       	cp	r16, r1
     69e:	11 05       	cpc	r17, r1
     6a0:	81 f7       	brne	.-32     	; 0x682 <disk_initialize+0x78>
     6a2:	4d c0       	rjmp	.+154    	; 0x73e <disk_initialize+0x134>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
     6a4:	01 2b       	or	r16, r17
     6a6:	09 f4       	brne	.+2      	; 0x6aa <disk_initialize+0xa0>
     6a8:	4c c0       	rjmp	.+152    	; 0x742 <disk_initialize+0x138>
     6aa:	40 e0       	ldi	r20, 0x00	; 0
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	ba 01       	movw	r22, r20
     6b0:	8a e3       	ldi	r24, 0x3A	; 58
     6b2:	33 df       	rcall	.-410    	; 0x51a <send_cmd>
     6b4:	81 11       	cpse	r24, r1
     6b6:	47 c0       	rjmp	.+142    	; 0x746 <disk_initialize+0x13c>
					rcvr_mmc(buf, 4);
     6b8:	64 e0       	ldi	r22, 0x04	; 4
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	ce 01       	movw	r24, r28
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	38 de       	rcall	.-912    	; 0x332 <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	86 ff       	sbrs	r24, 6
     6c6:	41 c0       	rjmp	.+130    	; 0x74a <disk_initialize+0x140>
     6c8:	0f 2e       	mov	r0, r31
     6ca:	fc e0       	ldi	r31, 0x0C	; 12
     6cc:	ff 2e       	mov	r15, r31
     6ce:	f0 2d       	mov	r31, r0
     6d0:	45 c0       	rjmp	.+138    	; 0x75c <disk_initialize+0x152>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	ba 01       	movw	r22, r20
     6d8:	89 ea       	ldi	r24, 0xA9	; 169
     6da:	1f df       	rcall	.-450    	; 0x51a <send_cmd>
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	40 f4       	brcc	.+16     	; 0x6f0 <disk_initialize+0xe6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     6e0:	0f 2e       	mov	r0, r31
     6e2:	f9 ea       	ldi	r31, 0xA9	; 169
     6e4:	ef 2e       	mov	r14, r31
     6e6:	f0 2d       	mov	r31, r0
     6e8:	68 94       	set
     6ea:	ff 24       	eor	r15, r15
     6ec:	f1 f8       	bld	r15, 1
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <disk_initialize+0xee>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     6f0:	ee 24       	eor	r14, r14
     6f2:	e3 94       	inc	r14
     6f4:	ff 24       	eor	r15, r15
     6f6:	f3 94       	inc	r15
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
     6f8:	08 ee       	ldi	r16, 0xE8	; 232
     6fa:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	ba 01       	movw	r22, r20
     702:	8e 2d       	mov	r24, r14
     704:	0a df       	rcall	.-492    	; 0x51a <send_cmd>
     706:	88 23       	and	r24, r24
     708:	49 f0       	breq	.+18     	; 0x71c <disk_initialize+0x112>
				dly_us(1000);
     70a:	88 ee       	ldi	r24, 0xE8	; 232
     70c:	93 e0       	ldi	r25, 0x03	; 3
     70e:	c9 dd       	rcall	.-1134   	; 0x2a2 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
     710:	01 50       	subi	r16, 0x01	; 1
     712:	11 09       	sbc	r17, r1
     714:	01 15       	cp	r16, r1
     716:	11 05       	cpc	r17, r1
     718:	89 f7       	brne	.-30     	; 0x6fc <disk_initialize+0xf2>
     71a:	1b c0       	rjmp	.+54     	; 0x752 <disk_initialize+0x148>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     71c:	01 2b       	or	r16, r17
     71e:	d9 f0       	breq	.+54     	; 0x756 <disk_initialize+0x14c>
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	52 e0       	ldi	r21, 0x02	; 2
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e1       	ldi	r24, 0x10	; 16
     72a:	f7 de       	rcall	.-530    	; 0x51a <send_cmd>
     72c:	81 11       	cpse	r24, r1
     72e:	15 c0       	rjmp	.+42     	; 0x75a <disk_initialize+0x150>
     730:	15 c0       	rjmp	.+42     	; 0x75c <disk_initialize+0x152>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
     732:	f1 2c       	mov	r15, r1
     734:	13 c0       	rjmp	.+38     	; 0x75c <disk_initialize+0x152>
     736:	f1 2c       	mov	r15, r1
     738:	11 c0       	rjmp	.+34     	; 0x75c <disk_initialize+0x152>
     73a:	f1 2c       	mov	r15, r1
     73c:	0f c0       	rjmp	.+30     	; 0x75c <disk_initialize+0x152>
     73e:	f1 2c       	mov	r15, r1
     740:	0d c0       	rjmp	.+26     	; 0x75c <disk_initialize+0x152>
     742:	f1 2c       	mov	r15, r1
     744:	0b c0       	rjmp	.+22     	; 0x75c <disk_initialize+0x152>
     746:	f1 2c       	mov	r15, r1
     748:	09 c0       	rjmp	.+18     	; 0x75c <disk_initialize+0x152>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     74a:	68 94       	set
     74c:	ff 24       	eor	r15, r15
     74e:	f2 f8       	bld	r15, 2
     750:	05 c0       	rjmp	.+10     	; 0x75c <disk_initialize+0x152>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
     752:	f1 2c       	mov	r15, r1
     754:	03 c0       	rjmp	.+6      	; 0x75c <disk_initialize+0x152>
     756:	f1 2c       	mov	r15, r1
     758:	01 c0       	rjmp	.+2      	; 0x75c <disk_initialize+0x152>
     75a:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
     75c:	f0 92 6a 01 	sts	0x016A, r15
	s = ty ? 0 : STA_NOINIT;
     760:	11 e0       	ldi	r17, 0x01	; 1
     762:	f1 10       	cpse	r15, r1
     764:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
     766:	10 93 00 01 	sts	0x0100, r17

	deselect();
     76a:	3a de       	rcall	.-908    	; 0x3e0 <deselect>

	return s;
     76c:	81 2f       	mov	r24, r17
     76e:	01 c0       	rjmp	.+2      	; 0x772 <disk_initialize+0x168>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
     770:	83 e0       	ldi	r24, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	08 95       	ret

00000788 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	eb 01       	movw	r28, r22

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     794:	81 11       	cpse	r24, r1
     796:	3d c0       	rjmp	.+122    	; 0x812 <disk_read+0x8a>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     798:	80 91 00 01 	lds	r24, 0x0100
     79c:	80 fd       	sbrc	r24, 0
     79e:	3b c0       	rjmp	.+118    	; 0x816 <disk_read+0x8e>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
     7a0:	80 91 6a 01 	lds	r24, 0x016A
     7a4:	83 fd       	sbrc	r24, 3
     7a6:	09 c0       	rjmp	.+18     	; 0x7ba <disk_read+0x32>
     7a8:	01 2e       	mov	r0, r17
     7aa:	19 e0       	ldi	r17, 0x09	; 9
     7ac:	22 0f       	add	r18, r18
     7ae:	33 1f       	adc	r19, r19
     7b0:	44 1f       	adc	r20, r20
     7b2:	55 1f       	adc	r21, r21
     7b4:	1a 95       	dec	r17
     7b6:	d1 f7       	brne	.-12     	; 0x7ac <disk_read+0x24>
     7b8:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     7ba:	02 30       	cpi	r16, 0x02	; 2
     7bc:	11 05       	cpc	r17, r1
     7be:	28 f0       	brcs	.+10     	; 0x7ca <disk_read+0x42>
     7c0:	0f 2e       	mov	r0, r31
     7c2:	f2 e1       	ldi	r31, 0x12	; 18
     7c4:	ff 2e       	mov	r15, r31
     7c6:	f0 2d       	mov	r31, r0
     7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <disk_read+0x4a>
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f1 e1       	ldi	r31, 0x11	; 17
     7ce:	ff 2e       	mov	r15, r31
     7d0:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
     7d2:	ba 01       	movw	r22, r20
     7d4:	a9 01       	movw	r20, r18
     7d6:	8f 2d       	mov	r24, r15
     7d8:	a0 de       	rcall	.-704    	; 0x51a <send_cmd>
     7da:	81 11       	cpse	r24, r1
     7dc:	14 c0       	rjmp	.+40     	; 0x806 <disk_read+0x7e>
		do {
			if (!rcvr_datablock(buff, 512)) break;
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	72 e0       	ldi	r23, 0x02	; 2
     7e2:	ce 01       	movw	r24, r28
     7e4:	28 de       	rcall	.-944    	; 0x436 <rcvr_datablock>
     7e6:	89 2b       	or	r24, r25
     7e8:	31 f0       	breq	.+12     	; 0x7f6 <disk_read+0x6e>
			buff += 512;
     7ea:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
     7ec:	01 50       	subi	r16, 0x01	; 1
     7ee:	11 09       	sbc	r17, r1
     7f0:	01 15       	cp	r16, r1
     7f2:	11 05       	cpc	r17, r1
     7f4:	a1 f7       	brne	.-24     	; 0x7de <disk_read+0x56>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
     7f6:	82 e1       	ldi	r24, 0x12	; 18
     7f8:	f8 12       	cpse	r15, r24
     7fa:	05 c0       	rjmp	.+10     	; 0x806 <disk_read+0x7e>
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	ba 01       	movw	r22, r20
     802:	8c e0       	ldi	r24, 0x0C	; 12
     804:	8a de       	rcall	.-748    	; 0x51a <send_cmd>
	}
	deselect();
     806:	ec dd       	rcall	.-1064   	; 0x3e0 <deselect>

	return count ? RES_ERROR : RES_OK;
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	01 2b       	or	r16, r17
     80c:	29 f4       	brne	.+10     	; 0x818 <disk_read+0x90>
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	03 c0       	rjmp	.+6      	; 0x818 <disk_read+0x90>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	01 c0       	rjmp	.+2      	; 0x818 <disk_read+0x90>
     816:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	08 95       	ret

00000824 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	eb 01       	movw	r28, r22
     836:	69 01       	movw	r12, r18
     838:	7a 01       	movw	r14, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     83a:	81 11       	cpse	r24, r1
     83c:	4b c0       	rjmp	.+150    	; 0x8d4 <disk_write+0xb0>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     83e:	80 91 00 01 	lds	r24, 0x0100
     842:	80 fd       	sbrc	r24, 0
     844:	49 c0       	rjmp	.+146    	; 0x8d8 <disk_write+0xb4>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
     846:	80 91 6a 01 	lds	r24, 0x016A
     84a:	83 fd       	sbrc	r24, 3
     84c:	09 c0       	rjmp	.+18     	; 0x860 <disk_write+0x3c>
     84e:	0b 2e       	mov	r0, r27
     850:	b9 e0       	ldi	r27, 0x09	; 9
     852:	cc 0c       	add	r12, r12
     854:	dd 1c       	adc	r13, r13
     856:	ee 1c       	adc	r14, r14
     858:	ff 1c       	adc	r15, r15
     85a:	ba 95       	dec	r27
     85c:	d1 f7       	brne	.-12     	; 0x852 <disk_write+0x2e>
     85e:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     860:	01 30       	cpi	r16, 0x01	; 1
     862:	11 05       	cpc	r17, r1
     864:	89 f4       	brne	.+34     	; 0x888 <disk_write+0x64>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     866:	b7 01       	movw	r22, r14
     868:	a6 01       	movw	r20, r12
     86a:	88 e1       	ldi	r24, 0x18	; 24
     86c:	56 de       	rcall	.-852    	; 0x51a <send_cmd>
     86e:	81 11       	cpse	r24, r1
     870:	2b c0       	rjmp	.+86     	; 0x8c8 <disk_write+0xa4>
			&& xmit_datablock(buff, 0xFE))
     872:	6e ef       	ldi	r22, 0xFE	; 254
     874:	ce 01       	movw	r24, r28
     876:	19 de       	rcall	.-974    	; 0x4aa <xmit_datablock>
     878:	31 e0       	ldi	r19, 0x01	; 1
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	89 2b       	or	r24, r25
     87e:	09 f0       	breq	.+2      	; 0x882 <disk_write+0x5e>
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	03 2f       	mov	r16, r19
     884:	12 2f       	mov	r17, r18
     886:	20 c0       	rjmp	.+64     	; 0x8c8 <disk_write+0xa4>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     888:	86 70       	andi	r24, 0x06	; 6
     88a:	29 f0       	breq	.+10     	; 0x896 <disk_write+0x72>
     88c:	a8 01       	movw	r20, r16
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	87 e9       	ldi	r24, 0x97	; 151
     894:	42 de       	rcall	.-892    	; 0x51a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     896:	b7 01       	movw	r22, r14
     898:	a6 01       	movw	r20, r12
     89a:	89 e1       	ldi	r24, 0x19	; 25
     89c:	3e de       	rcall	.-900    	; 0x51a <send_cmd>
     89e:	81 11       	cpse	r24, r1
     8a0:	13 c0       	rjmp	.+38     	; 0x8c8 <disk_write+0xa4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     8a2:	6c ef       	ldi	r22, 0xFC	; 252
     8a4:	ce 01       	movw	r24, r28
     8a6:	01 de       	rcall	.-1022   	; 0x4aa <xmit_datablock>
     8a8:	89 2b       	or	r24, r25
     8aa:	31 f0       	breq	.+12     	; 0x8b8 <disk_write+0x94>
				buff += 512;
     8ac:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
     8ae:	01 50       	subi	r16, 0x01	; 1
     8b0:	11 09       	sbc	r17, r1
     8b2:	01 15       	cp	r16, r1
     8b4:	11 05       	cpc	r17, r1
     8b6:	a9 f7       	brne	.-22     	; 0x8a2 <disk_write+0x7e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     8b8:	6d ef       	ldi	r22, 0xFD	; 253
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	f5 dd       	rcall	.-1046   	; 0x4aa <xmit_datablock>
     8c0:	89 2b       	or	r24, r25
     8c2:	11 f4       	brne	.+4      	; 0x8c8 <disk_write+0xa4>
				count = 1;
     8c4:	01 e0       	ldi	r16, 0x01	; 1
     8c6:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
     8c8:	8b dd       	rcall	.-1258   	; 0x3e0 <deselect>

	return count ? RES_ERROR : RES_OK;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	01 2b       	or	r16, r17
     8ce:	29 f4       	brne	.+10     	; 0x8da <disk_write+0xb6>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <disk_write+0xb6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <disk_write+0xb6>
     8d8:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	08 95       	ret

000008ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	60 97       	sbiw	r28, 0x10	; 16
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	8a 01       	movw	r16, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     90e:	81 11       	cpse	r24, r1
     910:	96 c0       	rjmp	.+300    	; 0xa3e <disk_ioctl+0x152>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
     912:	80 91 00 01 	lds	r24, 0x0100
     916:	80 fd       	sbrc	r24, 0
     918:	94 c0       	rjmp	.+296    	; 0xa42 <disk_ioctl+0x156>

	res = RES_ERROR;
	switch (ctrl) {
     91a:	61 30       	cpi	r22, 0x01	; 1
     91c:	61 f0       	breq	.+24     	; 0x936 <disk_ioctl+0x4a>
     91e:	20 f0       	brcs	.+8      	; 0x928 <disk_ioctl+0x3c>
     920:	63 30       	cpi	r22, 0x03	; 3
     922:	09 f4       	brne	.+2      	; 0x926 <disk_ioctl+0x3a>
     924:	79 c0       	rjmp	.+242    	; 0xa18 <disk_ioctl+0x12c>
     926:	83 c0       	rjmp	.+262    	; 0xa2e <disk_ioctl+0x142>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
     928:	6a dd       	rcall	.-1324   	; 0x3fe <select>
     92a:	11 e0       	ldi	r17, 0x01	; 1
     92c:	89 2b       	or	r24, r25
     92e:	09 f4       	brne	.+2      	; 0x932 <disk_ioctl+0x46>
     930:	83 c0       	rjmp	.+262    	; 0xa38 <disk_ioctl+0x14c>
     932:	10 e0       	ldi	r17, 0x00	; 0
     934:	81 c0       	rjmp	.+258    	; 0xa38 <disk_ioctl+0x14c>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	ba 01       	movw	r22, r20
     93c:	89 e0       	ldi	r24, 0x09	; 9
     93e:	ed dd       	rcall	.-1062   	; 0x51a <send_cmd>
     940:	81 11       	cpse	r24, r1
     942:	77 c0       	rjmp	.+238    	; 0xa32 <disk_ioctl+0x146>
     944:	60 e1       	ldi	r22, 0x10	; 16
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	ce 01       	movw	r24, r28
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	74 dd       	rcall	.-1304   	; 0x436 <rcvr_datablock>
     94e:	89 2b       	or	r24, r25
     950:	09 f4       	brne	.+2      	; 0x954 <disk_ioctl+0x68>
     952:	71 c0       	rjmp	.+226    	; 0xa36 <disk_ioctl+0x14a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	82 95       	swap	r24
     958:	86 95       	lsr	r24
     95a:	86 95       	lsr	r24
     95c:	83 70       	andi	r24, 0x03	; 3
     95e:	81 30       	cpi	r24, 0x01	; 1
     960:	31 f5       	brne	.+76     	; 0x9ae <disk_ioctl+0xc2>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     962:	88 85       	ldd	r24, Y+8	; 0x08
     964:	8f 73       	andi	r24, 0x3F	; 63
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	a0 e0       	ldi	r26, 0x00	; 0
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	dc 01       	movw	r26, r24
     96e:	99 27       	eor	r25, r25
     970:	88 27       	eor	r24, r24
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	a1 1d       	adc	r26, r1
     976:	b1 1d       	adc	r27, r1
     978:	29 85       	ldd	r18, Y+9	; 0x09
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	32 2f       	mov	r19, r18
     97e:	22 27       	eor	r18, r18
     980:	4a 85       	ldd	r20, Y+10	; 0x0a
     982:	24 0f       	add	r18, r20
     984:	31 1d       	adc	r19, r1
     986:	82 0f       	add	r24, r18
     988:	93 1f       	adc	r25, r19
     98a:	a1 1d       	adc	r26, r1
     98c:	b1 1d       	adc	r27, r1
					*(DWORD*)buff = cs << 10;
     98e:	07 2e       	mov	r0, r23
     990:	7a e0       	ldi	r23, 0x0A	; 10
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	aa 1f       	adc	r26, r26
     998:	bb 1f       	adc	r27, r27
     99a:	7a 95       	dec	r23
     99c:	d1 f7       	brne	.-12     	; 0x992 <disk_ioctl+0xa6>
     99e:	70 2d       	mov	r23, r0
     9a0:	f8 01       	movw	r30, r16
     9a2:	80 83       	st	Z, r24
     9a4:	91 83       	std	Z+1, r25	; 0x01
     9a6:	a2 83       	std	Z+2, r26	; 0x02
     9a8:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
				}
				res = RES_OK;
     9aa:	10 e0       	ldi	r17, 0x00	; 0
     9ac:	45 c0       	rjmp	.+138    	; 0xa38 <disk_ioctl+0x14c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     9ae:	49 85       	ldd	r20, Y+9	; 0x09
     9b0:	42 95       	swap	r20
     9b2:	46 95       	lsr	r20
     9b4:	46 95       	lsr	r20
     9b6:	43 70       	andi	r20, 0x03	; 3
     9b8:	88 85       	ldd	r24, Y+8	; 0x08
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	f4 e0       	ldi	r31, 0x04	; 4
     9be:	8f 9f       	mul	r24, r31
     9c0:	40 0d       	add	r20, r0
     9c2:	51 1d       	adc	r21, r1
     9c4:	11 24       	eor	r1, r1
     9c6:	4f 5f       	subi	r20, 0xFF	; 255
     9c8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ca:	8f 81       	ldd	r24, Y+7	; 0x07
     9cc:	83 70       	andi	r24, 0x03	; 3
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	98 2f       	mov	r25, r24
     9d2:	88 27       	eor	r24, r24
     9d4:	99 0f       	add	r25, r25
     9d6:	99 0f       	add	r25, r25
     9d8:	48 0f       	add	r20, r24
     9da:	59 1f       	adc	r21, r25
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     9e0:	9e 81       	ldd	r25, Y+6	; 0x06
     9e2:	9f 70       	andi	r25, 0x0F	; 15
     9e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e6:	88 1f       	adc	r24, r24
     9e8:	88 27       	eor	r24, r24
     9ea:	88 1f       	adc	r24, r24
     9ec:	89 0f       	add	r24, r25
     9ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f0:	93 70       	andi	r25, 0x03	; 3
     9f2:	99 0f       	add	r25, r25
     9f4:	89 0f       	add	r24, r25
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
     9f6:	87 50       	subi	r24, 0x07	; 7
     9f8:	6a 01       	movw	r12, r20
     9fa:	7b 01       	movw	r14, r22
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <disk_ioctl+0x11a>
     9fe:	cc 0c       	add	r12, r12
     a00:	dd 1c       	adc	r13, r13
     a02:	ee 1c       	adc	r14, r14
     a04:	ff 1c       	adc	r15, r15
     a06:	8a 95       	dec	r24
     a08:	d2 f7       	brpl	.-12     	; 0x9fe <disk_ioctl+0x112>
     a0a:	f8 01       	movw	r30, r16
     a0c:	c0 82       	st	Z, r12
     a0e:	d1 82       	std	Z+1, r13	; 0x01
     a10:	e2 82       	std	Z+2, r14	; 0x02
     a12:	f3 82       	std	Z+3, r15	; 0x03
				}
				res = RES_OK;
     a14:	10 e0       	ldi	r17, 0x00	; 0
     a16:	10 c0       	rjmp	.+32     	; 0xa38 <disk_ioctl+0x14c>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
     a18:	80 e8       	ldi	r24, 0x80	; 128
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	fa 01       	movw	r30, r20
     a22:	80 83       	st	Z, r24
     a24:	91 83       	std	Z+1, r25	; 0x01
     a26:	a2 83       	std	Z+2, r26	; 0x02
     a28:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
     a2a:	10 e0       	ldi	r17, 0x00	; 0
			break;
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <disk_ioctl+0x14c>

		default:
			res = RES_PARERR;
     a2e:	14 e0       	ldi	r17, 0x04	; 4
     a30:	03 c0       	rjmp	.+6      	; 0xa38 <disk_ioctl+0x14c>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
     a32:	11 e0       	ldi	r17, 0x01	; 1
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <disk_ioctl+0x14c>
     a36:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
     a38:	d3 dc       	rcall	.-1626   	; 0x3e0 <deselect>

	return res;
     a3a:	81 2f       	mov	r24, r17
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <disk_ioctl+0x158>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <disk_ioctl+0x158>
     a42:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
     a44:	60 96       	adiw	r28, 0x10	; 16
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	08 95       	ret

00000a62 <mem_cpy>:
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
     a62:	41 15       	cp	r20, r1
     a64:	51 05       	cpc	r21, r1
     a66:	51 f0       	breq	.+20     	; 0xa7c <mem_cpy+0x1a>
     a68:	a6 2f       	mov	r26, r22
     a6a:	b7 2f       	mov	r27, r23
     a6c:	fc 01       	movw	r30, r24
     a6e:	84 0f       	add	r24, r20
     a70:	95 1f       	adc	r25, r21
     a72:	2d 91       	ld	r18, X+
     a74:	21 93       	st	Z+, r18
     a76:	e8 17       	cp	r30, r24
     a78:	f9 07       	cpc	r31, r25
     a7a:	d9 f7       	brne	.-10     	; 0xa72 <mem_cpy+0x10>
     a7c:	08 95       	ret

00000a7e <mem_set>:
     a7e:	41 15       	cp	r20, r1
     a80:	51 05       	cpc	r21, r1
     a82:	39 f0       	breq	.+14     	; 0xa92 <mem_set+0x14>
     a84:	fc 01       	movw	r30, r24
     a86:	84 0f       	add	r24, r20
     a88:	95 1f       	adc	r25, r21
     a8a:	61 93       	st	Z+, r22
     a8c:	e8 17       	cp	r30, r24
     a8e:	f9 07       	cpc	r31, r25
     a90:	e1 f7       	brne	.-8      	; 0xa8a <mem_set+0xc>
     a92:	08 95       	ret

00000a94 <get_ldnumber>:
     a94:	fc 01       	movw	r30, r24
     a96:	a0 81       	ld	r26, Z
     a98:	b1 81       	ldd	r27, Z+1	; 0x01
     a9a:	10 97       	sbiw	r26, 0x00	; 0
     a9c:	09 f1       	breq	.+66     	; 0xae0 <get_ldnumber+0x4c>
     a9e:	6c 91       	ld	r22, X
     aa0:	61 32       	cpi	r22, 0x21	; 33
     aa2:	58 f0       	brcs	.+22     	; 0xaba <get_ldnumber+0x26>
     aa4:	6a 33       	cpi	r22, 0x3A	; 58
     aa6:	41 f1       	breq	.+80     	; 0xaf8 <get_ldnumber+0x64>
     aa8:	fd 01       	movw	r30, r26
     aaa:	31 96       	adiw	r30, 0x01	; 1
     aac:	9f 01       	movw	r18, r30
     aae:	41 91       	ld	r20, Z+
     ab0:	41 32       	cpi	r20, 0x21	; 33
     ab2:	28 f0       	brcs	.+10     	; 0xabe <get_ldnumber+0x2a>
     ab4:	4a 33       	cpi	r20, 0x3A	; 58
     ab6:	d1 f7       	brne	.-12     	; 0xaac <get_ldnumber+0x18>
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <get_ldnumber+0x2e>
     aba:	46 2f       	mov	r20, r22
     abc:	9d 01       	movw	r18, r26
     abe:	4a 33       	cpi	r20, 0x3A	; 58
     ac0:	91 f4       	brne	.+36     	; 0xae6 <get_ldnumber+0x52>
     ac2:	ad 01       	movw	r20, r26
     ac4:	4f 5f       	subi	r20, 0xFF	; 255
     ac6:	5f 4f       	sbci	r21, 0xFF	; 255
     ac8:	24 17       	cp	r18, r20
     aca:	35 07       	cpc	r19, r21
     acc:	79 f4       	brne	.+30     	; 0xaec <get_ldnumber+0x58>
     ace:	60 33       	cpi	r22, 0x30	; 48
     ad0:	81 f4       	brne	.+32     	; 0xaf2 <get_ldnumber+0x5e>
     ad2:	12 96       	adiw	r26, 0x02	; 2
     ad4:	fc 01       	movw	r30, r24
     ad6:	b1 83       	std	Z+1, r27	; 0x01
     ad8:	a0 83       	st	Z, r26
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	08 95       	ret
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	9f ef       	ldi	r25, 0xFF	; 255
     ae4:	08 95       	ret
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	08 95       	ret
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	9f ef       	ldi	r25, 0xFF	; 255
     af0:	08 95       	ret
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	9f ef       	ldi	r25, 0xFF	; 255
     af6:	08 95       	ret
     af8:	9d 01       	movw	r18, r26
     afa:	e3 cf       	rjmp	.-58     	; 0xac2 <get_ldnumber+0x2e>

00000afc <sync_window>:
     afc:	8f 92       	push	r8
     afe:	9f 92       	push	r9
     b00:	af 92       	push	r10
     b02:	bf 92       	push	r11
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ec 01       	movw	r28, r24
     b16:	8c 81       	ldd	r24, Y+4	; 0x04
     b18:	88 23       	and	r24, r24
     b1a:	09 f4       	brne	.+2      	; 0xb1e <__stack+0x1f>
     b1c:	42 c0       	rjmp	.+132    	; 0xba2 <__stack+0xa3>
     b1e:	ca a4       	ldd	r12, Y+42	; 0x2a
     b20:	db a4       	ldd	r13, Y+43	; 0x2b
     b22:	ec a4       	ldd	r14, Y+44	; 0x2c
     b24:	fd a4       	ldd	r15, Y+45	; 0x2d
     b26:	5e 01       	movw	r10, r28
     b28:	8e e2       	ldi	r24, 0x2E	; 46
     b2a:	a8 0e       	add	r10, r24
     b2c:	b1 1c       	adc	r11, r1
     b2e:	01 e0       	ldi	r16, 0x01	; 1
     b30:	10 e0       	ldi	r17, 0x00	; 0
     b32:	a7 01       	movw	r20, r14
     b34:	96 01       	movw	r18, r12
     b36:	b5 01       	movw	r22, r10
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	74 de       	rcall	.-792    	; 0x824 <disk_write>
     b3c:	81 11       	cpse	r24, r1
     b3e:	33 c0       	rjmp	.+102    	; 0xba6 <__stack+0xa7>
     b40:	1c 82       	std	Y+4, r1	; 0x04
     b42:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b44:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b46:	a8 a1       	ldd	r26, Y+32	; 0x20
     b48:	b9 a1       	ldd	r27, Y+33	; 0x21
     b4a:	b7 01       	movw	r22, r14
     b4c:	a6 01       	movw	r20, r12
     b4e:	48 1b       	sub	r20, r24
     b50:	59 0b       	sbc	r21, r25
     b52:	6a 0b       	sbc	r22, r26
     b54:	7b 0b       	sbc	r23, r27
     b56:	8e 89       	ldd	r24, Y+22	; 0x16
     b58:	9f 89       	ldd	r25, Y+23	; 0x17
     b5a:	a8 8d       	ldd	r26, Y+24	; 0x18
     b5c:	b9 8d       	ldd	r27, Y+25	; 0x19
     b5e:	48 17       	cp	r20, r24
     b60:	59 07       	cpc	r21, r25
     b62:	6a 07       	cpc	r22, r26
     b64:	7b 07       	cpc	r23, r27
     b66:	08 f5       	brcc	.+66     	; 0xbaa <__stack+0xab>
     b68:	8b 80       	ldd	r8, Y+3	; 0x03
     b6a:	91 2c       	mov	r9, r1
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	88 16       	cp	r8, r24
     b70:	91 04       	cpc	r9, r1
     b72:	e8 f0       	brcs	.+58     	; 0xbae <__stack+0xaf>
     b74:	8e 89       	ldd	r24, Y+22	; 0x16
     b76:	9f 89       	ldd	r25, Y+23	; 0x17
     b78:	a8 8d       	ldd	r26, Y+24	; 0x18
     b7a:	b9 8d       	ldd	r27, Y+25	; 0x19
     b7c:	c8 0e       	add	r12, r24
     b7e:	d9 1e       	adc	r13, r25
     b80:	ea 1e       	adc	r14, r26
     b82:	fb 1e       	adc	r15, r27
     b84:	01 e0       	ldi	r16, 0x01	; 1
     b86:	10 e0       	ldi	r17, 0x00	; 0
     b88:	a7 01       	movw	r20, r14
     b8a:	96 01       	movw	r18, r12
     b8c:	b5 01       	movw	r22, r10
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	49 de       	rcall	.-878    	; 0x824 <disk_write>
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	88 1a       	sub	r8, r24
     b96:	91 08       	sbc	r9, r1
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	88 16       	cp	r8, r24
     b9c:	91 04       	cpc	r9, r1
     b9e:	51 f7       	brne	.-44     	; 0xb74 <__stack+0x75>
     ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <__stack+0xb3>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	07 c0       	rjmp	.+14     	; 0xbb4 <__stack+0xb5>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <__stack+0xb5>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	03 c0       	rjmp	.+6      	; 0xbb4 <__stack+0xb5>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <__stack+0xb5>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	9f 90       	pop	r9
     bca:	8f 90       	pop	r8
     bcc:	08 95       	ret

00000bce <move_window>:
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
     be2:	6a 01       	movw	r12, r20
     be4:	7b 01       	movw	r14, r22
     be6:	8a a5       	ldd	r24, Y+42	; 0x2a
     be8:	9b a5       	ldd	r25, Y+43	; 0x2b
     bea:	ac a5       	ldd	r26, Y+44	; 0x2c
     bec:	bd a5       	ldd	r27, Y+45	; 0x2d
     bee:	84 17       	cp	r24, r20
     bf0:	95 07       	cpc	r25, r21
     bf2:	a6 07       	cpc	r26, r22
     bf4:	b7 07       	cpc	r27, r23
     bf6:	d9 f0       	breq	.+54     	; 0xc2e <move_window+0x60>
     bf8:	ce 01       	movw	r24, r28
     bfa:	80 df       	rcall	.-256    	; 0xafc <sync_window>
     bfc:	b8 2e       	mov	r11, r24
     bfe:	81 11       	cpse	r24, r1
     c00:	17 c0       	rjmp	.+46     	; 0xc30 <move_window+0x62>
     c02:	01 e0       	ldi	r16, 0x01	; 1
     c04:	10 e0       	ldi	r17, 0x00	; 0
     c06:	a7 01       	movw	r20, r14
     c08:	96 01       	movw	r18, r12
     c0a:	be 01       	movw	r22, r28
     c0c:	62 5d       	subi	r22, 0xD2	; 210
     c0e:	7f 4f       	sbci	r23, 0xFF	; 255
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	ba dd       	rcall	.-1164   	; 0x788 <disk_read>
     c14:	88 23       	and	r24, r24
     c16:	31 f0       	breq	.+12     	; 0xc24 <move_window+0x56>
     c18:	bb 24       	eor	r11, r11
     c1a:	b3 94       	inc	r11
     c1c:	cc 24       	eor	r12, r12
     c1e:	ca 94       	dec	r12
     c20:	dc 2c       	mov	r13, r12
     c22:	76 01       	movw	r14, r12
     c24:	ca a6       	std	Y+42, r12	; 0x2a
     c26:	db a6       	std	Y+43, r13	; 0x2b
     c28:	ec a6       	std	Y+44, r14	; 0x2c
     c2a:	fd a6       	std	Y+45, r15	; 0x2d
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <move_window+0x62>
     c2e:	b1 2c       	mov	r11, r1
     c30:	8b 2d       	mov	r24, r11
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	bf 90       	pop	r11
     c44:	08 95       	ret

00000c46 <check_fs>:
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	ec 01       	movw	r28, r24
     c50:	1c 82       	std	Y+4, r1	; 0x04
     c52:	0f ef       	ldi	r16, 0xFF	; 255
     c54:	1f ef       	ldi	r17, 0xFF	; 255
     c56:	98 01       	movw	r18, r16
     c58:	0a a7       	std	Y+42, r16	; 0x2a
     c5a:	1b a7       	std	Y+43, r17	; 0x2b
     c5c:	2c a7       	std	Y+44, r18	; 0x2c
     c5e:	3d a7       	std	Y+45, r19	; 0x2d
     c60:	b6 df       	rcall	.-148    	; 0xbce <move_window>
     c62:	81 11       	cpse	r24, r1
     c64:	51 c0       	rjmp	.+162    	; 0xd08 <check_fs+0xc2>
     c66:	fe 01       	movw	r30, r28
     c68:	e3 5d       	subi	r30, 0xD3	; 211
     c6a:	fd 4f       	sbci	r31, 0xFD	; 253
     c6c:	80 81       	ld	r24, Z
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	98 2f       	mov	r25, r24
     c72:	88 27       	eor	r24, r24
     c74:	31 97       	sbiw	r30, 0x01	; 1
     c76:	20 81       	ld	r18, Z
     c78:	82 2b       	or	r24, r18
     c7a:	85 35       	cpi	r24, 0x55	; 85
     c7c:	9a 4a       	sbci	r25, 0xAA	; 170
     c7e:	09 f0       	breq	.+2      	; 0xc82 <check_fs+0x3c>
     c80:	45 c0       	rjmp	.+138    	; 0xd0c <check_fs+0xc6>
     c82:	e5 5c       	subi	r30, 0xC5	; 197
     c84:	f1 40       	sbci	r31, 0x01	; 1
     c86:	80 81       	ld	r24, Z
     c88:	31 97       	sbiw	r30, 0x01	; 1
     c8a:	40 81       	ld	r20, Z
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	ba 01       	movw	r22, r20
     c94:	55 27       	eor	r21, r21
     c96:	44 27       	eor	r20, r20
     c98:	78 2b       	or	r23, r24
     c9a:	32 97       	sbiw	r30, 0x02	; 2
     c9c:	80 81       	ld	r24, Z
     c9e:	48 2b       	or	r20, r24
     ca0:	31 96       	adiw	r30, 0x01	; 1
     ca2:	00 81       	ld	r16, Z
     ca4:	10 e0       	ldi	r17, 0x00	; 0
     ca6:	10 2f       	mov	r17, r16
     ca8:	00 27       	eor	r16, r16
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 2b       	or	r20, r16
     cb0:	51 2b       	or	r21, r17
     cb2:	62 2b       	or	r22, r18
     cb4:	73 2b       	or	r23, r19
     cb6:	77 27       	eor	r23, r23
     cb8:	46 34       	cpi	r20, 0x46	; 70
     cba:	51 44       	sbci	r21, 0x41	; 65
     cbc:	64 45       	sbci	r22, 0x54	; 84
     cbe:	71 05       	cpc	r23, r1
     cc0:	39 f1       	breq	.+78     	; 0xd10 <check_fs+0xca>
     cc2:	7e 96       	adiw	r30, 0x1e	; 30
     cc4:	80 81       	ld	r24, Z
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	40 81       	ld	r20, Z
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	ba 01       	movw	r22, r20
     cd2:	55 27       	eor	r21, r21
     cd4:	44 27       	eor	r20, r20
     cd6:	78 2b       	or	r23, r24
     cd8:	32 97       	sbiw	r30, 0x02	; 2
     cda:	80 81       	ld	r24, Z
     cdc:	48 2b       	or	r20, r24
     cde:	cf 57       	subi	r28, 0x7F	; 127
     ce0:	df 4f       	sbci	r29, 0xFF	; 255
     ce2:	88 81       	ld	r24, Y
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	98 2f       	mov	r25, r24
     ce8:	88 27       	eor	r24, r24
     cea:	a0 e0       	ldi	r26, 0x00	; 0
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	48 2b       	or	r20, r24
     cf0:	59 2b       	or	r21, r25
     cf2:	6a 2b       	or	r22, r26
     cf4:	7b 2b       	or	r23, r27
     cf6:	77 27       	eor	r23, r23
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	46 34       	cpi	r20, 0x46	; 70
     cfc:	51 44       	sbci	r21, 0x41	; 65
     cfe:	64 45       	sbci	r22, 0x54	; 84
     d00:	71 05       	cpc	r23, r1
     d02:	39 f4       	brne	.+14     	; 0xd12 <check_fs+0xcc>
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <check_fs+0xcc>
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <check_fs+0xcc>
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <check_fs+0xcc>
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	08 95       	ret

00000d1c <validate>:
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	c1 f0       	breq	.+48     	; 0xd50 <validate+0x34>
     d20:	dc 01       	movw	r26, r24
     d22:	ed 91       	ld	r30, X+
     d24:	fc 91       	ld	r31, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	30 97       	sbiw	r30, 0x00	; 0
     d2a:	a1 f0       	breq	.+40     	; 0xd54 <validate+0x38>
     d2c:	20 81       	ld	r18, Z
     d2e:	22 23       	and	r18, r18
     d30:	99 f0       	breq	.+38     	; 0xd58 <validate+0x3c>
     d32:	26 81       	ldd	r18, Z+6	; 0x06
     d34:	37 81       	ldd	r19, Z+7	; 0x07
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	8d 91       	ld	r24, X+
     d3a:	9c 91       	ld	r25, X
     d3c:	13 97       	sbiw	r26, 0x03	; 3
     d3e:	28 17       	cp	r18, r24
     d40:	39 07       	cpc	r19, r25
     d42:	61 f4       	brne	.+24     	; 0xd5c <validate+0x40>
     d44:	81 81       	ldd	r24, Z+1	; 0x01
     d46:	5a dc       	rcall	.-1868   	; 0x5fc <disk_status>
     d48:	80 ff       	sbrs	r24, 0
     d4a:	0a c0       	rjmp	.+20     	; 0xd60 <validate+0x44>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	08 95       	ret
     d50:	89 e0       	ldi	r24, 0x09	; 9
     d52:	08 95       	ret
     d54:	89 e0       	ldi	r24, 0x09	; 9
     d56:	08 95       	ret
     d58:	89 e0       	ldi	r24, 0x09	; 9
     d5a:	08 95       	ret
     d5c:	89 e0       	ldi	r24, 0x09	; 9
     d5e:	08 95       	ret
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	08 95       	ret

00000d64 <find_volume>:
     d64:	2f 92       	push	r2
     d66:	3f 92       	push	r3
     d68:	4f 92       	push	r4
     d6a:	5f 92       	push	r5
     d6c:	6f 92       	push	r6
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	6d 97       	sbiw	r28, 0x1d	; 29
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	6c 01       	movw	r12, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	b4 2e       	mov	r11, r20
     d9e:	d6 01       	movw	r26, r12
     da0:	1d 92       	st	X+, r1
     da2:	1c 92       	st	X, r1
     da4:	77 de       	rcall	.-786    	; 0xa94 <get_ldnumber>
     da6:	7c 01       	movw	r14, r24
     da8:	99 23       	and	r25, r25
     daa:	0c f4       	brge	.+2      	; 0xdae <find_volume+0x4a>
     dac:	e1 c2       	rjmp	.+1474   	; 0x1370 <find_volume+0x60c>
     dae:	fc 01       	movw	r30, r24
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	e3 59       	subi	r30, 0x93	; 147
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	00 81       	ld	r16, Z
     dba:	11 81       	ldd	r17, Z+1	; 0x01
     dbc:	01 15       	cp	r16, r1
     dbe:	11 05       	cpc	r17, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <find_volume+0x60>
     dc2:	d8 c2       	rjmp	.+1456   	; 0x1374 <find_volume+0x610>
     dc4:	f6 01       	movw	r30, r12
     dc6:	11 83       	std	Z+1, r17	; 0x01
     dc8:	00 83       	st	Z, r16
     dca:	d8 01       	movw	r26, r16
     dcc:	8c 91       	ld	r24, X
     dce:	88 23       	and	r24, r24
     dd0:	61 f0       	breq	.+24     	; 0xdea <find_volume+0x86>
     dd2:	11 96       	adiw	r26, 0x01	; 1
     dd4:	8c 91       	ld	r24, X
     dd6:	12 dc       	rcall	.-2012   	; 0x5fc <disk_status>
     dd8:	80 fd       	sbrc	r24, 0
     dda:	07 c0       	rjmp	.+14     	; 0xdea <find_volume+0x86>
     ddc:	bb 20       	and	r11, r11
     dde:	09 f4       	brne	.+2      	; 0xde2 <find_volume+0x7e>
     de0:	cb c2       	rjmp	.+1430   	; 0x1378 <find_volume+0x614>
     de2:	82 fd       	sbrc	r24, 2
     de4:	cb c2       	rjmp	.+1430   	; 0x137c <find_volume+0x618>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	17 c3       	rjmp	.+1582   	; 0x1418 <find_volume+0x6b4>
     dea:	f8 01       	movw	r30, r16
     dec:	10 82       	st	Z, r1
     dee:	e1 82       	std	Z+1, r14	; 0x01
     df0:	8e 2d       	mov	r24, r14
     df2:	0b dc       	rcall	.-2026   	; 0x60a <disk_initialize>
     df4:	80 fd       	sbrc	r24, 0
     df6:	c4 c2       	rjmp	.+1416   	; 0x1380 <find_volume+0x61c>
     df8:	bb 20       	and	r11, r11
     dfa:	11 f0       	breq	.+4      	; 0xe00 <find_volume+0x9c>
     dfc:	82 fd       	sbrc	r24, 2
     dfe:	c2 c2       	rjmp	.+1412   	; 0x1384 <find_volume+0x620>
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	ba 01       	movw	r22, r20
     e06:	c8 01       	movw	r24, r16
     e08:	1e df       	rcall	.-452    	; 0xc46 <check_fs>
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	09 f0       	breq	.+2      	; 0xe10 <find_volume+0xac>
     e0e:	52 c0       	rjmp	.+164    	; 0xeb4 <find_volume+0x150>
     e10:	f8 01       	movw	r30, r16
     e12:	e0 51       	subi	r30, 0x10	; 16
     e14:	fe 4f       	sbci	r31, 0xFE	; 254
     e16:	7e 01       	movw	r14, r28
     e18:	21 e1       	ldi	r18, 0x11	; 17
     e1a:	e2 0e       	add	r14, r18
     e1c:	f1 1c       	adc	r15, r1
     e1e:	9e 01       	movw	r18, r28
     e20:	2f 5f       	subi	r18, 0xFF	; 255
     e22:	3f 4f       	sbci	r19, 0xFF	; 255
     e24:	a1 2c       	mov	r10, r1
     e26:	b1 2c       	mov	r11, r1
     e28:	c1 2c       	mov	r12, r1
     e2a:	d1 2c       	mov	r13, r1
     e2c:	80 81       	ld	r24, Z
     e2e:	88 23       	and	r24, r24
     e30:	b1 f0       	breq	.+44     	; 0xe5e <find_volume+0xfa>
     e32:	47 81       	ldd	r20, Z+7	; 0x07
     e34:	86 81       	ldd	r24, Z+6	; 0x06
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	a0 e0       	ldi	r26, 0x00	; 0
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	dc 01       	movw	r26, r24
     e3e:	99 27       	eor	r25, r25
     e40:	88 27       	eor	r24, r24
     e42:	b4 2b       	or	r27, r20
     e44:	44 81       	ldd	r20, Z+4	; 0x04
     e46:	84 2b       	or	r24, r20
     e48:	45 81       	ldd	r20, Z+5	; 0x05
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	54 2f       	mov	r21, r20
     e4e:	44 27       	eor	r20, r20
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	48 2b       	or	r20, r24
     e56:	59 2b       	or	r21, r25
     e58:	6a 2b       	or	r22, r26
     e5a:	7b 2b       	or	r23, r27
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <find_volume+0x102>
     e5e:	4a 2d       	mov	r20, r10
     e60:	5b 2d       	mov	r21, r11
     e62:	6c 2d       	mov	r22, r12
     e64:	7d 2d       	mov	r23, r13
     e66:	d9 01       	movw	r26, r18
     e68:	4d 93       	st	X+, r20
     e6a:	5d 93       	st	X+, r21
     e6c:	6d 93       	st	X+, r22
     e6e:	7d 93       	st	X+, r23
     e70:	9d 01       	movw	r18, r26
     e72:	70 96       	adiw	r30, 0x10	; 16
     e74:	ae 15       	cp	r26, r14
     e76:	bf 05       	cpc	r27, r15
     e78:	c9 f6       	brne	.-78     	; 0xe2c <find_volume+0xc8>
     e7a:	fe 01       	movw	r30, r28
     e7c:	31 96       	adiw	r30, 0x01	; 1
     e7e:	6f 01       	movw	r12, r30
     e80:	68 94       	set
     e82:	bb 24       	eor	r11, r11
     e84:	b1 f8       	bld	r11, 1
     e86:	d6 01       	movw	r26, r12
     e88:	4d 90       	ld	r4, X+
     e8a:	5d 90       	ld	r5, X+
     e8c:	6d 90       	ld	r6, X+
     e8e:	7d 90       	ld	r7, X+
     e90:	6d 01       	movw	r12, r26
     e92:	41 14       	cp	r4, r1
     e94:	51 04       	cpc	r5, r1
     e96:	61 04       	cpc	r6, r1
     e98:	71 04       	cpc	r7, r1
     e9a:	39 f0       	breq	.+14     	; 0xeaa <find_volume+0x146>
     e9c:	b3 01       	movw	r22, r6
     e9e:	a2 01       	movw	r20, r4
     ea0:	c8 01       	movw	r24, r16
     ea2:	d1 de       	rcall	.-606    	; 0xc46 <check_fs>
     ea4:	81 11       	cpse	r24, r1
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <find_volume+0x148>
     ea8:	08 c0       	rjmp	.+16     	; 0xeba <find_volume+0x156>
     eaa:	8b 2d       	mov	r24, r11
     eac:	ce 14       	cp	r12, r14
     eae:	df 04       	cpc	r13, r15
     eb0:	51 f7       	brne	.-44     	; 0xe86 <find_volume+0x122>
     eb2:	03 c0       	rjmp	.+6      	; 0xeba <find_volume+0x156>
     eb4:	41 2c       	mov	r4, r1
     eb6:	51 2c       	mov	r5, r1
     eb8:	32 01       	movw	r6, r4
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	09 f4       	brne	.+2      	; 0xec0 <find_volume+0x15c>
     ebe:	64 c2       	rjmp	.+1224   	; 0x1388 <find_volume+0x624>
     ec0:	81 11       	cpse	r24, r1
     ec2:	64 c2       	rjmp	.+1224   	; 0x138c <find_volume+0x628>
     ec4:	f8 01       	movw	r30, r16
     ec6:	82 ad       	ldd	r24, Z+58	; 0x3a
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	98 2f       	mov	r25, r24
     ecc:	88 27       	eor	r24, r24
     ece:	21 ad       	ldd	r18, Z+57	; 0x39
     ed0:	82 2b       	or	r24, r18
     ed2:	81 15       	cp	r24, r1
     ed4:	92 40       	sbci	r25, 0x02	; 2
     ed6:	09 f0       	breq	.+2      	; 0xeda <find_volume+0x176>
     ed8:	5b c2       	rjmp	.+1206   	; 0x1390 <find_volume+0x62c>
     eda:	f8 01       	movw	r30, r16
     edc:	eb 5b       	subi	r30, 0xBB	; 187
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	c0 80       	ld	r12, Z
     ee2:	d1 2c       	mov	r13, r1
     ee4:	dc 2c       	mov	r13, r12
     ee6:	cc 24       	eor	r12, r12
     ee8:	31 97       	sbiw	r30, 0x01	; 1
     eea:	80 81       	ld	r24, Z
     eec:	c8 2a       	or	r12, r24
     eee:	e1 2c       	mov	r14, r1
     ef0:	f1 2c       	mov	r15, r1
     ef2:	c1 14       	cp	r12, r1
     ef4:	d1 04       	cpc	r13, r1
     ef6:	e1 04       	cpc	r14, r1
     ef8:	f1 04       	cpc	r15, r1
     efa:	c9 f4       	brne	.+50     	; 0xf2e <find_volume+0x1ca>
     efc:	71 96       	adiw	r30, 0x11	; 17
     efe:	80 81       	ld	r24, Z
     f00:	31 97       	sbiw	r30, 0x01	; 1
     f02:	c0 80       	ld	r12, Z
     f04:	d1 2c       	mov	r13, r1
     f06:	e1 2c       	mov	r14, r1
     f08:	f1 2c       	mov	r15, r1
     f0a:	76 01       	movw	r14, r12
     f0c:	dd 24       	eor	r13, r13
     f0e:	cc 24       	eor	r12, r12
     f10:	f8 2a       	or	r15, r24
     f12:	32 97       	sbiw	r30, 0x02	; 2
     f14:	80 81       	ld	r24, Z
     f16:	c8 2a       	or	r12, r24
     f18:	31 96       	adiw	r30, 0x01	; 1
     f1a:	80 81       	ld	r24, Z
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	98 2f       	mov	r25, r24
     f20:	88 27       	eor	r24, r24
     f22:	a0 e0       	ldi	r26, 0x00	; 0
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	c8 2a       	or	r12, r24
     f28:	d9 2a       	or	r13, r25
     f2a:	ea 2a       	or	r14, r26
     f2c:	fb 2a       	or	r15, r27
     f2e:	d8 01       	movw	r26, r16
     f30:	56 96       	adiw	r26, 0x16	; 22
     f32:	cd 92       	st	X+, r12
     f34:	dd 92       	st	X+, r13
     f36:	ed 92       	st	X+, r14
     f38:	fc 92       	st	X, r15
     f3a:	59 97       	sbiw	r26, 0x19	; 25
     f3c:	de 96       	adiw	r26, 0x3e	; 62
     f3e:	ac 91       	ld	r26, X
     f40:	f8 01       	movw	r30, r16
     f42:	a3 83       	std	Z+3, r26	; 0x03
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	8a 0f       	add	r24, r26
     f48:	82 30       	cpi	r24, 0x02	; 2
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <find_volume+0x1ea>
     f4c:	23 c2       	rjmp	.+1094   	; 0x1394 <find_volume+0x630>
     f4e:	f3 ad       	ldd	r31, Z+59	; 0x3b
     f50:	f9 8b       	std	Y+17, r31	; 0x11
     f52:	2f 2f       	mov	r18, r31
     f54:	f8 01       	movw	r30, r16
     f56:	22 83       	std	Z+2, r18	; 0x02
     f58:	22 23       	and	r18, r18
     f5a:	09 f4       	brne	.+2      	; 0xf5e <find_volume+0x1fa>
     f5c:	1d c2       	rjmp	.+1082   	; 0x1398 <find_volume+0x634>
     f5e:	82 2f       	mov	r24, r18
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9c 01       	movw	r18, r24
     f64:	21 50       	subi	r18, 0x01	; 1
     f66:	31 09       	sbc	r19, r1
     f68:	82 23       	and	r24, r18
     f6a:	93 23       	and	r25, r19
     f6c:	89 2b       	or	r24, r25
     f6e:	09 f0       	breq	.+2      	; 0xf72 <find_volume+0x20e>
     f70:	15 c2       	rjmp	.+1066   	; 0x139c <find_volume+0x638>
     f72:	e0 5c       	subi	r30, 0xC0	; 192
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	80 81       	ld	r24, Z
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	98 2f       	mov	r25, r24
     f7c:	88 27       	eor	r24, r24
     f7e:	f8 01       	movw	r30, r16
     f80:	27 ad       	ldd	r18, Z+63	; 0x3f
     f82:	1c 01       	movw	r2, r24
     f84:	22 2a       	or	r2, r18
     f86:	31 86       	std	Z+9, r3	; 0x09
     f88:	20 86       	std	Z+8, r2	; 0x08
     f8a:	c1 01       	movw	r24, r2
     f8c:	8f 70       	andi	r24, 0x0F	; 15
     f8e:	99 27       	eor	r25, r25
     f90:	89 2b       	or	r24, r25
     f92:	09 f0       	breq	.+2      	; 0xf96 <find_volume+0x232>
     f94:	05 c2       	rjmp	.+1034   	; 0x13a0 <find_volume+0x63c>
     f96:	ee 5b       	subi	r30, 0xBE	; 190
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	80 80       	ld	r8, Z
     f9c:	91 2c       	mov	r9, r1
     f9e:	98 2c       	mov	r9, r8
     fa0:	88 24       	eor	r8, r8
     fa2:	31 97       	sbiw	r30, 0x01	; 1
     fa4:	80 81       	ld	r24, Z
     fa6:	88 2a       	or	r8, r24
     fa8:	a1 2c       	mov	r10, r1
     faa:	b1 2c       	mov	r11, r1
     fac:	81 14       	cp	r8, r1
     fae:	91 04       	cpc	r9, r1
     fb0:	a1 04       	cpc	r10, r1
     fb2:	b1 04       	cpc	r11, r1
     fb4:	d1 f4       	brne	.+52     	; 0xfea <find_volume+0x286>
     fb6:	70 96       	adiw	r30, 0x10	; 16
     fb8:	80 81       	ld	r24, Z
     fba:	31 97       	sbiw	r30, 0x01	; 1
     fbc:	80 80       	ld	r8, Z
     fbe:	91 2c       	mov	r9, r1
     fc0:	a1 2c       	mov	r10, r1
     fc2:	b1 2c       	mov	r11, r1
     fc4:	54 01       	movw	r10, r8
     fc6:	99 24       	eor	r9, r9
     fc8:	88 24       	eor	r8, r8
     fca:	b8 2a       	or	r11, r24
     fcc:	32 97       	sbiw	r30, 0x02	; 2
     fce:	80 81       	ld	r24, Z
     fd0:	88 2a       	or	r8, r24
     fd2:	31 96       	adiw	r30, 0x01	; 1
     fd4:	80 81       	ld	r24, Z
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	98 2f       	mov	r25, r24
     fda:	88 27       	eor	r24, r24
     fdc:	ac 01       	movw	r20, r24
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	84 2a       	or	r8, r20
     fe4:	95 2a       	or	r9, r21
     fe6:	a6 2a       	or	r10, r22
     fe8:	b7 2a       	or	r11, r23
     fea:	f8 01       	movw	r30, r16
     fec:	85 ad       	ldd	r24, Z+61	; 0x3d
     fee:	e8 2f       	mov	r30, r24
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	3e 2f       	mov	r19, r30
     ff4:	22 27       	eor	r18, r18
     ff6:	f8 01       	movw	r30, r16
     ff8:	84 ad       	ldd	r24, Z+60	; 0x3c
     ffa:	f9 01       	movw	r30, r18
     ffc:	e8 2b       	or	r30, r24
     ffe:	30 97       	sbiw	r30, 0x00	; 0
    1000:	09 f4       	brne	.+2      	; 0x1004 <find_volume+0x2a0>
    1002:	d0 c1       	rjmp	.+928    	; 0x13a4 <find_volume+0x640>
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	a7 01       	movw	r20, r14
    1008:	96 01       	movw	r18, r12
    100a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__muluhisi3>
    100e:	6a 8f       	std	Y+26, r22	; 0x1a
    1010:	7b 8f       	std	Y+27, r23	; 0x1b
    1012:	8c 8f       	std	Y+28, r24	; 0x1c
    1014:	9d 8f       	std	Y+29, r25	; 0x1d
    1016:	9f 01       	movw	r18, r30
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	2e 8b       	std	Y+22, r18	; 0x16
    101e:	3f 8b       	std	Y+23, r19	; 0x17
    1020:	48 8f       	std	Y+24, r20	; 0x18
    1022:	59 8f       	std	Y+25, r21	; 0x19
    1024:	c1 01       	movw	r24, r2
    1026:	92 95       	swap	r25
    1028:	82 95       	swap	r24
    102a:	8f 70       	andi	r24, 0x0F	; 15
    102c:	89 27       	eor	r24, r25
    102e:	9f 70       	andi	r25, 0x0F	; 15
    1030:	89 27       	eor	r24, r25
    1032:	28 0f       	add	r18, r24
    1034:	39 1f       	adc	r19, r25
    1036:	41 1d       	adc	r20, r1
    1038:	51 1d       	adc	r21, r1
    103a:	da 01       	movw	r26, r20
    103c:	c9 01       	movw	r24, r18
    103e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1040:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1042:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1044:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1046:	28 0f       	add	r18, r24
    1048:	39 1f       	adc	r19, r25
    104a:	4a 1f       	adc	r20, r26
    104c:	5b 1f       	adc	r21, r27
    104e:	2a 8b       	std	Y+18, r18	; 0x12
    1050:	3b 8b       	std	Y+19, r19	; 0x13
    1052:	4c 8b       	std	Y+20, r20	; 0x14
    1054:	5d 8b       	std	Y+21, r21	; 0x15
    1056:	82 16       	cp	r8, r18
    1058:	93 06       	cpc	r9, r19
    105a:	a4 06       	cpc	r10, r20
    105c:	b5 06       	cpc	r11, r21
    105e:	08 f4       	brcc	.+2      	; 0x1062 <find_volume+0x2fe>
    1060:	a3 c1       	rjmp	.+838    	; 0x13a8 <find_volume+0x644>
    1062:	c5 01       	movw	r24, r10
    1064:	b4 01       	movw	r22, r8
    1066:	62 1b       	sub	r22, r18
    1068:	73 0b       	sbc	r23, r19
    106a:	84 0b       	sbc	r24, r20
    106c:	95 0b       	sbc	r25, r21
    106e:	e9 89       	ldd	r30, Y+17	; 0x11
    1070:	2e 2f       	mov	r18, r30
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	0e 94 49 18 	call	0x3092	; 0x3092 <__udivmodsi4>
    107c:	da 01       	movw	r26, r20
    107e:	c9 01       	movw	r24, r18
    1080:	21 15       	cp	r18, r1
    1082:	31 05       	cpc	r19, r1
    1084:	41 05       	cpc	r20, r1
    1086:	51 05       	cpc	r21, r1
    1088:	09 f4       	brne	.+2      	; 0x108c <find_volume+0x328>
    108a:	90 c1       	rjmp	.+800    	; 0x13ac <find_volume+0x648>
    108c:	26 3f       	cpi	r18, 0xF6	; 246
    108e:	ff e0       	ldi	r31, 0x0F	; 15
    1090:	3f 07       	cpc	r19, r31
    1092:	41 05       	cpc	r20, r1
    1094:	51 05       	cpc	r21, r1
    1096:	18 f4       	brcc	.+6      	; 0x109e <find_volume+0x33a>
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	69 8b       	std	Y+17, r22	; 0x11
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <find_volume+0x33e>
    109e:	e2 e0       	ldi	r30, 0x02	; 2
    10a0:	e9 8b       	std	Y+17, r30	; 0x11
    10a2:	86 3f       	cpi	r24, 0xF6	; 246
    10a4:	9f 4f       	sbci	r25, 0xFF	; 255
    10a6:	a1 05       	cpc	r26, r1
    10a8:	b1 05       	cpc	r27, r1
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <find_volume+0x34a>
    10ac:	87 c1       	rjmp	.+782    	; 0x13bc <find_volume+0x658>
    10ae:	49 01       	movw	r8, r18
    10b0:	5a 01       	movw	r10, r20
    10b2:	62 e0       	ldi	r22, 0x02	; 2
    10b4:	86 0e       	add	r8, r22
    10b6:	91 1c       	adc	r9, r1
    10b8:	a1 1c       	adc	r10, r1
    10ba:	b1 1c       	adc	r11, r1
    10bc:	d8 01       	movw	r26, r16
    10be:	52 96       	adiw	r26, 0x12	; 18
    10c0:	8d 92       	st	X+, r8
    10c2:	9d 92       	st	X+, r9
    10c4:	ad 92       	st	X+, r10
    10c6:	bc 92       	st	X, r11
    10c8:	55 97       	sbiw	r26, 0x15	; 21
    10ca:	f8 01       	movw	r30, r16
    10cc:	42 8e       	std	Z+26, r4	; 0x1a
    10ce:	53 8e       	std	Z+27, r5	; 0x1b
    10d0:	64 8e       	std	Z+28, r6	; 0x1c
    10d2:	75 8e       	std	Z+29, r7	; 0x1d
    10d4:	8e 89       	ldd	r24, Y+22	; 0x16
    10d6:	9f 89       	ldd	r25, Y+23	; 0x17
    10d8:	a8 8d       	ldd	r26, Y+24	; 0x18
    10da:	b9 8d       	ldd	r27, Y+25	; 0x19
    10dc:	84 0d       	add	r24, r4
    10de:	95 1d       	adc	r25, r5
    10e0:	a6 1d       	adc	r26, r6
    10e2:	b7 1d       	adc	r27, r7
    10e4:	86 8f       	std	Z+30, r24	; 0x1e
    10e6:	97 8f       	std	Z+31, r25	; 0x1f
    10e8:	a0 a3       	std	Z+32, r26	; 0x20
    10ea:	b1 a3       	std	Z+33, r27	; 0x21
    10ec:	4a 89       	ldd	r20, Y+18	; 0x12
    10ee:	5b 89       	ldd	r21, Y+19	; 0x13
    10f0:	6c 89       	ldd	r22, Y+20	; 0x14
    10f2:	7d 89       	ldd	r23, Y+21	; 0x15
    10f4:	44 0d       	add	r20, r4
    10f6:	55 1d       	adc	r21, r5
    10f8:	66 1d       	adc	r22, r6
    10fa:	77 1d       	adc	r23, r7
    10fc:	46 a3       	std	Z+38, r20	; 0x26
    10fe:	57 a3       	std	Z+39, r21	; 0x27
    1100:	60 a7       	std	Z+40, r22	; 0x28
    1102:	71 a7       	std	Z+41, r23	; 0x29
    1104:	f9 89       	ldd	r31, Y+17	; 0x11
    1106:	f3 30       	cpi	r31, 0x03	; 3
    1108:	61 f5       	brne	.+88     	; 0x1162 <find_volume+0x3fe>
    110a:	23 28       	or	r2, r3
    110c:	09 f0       	breq	.+2      	; 0x1110 <find_volume+0x3ac>
    110e:	50 c1       	rjmp	.+672    	; 0x13b0 <find_volume+0x64c>
    1110:	f8 01       	movw	r30, r16
    1112:	e3 5a       	subi	r30, 0xA3	; 163
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	20 81       	ld	r18, Z
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	80 81       	ld	r24, Z
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	dc 01       	movw	r26, r24
    1124:	99 27       	eor	r25, r25
    1126:	88 27       	eor	r24, r24
    1128:	b2 2b       	or	r27, r18
    112a:	32 97       	sbiw	r30, 0x02	; 2
    112c:	20 81       	ld	r18, Z
    112e:	82 2b       	or	r24, r18
    1130:	31 96       	adiw	r30, 0x01	; 1
    1132:	40 81       	ld	r20, Z
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	54 2f       	mov	r21, r20
    1138:	44 27       	eor	r20, r20
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	84 2b       	or	r24, r20
    1140:	95 2b       	or	r25, r21
    1142:	a6 2b       	or	r26, r22
    1144:	b7 2b       	or	r27, r23
    1146:	f8 01       	movw	r30, r16
    1148:	82 a3       	std	Z+34, r24	; 0x22
    114a:	93 a3       	std	Z+35, r25	; 0x23
    114c:	a4 a3       	std	Z+36, r26	; 0x24
    114e:	b5 a3       	std	Z+37, r27	; 0x25
    1150:	88 0c       	add	r8, r8
    1152:	99 1c       	adc	r9, r9
    1154:	aa 1c       	adc	r10, r10
    1156:	bb 1c       	adc	r11, r11
    1158:	88 0c       	add	r8, r8
    115a:	99 1c       	adc	r9, r9
    115c:	aa 1c       	adc	r10, r10
    115e:	bb 1c       	adc	r11, r11
    1160:	2d c0       	rjmp	.+90     	; 0x11bc <find_volume+0x458>
    1162:	23 28       	or	r2, r3
    1164:	09 f4       	brne	.+2      	; 0x1168 <find_volume+0x404>
    1166:	26 c1       	rjmp	.+588    	; 0x13b4 <find_volume+0x650>
    1168:	2a 8d       	ldd	r18, Y+26	; 0x1a
    116a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    116c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    116e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1170:	82 0f       	add	r24, r18
    1172:	93 1f       	adc	r25, r19
    1174:	a4 1f       	adc	r26, r20
    1176:	b5 1f       	adc	r27, r21
    1178:	f8 01       	movw	r30, r16
    117a:	82 a3       	std	Z+34, r24	; 0x22
    117c:	93 a3       	std	Z+35, r25	; 0x23
    117e:	a4 a3       	std	Z+36, r26	; 0x24
    1180:	b5 a3       	std	Z+37, r27	; 0x25
    1182:	f9 89       	ldd	r31, Y+17	; 0x11
    1184:	f2 30       	cpi	r31, 0x02	; 2
    1186:	29 f4       	brne	.+10     	; 0x1192 <find_volume+0x42e>
    1188:	88 0c       	add	r8, r8
    118a:	99 1c       	adc	r9, r9
    118c:	aa 1c       	adc	r10, r10
    118e:	bb 1c       	adc	r11, r11
    1190:	15 c0       	rjmp	.+42     	; 0x11bc <find_volume+0x458>
    1192:	a3 e0       	ldi	r26, 0x03	; 3
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	a5 01       	movw	r20, r10
    1198:	94 01       	movw	r18, r8
    119a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__muluhisi3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	b6 95       	lsr	r27
    11a4:	a7 95       	ror	r26
    11a6:	97 95       	ror	r25
    11a8:	87 95       	ror	r24
    11aa:	21 e0       	ldi	r18, 0x01	; 1
    11ac:	82 22       	and	r8, r18
    11ae:	99 24       	eor	r9, r9
    11b0:	aa 24       	eor	r10, r10
    11b2:	bb 24       	eor	r11, r11
    11b4:	88 0e       	add	r8, r24
    11b6:	99 1e       	adc	r9, r25
    11b8:	aa 1e       	adc	r10, r26
    11ba:	bb 1e       	adc	r11, r27
    11bc:	3f ef       	ldi	r19, 0xFF	; 255
    11be:	83 0e       	add	r8, r19
    11c0:	31 e0       	ldi	r19, 0x01	; 1
    11c2:	93 1e       	adc	r9, r19
    11c4:	a1 1c       	adc	r10, r1
    11c6:	b1 1c       	adc	r11, r1
    11c8:	07 2e       	mov	r0, r23
    11ca:	79 e0       	ldi	r23, 0x09	; 9
    11cc:	b6 94       	lsr	r11
    11ce:	a7 94       	ror	r10
    11d0:	97 94       	ror	r9
    11d2:	87 94       	ror	r8
    11d4:	7a 95       	dec	r23
    11d6:	d1 f7       	brne	.-12     	; 0x11cc <find_volume+0x468>
    11d8:	70 2d       	mov	r23, r0
    11da:	c8 14       	cp	r12, r8
    11dc:	d9 04       	cpc	r13, r9
    11de:	ea 04       	cpc	r14, r10
    11e0:	fb 04       	cpc	r15, r11
    11e2:	08 f4       	brcc	.+2      	; 0x11e6 <find_volume+0x482>
    11e4:	e9 c0       	rjmp	.+466    	; 0x13b8 <find_volume+0x654>
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	9f ef       	ldi	r25, 0xFF	; 255
    11ea:	dc 01       	movw	r26, r24
    11ec:	f8 01       	movw	r30, r16
    11ee:	86 87       	std	Z+14, r24	; 0x0e
    11f0:	97 87       	std	Z+15, r25	; 0x0f
    11f2:	a0 8b       	std	Z+16, r26	; 0x10
    11f4:	b1 8b       	std	Z+17, r27	; 0x11
    11f6:	82 87       	std	Z+10, r24	; 0x0a
    11f8:	93 87       	std	Z+11, r25	; 0x0b
    11fa:	a4 87       	std	Z+12, r26	; 0x0c
    11fc:	b5 87       	std	Z+13, r27	; 0x0d
    11fe:	80 e8       	ldi	r24, 0x80	; 128
    1200:	85 83       	std	Z+5, r24	; 0x05
    1202:	f9 89       	ldd	r31, Y+17	; 0x11
    1204:	f3 30       	cpi	r31, 0x03	; 3
    1206:	09 f0       	breq	.+2      	; 0x120a <find_volume+0x4a6>
    1208:	a1 c0       	rjmp	.+322    	; 0x134c <find_volume+0x5e8>
    120a:	f8 01       	movw	r30, r16
    120c:	e1 5a       	subi	r30, 0xA1	; 161
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	80 81       	ld	r24, Z
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	98 2f       	mov	r25, r24
    1216:	88 27       	eor	r24, r24
    1218:	31 97       	sbiw	r30, 0x01	; 1
    121a:	20 81       	ld	r18, Z
    121c:	82 2b       	or	r24, r18
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	09 f0       	breq	.+2      	; 0x1224 <find_volume+0x4c0>
    1222:	94 c0       	rjmp	.+296    	; 0x134c <find_volume+0x5e8>
    1224:	b3 01       	movw	r22, r6
    1226:	a2 01       	movw	r20, r4
    1228:	4f 5f       	subi	r20, 0xFF	; 255
    122a:	5f 4f       	sbci	r21, 0xFF	; 255
    122c:	6f 4f       	sbci	r22, 0xFF	; 255
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	c8 01       	movw	r24, r16
    1232:	cd dc       	rcall	.-1638   	; 0xbce <move_window>
    1234:	81 11       	cpse	r24, r1
    1236:	8a c0       	rjmp	.+276    	; 0x134c <find_volume+0x5e8>
    1238:	d8 01       	movw	r26, r16
    123a:	15 96       	adiw	r26, 0x05	; 5
    123c:	1c 92       	st	X, r1
    123e:	f8 01       	movw	r30, r16
    1240:	e3 5d       	subi	r30, 0xD3	; 211
    1242:	fd 4f       	sbci	r31, 0xFD	; 253
    1244:	80 81       	ld	r24, Z
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	98 2f       	mov	r25, r24
    124a:	88 27       	eor	r24, r24
    124c:	31 97       	sbiw	r30, 0x01	; 1
    124e:	20 81       	ld	r18, Z
    1250:	82 2b       	or	r24, r18
    1252:	85 35       	cpi	r24, 0x55	; 85
    1254:	9a 4a       	sbci	r25, 0xAA	; 170
    1256:	09 f0       	breq	.+2      	; 0x125a <find_volume+0x4f6>
    1258:	79 c0       	rjmp	.+242    	; 0x134c <find_volume+0x5e8>
    125a:	f8 01       	movw	r30, r16
    125c:	21 a9       	ldd	r18, Z+49	; 0x31
    125e:	80 a9       	ldd	r24, Z+48	; 0x30
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	a0 e0       	ldi	r26, 0x00	; 0
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	dc 01       	movw	r26, r24
    1268:	99 27       	eor	r25, r25
    126a:	88 27       	eor	r24, r24
    126c:	b2 2b       	or	r27, r18
    126e:	26 a5       	ldd	r18, Z+46	; 0x2e
    1270:	82 2b       	or	r24, r18
    1272:	47 a5       	ldd	r20, Z+47	; 0x2f
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	54 2f       	mov	r21, r20
    1278:	44 27       	eor	r20, r20
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	84 2b       	or	r24, r20
    1280:	95 2b       	or	r25, r21
    1282:	a6 2b       	or	r26, r22
    1284:	b7 2b       	or	r27, r23
    1286:	82 35       	cpi	r24, 0x52	; 82
    1288:	92 45       	sbci	r25, 0x52	; 82
    128a:	a1 46       	sbci	r26, 0x61	; 97
    128c:	b1 44       	sbci	r27, 0x41	; 65
    128e:	09 f0       	breq	.+2      	; 0x1292 <find_volume+0x52e>
    1290:	5d c0       	rjmp	.+186    	; 0x134c <find_volume+0x5e8>
    1292:	f8 01       	movw	r30, r16
    1294:	eb 5e       	subi	r30, 0xEB	; 235
    1296:	fd 4f       	sbci	r31, 0xFD	; 253
    1298:	20 81       	ld	r18, Z
    129a:	31 97       	sbiw	r30, 0x01	; 1
    129c:	80 81       	ld	r24, Z
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a0 e0       	ldi	r26, 0x00	; 0
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	dc 01       	movw	r26, r24
    12a6:	99 27       	eor	r25, r25
    12a8:	88 27       	eor	r24, r24
    12aa:	b2 2b       	or	r27, r18
    12ac:	32 97       	sbiw	r30, 0x02	; 2
    12ae:	20 81       	ld	r18, Z
    12b0:	82 2b       	or	r24, r18
    12b2:	31 96       	adiw	r30, 0x01	; 1
    12b4:	40 81       	ld	r20, Z
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	54 2f       	mov	r21, r20
    12ba:	44 27       	eor	r20, r20
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	84 2b       	or	r24, r20
    12c2:	95 2b       	or	r25, r21
    12c4:	a6 2b       	or	r26, r22
    12c6:	b7 2b       	or	r27, r23
    12c8:	82 37       	cpi	r24, 0x72	; 114
    12ca:	92 47       	sbci	r25, 0x72	; 114
    12cc:	a1 44       	sbci	r26, 0x41	; 65
    12ce:	b1 46       	sbci	r27, 0x61	; 97
    12d0:	e9 f5       	brne	.+122    	; 0x134c <find_volume+0x5e8>
    12d2:	36 96       	adiw	r30, 0x06	; 6
    12d4:	20 81       	ld	r18, Z
    12d6:	31 97       	sbiw	r30, 0x01	; 1
    12d8:	80 81       	ld	r24, Z
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a0 e0       	ldi	r26, 0x00	; 0
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	dc 01       	movw	r26, r24
    12e2:	99 27       	eor	r25, r25
    12e4:	88 27       	eor	r24, r24
    12e6:	b2 2b       	or	r27, r18
    12e8:	32 97       	sbiw	r30, 0x02	; 2
    12ea:	20 81       	ld	r18, Z
    12ec:	82 2b       	or	r24, r18
    12ee:	31 96       	adiw	r30, 0x01	; 1
    12f0:	40 81       	ld	r20, Z
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	54 2f       	mov	r21, r20
    12f6:	44 27       	eor	r20, r20
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	84 2b       	or	r24, r20
    12fe:	95 2b       	or	r25, r21
    1300:	a6 2b       	or	r26, r22
    1302:	b7 2b       	or	r27, r23
    1304:	f8 01       	movw	r30, r16
    1306:	86 87       	std	Z+14, r24	; 0x0e
    1308:	97 87       	std	Z+15, r25	; 0x0f
    130a:	a0 8b       	std	Z+16, r26	; 0x10
    130c:	b1 8b       	std	Z+17, r27	; 0x11
    130e:	e3 5e       	subi	r30, 0xE3	; 227
    1310:	fd 4f       	sbci	r31, 0xFD	; 253
    1312:	20 81       	ld	r18, Z
    1314:	31 97       	sbiw	r30, 0x01	; 1
    1316:	80 81       	ld	r24, Z
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a0 e0       	ldi	r26, 0x00	; 0
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	dc 01       	movw	r26, r24
    1320:	99 27       	eor	r25, r25
    1322:	88 27       	eor	r24, r24
    1324:	b2 2b       	or	r27, r18
    1326:	32 97       	sbiw	r30, 0x02	; 2
    1328:	20 81       	ld	r18, Z
    132a:	82 2b       	or	r24, r18
    132c:	31 96       	adiw	r30, 0x01	; 1
    132e:	40 81       	ld	r20, Z
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	54 2f       	mov	r21, r20
    1334:	44 27       	eor	r20, r20
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	84 2b       	or	r24, r20
    133c:	95 2b       	or	r25, r21
    133e:	a6 2b       	or	r26, r22
    1340:	b7 2b       	or	r27, r23
    1342:	f8 01       	movw	r30, r16
    1344:	82 87       	std	Z+10, r24	; 0x0a
    1346:	93 87       	std	Z+11, r25	; 0x0b
    1348:	a4 87       	std	Z+12, r26	; 0x0c
    134a:	b5 87       	std	Z+13, r27	; 0x0d
    134c:	e9 89       	ldd	r30, Y+17	; 0x11
    134e:	d8 01       	movw	r26, r16
    1350:	ec 93       	st	X, r30
    1352:	80 91 6b 01 	lds	r24, 0x016B
    1356:	90 91 6c 01 	lds	r25, 0x016C
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	90 93 6c 01 	sts	0x016C, r25
    1360:	80 93 6b 01 	sts	0x016B, r24
    1364:	17 96       	adiw	r26, 0x07	; 7
    1366:	9c 93       	st	X, r25
    1368:	8e 93       	st	-X, r24
    136a:	16 97       	sbiw	r26, 0x06	; 6
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	54 c0       	rjmp	.+168    	; 0x1418 <find_volume+0x6b4>
    1370:	8b e0       	ldi	r24, 0x0B	; 11
    1372:	52 c0       	rjmp	.+164    	; 0x1418 <find_volume+0x6b4>
    1374:	8c e0       	ldi	r24, 0x0C	; 12
    1376:	50 c0       	rjmp	.+160    	; 0x1418 <find_volume+0x6b4>
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	4e c0       	rjmp	.+156    	; 0x1418 <find_volume+0x6b4>
    137c:	8a e0       	ldi	r24, 0x0A	; 10
    137e:	4c c0       	rjmp	.+152    	; 0x1418 <find_volume+0x6b4>
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	4a c0       	rjmp	.+148    	; 0x1418 <find_volume+0x6b4>
    1384:	8a e0       	ldi	r24, 0x0A	; 10
    1386:	48 c0       	rjmp	.+144    	; 0x1418 <find_volume+0x6b4>
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	46 c0       	rjmp	.+140    	; 0x1418 <find_volume+0x6b4>
    138c:	8d e0       	ldi	r24, 0x0D	; 13
    138e:	44 c0       	rjmp	.+136    	; 0x1418 <find_volume+0x6b4>
    1390:	8d e0       	ldi	r24, 0x0D	; 13
    1392:	42 c0       	rjmp	.+132    	; 0x1418 <find_volume+0x6b4>
    1394:	8d e0       	ldi	r24, 0x0D	; 13
    1396:	40 c0       	rjmp	.+128    	; 0x1418 <find_volume+0x6b4>
    1398:	8d e0       	ldi	r24, 0x0D	; 13
    139a:	3e c0       	rjmp	.+124    	; 0x1418 <find_volume+0x6b4>
    139c:	8d e0       	ldi	r24, 0x0D	; 13
    139e:	3c c0       	rjmp	.+120    	; 0x1418 <find_volume+0x6b4>
    13a0:	8d e0       	ldi	r24, 0x0D	; 13
    13a2:	3a c0       	rjmp	.+116    	; 0x1418 <find_volume+0x6b4>
    13a4:	8d e0       	ldi	r24, 0x0D	; 13
    13a6:	38 c0       	rjmp	.+112    	; 0x1418 <find_volume+0x6b4>
    13a8:	8d e0       	ldi	r24, 0x0D	; 13
    13aa:	36 c0       	rjmp	.+108    	; 0x1418 <find_volume+0x6b4>
    13ac:	8d e0       	ldi	r24, 0x0D	; 13
    13ae:	34 c0       	rjmp	.+104    	; 0x1418 <find_volume+0x6b4>
    13b0:	8d e0       	ldi	r24, 0x0D	; 13
    13b2:	32 c0       	rjmp	.+100    	; 0x1418 <find_volume+0x6b4>
    13b4:	8d e0       	ldi	r24, 0x0D	; 13
    13b6:	30 c0       	rjmp	.+96     	; 0x1418 <find_volume+0x6b4>
    13b8:	8d e0       	ldi	r24, 0x0D	; 13
    13ba:	2e c0       	rjmp	.+92     	; 0x1418 <find_volume+0x6b4>
    13bc:	49 01       	movw	r8, r18
    13be:	5a 01       	movw	r10, r20
    13c0:	f2 e0       	ldi	r31, 0x02	; 2
    13c2:	8f 0e       	add	r8, r31
    13c4:	91 1c       	adc	r9, r1
    13c6:	a1 1c       	adc	r10, r1
    13c8:	b1 1c       	adc	r11, r1
    13ca:	d8 01       	movw	r26, r16
    13cc:	52 96       	adiw	r26, 0x12	; 18
    13ce:	8d 92       	st	X+, r8
    13d0:	9d 92       	st	X+, r9
    13d2:	ad 92       	st	X+, r10
    13d4:	bc 92       	st	X, r11
    13d6:	55 97       	sbiw	r26, 0x15	; 21
    13d8:	f8 01       	movw	r30, r16
    13da:	42 8e       	std	Z+26, r4	; 0x1a
    13dc:	53 8e       	std	Z+27, r5	; 0x1b
    13de:	64 8e       	std	Z+28, r6	; 0x1c
    13e0:	75 8e       	std	Z+29, r7	; 0x1d
    13e2:	8e 89       	ldd	r24, Y+22	; 0x16
    13e4:	9f 89       	ldd	r25, Y+23	; 0x17
    13e6:	a8 8d       	ldd	r26, Y+24	; 0x18
    13e8:	b9 8d       	ldd	r27, Y+25	; 0x19
    13ea:	84 0d       	add	r24, r4
    13ec:	95 1d       	adc	r25, r5
    13ee:	a6 1d       	adc	r26, r6
    13f0:	b7 1d       	adc	r27, r7
    13f2:	86 8f       	std	Z+30, r24	; 0x1e
    13f4:	97 8f       	std	Z+31, r25	; 0x1f
    13f6:	a0 a3       	std	Z+32, r26	; 0x20
    13f8:	b1 a3       	std	Z+33, r27	; 0x21
    13fa:	8a 89       	ldd	r24, Y+18	; 0x12
    13fc:	9b 89       	ldd	r25, Y+19	; 0x13
    13fe:	ac 89       	ldd	r26, Y+20	; 0x14
    1400:	bd 89       	ldd	r27, Y+21	; 0x15
    1402:	84 0d       	add	r24, r4
    1404:	95 1d       	adc	r25, r5
    1406:	a6 1d       	adc	r26, r6
    1408:	b7 1d       	adc	r27, r7
    140a:	86 a3       	std	Z+38, r24	; 0x26
    140c:	97 a3       	std	Z+39, r25	; 0x27
    140e:	a0 a7       	std	Z+40, r26	; 0x28
    1410:	b1 a7       	std	Z+41, r27	; 0x29
    1412:	f3 e0       	ldi	r31, 0x03	; 3
    1414:	f9 8b       	std	Y+17, r31	; 0x11
    1416:	79 ce       	rjmp	.-782    	; 0x110a <find_volume+0x3a6>
    1418:	6d 96       	adiw	r28, 0x1d	; 29
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	bf 90       	pop	r11
    1436:	af 90       	pop	r10
    1438:	9f 90       	pop	r9
    143a:	8f 90       	pop	r8
    143c:	7f 90       	pop	r7
    143e:	6f 90       	pop	r6
    1440:	5f 90       	pop	r5
    1442:	4f 90       	pop	r4
    1444:	3f 90       	pop	r3
    1446:	2f 90       	pop	r2
    1448:	08 95       	ret

0000144a <sync_fs>:
    144a:	ef 92       	push	r14
    144c:	ff 92       	push	r15
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	ec 01       	movw	r28, r24
    1458:	51 db       	rcall	.-2398   	; 0xafc <sync_window>
    145a:	98 2f       	mov	r25, r24
    145c:	81 11       	cpse	r24, r1
    145e:	5f c0       	rjmp	.+190    	; 0x151e <sync_fs+0xd4>
    1460:	88 81       	ld	r24, Y
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	09 f0       	breq	.+2      	; 0x1468 <sync_fs+0x1e>
    1466:	52 c0       	rjmp	.+164    	; 0x150c <sync_fs+0xc2>
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	09 f0       	breq	.+2      	; 0x1470 <sync_fs+0x26>
    146e:	4e c0       	rjmp	.+156    	; 0x150c <sync_fs+0xc2>
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	52 e0       	ldi	r21, 0x02	; 2
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	7e 01       	movw	r14, r28
    147a:	8e e2       	ldi	r24, 0x2E	; 46
    147c:	e8 0e       	add	r14, r24
    147e:	f1 1c       	adc	r15, r1
    1480:	c7 01       	movw	r24, r14
    1482:	fd da       	rcall	.-2566   	; 0xa7e <mem_set>
    1484:	85 e5       	ldi	r24, 0x55	; 85
    1486:	fe 01       	movw	r30, r28
    1488:	e4 5d       	subi	r30, 0xD4	; 212
    148a:	fd 4f       	sbci	r31, 0xFD	; 253
    148c:	80 83       	st	Z, r24
    148e:	8a ea       	ldi	r24, 0xAA	; 170
    1490:	31 96       	adiw	r30, 0x01	; 1
    1492:	80 83       	st	Z, r24
    1494:	82 e5       	ldi	r24, 0x52	; 82
    1496:	8e a7       	std	Y+46, r24	; 0x2e
    1498:	8f a7       	std	Y+47, r24	; 0x2f
    149a:	81 e6       	ldi	r24, 0x61	; 97
    149c:	88 ab       	std	Y+48, r24	; 0x30
    149e:	91 e4       	ldi	r25, 0x41	; 65
    14a0:	99 ab       	std	Y+49, r25	; 0x31
    14a2:	22 e7       	ldi	r18, 0x72	; 114
    14a4:	7b 97       	sbiw	r30, 0x1b	; 27
    14a6:	20 83       	st	Z, r18
    14a8:	31 96       	adiw	r30, 0x01	; 1
    14aa:	20 83       	st	Z, r18
    14ac:	31 96       	adiw	r30, 0x01	; 1
    14ae:	90 83       	st	Z, r25
    14b0:	31 96       	adiw	r30, 0x01	; 1
    14b2:	80 83       	st	Z, r24
    14b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    14b6:	2f 85       	ldd	r18, Y+15	; 0x0f
    14b8:	98 89       	ldd	r25, Y+16	; 0x10
    14ba:	89 89       	ldd	r24, Y+17	; 0x11
    14bc:	31 96       	adiw	r30, 0x01	; 1
    14be:	30 83       	st	Z, r19
    14c0:	31 96       	adiw	r30, 0x01	; 1
    14c2:	20 83       	st	Z, r18
    14c4:	31 96       	adiw	r30, 0x01	; 1
    14c6:	90 83       	st	Z, r25
    14c8:	31 96       	adiw	r30, 0x01	; 1
    14ca:	80 83       	st	Z, r24
    14cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    14ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    14d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d4:	31 96       	adiw	r30, 0x01	; 1
    14d6:	30 83       	st	Z, r19
    14d8:	31 96       	adiw	r30, 0x01	; 1
    14da:	20 83       	st	Z, r18
    14dc:	31 96       	adiw	r30, 0x01	; 1
    14de:	90 83       	st	Z, r25
    14e0:	31 96       	adiw	r30, 0x01	; 1
    14e2:	80 83       	st	Z, r24
    14e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    14e8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    14ea:	bd 8d       	ldd	r27, Y+29	; 0x1d
    14ec:	9c 01       	movw	r18, r24
    14ee:	ad 01       	movw	r20, r26
    14f0:	2f 5f       	subi	r18, 0xFF	; 255
    14f2:	3f 4f       	sbci	r19, 0xFF	; 255
    14f4:	4f 4f       	sbci	r20, 0xFF	; 255
    14f6:	5f 4f       	sbci	r21, 0xFF	; 255
    14f8:	2a a7       	std	Y+42, r18	; 0x2a
    14fa:	3b a7       	std	Y+43, r19	; 0x2b
    14fc:	4c a7       	std	Y+44, r20	; 0x2c
    14fe:	5d a7       	std	Y+45, r21	; 0x2d
    1500:	01 e0       	ldi	r16, 0x01	; 1
    1502:	10 e0       	ldi	r17, 0x00	; 0
    1504:	b7 01       	movw	r22, r14
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	8d d9       	rcall	.-3302   	; 0x824 <disk_write>
    150a:	1d 82       	std	Y+5, r1	; 0x05
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	eb d9       	rcall	.-3114   	; 0x8ec <disk_ioctl>
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	81 11       	cpse	r24, r1
    151a:	01 c0       	rjmp	.+2      	; 0x151e <sync_fs+0xd4>
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	89 2f       	mov	r24, r25
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	08 95       	ret

0000152e <clust2sect>:
    152e:	cf 92       	push	r12
    1530:	df 92       	push	r13
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	fc 01       	movw	r30, r24
    1538:	9a 01       	movw	r18, r20
    153a:	ab 01       	movw	r20, r22
    153c:	22 50       	subi	r18, 0x02	; 2
    153e:	31 09       	sbc	r19, r1
    1540:	41 09       	sbc	r20, r1
    1542:	51 09       	sbc	r21, r1
    1544:	c2 88       	ldd	r12, Z+18	; 0x12
    1546:	d3 88       	ldd	r13, Z+19	; 0x13
    1548:	e4 88       	ldd	r14, Z+20	; 0x14
    154a:	f5 88       	ldd	r15, Z+21	; 0x15
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	c8 1a       	sub	r12, r24
    1550:	d1 08       	sbc	r13, r1
    1552:	e1 08       	sbc	r14, r1
    1554:	f1 08       	sbc	r15, r1
    1556:	2c 15       	cp	r18, r12
    1558:	3d 05       	cpc	r19, r13
    155a:	4e 05       	cpc	r20, r14
    155c:	5f 05       	cpc	r21, r15
    155e:	68 f4       	brcc	.+26     	; 0x157a <clust2sect+0x4c>
    1560:	a2 81       	ldd	r26, Z+2	; 0x02
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__muluhisi3>
    1568:	c6 a0       	ldd	r12, Z+38	; 0x26
    156a:	d7 a0       	ldd	r13, Z+39	; 0x27
    156c:	e0 a4       	ldd	r14, Z+40	; 0x28
    156e:	f1 a4       	ldd	r15, Z+41	; 0x29
    1570:	6c 0d       	add	r22, r12
    1572:	7d 1d       	adc	r23, r13
    1574:	8e 1d       	adc	r24, r14
    1576:	9f 1d       	adc	r25, r15
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <clust2sect+0x52>
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	cb 01       	movw	r24, r22
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	df 90       	pop	r13
    1586:	cf 90       	pop	r12
    1588:	08 95       	ret

0000158a <get_fat>:
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	ec 01       	movw	r28, r24
    15a0:	6a 01       	movw	r12, r20
    15a2:	7b 01       	movw	r14, r22
    15a4:	42 30       	cpi	r20, 0x02	; 2
    15a6:	51 05       	cpc	r21, r1
    15a8:	61 05       	cpc	r22, r1
    15aa:	71 05       	cpc	r23, r1
    15ac:	08 f4       	brcc	.+2      	; 0x15b0 <get_fat+0x26>
    15ae:	c5 c0       	rjmp	.+394    	; 0x173a <get_fat+0x1b0>
    15b0:	4a 89       	ldd	r20, Y+18	; 0x12
    15b2:	5b 89       	ldd	r21, Y+19	; 0x13
    15b4:	6c 89       	ldd	r22, Y+20	; 0x14
    15b6:	7d 89       	ldd	r23, Y+21	; 0x15
    15b8:	c4 16       	cp	r12, r20
    15ba:	d5 06       	cpc	r13, r21
    15bc:	e6 06       	cpc	r14, r22
    15be:	f7 06       	cpc	r15, r23
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <get_fat+0x3a>
    15c2:	c0 c0       	rjmp	.+384    	; 0x1744 <get_fat+0x1ba>
    15c4:	88 81       	ld	r24, Y
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	09 f4       	brne	.+2      	; 0x15cc <get_fat+0x42>
    15ca:	4b c0       	rjmp	.+150    	; 0x1662 <get_fat+0xd8>
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <get_fat+0x48>
    15d0:	6f c0       	rjmp	.+222    	; 0x16b0 <get_fat+0x126>
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <get_fat+0x4e>
    15d6:	bb c0       	rjmp	.+374    	; 0x174e <get_fat+0x1c4>
    15d8:	86 01       	movw	r16, r12
    15da:	16 95       	lsr	r17
    15dc:	07 95       	ror	r16
    15de:	0c 0d       	add	r16, r12
    15e0:	1d 1d       	adc	r17, r13
    15e2:	c8 01       	movw	r24, r16
    15e4:	89 2f       	mov	r24, r25
    15e6:	99 27       	eor	r25, r25
    15e8:	86 95       	lsr	r24
    15ea:	4e 8d       	ldd	r20, Y+30	; 0x1e
    15ec:	5f 8d       	ldd	r21, Y+31	; 0x1f
    15ee:	68 a1       	ldd	r22, Y+32	; 0x20
    15f0:	79 a1       	ldd	r23, Y+33	; 0x21
    15f2:	48 0f       	add	r20, r24
    15f4:	59 1f       	adc	r21, r25
    15f6:	61 1d       	adc	r22, r1
    15f8:	71 1d       	adc	r23, r1
    15fa:	ce 01       	movw	r24, r28
    15fc:	e8 da       	rcall	.-2608   	; 0xbce <move_window>
    15fe:	81 11       	cpse	r24, r1
    1600:	ab c0       	rjmp	.+342    	; 0x1758 <get_fat+0x1ce>
    1602:	58 01       	movw	r10, r16
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	a8 1a       	sub	r10, r24
    1608:	b8 0a       	sbc	r11, r24
    160a:	11 70       	andi	r17, 0x01	; 1
    160c:	fe 01       	movw	r30, r28
    160e:	e0 0f       	add	r30, r16
    1610:	f1 1f       	adc	r31, r17
    1612:	16 a5       	ldd	r17, Z+46	; 0x2e
    1614:	c5 01       	movw	r24, r10
    1616:	89 2f       	mov	r24, r25
    1618:	99 27       	eor	r25, r25
    161a:	86 95       	lsr	r24
    161c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    161e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1620:	68 a1       	ldd	r22, Y+32	; 0x20
    1622:	79 a1       	ldd	r23, Y+33	; 0x21
    1624:	48 0f       	add	r20, r24
    1626:	59 1f       	adc	r21, r25
    1628:	61 1d       	adc	r22, r1
    162a:	71 1d       	adc	r23, r1
    162c:	ce 01       	movw	r24, r28
    162e:	cf da       	rcall	.-2658   	; 0xbce <move_window>
    1630:	81 11       	cpse	r24, r1
    1632:	96 c0       	rjmp	.+300    	; 0x1760 <get_fat+0x1d6>
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	b8 22       	and	r11, r24
    1638:	ca 0d       	add	r28, r10
    163a:	db 1d       	adc	r29, r11
    163c:	8e a5       	ldd	r24, Y+46	; 0x2e
    163e:	61 2f       	mov	r22, r17
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	78 2b       	or	r23, r24
    1644:	c0 fe       	sbrs	r12, 0
    1646:	09 c0       	rjmp	.+18     	; 0x165a <get_fat+0xd0>
    1648:	72 95       	swap	r23
    164a:	62 95       	swap	r22
    164c:	6f 70       	andi	r22, 0x0F	; 15
    164e:	67 27       	eor	r22, r23
    1650:	7f 70       	andi	r23, 0x0F	; 15
    1652:	67 27       	eor	r22, r23
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	8e c0       	rjmp	.+284    	; 0x1776 <get_fat+0x1ec>
    165a:	7f 70       	andi	r23, 0x0F	; 15
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	8a c0       	rjmp	.+276    	; 0x1776 <get_fat+0x1ec>
    1662:	77 27       	eor	r23, r23
    1664:	6f 2d       	mov	r22, r15
    1666:	5e 2d       	mov	r21, r14
    1668:	4d 2d       	mov	r20, r13
    166a:	0e 8d       	ldd	r16, Y+30	; 0x1e
    166c:	1f 8d       	ldd	r17, Y+31	; 0x1f
    166e:	28 a1       	ldd	r18, Y+32	; 0x20
    1670:	39 a1       	ldd	r19, Y+33	; 0x21
    1672:	40 0f       	add	r20, r16
    1674:	51 1f       	adc	r21, r17
    1676:	62 1f       	adc	r22, r18
    1678:	73 1f       	adc	r23, r19
    167a:	ce 01       	movw	r24, r28
    167c:	a8 da       	rcall	.-2736   	; 0xbce <move_window>
    167e:	81 11       	cpse	r24, r1
    1680:	73 c0       	rjmp	.+230    	; 0x1768 <get_fat+0x1de>
    1682:	cc 0c       	add	r12, r12
    1684:	dd 1c       	adc	r13, r13
    1686:	ee 1c       	adc	r14, r14
    1688:	ff 1c       	adc	r15, r15
    168a:	e8 94       	clt
    168c:	c0 f8       	bld	r12, 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	d8 22       	and	r13, r24
    1692:	ee 24       	eor	r14, r14
    1694:	ff 24       	eor	r15, r15
    1696:	fe 01       	movw	r30, r28
    1698:	ec 0d       	add	r30, r12
    169a:	fd 1d       	adc	r31, r13
    169c:	66 a5       	ldd	r22, Z+46	; 0x2e
    169e:	fe 01       	movw	r30, r28
    16a0:	ec 0d       	add	r30, r12
    16a2:	fd 1d       	adc	r31, r13
    16a4:	87 a5       	ldd	r24, Z+47	; 0x2f
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	78 2b       	or	r23, r24
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	63 c0       	rjmp	.+198    	; 0x1776 <get_fat+0x1ec>
    16b0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    16b2:	5f 8d       	ldd	r21, Y+31	; 0x1f
    16b4:	68 a1       	ldd	r22, Y+32	; 0x20
    16b6:	79 a1       	ldd	r23, Y+33	; 0x21
    16b8:	97 01       	movw	r18, r14
    16ba:	86 01       	movw	r16, r12
    16bc:	68 94       	set
    16be:	16 f8       	bld	r1, 6
    16c0:	36 95       	lsr	r19
    16c2:	27 95       	ror	r18
    16c4:	17 95       	ror	r17
    16c6:	07 95       	ror	r16
    16c8:	16 94       	lsr	r1
    16ca:	d1 f7       	brne	.-12     	; 0x16c0 <get_fat+0x136>
    16cc:	40 0f       	add	r20, r16
    16ce:	51 1f       	adc	r21, r17
    16d0:	62 1f       	adc	r22, r18
    16d2:	73 1f       	adc	r23, r19
    16d4:	ce 01       	movw	r24, r28
    16d6:	7b da       	rcall	.-2826   	; 0xbce <move_window>
    16d8:	81 11       	cpse	r24, r1
    16da:	4a c0       	rjmp	.+148    	; 0x1770 <get_fat+0x1e6>
    16dc:	cc 0c       	add	r12, r12
    16de:	dd 1c       	adc	r13, r13
    16e0:	ee 1c       	adc	r14, r14
    16e2:	ff 1c       	adc	r15, r15
    16e4:	cc 0c       	add	r12, r12
    16e6:	dd 1c       	adc	r13, r13
    16e8:	ee 1c       	adc	r14, r14
    16ea:	ff 1c       	adc	r15, r15
    16ec:	8c ef       	ldi	r24, 0xFC	; 252
    16ee:	c8 22       	and	r12, r24
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	d8 22       	and	r13, r24
    16f4:	ee 24       	eor	r14, r14
    16f6:	ff 24       	eor	r15, r15
    16f8:	f6 01       	movw	r30, r12
    16fa:	be 96       	adiw	r30, 0x2e	; 46
    16fc:	ec 0f       	add	r30, r28
    16fe:	fd 1f       	adc	r31, r29
    1700:	82 81       	ldd	r24, Z+2	; 0x02
    1702:	43 81       	ldd	r20, Z+3	; 0x03
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	74 2f       	mov	r23, r20
    170c:	66 27       	eor	r22, r22
    170e:	55 27       	eor	r21, r21
    1710:	44 27       	eor	r20, r20
    1712:	68 2b       	or	r22, r24
    1714:	81 81       	ldd	r24, Z+1	; 0x01
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	98 2f       	mov	r25, r24
    171a:	88 27       	eor	r24, r24
    171c:	a0 e0       	ldi	r26, 0x00	; 0
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	84 2b       	or	r24, r20
    1722:	95 2b       	or	r25, r21
    1724:	a6 2b       	or	r26, r22
    1726:	b7 2b       	or	r27, r23
    1728:	fe 01       	movw	r30, r28
    172a:	ec 0d       	add	r30, r12
    172c:	fd 1d       	adc	r31, r13
    172e:	26 a5       	ldd	r18, Z+46	; 0x2e
    1730:	82 2b       	or	r24, r18
    1732:	bc 01       	movw	r22, r24
    1734:	cd 01       	movw	r24, r26
    1736:	9f 70       	andi	r25, 0x0F	; 15
    1738:	1e c0       	rjmp	.+60     	; 0x1776 <get_fat+0x1ec>
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	19 c0       	rjmp	.+50     	; 0x1776 <get_fat+0x1ec>
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	14 c0       	rjmp	.+40     	; 0x1776 <get_fat+0x1ec>
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <get_fat+0x1ec>
    1758:	6f ef       	ldi	r22, 0xFF	; 255
    175a:	7f ef       	ldi	r23, 0xFF	; 255
    175c:	cb 01       	movw	r24, r22
    175e:	0b c0       	rjmp	.+22     	; 0x1776 <get_fat+0x1ec>
    1760:	6f ef       	ldi	r22, 0xFF	; 255
    1762:	7f ef       	ldi	r23, 0xFF	; 255
    1764:	cb 01       	movw	r24, r22
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <get_fat+0x1ec>
    1768:	6f ef       	ldi	r22, 0xFF	; 255
    176a:	7f ef       	ldi	r23, 0xFF	; 255
    176c:	cb 01       	movw	r24, r22
    176e:	03 c0       	rjmp	.+6      	; 0x1776 <get_fat+0x1ec>
    1770:	6f ef       	ldi	r22, 0xFF	; 255
    1772:	7f ef       	ldi	r23, 0xFF	; 255
    1774:	cb 01       	movw	r24, r22
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	df 90       	pop	r13
    1784:	cf 90       	pop	r12
    1786:	bf 90       	pop	r11
    1788:	af 90       	pop	r10
    178a:	08 95       	ret

0000178c <put_fat>:
    178c:	4f 92       	push	r4
    178e:	5f 92       	push	r5
    1790:	6f 92       	push	r6
    1792:	7f 92       	push	r7
    1794:	8f 92       	push	r8
    1796:	9f 92       	push	r9
    1798:	af 92       	push	r10
    179a:	bf 92       	push	r11
    179c:	cf 92       	push	r12
    179e:	df 92       	push	r13
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	ec 01       	movw	r28, r24
    17ae:	6a 01       	movw	r12, r20
    17b0:	7b 01       	movw	r14, r22
    17b2:	28 01       	movw	r4, r16
    17b4:	39 01       	movw	r6, r18
    17b6:	42 30       	cpi	r20, 0x02	; 2
    17b8:	51 05       	cpc	r21, r1
    17ba:	61 05       	cpc	r22, r1
    17bc:	71 05       	cpc	r23, r1
    17be:	08 f4       	brcc	.+2      	; 0x17c2 <put_fat+0x36>
    17c0:	dd c0       	rjmp	.+442    	; 0x197c <put_fat+0x1f0>
    17c2:	8a 89       	ldd	r24, Y+18	; 0x12
    17c4:	9b 89       	ldd	r25, Y+19	; 0x13
    17c6:	ac 89       	ldd	r26, Y+20	; 0x14
    17c8:	bd 89       	ldd	r27, Y+21	; 0x15
    17ca:	48 17       	cp	r20, r24
    17cc:	59 07       	cpc	r21, r25
    17ce:	6a 07       	cpc	r22, r26
    17d0:	7b 07       	cpc	r23, r27
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <put_fat+0x4a>
    17d4:	d5 c0       	rjmp	.+426    	; 0x1980 <put_fat+0x1f4>
    17d6:	88 81       	ld	r24, Y
    17d8:	82 30       	cpi	r24, 0x02	; 2
    17da:	09 f4       	brne	.+2      	; 0x17de <put_fat+0x52>
    17dc:	69 c0       	rjmp	.+210    	; 0x18b0 <put_fat+0x124>
    17de:	83 30       	cpi	r24, 0x03	; 3
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <put_fat+0x58>
    17e2:	8b c0       	rjmp	.+278    	; 0x18fa <put_fat+0x16e>
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	09 f0       	breq	.+2      	; 0x17ea <put_fat+0x5e>
    17e8:	cd c0       	rjmp	.+410    	; 0x1984 <put_fat+0x1f8>
    17ea:	5a 01       	movw	r10, r20
    17ec:	b6 94       	lsr	r11
    17ee:	a7 94       	ror	r10
    17f0:	a4 0e       	add	r10, r20
    17f2:	b5 1e       	adc	r11, r21
    17f4:	c5 01       	movw	r24, r10
    17f6:	89 2f       	mov	r24, r25
    17f8:	99 27       	eor	r25, r25
    17fa:	86 95       	lsr	r24
    17fc:	4e 8d       	ldd	r20, Y+30	; 0x1e
    17fe:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1800:	68 a1       	ldd	r22, Y+32	; 0x20
    1802:	79 a1       	ldd	r23, Y+33	; 0x21
    1804:	48 0f       	add	r20, r24
    1806:	59 1f       	adc	r21, r25
    1808:	61 1d       	adc	r22, r1
    180a:	71 1d       	adc	r23, r1
    180c:	ce 01       	movw	r24, r28
    180e:	df d9       	rcall	.-3138   	; 0xbce <move_window>
    1810:	81 11       	cpse	r24, r1
    1812:	b9 c0       	rjmp	.+370    	; 0x1986 <put_fat+0x1fa>
    1814:	85 01       	movw	r16, r10
    1816:	0f 5f       	subi	r16, 0xFF	; 255
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	c5 01       	movw	r24, r10
    181c:	91 70       	andi	r25, 0x01	; 1
    181e:	46 01       	movw	r8, r12
    1820:	57 01       	movw	r10, r14
    1822:	51 e0       	ldi	r21, 0x01	; 1
    1824:	85 22       	and	r8, r21
    1826:	99 24       	eor	r9, r9
    1828:	aa 24       	eor	r10, r10
    182a:	bb 24       	eor	r11, r11
    182c:	c0 fe       	sbrs	r12, 0
    182e:	0b c0       	rjmp	.+22     	; 0x1846 <put_fat+0xba>
    1830:	fe 01       	movw	r30, r28
    1832:	e8 0f       	add	r30, r24
    1834:	f9 1f       	adc	r31, r25
    1836:	46 a5       	ldd	r20, Z+46	; 0x2e
    1838:	4f 70       	andi	r20, 0x0F	; 15
    183a:	50 e1       	ldi	r21, 0x10	; 16
    183c:	45 9e       	mul	r4, r21
    183e:	90 01       	movw	r18, r0
    1840:	11 24       	eor	r1, r1
    1842:	24 2b       	or	r18, r20
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <put_fat+0xbc>
    1846:	24 2d       	mov	r18, r4
    1848:	fe 01       	movw	r30, r28
    184a:	e8 0f       	add	r30, r24
    184c:	f9 1f       	adc	r31, r25
    184e:	26 a7       	std	Z+46, r18	; 0x2e
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	8c 83       	std	Y+4, r24	; 0x04
    1854:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1856:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1858:	68 a1       	ldd	r22, Y+32	; 0x20
    185a:	79 a1       	ldd	r23, Y+33	; 0x21
    185c:	c8 01       	movw	r24, r16
    185e:	89 2f       	mov	r24, r25
    1860:	99 27       	eor	r25, r25
    1862:	86 95       	lsr	r24
    1864:	48 0f       	add	r20, r24
    1866:	59 1f       	adc	r21, r25
    1868:	61 1d       	adc	r22, r1
    186a:	71 1d       	adc	r23, r1
    186c:	ce 01       	movw	r24, r28
    186e:	af d9       	rcall	.-3234   	; 0xbce <move_window>
    1870:	81 11       	cpse	r24, r1
    1872:	89 c0       	rjmp	.+274    	; 0x1986 <put_fat+0x1fa>
    1874:	11 70       	andi	r17, 0x01	; 1
    1876:	89 28       	or	r8, r9
    1878:	8a 28       	or	r8, r10
    187a:	8b 28       	or	r8, r11
    187c:	49 f0       	breq	.+18     	; 0x1890 <put_fat+0x104>
    187e:	68 94       	set
    1880:	13 f8       	bld	r1, 3
    1882:	76 94       	lsr	r7
    1884:	67 94       	ror	r6
    1886:	57 94       	ror	r5
    1888:	47 94       	ror	r4
    188a:	16 94       	lsr	r1
    188c:	d1 f7       	brne	.-12     	; 0x1882 <put_fat+0xf6>
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <put_fat+0x116>
    1890:	fe 01       	movw	r30, r28
    1892:	e0 0f       	add	r30, r16
    1894:	f1 1f       	adc	r31, r17
    1896:	26 a5       	ldd	r18, Z+46	; 0x2e
    1898:	20 7f       	andi	r18, 0xF0	; 240
    189a:	95 2d       	mov	r25, r5
    189c:	9f 70       	andi	r25, 0x0F	; 15
    189e:	42 2e       	mov	r4, r18
    18a0:	49 2a       	or	r4, r25
    18a2:	fe 01       	movw	r30, r28
    18a4:	e0 0f       	add	r30, r16
    18a6:	f1 1f       	adc	r31, r17
    18a8:	46 a6       	std	Z+46, r4	; 0x2e
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	9c 83       	std	Y+4, r25	; 0x04
    18ae:	6b c0       	rjmp	.+214    	; 0x1986 <put_fat+0x1fa>
    18b0:	45 2f       	mov	r20, r21
    18b2:	56 2f       	mov	r21, r22
    18b4:	67 2f       	mov	r22, r23
    18b6:	77 27       	eor	r23, r23
    18b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18bc:	a8 a1       	ldd	r26, Y+32	; 0x20
    18be:	b9 a1       	ldd	r27, Y+33	; 0x21
    18c0:	48 0f       	add	r20, r24
    18c2:	59 1f       	adc	r21, r25
    18c4:	6a 1f       	adc	r22, r26
    18c6:	7b 1f       	adc	r23, r27
    18c8:	ce 01       	movw	r24, r28
    18ca:	81 d9       	rcall	.-3326   	; 0xbce <move_window>
    18cc:	81 11       	cpse	r24, r1
    18ce:	5b c0       	rjmp	.+182    	; 0x1986 <put_fat+0x1fa>
    18d0:	cc 0c       	add	r12, r12
    18d2:	dd 1c       	adc	r13, r13
    18d4:	ee 1c       	adc	r14, r14
    18d6:	ff 1c       	adc	r15, r15
    18d8:	e8 94       	clt
    18da:	c0 f8       	bld	r12, 0
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	d9 22       	and	r13, r25
    18e0:	ee 24       	eor	r14, r14
    18e2:	ff 24       	eor	r15, r15
    18e4:	fe 01       	movw	r30, r28
    18e6:	ec 0d       	add	r30, r12
    18e8:	fd 1d       	adc	r31, r13
    18ea:	46 a6       	std	Z+46, r4	; 0x2e
    18ec:	fe 01       	movw	r30, r28
    18ee:	ec 0d       	add	r30, r12
    18f0:	fd 1d       	adc	r31, r13
    18f2:	57 a6       	std	Z+47, r5	; 0x2f
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	9c 83       	std	Y+4, r25	; 0x04
    18f8:	46 c0       	rjmp	.+140    	; 0x1986 <put_fat+0x1fa>
    18fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18fe:	a8 a1       	ldd	r26, Y+32	; 0x20
    1900:	b9 a1       	ldd	r27, Y+33	; 0x21
    1902:	68 94       	set
    1904:	16 f8       	bld	r1, 6
    1906:	76 95       	lsr	r23
    1908:	67 95       	ror	r22
    190a:	57 95       	ror	r21
    190c:	47 95       	ror	r20
    190e:	16 94       	lsr	r1
    1910:	d1 f7       	brne	.-12     	; 0x1906 <put_fat+0x17a>
    1912:	48 0f       	add	r20, r24
    1914:	59 1f       	adc	r21, r25
    1916:	6a 1f       	adc	r22, r26
    1918:	7b 1f       	adc	r23, r27
    191a:	ce 01       	movw	r24, r28
    191c:	58 d9       	rcall	.-3408   	; 0xbce <move_window>
    191e:	81 11       	cpse	r24, r1
    1920:	32 c0       	rjmp	.+100    	; 0x1986 <put_fat+0x1fa>
    1922:	cc 0c       	add	r12, r12
    1924:	dd 1c       	adc	r13, r13
    1926:	ee 1c       	adc	r14, r14
    1928:	ff 1c       	adc	r15, r15
    192a:	cc 0c       	add	r12, r12
    192c:	dd 1c       	adc	r13, r13
    192e:	ee 1c       	adc	r14, r14
    1930:	ff 1c       	adc	r15, r15
    1932:	2c ef       	ldi	r18, 0xFC	; 252
    1934:	c2 22       	and	r12, r18
    1936:	21 e0       	ldi	r18, 0x01	; 1
    1938:	d2 22       	and	r13, r18
    193a:	ee 24       	eor	r14, r14
    193c:	ff 24       	eor	r15, r15
    193e:	f6 01       	movw	r30, r12
    1940:	be 96       	adiw	r30, 0x2e	; 46
    1942:	ec 0f       	add	r30, r28
    1944:	fd 1f       	adc	r31, r29
    1946:	43 81       	ldd	r20, Z+3	; 0x03
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	74 2f       	mov	r23, r20
    1950:	66 27       	eor	r22, r22
    1952:	55 27       	eor	r21, r21
    1954:	44 27       	eor	r20, r20
    1956:	de 01       	movw	r26, r28
    1958:	ac 0d       	add	r26, r12
    195a:	bd 1d       	adc	r27, r13
    195c:	44 27       	eor	r20, r20
    195e:	55 27       	eor	r21, r21
    1960:	66 27       	eor	r22, r22
    1962:	70 7f       	andi	r23, 0xF0	; 240
    1964:	44 2a       	or	r4, r20
    1966:	55 2a       	or	r5, r21
    1968:	66 2a       	or	r6, r22
    196a:	77 2a       	or	r7, r23
    196c:	9e 96       	adiw	r26, 0x2e	; 46
    196e:	4c 92       	st	X, r4
    1970:	51 82       	std	Z+1, r5	; 0x01
    1972:	62 82       	std	Z+2, r6	; 0x02
    1974:	73 82       	std	Z+3, r7	; 0x03
    1976:	91 e0       	ldi	r25, 0x01	; 1
    1978:	9c 83       	std	Y+4, r25	; 0x04
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <put_fat+0x1fa>
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <put_fat+0x1fa>
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <put_fat+0x1fa>
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	df 90       	pop	r13
    1994:	cf 90       	pop	r12
    1996:	bf 90       	pop	r11
    1998:	af 90       	pop	r10
    199a:	9f 90       	pop	r9
    199c:	8f 90       	pop	r8
    199e:	7f 90       	pop	r7
    19a0:	6f 90       	pop	r6
    19a2:	5f 90       	pop	r5
    19a4:	4f 90       	pop	r4
    19a6:	08 95       	ret

000019a8 <create_chain>:
    19a8:	2f 92       	push	r2
    19aa:	3f 92       	push	r3
    19ac:	4f 92       	push	r4
    19ae:	5f 92       	push	r5
    19b0:	6f 92       	push	r6
    19b2:	7f 92       	push	r7
    19b4:	8f 92       	push	r8
    19b6:	9f 92       	push	r9
    19b8:	af 92       	push	r10
    19ba:	bf 92       	push	r11
    19bc:	cf 92       	push	r12
    19be:	df 92       	push	r13
    19c0:	ef 92       	push	r14
    19c2:	ff 92       	push	r15
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	ec 01       	movw	r28, r24
    19ce:	2a 01       	movw	r4, r20
    19d0:	3b 01       	movw	r6, r22
    19d2:	41 15       	cp	r20, r1
    19d4:	51 05       	cpc	r21, r1
    19d6:	61 05       	cpc	r22, r1
    19d8:	71 05       	cpc	r23, r1
    19da:	99 f4       	brne	.+38     	; 0x1a02 <create_chain+0x5a>
    19dc:	8a 84       	ldd	r8, Y+10	; 0x0a
    19de:	9b 84       	ldd	r9, Y+11	; 0x0b
    19e0:	ac 84       	ldd	r10, Y+12	; 0x0c
    19e2:	bd 84       	ldd	r11, Y+13	; 0x0d
    19e4:	81 14       	cp	r8, r1
    19e6:	91 04       	cpc	r9, r1
    19e8:	a1 04       	cpc	r10, r1
    19ea:	b1 04       	cpc	r11, r1
    19ec:	29 f1       	breq	.+74     	; 0x1a38 <create_chain+0x90>
    19ee:	8a 89       	ldd	r24, Y+18	; 0x12
    19f0:	9b 89       	ldd	r25, Y+19	; 0x13
    19f2:	ac 89       	ldd	r26, Y+20	; 0x14
    19f4:	bd 89       	ldd	r27, Y+21	; 0x15
    19f6:	88 16       	cp	r8, r24
    19f8:	99 06       	cpc	r9, r25
    19fa:	aa 06       	cpc	r10, r26
    19fc:	bb 06       	cpc	r11, r27
    19fe:	08 f5       	brcc	.+66     	; 0x1a42 <create_chain+0x9a>
    1a00:	24 c0       	rjmp	.+72     	; 0x1a4a <create_chain+0xa2>
    1a02:	c3 dd       	rcall	.-1146   	; 0x158a <get_fat>
    1a04:	62 30       	cpi	r22, 0x02	; 2
    1a06:	71 05       	cpc	r23, r1
    1a08:	81 05       	cpc	r24, r1
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	08 f4       	brcc	.+2      	; 0x1a10 <create_chain+0x68>
    1a0e:	9b c0       	rjmp	.+310    	; 0x1b46 <create_chain+0x19e>
    1a10:	6f 3f       	cpi	r22, 0xFF	; 255
    1a12:	2f ef       	ldi	r18, 0xFF	; 255
    1a14:	72 07       	cpc	r23, r18
    1a16:	82 07       	cpc	r24, r18
    1a18:	92 07       	cpc	r25, r18
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <create_chain+0x76>
    1a1c:	99 c0       	rjmp	.+306    	; 0x1b50 <create_chain+0x1a8>
    1a1e:	0a 89       	ldd	r16, Y+18	; 0x12
    1a20:	1b 89       	ldd	r17, Y+19	; 0x13
    1a22:	2c 89       	ldd	r18, Y+20	; 0x14
    1a24:	3d 89       	ldd	r19, Y+21	; 0x15
    1a26:	60 17       	cp	r22, r16
    1a28:	71 07       	cpc	r23, r17
    1a2a:	82 07       	cpc	r24, r18
    1a2c:	93 07       	cpc	r25, r19
    1a2e:	08 f4       	brcc	.+2      	; 0x1a32 <create_chain+0x8a>
    1a30:	93 c0       	rjmp	.+294    	; 0x1b58 <create_chain+0x1b0>
    1a32:	53 01       	movw	r10, r6
    1a34:	42 01       	movw	r8, r4
    1a36:	09 c0       	rjmp	.+18     	; 0x1a4a <create_chain+0xa2>
    1a38:	81 2c       	mov	r8, r1
    1a3a:	91 2c       	mov	r9, r1
    1a3c:	54 01       	movw	r10, r8
    1a3e:	83 94       	inc	r8
    1a40:	04 c0       	rjmp	.+8      	; 0x1a4a <create_chain+0xa2>
    1a42:	81 2c       	mov	r8, r1
    1a44:	91 2c       	mov	r9, r1
    1a46:	54 01       	movw	r10, r8
    1a48:	83 94       	inc	r8
    1a4a:	75 01       	movw	r14, r10
    1a4c:	64 01       	movw	r12, r8
    1a4e:	68 94       	set
    1a50:	22 24       	eor	r2, r2
    1a52:	21 f8       	bld	r2, 1
    1a54:	31 2c       	mov	r3, r1
    1a56:	00 e0       	ldi	r16, 0x00	; 0
    1a58:	10 e0       	ldi	r17, 0x00	; 0
    1a5a:	8f ef       	ldi	r24, 0xFF	; 255
    1a5c:	c8 1a       	sub	r12, r24
    1a5e:	d8 0a       	sbc	r13, r24
    1a60:	e8 0a       	sbc	r14, r24
    1a62:	f8 0a       	sbc	r15, r24
    1a64:	8a 89       	ldd	r24, Y+18	; 0x12
    1a66:	9b 89       	ldd	r25, Y+19	; 0x13
    1a68:	ac 89       	ldd	r26, Y+20	; 0x14
    1a6a:	bd 89       	ldd	r27, Y+21	; 0x15
    1a6c:	c8 16       	cp	r12, r24
    1a6e:	d9 06       	cpc	r13, r25
    1a70:	ea 06       	cpc	r14, r26
    1a72:	fb 06       	cpc	r15, r27
    1a74:	58 f0       	brcs	.+22     	; 0x1a8c <create_chain+0xe4>
    1a76:	22 e0       	ldi	r18, 0x02	; 2
    1a78:	82 16       	cp	r8, r18
    1a7a:	91 04       	cpc	r9, r1
    1a7c:	a1 04       	cpc	r10, r1
    1a7e:	b1 04       	cpc	r11, r1
    1a80:	08 f4       	brcc	.+2      	; 0x1a84 <create_chain+0xdc>
    1a82:	6e c0       	rjmp	.+220    	; 0x1b60 <create_chain+0x1b8>
    1a84:	c2 2c       	mov	r12, r2
    1a86:	d3 2c       	mov	r13, r3
    1a88:	e0 2e       	mov	r14, r16
    1a8a:	f1 2e       	mov	r15, r17
    1a8c:	b7 01       	movw	r22, r14
    1a8e:	a6 01       	movw	r20, r12
    1a90:	ce 01       	movw	r24, r28
    1a92:	7b dd       	rcall	.-1290   	; 0x158a <get_fat>
    1a94:	61 15       	cp	r22, r1
    1a96:	71 05       	cpc	r23, r1
    1a98:	81 05       	cpc	r24, r1
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	99 f0       	breq	.+38     	; 0x1ac4 <create_chain+0x11c>
    1a9e:	6f 3f       	cpi	r22, 0xFF	; 255
    1aa0:	2f ef       	ldi	r18, 0xFF	; 255
    1aa2:	72 07       	cpc	r23, r18
    1aa4:	82 07       	cpc	r24, r18
    1aa6:	92 07       	cpc	r25, r18
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <create_chain+0x104>
    1aaa:	5f c0       	rjmp	.+190    	; 0x1b6a <create_chain+0x1c2>
    1aac:	61 30       	cpi	r22, 0x01	; 1
    1aae:	71 05       	cpc	r23, r1
    1ab0:	81 05       	cpc	r24, r1
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <create_chain+0x110>
    1ab6:	5d c0       	rjmp	.+186    	; 0x1b72 <create_chain+0x1ca>
    1ab8:	c8 14       	cp	r12, r8
    1aba:	d9 04       	cpc	r13, r9
    1abc:	ea 04       	cpc	r14, r10
    1abe:	fb 04       	cpc	r15, r11
    1ac0:	61 f6       	brne	.-104    	; 0x1a5a <create_chain+0xb2>
    1ac2:	5b c0       	rjmp	.+182    	; 0x1b7a <create_chain+0x1d2>
    1ac4:	8c 2c       	mov	r8, r12
    1ac6:	9d 2c       	mov	r9, r13
    1ac8:	ae 2c       	mov	r10, r14
    1aca:	bf 2c       	mov	r11, r15
    1acc:	0f ef       	ldi	r16, 0xFF	; 255
    1ace:	1f ef       	ldi	r17, 0xFF	; 255
    1ad0:	2f ef       	ldi	r18, 0xFF	; 255
    1ad2:	3f e0       	ldi	r19, 0x0F	; 15
    1ad4:	b7 01       	movw	r22, r14
    1ad6:	a6 01       	movw	r20, r12
    1ad8:	ce 01       	movw	r24, r28
    1ada:	58 de       	rcall	.-848    	; 0x178c <put_fat>
    1adc:	81 11       	cpse	r24, r1
    1ade:	2c c0       	rjmp	.+88     	; 0x1b38 <create_chain+0x190>
    1ae0:	41 14       	cp	r4, r1
    1ae2:	51 04       	cpc	r5, r1
    1ae4:	61 04       	cpc	r6, r1
    1ae6:	71 04       	cpc	r7, r1
    1ae8:	51 f0       	breq	.+20     	; 0x1afe <create_chain+0x156>
    1aea:	0c 2d       	mov	r16, r12
    1aec:	1d 2d       	mov	r17, r13
    1aee:	2e 2d       	mov	r18, r14
    1af0:	3f 2d       	mov	r19, r15
    1af2:	b3 01       	movw	r22, r6
    1af4:	a2 01       	movw	r20, r4
    1af6:	ce 01       	movw	r24, r28
    1af8:	49 de       	rcall	.-878    	; 0x178c <put_fat>
    1afa:	81 11       	cpse	r24, r1
    1afc:	1d c0       	rjmp	.+58     	; 0x1b38 <create_chain+0x190>
    1afe:	8a 86       	std	Y+10, r8	; 0x0a
    1b00:	9b 86       	std	Y+11, r9	; 0x0b
    1b02:	ac 86       	std	Y+12, r10	; 0x0c
    1b04:	bd 86       	std	Y+13, r11	; 0x0d
    1b06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b0a:	a8 89       	ldd	r26, Y+16	; 0x10
    1b0c:	b9 89       	ldd	r27, Y+17	; 0x11
    1b0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1b10:	2f ef       	ldi	r18, 0xFF	; 255
    1b12:	92 07       	cpc	r25, r18
    1b14:	a2 07       	cpc	r26, r18
    1b16:	b2 07       	cpc	r27, r18
    1b18:	a9 f1       	breq	.+106    	; 0x1b84 <create_chain+0x1dc>
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	a1 09       	sbc	r26, r1
    1b1e:	b1 09       	sbc	r27, r1
    1b20:	8e 87       	std	Y+14, r24	; 0x0e
    1b22:	9f 87       	std	Y+15, r25	; 0x0f
    1b24:	a8 8b       	std	Y+16, r26	; 0x10
    1b26:	b9 8b       	std	Y+17, r27	; 0x11
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	81 60       	ori	r24, 0x01	; 1
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	4c 2d       	mov	r20, r12
    1b30:	3d 2d       	mov	r19, r13
    1b32:	2e 2d       	mov	r18, r14
    1b34:	9f 2d       	mov	r25, r15
    1b36:	2f c0       	rjmp	.+94     	; 0x1b96 <create_chain+0x1ee>
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	49 f5       	brne	.+82     	; 0x1b8e <create_chain+0x1e6>
    1b3c:	4f ef       	ldi	r20, 0xFF	; 255
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	2f ef       	ldi	r18, 0xFF	; 255
    1b42:	9f ef       	ldi	r25, 0xFF	; 255
    1b44:	28 c0       	rjmp	.+80     	; 0x1b96 <create_chain+0x1ee>
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	23 c0       	rjmp	.+70     	; 0x1b96 <create_chain+0x1ee>
    1b50:	46 2f       	mov	r20, r22
    1b52:	37 2f       	mov	r19, r23
    1b54:	28 2f       	mov	r18, r24
    1b56:	1f c0       	rjmp	.+62     	; 0x1b96 <create_chain+0x1ee>
    1b58:	46 2f       	mov	r20, r22
    1b5a:	37 2f       	mov	r19, r23
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	1b c0       	rjmp	.+54     	; 0x1b96 <create_chain+0x1ee>
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	16 c0       	rjmp	.+44     	; 0x1b96 <create_chain+0x1ee>
    1b6a:	46 2f       	mov	r20, r22
    1b6c:	37 2f       	mov	r19, r23
    1b6e:	28 2f       	mov	r18, r24
    1b70:	12 c0       	rjmp	.+36     	; 0x1b96 <create_chain+0x1ee>
    1b72:	46 2f       	mov	r20, r22
    1b74:	37 2f       	mov	r19, r23
    1b76:	28 2f       	mov	r18, r24
    1b78:	0e c0       	rjmp	.+28     	; 0x1b96 <create_chain+0x1ee>
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	09 c0       	rjmp	.+18     	; 0x1b96 <create_chain+0x1ee>
    1b84:	4c 2d       	mov	r20, r12
    1b86:	3d 2d       	mov	r19, r13
    1b88:	2e 2d       	mov	r18, r14
    1b8a:	9f 2d       	mov	r25, r15
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <create_chain+0x1ee>
    1b8e:	41 e0       	ldi	r20, 0x01	; 1
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	64 2f       	mov	r22, r20
    1b98:	73 2f       	mov	r23, r19
    1b9a:	82 2f       	mov	r24, r18
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	cf 90       	pop	r12
    1bac:	bf 90       	pop	r11
    1bae:	af 90       	pop	r10
    1bb0:	9f 90       	pop	r9
    1bb2:	8f 90       	pop	r8
    1bb4:	7f 90       	pop	r7
    1bb6:	6f 90       	pop	r6
    1bb8:	5f 90       	pop	r5
    1bba:	4f 90       	pop	r4
    1bbc:	3f 90       	pop	r3
    1bbe:	2f 90       	pop	r2
    1bc0:	08 95       	ret

00001bc2 <f_mount>:
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <f_mount+0x8>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <f_mount+0xa>
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <f_mount+0xc>
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	9c 83       	std	Y+4, r25	; 0x04
    1bd4:	8b 83       	std	Y+3, r24	; 0x03
    1bd6:	7e 83       	std	Y+6, r23	; 0x06
    1bd8:	6d 83       	std	Y+5, r22	; 0x05
    1bda:	14 2f       	mov	r17, r20
    1bdc:	7a 83       	std	Y+2, r23	; 0x02
    1bde:	69 83       	std	Y+1, r22	; 0x01
    1be0:	ce 01       	movw	r24, r28
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	0e 94 4a 05 	call	0xa94	; 0xa94 <get_ldnumber>
    1be8:	99 23       	and	r25, r25
    1bea:	2c f1       	brlt	.+74     	; 0x1c36 <f_mount+0x74>
    1bec:	fc 01       	movw	r30, r24
    1bee:	ee 0f       	add	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	e3 59       	subi	r30, 0x93	; 147
    1bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf6:	01 90       	ld	r0, Z+
    1bf8:	f0 81       	ld	r31, Z
    1bfa:	e0 2d       	mov	r30, r0
    1bfc:	30 97       	sbiw	r30, 0x00	; 0
    1bfe:	09 f0       	breq	.+2      	; 0x1c02 <f_mount+0x40>
    1c00:	10 82       	st	Z, r1
    1c02:	eb 81       	ldd	r30, Y+3	; 0x03
    1c04:	fc 81       	ldd	r31, Y+4	; 0x04
    1c06:	30 97       	sbiw	r30, 0x00	; 0
    1c08:	e1 f0       	breq	.+56     	; 0x1c42 <f_mount+0x80>
    1c0a:	10 82       	st	Z, r1
    1c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c10:	fc 01       	movw	r30, r24
    1c12:	ee 0f       	add	r30, r30
    1c14:	ff 1f       	adc	r31, r31
    1c16:	e3 59       	subi	r30, 0x93	; 147
    1c18:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1a:	31 83       	std	Z+1, r19	; 0x01
    1c1c:	20 83       	st	Z, r18
    1c1e:	23 2b       	or	r18, r19
    1c20:	61 f0       	breq	.+24     	; 0x1c3a <f_mount+0x78>
    1c22:	11 30       	cpi	r17, 0x01	; 1
    1c24:	61 f4       	brne	.+24     	; 0x1c3e <f_mount+0x7c>
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	be 01       	movw	r22, r28
    1c2a:	6b 5f       	subi	r22, 0xFB	; 251
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	ce 01       	movw	r24, r28
    1c30:	03 96       	adiw	r24, 0x03	; 3
    1c32:	98 d8       	rcall	.-3792   	; 0xd64 <find_volume>
    1c34:	0e c0       	rjmp	.+28     	; 0x1c52 <f_mount+0x90>
    1c36:	8b e0       	ldi	r24, 0x0B	; 11
    1c38:	0c c0       	rjmp	.+24     	; 0x1c52 <f_mount+0x90>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	0a c0       	rjmp	.+20     	; 0x1c52 <f_mount+0x90>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	08 c0       	rjmp	.+16     	; 0x1c52 <f_mount+0x90>
    1c42:	fc 01       	movw	r30, r24
    1c44:	ee 0f       	add	r30, r30
    1c46:	ff 1f       	adc	r31, r31
    1c48:	e3 59       	subi	r30, 0x93	; 147
    1c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4c:	11 82       	std	Z+1, r1	; 0x01
    1c4e:	10 82       	st	Z, r1
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	26 96       	adiw	r28, 0x06	; 6
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	08 95       	ret

00001c66 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    1c66:	2f 92       	push	r2
    1c68:	3f 92       	push	r3
    1c6a:	4f 92       	push	r4
    1c6c:	5f 92       	push	r5
    1c6e:	6f 92       	push	r6
    1c70:	7f 92       	push	r7
    1c72:	8f 92       	push	r8
    1c74:	9f 92       	push	r9
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <f_write+0x26>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <f_write+0x28>
    1c8e:	1f 92       	push	r1
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	9d 83       	std	Y+5, r25	; 0x05
    1c96:	8c 83       	std	Y+4, r24	; 0x04
    1c98:	5b 01       	movw	r10, r22
    1c9a:	7a 01       	movw	r14, r20
    1c9c:	69 01       	movw	r12, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    1c9e:	d9 01       	movw	r26, r18
    1ca0:	1d 92       	st	X+, r1
    1ca2:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    1ca4:	3b d8       	rcall	.-3978   	; 0xd1c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	b3 c1       	rjmp	.+870    	; 0x2010 <f_write+0x3aa>
	if (fp->err)							/* Check error */
    1caa:	ec 81       	ldd	r30, Y+4	; 0x04
    1cac:	fd 81       	ldd	r31, Y+5	; 0x05
    1cae:	85 81       	ldd	r24, Z+5	; 0x05
    1cb0:	81 11       	cpse	r24, r1
    1cb2:	ae c1       	rjmp	.+860    	; 0x2010 <f_write+0x3aa>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    1cb4:	84 81       	ldd	r24, Z+4	; 0x04
    1cb6:	81 ff       	sbrs	r24, 1
    1cb8:	aa c1       	rjmp	.+852    	; 0x200e <f_write+0x3a8>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    1cba:	86 81       	ldd	r24, Z+6	; 0x06
    1cbc:	97 81       	ldd	r25, Z+7	; 0x07
    1cbe:	a0 85       	ldd	r26, Z+8	; 0x08
    1cc0:	b1 85       	ldd	r27, Z+9	; 0x09
    1cc2:	ac 01       	movw	r20, r24
    1cc4:	bd 01       	movw	r22, r26
    1cc6:	4e 0d       	add	r20, r14
    1cc8:	5f 1d       	adc	r21, r15
    1cca:	61 1d       	adc	r22, r1
    1ccc:	71 1d       	adc	r23, r1
    1cce:	48 17       	cp	r20, r24
    1cd0:	59 07       	cpc	r21, r25
    1cd2:	6a 07       	cpc	r22, r26
    1cd4:	7b 07       	cpc	r23, r27
    1cd6:	08 f4       	brcc	.+2      	; 0x1cda <f_write+0x74>
    1cd8:	7d c1       	rjmp	.+762    	; 0x1fd4 <f_write+0x36e>

	for ( ;  btw;							/* Repeat until all data written */
    1cda:	e1 14       	cp	r14, r1
    1cdc:	f1 04       	cpc	r15, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <f_write+0x7c>
    1ce0:	79 c1       	rjmp	.+754    	; 0x1fd4 <f_write+0x36e>
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    1ce2:	b0 96       	adiw	r30, 0x20	; 32
    1ce4:	fb 83       	std	Y+3, r31	; 0x03
    1ce6:	ea 83       	std	Y+2, r30	; 0x02
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    1ce8:	ec 81       	ldd	r30, Y+4	; 0x04
    1cea:	fd 81       	ldd	r31, Y+5	; 0x05
    1cec:	86 81       	ldd	r24, Z+6	; 0x06
    1cee:	97 81       	ldd	r25, Z+7	; 0x07
    1cf0:	a0 85       	ldd	r26, Z+8	; 0x08
    1cf2:	b1 85       	ldd	r27, Z+9	; 0x09
    1cf4:	ac 01       	movw	r20, r24
    1cf6:	bd 01       	movw	r22, r26
    1cf8:	51 70       	andi	r21, 0x01	; 1
    1cfa:	66 27       	eor	r22, r22
    1cfc:	77 27       	eor	r23, r23
    1cfe:	45 2b       	or	r20, r21
    1d00:	46 2b       	or	r20, r22
    1d02:	47 2b       	or	r20, r23
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <f_write+0xa2>
    1d06:	28 c1       	rjmp	.+592    	; 0x1f58 <f_write+0x2f2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1d08:	80 80       	ld	r8, Z
    1d0a:	91 80       	ldd	r9, Z+1	; 0x01
    1d0c:	f4 01       	movw	r30, r8
    1d0e:	22 81       	ldd	r18, Z+2	; 0x02
    1d10:	21 50       	subi	r18, 0x01	; 1
    1d12:	ac 01       	movw	r20, r24
    1d14:	bd 01       	movw	r22, r26
    1d16:	03 2e       	mov	r0, r19
    1d18:	39 e0       	ldi	r19, 0x09	; 9
    1d1a:	76 95       	lsr	r23
    1d1c:	67 95       	ror	r22
    1d1e:	57 95       	ror	r21
    1d20:	47 95       	ror	r20
    1d22:	3a 95       	dec	r19
    1d24:	d1 f7       	brne	.-12     	; 0x1d1a <f_write+0xb4>
    1d26:	30 2d       	mov	r19, r0
    1d28:	24 23       	and	r18, r20
    1d2a:	29 83       	std	Y+1, r18	; 0x01
			if (!csect) {					/* On the cluster boundary? */
    1d2c:	21 11       	cpse	r18, r1
    1d2e:	52 c0       	rjmp	.+164    	; 0x1dd4 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    1d30:	89 2b       	or	r24, r25
    1d32:	8a 2b       	or	r24, r26
    1d34:	8b 2b       	or	r24, r27
    1d36:	99 f4       	brne	.+38     	; 0x1d5e <f_write+0xf8>
					clst = fp->sclust;		/* Follow from the origin */
    1d38:	ac 81       	ldd	r26, Y+4	; 0x04
    1d3a:	bd 81       	ldd	r27, Y+5	; 0x05
    1d3c:	1e 96       	adiw	r26, 0x0e	; 14
    1d3e:	6d 91       	ld	r22, X+
    1d40:	7d 91       	ld	r23, X+
    1d42:	8d 91       	ld	r24, X+
    1d44:	9c 91       	ld	r25, X
    1d46:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)			/* When no cluster is allocated, */
    1d48:	61 15       	cp	r22, r1
    1d4a:	71 05       	cpc	r23, r1
    1d4c:	81 05       	cpc	r24, r1
    1d4e:	91 05       	cpc	r25, r1
    1d50:	a1 f4       	brne	.+40     	; 0x1d7a <f_write+0x114>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	ba 01       	movw	r22, r20
    1d58:	c4 01       	movw	r24, r8
    1d5a:	26 de       	rcall	.-948    	; 0x19a8 <create_chain>
    1d5c:	08 c0       	rjmp	.+16     	; 0x1d6e <f_write+0x108>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    1d5e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d60:	fd 81       	ldd	r31, Y+5	; 0x05
    1d62:	42 89       	ldd	r20, Z+18	; 0x12
    1d64:	53 89       	ldd	r21, Z+19	; 0x13
    1d66:	64 89       	ldd	r22, Z+20	; 0x14
    1d68:	75 89       	ldd	r23, Z+21	; 0x15
    1d6a:	c4 01       	movw	r24, r8
    1d6c:	1d de       	rcall	.-966    	; 0x19a8 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    1d6e:	61 15       	cp	r22, r1
    1d70:	71 05       	cpc	r23, r1
    1d72:	81 05       	cpc	r24, r1
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <f_write+0x114>
    1d78:	2d c1       	rjmp	.+602    	; 0x1fd4 <f_write+0x36e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1d7a:	61 30       	cpi	r22, 0x01	; 1
    1d7c:	71 05       	cpc	r23, r1
    1d7e:	81 05       	cpc	r24, r1
    1d80:	91 05       	cpc	r25, r1
    1d82:	31 f4       	brne	.+12     	; 0x1d90 <f_write+0x12a>
    1d84:	82 e0       	ldi	r24, 0x02	; 2
    1d86:	ac 81       	ldd	r26, Y+4	; 0x04
    1d88:	bd 81       	ldd	r27, Y+5	; 0x05
    1d8a:	15 96       	adiw	r26, 0x05	; 5
    1d8c:	8c 93       	st	X, r24
    1d8e:	40 c1       	rjmp	.+640    	; 0x2010 <f_write+0x3aa>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1d90:	6f 3f       	cpi	r22, 0xFF	; 255
    1d92:	bf ef       	ldi	r27, 0xFF	; 255
    1d94:	7b 07       	cpc	r23, r27
    1d96:	8b 07       	cpc	r24, r27
    1d98:	9b 07       	cpc	r25, r27
    1d9a:	29 f4       	brne	.+10     	; 0x1da6 <f_write+0x140>
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	ec 81       	ldd	r30, Y+4	; 0x04
    1da0:	fd 81       	ldd	r31, Y+5	; 0x05
    1da2:	85 83       	std	Z+5, r24	; 0x05
    1da4:	35 c1       	rjmp	.+618    	; 0x2010 <f_write+0x3aa>
				fp->clust = clst;			/* Update current cluster */
    1da6:	ac 81       	ldd	r26, Y+4	; 0x04
    1da8:	bd 81       	ldd	r27, Y+5	; 0x05
    1daa:	52 96       	adiw	r26, 0x12	; 18
    1dac:	6d 93       	st	X+, r22
    1dae:	7d 93       	st	X+, r23
    1db0:	8d 93       	st	X+, r24
    1db2:	9c 93       	st	X, r25
    1db4:	55 97       	sbiw	r26, 0x15	; 21
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    1db6:	1e 96       	adiw	r26, 0x0e	; 14
    1db8:	4d 90       	ld	r4, X+
    1dba:	5d 90       	ld	r5, X+
    1dbc:	6d 90       	ld	r6, X+
    1dbe:	7c 90       	ld	r7, X
    1dc0:	51 97       	sbiw	r26, 0x11	; 17
    1dc2:	45 28       	or	r4, r5
    1dc4:	46 28       	or	r4, r6
    1dc6:	47 28       	or	r4, r7
    1dc8:	29 f4       	brne	.+10     	; 0x1dd4 <f_write+0x16e>
    1dca:	fd 01       	movw	r30, r26
    1dcc:	66 87       	std	Z+14, r22	; 0x0e
    1dce:	77 87       	std	Z+15, r23	; 0x0f
    1dd0:	80 8b       	std	Z+16, r24	; 0x10
    1dd2:	91 8b       	std	Z+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    1dd4:	ac 81       	ldd	r26, Y+4	; 0x04
    1dd6:	bd 81       	ldd	r27, Y+5	; 0x05
    1dd8:	14 96       	adiw	r26, 0x04	; 4
    1dda:	8c 91       	ld	r24, X
    1ddc:	14 97       	sbiw	r26, 0x04	; 4
    1dde:	86 ff       	sbrs	r24, 6
    1de0:	1e c0       	rjmp	.+60     	; 0x1e1e <f_write+0x1b8>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    1de2:	56 96       	adiw	r26, 0x16	; 22
    1de4:	2d 91       	ld	r18, X+
    1de6:	3d 91       	ld	r19, X+
    1de8:	4d 91       	ld	r20, X+
    1dea:	5c 91       	ld	r21, X
    1dec:	59 97       	sbiw	r26, 0x19	; 25
    1dee:	ed 91       	ld	r30, X+
    1df0:	fc 91       	ld	r31, X
    1df2:	01 e0       	ldi	r16, 0x01	; 1
    1df4:	10 e0       	ldi	r17, 0x00	; 0
    1df6:	6a 81       	ldd	r22, Y+2	; 0x02
    1df8:	7b 81       	ldd	r23, Y+3	; 0x03
    1dfa:	81 81       	ldd	r24, Z+1	; 0x01
    1dfc:	0e 94 12 04 	call	0x824	; 0x824 <disk_write>
    1e00:	88 23       	and	r24, r24
    1e02:	29 f0       	breq	.+10     	; 0x1e0e <f_write+0x1a8>
					ABORT(fp->fs, FR_DISK_ERR);
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	ec 81       	ldd	r30, Y+4	; 0x04
    1e08:	fd 81       	ldd	r31, Y+5	; 0x05
    1e0a:	85 83       	std	Z+5, r24	; 0x05
    1e0c:	01 c1       	rjmp	.+514    	; 0x2010 <f_write+0x3aa>
				fp->flag &= ~FA__DIRTY;
    1e0e:	ac 81       	ldd	r26, Y+4	; 0x04
    1e10:	bd 81       	ldd	r27, Y+5	; 0x05
    1e12:	14 96       	adiw	r26, 0x04	; 4
    1e14:	8c 91       	ld	r24, X
    1e16:	14 97       	sbiw	r26, 0x04	; 4
    1e18:	8f 7b       	andi	r24, 0xBF	; 191
    1e1a:	14 96       	adiw	r26, 0x04	; 4
    1e1c:	8c 93       	st	X, r24
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1e1e:	ec 81       	ldd	r30, Y+4	; 0x04
    1e20:	fd 81       	ldd	r31, Y+5	; 0x05
    1e22:	20 80       	ld	r2, Z
    1e24:	31 80       	ldd	r3, Z+1	; 0x01
    1e26:	42 89       	ldd	r20, Z+18	; 0x12
    1e28:	53 89       	ldd	r21, Z+19	; 0x13
    1e2a:	64 89       	ldd	r22, Z+20	; 0x14
    1e2c:	75 89       	ldd	r23, Z+21	; 0x15
    1e2e:	c1 01       	movw	r24, r2
    1e30:	7e db       	rcall	.-2308   	; 0x152e <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1e32:	61 15       	cp	r22, r1
    1e34:	71 05       	cpc	r23, r1
    1e36:	81 05       	cpc	r24, r1
    1e38:	91 05       	cpc	r25, r1
    1e3a:	31 f4       	brne	.+12     	; 0x1e48 <f_write+0x1e2>
    1e3c:	82 e0       	ldi	r24, 0x02	; 2
    1e3e:	ac 81       	ldd	r26, Y+4	; 0x04
    1e40:	bd 81       	ldd	r27, Y+5	; 0x05
    1e42:	15 96       	adiw	r26, 0x05	; 5
    1e44:	8c 93       	st	X, r24
    1e46:	e4 c0       	rjmp	.+456    	; 0x2010 <f_write+0x3aa>
			sect += csect;
    1e48:	2b 01       	movw	r4, r22
    1e4a:	3c 01       	movw	r6, r24
    1e4c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e4e:	4b 0e       	add	r4, r27
    1e50:	51 1c       	adc	r5, r1
    1e52:	61 1c       	adc	r6, r1
    1e54:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    1e56:	47 01       	movw	r8, r14
    1e58:	89 2c       	mov	r8, r9
    1e5a:	99 24       	eor	r9, r9
    1e5c:	86 94       	lsr	r8
			if (cc) {						/* Write maximum contiguous sectors directly */
    1e5e:	81 14       	cp	r8, r1
    1e60:	91 04       	cpc	r9, r1
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <f_write+0x200>
    1e64:	47 c0       	rjmp	.+142    	; 0x1ef4 <f_write+0x28e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1e66:	f1 01       	movw	r30, r2
    1e68:	42 81       	ldd	r20, Z+2	; 0x02
    1e6a:	24 2f       	mov	r18, r20
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	c4 01       	movw	r24, r8
    1e70:	8b 0f       	add	r24, r27
    1e72:	91 1d       	adc	r25, r1
    1e74:	28 17       	cp	r18, r24
    1e76:	39 07       	cpc	r19, r25
    1e78:	18 f4       	brcc	.+6      	; 0x1e80 <f_write+0x21a>
					cc = fp->fs->csize - csect;
    1e7a:	49 01       	movw	r8, r18
    1e7c:	8b 1a       	sub	r8, r27
    1e7e:	91 08       	sbc	r9, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    1e80:	84 01       	movw	r16, r8
    1e82:	a3 01       	movw	r20, r6
    1e84:	92 01       	movw	r18, r4
    1e86:	b5 01       	movw	r22, r10
    1e88:	d1 01       	movw	r26, r2
    1e8a:	11 96       	adiw	r26, 0x01	; 1
    1e8c:	8c 91       	ld	r24, X
    1e8e:	0e 94 12 04 	call	0x824	; 0x824 <disk_write>
    1e92:	88 23       	and	r24, r24
    1e94:	29 f0       	breq	.+10     	; 0x1ea0 <f_write+0x23a>
					ABORT(fp->fs, FR_DISK_ERR);
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	ec 81       	ldd	r30, Y+4	; 0x04
    1e9a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e9c:	85 83       	std	Z+5, r24	; 0x05
    1e9e:	b8 c0       	rjmp	.+368    	; 0x2010 <f_write+0x3aa>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    1ea0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ea2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ea4:	86 89       	ldd	r24, Z+22	; 0x16
    1ea6:	97 89       	ldd	r25, Z+23	; 0x17
    1ea8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1eaa:	b1 8d       	ldd	r27, Z+25	; 0x19
    1eac:	84 19       	sub	r24, r4
    1eae:	95 09       	sbc	r25, r5
    1eb0:	a6 09       	sbc	r26, r6
    1eb2:	b7 09       	sbc	r27, r7
    1eb4:	a4 01       	movw	r20, r8
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	70 e0       	ldi	r23, 0x00	; 0
    1eba:	84 17       	cp	r24, r20
    1ebc:	95 07       	cpc	r25, r21
    1ebe:	a6 07       	cpc	r26, r22
    1ec0:	b7 07       	cpc	r27, r23
    1ec2:	a0 f4       	brcc	.+40     	; 0x1eec <f_write+0x286>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    1ec4:	98 2f       	mov	r25, r24
    1ec6:	88 27       	eor	r24, r24
    1ec8:	99 0f       	add	r25, r25
    1eca:	b5 01       	movw	r22, r10
    1ecc:	68 0f       	add	r22, r24
    1ece:	79 1f       	adc	r23, r25
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	52 e0       	ldi	r21, 0x02	; 2
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	0e 94 31 05 	call	0xa62	; 0xa62 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
    1edc:	ac 81       	ldd	r26, Y+4	; 0x04
    1ede:	bd 81       	ldd	r27, Y+5	; 0x05
    1ee0:	14 96       	adiw	r26, 0x04	; 4
    1ee2:	8c 91       	ld	r24, X
    1ee4:	14 97       	sbiw	r26, 0x04	; 4
    1ee6:	8f 7b       	andi	r24, 0xBF	; 191
    1ee8:	14 96       	adiw	r26, 0x04	; 4
    1eea:	8c 93       	st	X, r24
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    1eec:	98 2c       	mov	r9, r8
    1eee:	88 24       	eor	r8, r8
    1ef0:	99 0c       	add	r9, r9
				continue;
    1ef2:	54 c0       	rjmp	.+168    	; 0x1f9c <f_write+0x336>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    1ef4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ef6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ef8:	86 89       	ldd	r24, Z+22	; 0x16
    1efa:	97 89       	ldd	r25, Z+23	; 0x17
    1efc:	a0 8d       	ldd	r26, Z+24	; 0x18
    1efe:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f00:	84 15       	cp	r24, r4
    1f02:	95 05       	cpc	r25, r5
    1f04:	a6 05       	cpc	r26, r6
    1f06:	b7 05       	cpc	r27, r7
    1f08:	f9 f0       	breq	.+62     	; 0x1f48 <f_write+0x2e2>
				if (fp->fptr < fp->fsize &&
    1f0a:	46 81       	ldd	r20, Z+6	; 0x06
    1f0c:	57 81       	ldd	r21, Z+7	; 0x07
    1f0e:	60 85       	ldd	r22, Z+8	; 0x08
    1f10:	71 85       	ldd	r23, Z+9	; 0x09
    1f12:	82 85       	ldd	r24, Z+10	; 0x0a
    1f14:	93 85       	ldd	r25, Z+11	; 0x0b
    1f16:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f18:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f1a:	48 17       	cp	r20, r24
    1f1c:	59 07       	cpc	r21, r25
    1f1e:	6a 07       	cpc	r22, r26
    1f20:	7b 07       	cpc	r23, r27
    1f22:	90 f4       	brcc	.+36     	; 0x1f48 <f_write+0x2e2>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    1f24:	01 e0       	ldi	r16, 0x01	; 1
    1f26:	10 e0       	ldi	r17, 0x00	; 0
    1f28:	a3 01       	movw	r20, r6
    1f2a:	92 01       	movw	r18, r4
    1f2c:	6a 81       	ldd	r22, Y+2	; 0x02
    1f2e:	7b 81       	ldd	r23, Y+3	; 0x03
    1f30:	d1 01       	movw	r26, r2
    1f32:	11 96       	adiw	r26, 0x01	; 1
    1f34:	8c 91       	ld	r24, X
    1f36:	0e 94 c4 03 	call	0x788	; 0x788 <disk_read>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
    1f3a:	88 23       	and	r24, r24
    1f3c:	29 f0       	breq	.+10     	; 0x1f48 <f_write+0x2e2>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	ec 81       	ldd	r30, Y+4	; 0x04
    1f42:	fd 81       	ldd	r31, Y+5	; 0x05
    1f44:	85 83       	std	Z+5, r24	; 0x05
    1f46:	64 c0       	rjmp	.+200    	; 0x2010 <f_write+0x3aa>
			}
#endif
			fp->dsect = sect;
    1f48:	ac 81       	ldd	r26, Y+4	; 0x04
    1f4a:	bd 81       	ldd	r27, Y+5	; 0x05
    1f4c:	56 96       	adiw	r26, 0x16	; 22
    1f4e:	4d 92       	st	X+, r4
    1f50:	5d 92       	st	X+, r5
    1f52:	6d 92       	st	X+, r6
    1f54:	7c 92       	st	X, r7
    1f56:	59 97       	sbiw	r26, 0x19	; 25
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    1f58:	ec 81       	ldd	r30, Y+4	; 0x04
    1f5a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f5c:	86 81       	ldd	r24, Z+6	; 0x06
    1f5e:	97 81       	ldd	r25, Z+7	; 0x07
    1f60:	a0 85       	ldd	r26, Z+8	; 0x08
    1f62:	b1 85       	ldd	r27, Z+9	; 0x09
    1f64:	9c 01       	movw	r18, r24
    1f66:	31 70       	andi	r19, 0x01	; 1
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	52 e0       	ldi	r21, 0x02	; 2
    1f6c:	42 1b       	sub	r20, r18
    1f6e:	53 0b       	sbc	r21, r19
    1f70:	47 01       	movw	r8, r14
    1f72:	4e 15       	cp	r20, r14
    1f74:	5f 05       	cpc	r21, r15
    1f76:	08 f4       	brcc	.+2      	; 0x1f7a <f_write+0x314>
    1f78:	4a 01       	movw	r8, r20
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    1f7a:	91 70       	andi	r25, 0x01	; 1
    1f7c:	aa 27       	eor	r26, r26
    1f7e:	bb 27       	eor	r27, r27
    1f80:	80 96       	adiw	r24, 0x20	; 32
    1f82:	a4 01       	movw	r20, r8
    1f84:	b5 01       	movw	r22, r10
    1f86:	ac 81       	ldd	r26, Y+4	; 0x04
    1f88:	bd 81       	ldd	r27, Y+5	; 0x05
    1f8a:	8a 0f       	add	r24, r26
    1f8c:	9b 1f       	adc	r25, r27
    1f8e:	0e 94 31 05 	call	0xa62	; 0xa62 <mem_cpy>
		fp->flag |= FA__DIRTY;
    1f92:	ec 81       	ldd	r30, Y+4	; 0x04
    1f94:	fd 81       	ldd	r31, Y+5	; 0x05
    1f96:	84 81       	ldd	r24, Z+4	; 0x04
    1f98:	80 64       	ori	r24, 0x40	; 64
    1f9a:	84 83       	std	Z+4, r24	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    1f9c:	a8 0c       	add	r10, r8
    1f9e:	b9 1c       	adc	r11, r9
    1fa0:	ec 81       	ldd	r30, Y+4	; 0x04
    1fa2:	fd 81       	ldd	r31, Y+5	; 0x05
    1fa4:	86 81       	ldd	r24, Z+6	; 0x06
    1fa6:	97 81       	ldd	r25, Z+7	; 0x07
    1fa8:	a0 85       	ldd	r26, Z+8	; 0x08
    1faa:	b1 85       	ldd	r27, Z+9	; 0x09
    1fac:	88 0d       	add	r24, r8
    1fae:	99 1d       	adc	r25, r9
    1fb0:	a1 1d       	adc	r26, r1
    1fb2:	b1 1d       	adc	r27, r1
    1fb4:	86 83       	std	Z+6, r24	; 0x06
    1fb6:	97 83       	std	Z+7, r25	; 0x07
    1fb8:	a0 87       	std	Z+8, r26	; 0x08
    1fba:	b1 87       	std	Z+9, r27	; 0x09
    1fbc:	d6 01       	movw	r26, r12
    1fbe:	8d 91       	ld	r24, X+
    1fc0:	9c 91       	ld	r25, X
    1fc2:	11 97       	sbiw	r26, 0x01	; 1
    1fc4:	88 0d       	add	r24, r8
    1fc6:	99 1d       	adc	r25, r9
    1fc8:	8d 93       	st	X+, r24
    1fca:	9c 93       	st	X, r25
    1fcc:	e8 18       	sub	r14, r8
    1fce:	f9 08       	sbc	r15, r9
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <f_write+0x36e>
    1fd2:	8a ce       	rjmp	.-748    	; 0x1ce8 <f_write+0x82>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    1fd4:	ec 81       	ldd	r30, Y+4	; 0x04
    1fd6:	fd 81       	ldd	r31, Y+5	; 0x05
    1fd8:	86 81       	ldd	r24, Z+6	; 0x06
    1fda:	97 81       	ldd	r25, Z+7	; 0x07
    1fdc:	a0 85       	ldd	r26, Z+8	; 0x08
    1fde:	b1 85       	ldd	r27, Z+9	; 0x09
    1fe0:	42 85       	ldd	r20, Z+10	; 0x0a
    1fe2:	53 85       	ldd	r21, Z+11	; 0x0b
    1fe4:	64 85       	ldd	r22, Z+12	; 0x0c
    1fe6:	75 85       	ldd	r23, Z+13	; 0x0d
    1fe8:	48 17       	cp	r20, r24
    1fea:	59 07       	cpc	r21, r25
    1fec:	6a 07       	cpc	r22, r26
    1fee:	7b 07       	cpc	r23, r27
    1ff0:	20 f4       	brcc	.+8      	; 0x1ffa <f_write+0x394>
    1ff2:	82 87       	std	Z+10, r24	; 0x0a
    1ff4:	93 87       	std	Z+11, r25	; 0x0b
    1ff6:	a4 87       	std	Z+12, r26	; 0x0c
    1ff8:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    1ffa:	ac 81       	ldd	r26, Y+4	; 0x04
    1ffc:	bd 81       	ldd	r27, Y+5	; 0x05
    1ffe:	14 96       	adiw	r26, 0x04	; 4
    2000:	8c 91       	ld	r24, X
    2002:	14 97       	sbiw	r26, 0x04	; 4
    2004:	80 62       	ori	r24, 0x20	; 32
    2006:	14 96       	adiw	r26, 0x04	; 4
    2008:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	01 c0       	rjmp	.+2      	; 0x2010 <f_write+0x3aa>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    200e:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	bf 90       	pop	r11
    202c:	af 90       	pop	r10
    202e:	9f 90       	pop	r9
    2030:	8f 90       	pop	r8
    2032:	7f 90       	pop	r7
    2034:	6f 90       	pop	r6
    2036:	5f 90       	pop	r5
    2038:	4f 90       	pop	r4
    203a:	3f 90       	pop	r3
    203c:	2f 90       	pop	r2
    203e:	08 95       	ret

00002040 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    204a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <validate>
	if (res == FR_OK) {
    204e:	81 11       	cpse	r24, r1
    2050:	50 c0       	rjmp	.+160    	; 0x20f2 <f_sync+0xb2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2052:	8c 81       	ldd	r24, Y+4	; 0x04
    2054:	85 ff       	sbrs	r24, 5
    2056:	4a c0       	rjmp	.+148    	; 0x20ec <f_sync+0xac>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
    2058:	86 ff       	sbrs	r24, 6
    205a:	13 c0       	rjmp	.+38     	; 0x2082 <f_sync+0x42>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    205c:	2e 89       	ldd	r18, Y+22	; 0x16
    205e:	3f 89       	ldd	r19, Y+23	; 0x17
    2060:	48 8d       	ldd	r20, Y+24	; 0x18
    2062:	59 8d       	ldd	r21, Y+25	; 0x19
    2064:	e8 81       	ld	r30, Y
    2066:	f9 81       	ldd	r31, Y+1	; 0x01
    2068:	01 e0       	ldi	r16, 0x01	; 1
    206a:	10 e0       	ldi	r17, 0x00	; 0
    206c:	be 01       	movw	r22, r28
    206e:	60 5e       	subi	r22, 0xE0	; 224
    2070:	7f 4f       	sbci	r23, 0xFF	; 255
    2072:	81 81       	ldd	r24, Z+1	; 0x01
    2074:	0e 94 12 04 	call	0x824	; 0x824 <disk_write>
    2078:	81 11       	cpse	r24, r1
    207a:	3a c0       	rjmp	.+116    	; 0x20f0 <f_sync+0xb0>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	8f 7b       	andi	r24, 0xBF	; 191
    2080:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2082:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2084:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2086:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2088:	7d 8d       	ldd	r23, Y+29	; 0x1d
    208a:	88 81       	ld	r24, Y
    208c:	99 81       	ldd	r25, Y+1	; 0x01
    208e:	0e 94 e7 05 	call	0xbce	; 0xbce <move_window>
			if (res == FR_OK) {
    2092:	81 11       	cpse	r24, r1
    2094:	2e c0       	rjmp	.+92     	; 0x20f2 <f_sync+0xb2>
				dir = fp->dir_ptr;
    2096:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2098:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    209a:	83 85       	ldd	r24, Z+11	; 0x0b
    209c:	80 62       	ori	r24, 0x20	; 32
    209e:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    20a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a2:	84 8f       	std	Z+28, r24	; 0x1c
    20a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    20a6:	85 8f       	std	Z+29, r24	; 0x1d
    20a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    20aa:	86 8f       	std	Z+30, r24	; 0x1e
    20ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ae:	87 8f       	std	Z+31, r24	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    20b0:	4e 85       	ldd	r20, Y+14	; 0x0e
    20b2:	5f 85       	ldd	r21, Y+15	; 0x0f
    20b4:	68 89       	ldd	r22, Y+16	; 0x10
    20b6:	79 89       	ldd	r23, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    20b8:	42 8f       	std	Z+26, r20	; 0x1a
    20ba:	53 8f       	std	Z+27, r21	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    20bc:	ab 01       	movw	r20, r22
    20be:	66 27       	eor	r22, r22
    20c0:	77 27       	eor	r23, r23
    20c2:	44 8b       	std	Z+20, r20	; 0x14
    20c4:	55 8b       	std	Z+21, r21	; 0x15
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tm);
    20c6:	16 8a       	std	Z+22, r1	; 0x16
    20c8:	17 8a       	std	Z+23, r1	; 0x17
    20ca:	89 e6       	ldi	r24, 0x69	; 105
    20cc:	80 8f       	std	Z+24, r24	; 0x18
    20ce:	8d eb       	ldi	r24, 0xBD	; 189
    20d0:	81 8f       	std	Z+25, r24	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    20d2:	12 8a       	std	Z+18, r1	; 0x12
    20d4:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    20d6:	8c 81       	ldd	r24, Y+4	; 0x04
    20d8:	8f 7d       	andi	r24, 0xDF	; 223
    20da:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    20dc:	e8 81       	ld	r30, Y
    20de:	f9 81       	ldd	r31, Y+1	; 0x01
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    20e4:	88 81       	ld	r24, Y
    20e6:	99 81       	ldd	r25, Y+1	; 0x01
    20e8:	b0 d9       	rcall	.-3232   	; 0x144a <sync_fs>
    20ea:	03 c0       	rjmp	.+6      	; 0x20f2 <f_sync+0xb2>
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <f_sync+0xb2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    20f0:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	08 95       	ret

000020fc <SDCardManager_Init>:
	}
	
	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();
}
    20fc:	58 98       	cbi	0x0b, 0	; 11
    20fe:	2f ef       	ldi	r18, 0xFF	; 255
    2100:	89 e6       	ldi	r24, 0x69	; 105
    2102:	98 e1       	ldi	r25, 0x18	; 24
    2104:	21 50       	subi	r18, 0x01	; 1
    2106:	80 40       	sbci	r24, 0x00	; 0
    2108:	90 40       	sbci	r25, 0x00	; 0
    210a:	e1 f7       	brne	.-8      	; 0x2104 <SDCardManager_Init+0x8>
    210c:	00 c0       	rjmp	.+0      	; 0x210e <SDCardManager_Init+0x12>
    210e:	00 00       	nop
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	0c 94 05 03 	jmp	0x60a	; 0x60a <disk_initialize>
    2116:	08 95       	ret

00002118 <SDCardManager_CheckDataflashOperation>:
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool SDCardManager_CheckDataflashOperation(void)
{	
	return true;
}
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	08 95       	ret

0000211c <__vector_17>:
	bool CommandSuccess;
	
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);

	return CommandSuccess;
}
    211c:	1f 92       	push	r1
    211e:	0f 92       	push	r0
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	0f 92       	push	r0
    2124:	11 24       	eor	r1, r1
    2126:	2f 93       	push	r18
    2128:	3f 93       	push	r19
    212a:	4f 93       	push	r20
    212c:	5f 93       	push	r21
    212e:	6f 93       	push	r22
    2130:	7f 93       	push	r23
    2132:	8f 93       	push	r24
    2134:	9f 93       	push	r25
    2136:	af 93       	push	r26
    2138:	bf 93       	push	r27
    213a:	ef 93       	push	r30
    213c:	ff 93       	push	r31
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	c6 56       	subi	r28, 0x66	; 102
    2148:	d1 09       	sbc	r29, r1
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	8e b3       	in	r24, 0x1e	; 30
    2150:	84 30       	cpi	r24, 0x04	; 4
    2152:	e9 f0       	breq	.+58     	; 0x218e <__vector_17+0x72>
    2154:	86 e1       	ldi	r24, 0x16	; 22
    2156:	ea e4       	ldi	r30, 0x4A	; 74
    2158:	f1 e0       	ldi	r31, 0x01	; 1
    215a:	de 01       	movw	r26, r28
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	01 90       	ld	r0, Z+
    2160:	0d 92       	st	X+, r0
    2162:	8a 95       	dec	r24
    2164:	e1 f7       	brne	.-8      	; 0x215e <__vector_17+0x42>
    2166:	85 e1       	ldi	r24, 0x15	; 21
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a7 96       	adiw	r28, 0x27	; 39
    216c:	9f af       	std	Y+63, r25	; 0x3f
    216e:	8e af       	std	Y+62, r24	; 0x3e
    2170:	a7 97       	sbiw	r28, 0x27	; 39
    2172:	9e 01       	movw	r18, r28
    2174:	2b 59       	subi	r18, 0x9B	; 155
    2176:	3f 4f       	sbci	r19, 0xFF	; 255
    2178:	45 e1       	ldi	r20, 0x15	; 21
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	be 01       	movw	r22, r28
    217e:	6f 5f       	subi	r22, 0xFF	; 255
    2180:	7f 4f       	sbci	r23, 0xFF	; 255
    2182:	81 e7       	ldi	r24, 0x71	; 113
    2184:	91 e0       	ldi	r25, 0x01	; 1
    2186:	6f dd       	rcall	.-1314   	; 0x1c66 <f_write>
    2188:	81 e7       	ldi	r24, 0x71	; 113
    218a:	91 e0       	ldi	r25, 0x01	; 1
    218c:	59 df       	rcall	.-334    	; 0x2040 <f_sync>
    218e:	ca 59       	subi	r28, 0x9A	; 154
    2190:	df 4f       	sbci	r29, 0xFF	; 255
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	ff 91       	pop	r31
    21a2:	ef 91       	pop	r30
    21a4:	bf 91       	pop	r27
    21a6:	af 91       	pop	r26
    21a8:	9f 91       	pop	r25
    21aa:	8f 91       	pop	r24
    21ac:	7f 91       	pop	r23
    21ae:	6f 91       	pop	r22
    21b0:	5f 91       	pop	r21
    21b2:	4f 91       	pop	r20
    21b4:	3f 91       	pop	r19
    21b6:	2f 91       	pop	r18
    21b8:	0f 90       	pop	r0
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	0f 90       	pop	r0
    21be:	1f 90       	pop	r1
    21c0:	18 95       	reti

000021c2 <OpenLogFile>:
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	2c 97       	sbiw	r28, 0x0c	; 12
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	80 91 6f 01 	lds	r24, 0x016F
    21da:	90 91 70 01 	lds	r25, 0x0170
    21de:	01 96       	adiw	r24, 0x01	; 1
    21e0:	90 93 70 01 	sts	0x0170, r25
    21e4:	80 93 6f 01 	sts	0x016F, r24
    21e8:	9f 93       	push	r25
    21ea:	8f 93       	push	r24
    21ec:	80 e6       	ldi	r24, 0x60	; 96
    21ee:	91 e0       	ldi	r25, 0x01	; 1
    21f0:	9f 93       	push	r25
    21f2:	8f 93       	push	r24
    21f4:	ce 01       	movw	r24, r28
    21f6:	01 96       	adiw	r24, 0x01	; 1
    21f8:	9f 93       	push	r25
    21fa:	8f 93       	push	r24
    21fc:	95 d7       	rcall	.+3882   	; 0x3128 <sprintf>
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	6f e5       	ldi	r22, 0x5F	; 95
    2202:	71 e0       	ldi	r23, 0x01	; 1
    2204:	81 e9       	ldi	r24, 0x91	; 145
    2206:	93 e0       	ldi	r25, 0x03	; 3
    2208:	dc dc       	rcall	.-1608   	; 0x1bc2 <f_mount>
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	89 98       	cbi	0x11, 1	; 17
    2220:	4f ef       	ldi	r20, 0xFF	; 255
    2222:	54 e3       	ldi	r21, 0x34	; 52
    2224:	6c e0       	ldi	r22, 0x0C	; 12
    2226:	41 50       	subi	r20, 0x01	; 1
    2228:	50 40       	sbci	r21, 0x00	; 0
    222a:	60 40       	sbci	r22, 0x00	; 0
    222c:	e1 f7       	brne	.-8      	; 0x2226 <OpenLogFile+0x64>
    222e:	00 c0       	rjmp	.+0      	; 0x2230 <OpenLogFile+0x6e>
    2230:	00 00       	nop
    2232:	89 9a       	sbi	0x11, 1	; 17
    2234:	4f ef       	ldi	r20, 0xFF	; 255
    2236:	54 e3       	ldi	r21, 0x34	; 52
    2238:	6c e0       	ldi	r22, 0x0C	; 12
    223a:	41 50       	subi	r20, 0x01	; 1
    223c:	50 40       	sbci	r21, 0x00	; 0
    223e:	60 40       	sbci	r22, 0x00	; 0
    2240:	e1 f7       	brne	.-8      	; 0x223a <OpenLogFile+0x78>
    2242:	00 c0       	rjmp	.+0      	; 0x2244 <OpenLogFile+0x82>
    2244:	00 00       	nop
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	28 17       	cp	r18, r24
    224a:	39 07       	cpc	r19, r25
    224c:	44 f7       	brge	.-48     	; 0x221e <OpenLogFile+0x5c>
    224e:	ff cf       	rjmp	.-2      	; 0x224e <OpenLogFile+0x8c>

00002250 <SetupHardware>:
    2250:	84 b7       	in	r24, 0x34	; 52
    2252:	87 7f       	andi	r24, 0xF7	; 247
    2254:	84 bf       	out	0x34, r24	; 52
    2256:	88 e1       	ldi	r24, 0x18	; 24
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	80 93 60 00 	sts	0x0060, r24
    2260:	10 92 60 00 	sts	0x0060, r1
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	80 e8       	ldi	r24, 0x80	; 128
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	80 93 61 00 	sts	0x0061, r24
    2272:	90 93 61 00 	sts	0x0061, r25
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Config_IO>
    227c:	3f df       	rcall	.-386    	; 0x20fc <SDCardManager_Init>
    227e:	88 d4       	rcall	.+2320   	; 0x2b90 <USB_Init>
    2280:	4b df       	rcall	.-362    	; 0x2118 <SDCardManager_CheckDataflashOperation>
    2282:	81 11       	cpse	r24, r1
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <SetupHardware+0x38>
    2286:	ff cf       	rjmp	.-2      	; 0x2286 <SetupHardware+0x36>
    2288:	08 95       	ret

0000228a <main>:
    228a:	e2 df       	rcall	.-60     	; 0x2250 <SetupHardware>
    228c:	9a df       	rcall	.-204    	; 0x21c2 <OpenLogFile>

0000228e <EVENT_USB_Device_Connect>:
    228e:	08 95       	ret

00002290 <EVENT_USB_Device_Disconnect>:
    2290:	08 95       	ret

00002292 <EVENT_USB_Device_ConfigurationChanged>:
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	6f d1       	rcall	.+734    	; 0x2576 <HID_Device_ConfigureEndpoints>
    2298:	81 e1       	ldi	r24, 0x11	; 17
    229a:	91 e0       	ldi	r25, 0x01	; 1
    229c:	bc c1       	rjmp	.+888    	; 0x2616 <MS_Device_ConfigureEndpoints>
    229e:	08 95       	ret

000022a0 <EVENT_USB_Device_ControlRequest>:
    22a0:	81 e1       	ldi	r24, 0x11	; 17
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	7c d1       	rcall	.+760    	; 0x259e <MS_Device_ProcessControlRequest>
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	1d c0       	rjmp	.+58     	; 0x22e6 <HID_Device_ProcessControlRequest>
    22ac:	08 95       	ret

000022ae <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;

//	RTC_GetTimeDate(&ReportParams->TimeDate);

	ReportParams->LogInterval500MS = LoggingInterval500MS_SRAM;
    22b2:	80 91 bf 05 	lds	r24, 0x05BF
    22b6:	f9 01       	movw	r30, r18
    22b8:	81 83       	std	Z+1, r24	; 0x01

	*ReportSize = sizeof(Device_Report_t);
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	f8 01       	movw	r30, r16
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	80 83       	st	Z, r24
	return true;
}
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	08 95       	ret

000022cc <CALLBACK_HID_Device_ProcessHIDReport>:
{
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;


	/* If the logging interval has changed from its current value, write it to EEPROM */
	if (LoggingInterval500MS_SRAM != ReportParams->LogInterval500MS)
    22cc:	f9 01       	movw	r30, r18
    22ce:	61 81       	ldd	r22, Z+1	; 0x01
    22d0:	80 91 bf 05 	lds	r24, 0x05BF
    22d4:	68 17       	cp	r22, r24
    22d6:	31 f0       	breq	.+12     	; 0x22e4 <CALLBACK_HID_Device_ProcessHIDReport+0x18>
	{
		LoggingInterval500MS_SRAM = ReportParams->LogInterval500MS;
    22d8:	60 93 bf 05 	sts	0x05BF, r22
		eeprom_update_byte(&LoggingInterval500MS_EEPROM, LoggingInterval500MS_SRAM);
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__eeupd_byte_m32u4>
    22e4:	08 95       	ret

000022e6 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    22e6:	3f 92       	push	r3
    22e8:	4f 92       	push	r4
    22ea:	5f 92       	push	r5
    22ec:	6f 92       	push	r6
    22ee:	7f 92       	push	r7
    22f0:	8f 92       	push	r8
    22f2:	9f 92       	push	r9
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	00 d0       	rcall	.+0      	; 0x230a <HID_Device_ProcessControlRequest+0x24>
    230a:	1f 92       	push	r1
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    2312:	ed b6       	in	r14, 0x3d	; 61
    2314:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2316:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    231a:	83 ff       	sbrs	r24, 3
    231c:	12 c1       	rjmp	.+548    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    231e:	f6 01       	movw	r30, r12
    2320:	80 81       	ld	r24, Z
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	20 91 ca 05 	lds	r18, 0x05CA
    2328:	30 91 cb 05 	lds	r19, 0x05CB
    232c:	28 17       	cp	r18, r24
    232e:	39 07       	cpc	r19, r25
    2330:	09 f0       	breq	.+2      	; 0x2334 <HID_Device_ProcessControlRequest+0x4e>
    2332:	07 c1       	rjmp	.+526    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
	  return;

	switch (USB_ControlRequest.bRequest)
    2334:	80 91 c7 05 	lds	r24, 0x05C7
    2338:	83 30       	cpi	r24, 0x03	; 3
    233a:	09 f4       	brne	.+2      	; 0x233e <HID_Device_ProcessControlRequest+0x58>
    233c:	9f c0       	rjmp	.+318    	; 0x247c <HID_Device_ProcessControlRequest+0x196>
    233e:	30 f4       	brcc	.+12     	; 0x234c <HID_Device_ProcessControlRequest+0x66>
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	71 f0       	breq	.+28     	; 0x2360 <HID_Device_ProcessControlRequest+0x7a>
    2344:	82 30       	cpi	r24, 0x02	; 2
    2346:	09 f4       	brne	.+2      	; 0x234a <HID_Device_ProcessControlRequest+0x64>
    2348:	e1 c0       	rjmp	.+450    	; 0x250c <HID_Device_ProcessControlRequest+0x226>
    234a:	fb c0       	rjmp	.+502    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
    234c:	8a 30       	cpi	r24, 0x0A	; 10
    234e:	09 f4       	brne	.+2      	; 0x2352 <HID_Device_ProcessControlRequest+0x6c>
    2350:	c1 c0       	rjmp	.+386    	; 0x24d4 <HID_Device_ProcessControlRequest+0x1ee>
    2352:	8b 30       	cpi	r24, 0x0B	; 11
    2354:	09 f4       	brne	.+2      	; 0x2358 <HID_Device_ProcessControlRequest+0x72>
    2356:	aa c0       	rjmp	.+340    	; 0x24ac <HID_Device_ProcessControlRequest+0x1c6>
    2358:	89 30       	cpi	r24, 0x09	; 9
    235a:	09 f0       	breq	.+2      	; 0x235e <HID_Device_ProcessControlRequest+0x78>
    235c:	f2 c0       	rjmp	.+484    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
    235e:	50 c0       	rjmp	.+160    	; 0x2400 <HID_Device_ProcessControlRequest+0x11a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2360:	80 91 c6 05 	lds	r24, 0x05C6
    2364:	81 3a       	cpi	r24, 0xA1	; 161
    2366:	09 f0       	breq	.+2      	; 0x236a <HID_Device_ProcessControlRequest+0x84>
    2368:	ec c0       	rjmp	.+472    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
    236a:	8d b6       	in	r8, 0x3d	; 61
    236c:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    236e:	1a 82       	std	Y+2, r1	; 0x02
    2370:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2372:	e8 ec       	ldi	r30, 0xC8	; 200
    2374:	f5 e0       	ldi	r31, 0x05	; 5
    2376:	80 81       	ld	r24, Z
    2378:	11 81       	ldd	r17, Z+1	; 0x01
    237a:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    237c:	f6 01       	movw	r30, r12
    237e:	40 85       	ldd	r20, Z+8	; 0x08
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	8d b7       	in	r24, 0x3d	; 61
    2384:	9e b7       	in	r25, 0x3e	; 62
    2386:	84 1b       	sub	r24, r20
    2388:	95 0b       	sbc	r25, r21
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	9e bf       	out	0x3e, r25	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	8d bf       	out	0x3d, r24	; 61
    2394:	ed b7       	in	r30, 0x3d	; 61
    2396:	fe b7       	in	r31, 0x3e	; 62
    2398:	31 96       	adiw	r30, 0x01	; 1
    239a:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	cf 01       	movw	r24, r30
    23a2:	bb d6       	rcall	.+3446   	; 0x311a <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    23a4:	4f ef       	ldi	r20, 0xFF	; 255
    23a6:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    23a8:	8e 01       	movw	r16, r28
    23aa:	0f 5f       	subi	r16, 0xFF	; 255
    23ac:	1f 4f       	sbci	r17, 0xFF	; 255
    23ae:	95 01       	movw	r18, r10
    23b0:	be 01       	movw	r22, r28
    23b2:	6d 5f       	subi	r22, 0xFD	; 253
    23b4:	7f 4f       	sbci	r23, 0xFF	; 255
    23b6:	c6 01       	movw	r24, r12
    23b8:	7a df       	rcall	.-268    	; 0x22ae <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    23ba:	f6 01       	movw	r30, r12
    23bc:	86 81       	ldd	r24, Z+6	; 0x06
    23be:	97 81       	ldd	r25, Z+7	; 0x07
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	21 f0       	breq	.+8      	; 0x23cc <HID_Device_ProcessControlRequest+0xe6>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    23c4:	40 85       	ldd	r20, Z+8	; 0x08
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	b5 01       	movw	r22, r10
    23ca:	9e d6       	rcall	.+3388   	; 0x3108 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23cc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23d0:	e8 ee       	ldi	r30, 0xE8	; 232
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	87 7f       	andi	r24, 0xF7	; 247
    23d8:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    23de:	80 93 f1 00 	sts	0x00F1, r24
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    23e2:	69 81       	ldd	r22, Y+1	; 0x01
    23e4:	7a 81       	ldd	r23, Y+2	; 0x02
    23e6:	c5 01       	movw	r24, r10
    23e8:	30 d1       	rcall	.+608    	; 0x264a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    23ea:	e8 ee       	ldi	r30, 0xE8	; 232
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	8b 77       	andi	r24, 0x7B	; 123
    23f2:	80 83       	st	Z, r24
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	9e be       	out	0x3e, r9	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	8d be       	out	0x3d, r8	; 61
    23fe:	a1 c0       	rjmp	.+322    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2400:	80 91 c6 05 	lds	r24, 0x05C6
    2404:	81 32       	cpi	r24, 0x21	; 33
    2406:	09 f0       	breq	.+2      	; 0x240a <HID_Device_ProcessControlRequest+0x124>
    2408:	9c c0       	rjmp	.+312    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
    240a:	6d b6       	in	r6, 0x3d	; 61
    240c:	7e b6       	in	r7, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    240e:	a0 90 cc 05 	lds	r10, 0x05CC
    2412:	b0 90 cd 05 	lds	r11, 0x05CD
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2416:	e8 ec       	ldi	r30, 0xC8	; 200
    2418:	f5 e0       	ldi	r31, 0x05	; 5
    241a:	50 80       	ld	r5, Z
    241c:	41 80       	ldd	r4, Z+1	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    241e:	8d b7       	in	r24, 0x3d	; 61
    2420:	9e b7       	in	r25, 0x3e	; 62
    2422:	8a 19       	sub	r24, r10
    2424:	9b 09       	sbc	r25, r11
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	9e bf       	out	0x3e, r25	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	8d bf       	out	0x3d, r24	; 61
    2430:	ed b7       	in	r30, 0x3d	; 61
    2432:	fe b7       	in	r31, 0x3e	; 62
    2434:	31 96       	adiw	r30, 0x01	; 1
    2436:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2438:	08 ee       	ldi	r16, 0xE8	; 232
    243a:	10 e0       	ldi	r17, 0x00	; 0
    243c:	f8 01       	movw	r30, r16
    243e:	80 81       	ld	r24, Z
    2440:	87 7f       	andi	r24, 0xF7	; 247
    2442:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    2444:	b5 01       	movw	r22, r10
    2446:	c4 01       	movw	r24, r8
    2448:	83 d1       	rcall	.+774    	; 0x2750 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    244a:	f8 01       	movw	r30, r16
    244c:	80 81       	ld	r24, Z
    244e:	8e 77       	andi	r24, 0x7E	; 126
    2450:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2452:	21 e0       	ldi	r18, 0x01	; 1
    2454:	51 10       	cpse	r5, r1
    2456:	01 c0       	rjmp	.+2      	; 0x245a <HID_Device_ProcessControlRequest+0x174>
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	85 01       	movw	r16, r10
    245e:	02 1b       	sub	r16, r18
    2460:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    2462:	28 0d       	add	r18, r8
    2464:	39 1d       	adc	r19, r9
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    2466:	4f ef       	ldi	r20, 0xFF	; 255
    2468:	44 0d       	add	r20, r4

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    246a:	65 2d       	mov	r22, r5
    246c:	c6 01       	movw	r24, r12
    246e:	2e df       	rcall	.-420    	; 0x22cc <CALLBACK_HID_Device_ProcessHIDReport>
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	7e be       	out	0x3e, r7	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	6d be       	out	0x3d, r6	; 61
    247a:	63 c0       	rjmp	.+198    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    247c:	80 91 c6 05 	lds	r24, 0x05C6
    2480:	81 3a       	cpi	r24, 0xA1	; 161
    2482:	09 f0       	breq	.+2      	; 0x2486 <HID_Device_ProcessControlRequest+0x1a0>
    2484:	5e c0       	rjmp	.+188    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2486:	e8 ee       	ldi	r30, 0xE8	; 232
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	87 7f       	andi	r24, 0xF7	; 247
    248e:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2490:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2492:	80 ff       	sbrs	r24, 0
    2494:	fd cf       	rjmp	.-6      	; 0x2490 <HID_Device_ProcessControlRequest+0x1aa>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    2496:	f6 01       	movw	r30, r12
    2498:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    249a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    249e:	e8 ee       	ldi	r30, 0xE8	; 232
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	8e 77       	andi	r24, 0x7E	; 126
    24a6:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    24a8:	12 d3       	rcall	.+1572   	; 0x2ace <Endpoint_ClearStatusStage>
    24aa:	4b c0       	rjmp	.+150    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    24ac:	80 91 c6 05 	lds	r24, 0x05C6
    24b0:	81 32       	cpi	r24, 0x21	; 33
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <HID_Device_ProcessControlRequest+0x1d0>
    24b4:	46 c0       	rjmp	.+140    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24b6:	e8 ee       	ldi	r30, 0xE8	; 232
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	87 7f       	andi	r24, 0xF7	; 247
    24be:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    24c0:	06 d3       	rcall	.+1548   	; 0x2ace <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    24c2:	90 91 c8 05 	lds	r25, 0x05C8
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	91 11       	cpse	r25, r1
    24ca:	01 c0       	rjmp	.+2      	; 0x24ce <HID_Device_ProcessControlRequest+0x1e8>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	f6 01       	movw	r30, r12
    24d0:	81 87       	std	Z+9, r24	; 0x09
    24d2:	37 c0       	rjmp	.+110    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    24d4:	80 91 c6 05 	lds	r24, 0x05C6
    24d8:	81 32       	cpi	r24, 0x21	; 33
    24da:	99 f5       	brne	.+102    	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
    24dc:	e8 ee       	ldi	r30, 0xE8	; 232
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	87 7f       	andi	r24, 0xF7	; 247
    24e4:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    24e6:	f3 d2       	rcall	.+1510   	; 0x2ace <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    24e8:	80 91 c8 05 	lds	r24, 0x05C8
    24ec:	90 91 c9 05 	lds	r25, 0x05C9
    24f0:	88 27       	eor	r24, r24
    24f2:	00 24       	eor	r0, r0
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	00 1c       	adc	r0, r0
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	00 1c       	adc	r0, r0
    2500:	89 2f       	mov	r24, r25
    2502:	90 2d       	mov	r25, r0
    2504:	f6 01       	movw	r30, r12
    2506:	95 87       	std	Z+13, r25	; 0x0d
    2508:	84 87       	std	Z+12, r24	; 0x0c
    250a:	1b c0       	rjmp	.+54     	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    250c:	80 91 c6 05 	lds	r24, 0x05C6
    2510:	81 3a       	cpi	r24, 0xA1	; 161
    2512:	b9 f4       	brne	.+46     	; 0x2542 <HID_Device_ProcessControlRequest+0x25c>
    2514:	e8 ee       	ldi	r30, 0xE8	; 232
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	87 7f       	andi	r24, 0xF7	; 247
    251c:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    251e:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2520:	80 ff       	sbrs	r24, 0
    2522:	fd cf       	rjmp	.-6      	; 0x251e <HID_Device_ProcessControlRequest+0x238>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    2524:	f6 01       	movw	r30, r12
    2526:	84 85       	ldd	r24, Z+12	; 0x0c
    2528:	95 85       	ldd	r25, Z+13	; 0x0d
    252a:	96 95       	lsr	r25
    252c:	87 95       	ror	r24
    252e:	96 95       	lsr	r25
    2530:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2532:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2536:	e8 ee       	ldi	r30, 0xE8	; 232
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	8e 77       	andi	r24, 0x7E	; 126
    253e:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2540:	c6 d2       	rcall	.+1420   	; 0x2ace <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	fe be       	out	0x3e, r15	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	ed be       	out	0x3d, r14	; 61
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	ff 90       	pop	r15
    255c:	ef 90       	pop	r14
    255e:	df 90       	pop	r13
    2560:	cf 90       	pop	r12
    2562:	bf 90       	pop	r11
    2564:	af 90       	pop	r10
    2566:	9f 90       	pop	r9
    2568:	8f 90       	pop	r8
    256a:	7f 90       	pop	r7
    256c:	6f 90       	pop	r6
    256e:	5f 90       	pop	r5
    2570:	4f 90       	pop	r4
    2572:	3f 90       	pop	r3
    2574:	08 95       	ret

00002576 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    2576:	fc 01       	movw	r30, r24
    2578:	39 96       	adiw	r30, 0x09	; 9
    257a:	27 e0       	ldi	r18, 0x07	; 7
    257c:	df 01       	movw	r26, r30
    257e:	1d 92       	st	X+, r1
    2580:	2a 95       	dec	r18
    2582:	e9 f7       	brne	.-6      	; 0x257e <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    2584:	21 e0       	ldi	r18, 0x01	; 1
    2586:	fc 01       	movw	r30, r24
    2588:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    258a:	24 ef       	ldi	r18, 0xF4	; 244
    258c:	31 e0       	ldi	r19, 0x01	; 1
    258e:	35 87       	std	Z+13, r19	; 0x0d
    2590:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2592:	23 e0       	ldi	r18, 0x03	; 3
    2594:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    2596:	61 e0       	ldi	r22, 0x01	; 1
    2598:	01 96       	adiw	r24, 0x01	; 1
    259a:	3c c2       	rjmp	.+1144   	; 0x2a14 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    259c:	08 95       	ret

0000259e <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    25a4:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    25a8:	83 ff       	sbrs	r24, 3
    25aa:	32 c0       	rjmp	.+100    	; 0x2610 <MS_Device_ProcessControlRequest+0x72>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    25ac:	88 81       	ld	r24, Y
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	20 91 ca 05 	lds	r18, 0x05CA
    25b4:	30 91 cb 05 	lds	r19, 0x05CB
    25b8:	28 17       	cp	r18, r24
    25ba:	39 07       	cpc	r19, r25
    25bc:	49 f5       	brne	.+82     	; 0x2610 <MS_Device_ProcessControlRequest+0x72>
	  return;

	switch (USB_ControlRequest.bRequest)
    25be:	80 91 c7 05 	lds	r24, 0x05C7
    25c2:	8e 3f       	cpi	r24, 0xFE	; 254
    25c4:	79 f0       	breq	.+30     	; 0x25e4 <MS_Device_ProcessControlRequest+0x46>
    25c6:	8f 3f       	cpi	r24, 0xFF	; 255
    25c8:	19 f5       	brne	.+70     	; 0x2610 <MS_Device_ProcessControlRequest+0x72>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    25ca:	80 91 c6 05 	lds	r24, 0x05C6
    25ce:	81 32       	cpi	r24, 0x21	; 33
    25d0:	f9 f4       	brne	.+62     	; 0x2610 <MS_Device_ProcessControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25d2:	e8 ee       	ldi	r30, 0xE8	; 232
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	87 7f       	andi	r24, 0xF7	; 247
    25da:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    25dc:	78 d2       	rcall	.+1264   	; 0x2ace <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	88 af       	std	Y+56, r24	; 0x38
    25e2:	16 c0       	rjmp	.+44     	; 0x2610 <MS_Device_ProcessControlRequest+0x72>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    25e4:	80 91 c6 05 	lds	r24, 0x05C6
    25e8:	81 3a       	cpi	r24, 0xA1	; 161
    25ea:	91 f4       	brne	.+36     	; 0x2610 <MS_Device_ProcessControlRequest+0x72>
    25ec:	e8 ee       	ldi	r30, 0xE8	; 232
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	87 7f       	andi	r24, 0xF7	; 247
    25f4:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    25f6:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    25f8:	80 ff       	sbrs	r24, 0
    25fa:	fd cf       	rjmp	.-6      	; 0x25f6 <MS_Device_ProcessControlRequest+0x58>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    25fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    25fe:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2600:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2604:	e8 ee       	ldi	r30, 0xE8	; 232
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	8e 77       	andi	r24, 0x7E	; 126
    260c:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    260e:	5f d2       	rcall	.+1214   	; 0x2ace <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	08 95       	ret

00002616 <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    261c:	fc 01       	movw	r30, r24
    261e:	3c 96       	adiw	r30, 0x0c	; 12
    2620:	8d e2       	ldi	r24, 0x2D	; 45
    2622:	df 01       	movw	r26, r30
    2624:	1d 92       	st	X+, r1
    2626:	8a 95       	dec	r24
    2628:	e9 f7       	brne	.-6      	; 0x2624 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    262a:	82 e0       	ldi	r24, 0x02	; 2
    262c:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    262e:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    2630:	61 e0       	ldi	r22, 0x01	; 1
    2632:	ce 01       	movw	r24, r28
    2634:	01 96       	adiw	r24, 0x01	; 1
    2636:	ee d1       	rcall	.+988    	; 0x2a14 <Endpoint_ConfigureEndpointTable>
    2638:	88 23       	and	r24, r24
    263a:	21 f0       	breq	.+8      	; 0x2644 <MS_Device_ConfigureEndpoints+0x2e>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    263c:	61 e0       	ldi	r22, 0x01	; 1
    263e:	ce 01       	movw	r24, r28
    2640:	06 96       	adiw	r24, 0x06	; 6
    2642:	e8 d1       	rcall	.+976    	; 0x2a14 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	08 95       	ret

0000264a <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    264a:	df 92       	push	r13
    264c:	ef 92       	push	r14
    264e:	ff 92       	push	r15
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	20 91 cc 05 	lds	r18, 0x05CC
    265c:	30 91 cd 05 	lds	r19, 0x05CD
    2660:	26 17       	cp	r18, r22
    2662:	37 07       	cpc	r19, r23
    2664:	58 f0       	brcs	.+22     	; 0x267c <Endpoint_Write_Control_Stream_LE+0x32>
    2666:	61 15       	cp	r22, r1
    2668:	71 05       	cpc	r23, r1
    266a:	39 f4       	brne	.+14     	; 0x267a <Endpoint_Write_Control_Stream_LE+0x30>
    266c:	e8 ee       	ldi	r30, 0xE8	; 232
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	20 81       	ld	r18, Z
    2672:	2e 77       	andi	r18, 0x7E	; 126
    2674:	20 83       	st	Z, r18
    2676:	9b 01       	movw	r18, r22
    2678:	01 c0       	rjmp	.+2      	; 0x267c <Endpoint_Write_Control_Stream_LE+0x32>
    267a:	9b 01       	movw	r18, r22
    267c:	a0 e0       	ldi	r26, 0x00	; 0
    267e:	e8 ee       	ldi	r30, 0xE8	; 232
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	03 ef       	ldi	r16, 0xF3	; 243
    2684:	10 e0       	ldi	r17, 0x00	; 0
    2686:	62 ef       	ldi	r22, 0xF2	; 242
    2688:	70 e0       	ldi	r23, 0x00	; 0
    268a:	c1 ef       	ldi	r28, 0xF1	; 241
    268c:	d0 e0       	ldi	r29, 0x00	; 0
    268e:	ff 24       	eor	r15, r15
    2690:	f3 94       	inc	r15
    2692:	e1 2c       	mov	r14, r1
    2694:	37 c0       	rjmp	.+110    	; 0x2704 <Endpoint_Write_Control_Stream_LE+0xba>
    2696:	4e b3       	in	r20, 0x1e	; 30
    2698:	44 23       	and	r20, r20
    269a:	09 f4       	brne	.+2      	; 0x269e <Endpoint_Write_Control_Stream_LE+0x54>
    269c:	46 c0       	rjmp	.+140    	; 0x272a <Endpoint_Write_Control_Stream_LE+0xe0>
    269e:	45 30       	cpi	r20, 0x05	; 5
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <Endpoint_Write_Control_Stream_LE+0x5a>
    26a2:	45 c0       	rjmp	.+138    	; 0x272e <Endpoint_Write_Control_Stream_LE+0xe4>
    26a4:	40 81       	ld	r20, Z
    26a6:	43 fd       	sbrc	r20, 3
    26a8:	44 c0       	rjmp	.+136    	; 0x2732 <Endpoint_Write_Control_Stream_LE+0xe8>
    26aa:	40 81       	ld	r20, Z
    26ac:	42 ff       	sbrs	r20, 2
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <Endpoint_Write_Control_Stream_LE+0x6c>
    26b0:	e8 ee       	ldi	r30, 0xE8	; 232
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	35 c0       	rjmp	.+106    	; 0x2720 <Endpoint_Write_Control_Stream_LE+0xd6>
    26b6:	40 81       	ld	r20, Z
    26b8:	40 ff       	sbrs	r20, 0
    26ba:	24 c0       	rjmp	.+72     	; 0x2704 <Endpoint_Write_Control_Stream_LE+0xba>
    26bc:	d8 01       	movw	r26, r16
    26be:	dc 90       	ld	r13, X
    26c0:	db 01       	movw	r26, r22
    26c2:	4c 91       	ld	r20, X
    26c4:	50 e0       	ldi	r21, 0x00	; 0
    26c6:	5d 29       	or	r21, r13
    26c8:	21 15       	cp	r18, r1
    26ca:	31 05       	cpc	r19, r1
    26cc:	99 f0       	breq	.+38     	; 0x26f4 <Endpoint_Write_Control_Stream_LE+0xaa>
    26ce:	48 30       	cpi	r20, 0x08	; 8
    26d0:	51 05       	cpc	r21, r1
    26d2:	80 f4       	brcc	.+32     	; 0x26f4 <Endpoint_Write_Control_Stream_LE+0xaa>
    26d4:	a8 2f       	mov	r26, r24
    26d6:	b9 2f       	mov	r27, r25
    26d8:	8d 91       	ld	r24, X+
    26da:	88 83       	st	Y, r24
    26dc:	8a 2f       	mov	r24, r26
    26de:	9b 2f       	mov	r25, r27
    26e0:	21 50       	subi	r18, 0x01	; 1
    26e2:	31 09       	sbc	r19, r1
    26e4:	4f 5f       	subi	r20, 0xFF	; 255
    26e6:	5f 4f       	sbci	r21, 0xFF	; 255
    26e8:	21 15       	cp	r18, r1
    26ea:	31 05       	cpc	r19, r1
    26ec:	19 f0       	breq	.+6      	; 0x26f4 <Endpoint_Write_Control_Stream_LE+0xaa>
    26ee:	48 30       	cpi	r20, 0x08	; 8
    26f0:	51 05       	cpc	r21, r1
    26f2:	91 f7       	brne	.-28     	; 0x26d8 <Endpoint_Write_Control_Stream_LE+0x8e>
    26f4:	af 2d       	mov	r26, r15
    26f6:	48 30       	cpi	r20, 0x08	; 8
    26f8:	51 05       	cpc	r21, r1
    26fa:	09 f0       	breq	.+2      	; 0x26fe <Endpoint_Write_Control_Stream_LE+0xb4>
    26fc:	ae 2d       	mov	r26, r14
    26fe:	40 81       	ld	r20, Z
    2700:	4e 77       	andi	r20, 0x7E	; 126
    2702:	40 83       	st	Z, r20
    2704:	21 15       	cp	r18, r1
    2706:	31 05       	cpc	r19, r1
    2708:	31 f6       	brne	.-116    	; 0x2696 <Endpoint_Write_Control_Stream_LE+0x4c>
    270a:	a1 11       	cpse	r26, r1
    270c:	c4 cf       	rjmp	.-120    	; 0x2696 <Endpoint_Write_Control_Stream_LE+0x4c>
    270e:	d0 cf       	rjmp	.-96     	; 0x26b0 <Endpoint_Write_Control_Stream_LE+0x66>
    2710:	8e b3       	in	r24, 0x1e	; 30
    2712:	88 23       	and	r24, r24
    2714:	81 f0       	breq	.+32     	; 0x2736 <Endpoint_Write_Control_Stream_LE+0xec>
    2716:	85 30       	cpi	r24, 0x05	; 5
    2718:	81 f0       	breq	.+32     	; 0x273a <Endpoint_Write_Control_Stream_LE+0xf0>
    271a:	80 81       	ld	r24, Z
    271c:	83 fd       	sbrc	r24, 3
    271e:	0f c0       	rjmp	.+30     	; 0x273e <Endpoint_Write_Control_Stream_LE+0xf4>
    2720:	80 81       	ld	r24, Z
    2722:	82 ff       	sbrs	r24, 2
    2724:	f5 cf       	rjmp	.-22     	; 0x2710 <Endpoint_Write_Control_Stream_LE+0xc6>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	0b c0       	rjmp	.+22     	; 0x2740 <Endpoint_Write_Control_Stream_LE+0xf6>
    272a:	82 e0       	ldi	r24, 0x02	; 2
    272c:	09 c0       	rjmp	.+18     	; 0x2740 <Endpoint_Write_Control_Stream_LE+0xf6>
    272e:	83 e0       	ldi	r24, 0x03	; 3
    2730:	07 c0       	rjmp	.+14     	; 0x2740 <Endpoint_Write_Control_Stream_LE+0xf6>
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	05 c0       	rjmp	.+10     	; 0x2740 <Endpoint_Write_Control_Stream_LE+0xf6>
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	03 c0       	rjmp	.+6      	; 0x2740 <Endpoint_Write_Control_Stream_LE+0xf6>
    273a:	83 e0       	ldi	r24, 0x03	; 3
    273c:	01 c0       	rjmp	.+2      	; 0x2740 <Endpoint_Write_Control_Stream_LE+0xf6>
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	1f 91       	pop	r17
    2746:	0f 91       	pop	r16
    2748:	ff 90       	pop	r15
    274a:	ef 90       	pop	r14
    274c:	df 90       	pop	r13
    274e:	08 95       	ret

00002750 <Endpoint_Read_Control_Stream_LE>:
    2750:	cf 92       	push	r12
    2752:	df 92       	push	r13
    2754:	ff 92       	push	r15
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	61 15       	cp	r22, r1
    2760:	71 05       	cpc	r23, r1
    2762:	29 f4       	brne	.+10     	; 0x276e <Endpoint_Read_Control_Stream_LE+0x1e>
    2764:	e8 ee       	ldi	r30, 0xE8	; 232
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	20 81       	ld	r18, Z
    276a:	2b 77       	andi	r18, 0x7B	; 123
    276c:	20 83       	st	Z, r18
    276e:	e8 ee       	ldi	r30, 0xE8	; 232
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	43 ef       	ldi	r20, 0xF3	; 243
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	0f 2e       	mov	r0, r31
    2778:	f2 ef       	ldi	r31, 0xF2	; 242
    277a:	cf 2e       	mov	r12, r31
    277c:	d1 2c       	mov	r13, r1
    277e:	f0 2d       	mov	r31, r0
    2780:	01 ef       	ldi	r16, 0xF1	; 241
    2782:	10 e0       	ldi	r17, 0x00	; 0
    2784:	21 c0       	rjmp	.+66     	; 0x27c8 <Endpoint_Read_Control_Stream_LE+0x78>
    2786:	2e b3       	in	r18, 0x1e	; 30
    2788:	22 23       	and	r18, r18
    278a:	d1 f1       	breq	.+116    	; 0x2800 <Endpoint_Read_Control_Stream_LE+0xb0>
    278c:	25 30       	cpi	r18, 0x05	; 5
    278e:	d1 f1       	breq	.+116    	; 0x2804 <Endpoint_Read_Control_Stream_LE+0xb4>
    2790:	20 81       	ld	r18, Z
    2792:	23 fd       	sbrc	r18, 3
    2794:	39 c0       	rjmp	.+114    	; 0x2808 <Endpoint_Read_Control_Stream_LE+0xb8>
    2796:	20 81       	ld	r18, Z
    2798:	22 ff       	sbrs	r18, 2
    279a:	f5 cf       	rjmp	.-22     	; 0x2786 <Endpoint_Read_Control_Stream_LE+0x36>
    279c:	41 c0       	rjmp	.+130    	; 0x2820 <Endpoint_Read_Control_Stream_LE+0xd0>
    279e:	e8 01       	movw	r28, r16
    27a0:	88 81       	ld	r24, Y
    27a2:	8d 93       	st	X+, r24
    27a4:	8a 2f       	mov	r24, r26
    27a6:	9b 2f       	mov	r25, r27
    27a8:	61 50       	subi	r22, 0x01	; 1
    27aa:	71 09       	sbc	r23, r1
    27ac:	61 15       	cp	r22, r1
    27ae:	71 05       	cpc	r23, r1
    27b0:	41 f0       	breq	.+16     	; 0x27c2 <Endpoint_Read_Control_Stream_LE+0x72>
    27b2:	ea 01       	movw	r28, r20
    27b4:	f8 80       	ld	r15, Y
    27b6:	e6 01       	movw	r28, r12
    27b8:	28 81       	ld	r18, Y
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	3f 29       	or	r19, r15
    27be:	23 2b       	or	r18, r19
    27c0:	71 f7       	brne	.-36     	; 0x279e <Endpoint_Read_Control_Stream_LE+0x4e>
    27c2:	20 81       	ld	r18, Z
    27c4:	2b 77       	andi	r18, 0x7B	; 123
    27c6:	20 83       	st	Z, r18
    27c8:	61 15       	cp	r22, r1
    27ca:	71 05       	cpc	r23, r1
    27cc:	19 f4       	brne	.+6      	; 0x27d4 <Endpoint_Read_Control_Stream_LE+0x84>
    27ce:	e8 ee       	ldi	r30, 0xE8	; 232
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	11 c0       	rjmp	.+34     	; 0x27f6 <Endpoint_Read_Control_Stream_LE+0xa6>
    27d4:	2e b3       	in	r18, 0x1e	; 30
    27d6:	22 23       	and	r18, r18
    27d8:	c9 f0       	breq	.+50     	; 0x280c <Endpoint_Read_Control_Stream_LE+0xbc>
    27da:	25 30       	cpi	r18, 0x05	; 5
    27dc:	c9 f0       	breq	.+50     	; 0x2810 <Endpoint_Read_Control_Stream_LE+0xc0>
    27de:	20 81       	ld	r18, Z
    27e0:	23 fd       	sbrc	r18, 3
    27e2:	18 c0       	rjmp	.+48     	; 0x2814 <Endpoint_Read_Control_Stream_LE+0xc4>
    27e4:	20 81       	ld	r18, Z
    27e6:	22 fd       	sbrc	r18, 2
    27e8:	1b c0       	rjmp	.+54     	; 0x2820 <Endpoint_Read_Control_Stream_LE+0xd0>
    27ea:	cd cf       	rjmp	.-102    	; 0x2786 <Endpoint_Read_Control_Stream_LE+0x36>
    27ec:	8e b3       	in	r24, 0x1e	; 30
    27ee:	88 23       	and	r24, r24
    27f0:	99 f0       	breq	.+38     	; 0x2818 <Endpoint_Read_Control_Stream_LE+0xc8>
    27f2:	85 30       	cpi	r24, 0x05	; 5
    27f4:	99 f0       	breq	.+38     	; 0x281c <Endpoint_Read_Control_Stream_LE+0xcc>
    27f6:	80 81       	ld	r24, Z
    27f8:	80 ff       	sbrs	r24, 0
    27fa:	f8 cf       	rjmp	.-16     	; 0x27ec <Endpoint_Read_Control_Stream_LE+0x9c>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	1b c0       	rjmp	.+54     	; 0x2836 <Endpoint_Read_Control_Stream_LE+0xe6>
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	19 c0       	rjmp	.+50     	; 0x2836 <Endpoint_Read_Control_Stream_LE+0xe6>
    2804:	83 e0       	ldi	r24, 0x03	; 3
    2806:	17 c0       	rjmp	.+46     	; 0x2836 <Endpoint_Read_Control_Stream_LE+0xe6>
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	15 c0       	rjmp	.+42     	; 0x2836 <Endpoint_Read_Control_Stream_LE+0xe6>
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	13 c0       	rjmp	.+38     	; 0x2836 <Endpoint_Read_Control_Stream_LE+0xe6>
    2810:	83 e0       	ldi	r24, 0x03	; 3
    2812:	11 c0       	rjmp	.+34     	; 0x2836 <Endpoint_Read_Control_Stream_LE+0xe6>
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	0f c0       	rjmp	.+30     	; 0x2836 <Endpoint_Read_Control_Stream_LE+0xe6>
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	0d c0       	rjmp	.+26     	; 0x2836 <Endpoint_Read_Control_Stream_LE+0xe6>
    281c:	83 e0       	ldi	r24, 0x03	; 3
    281e:	0b c0       	rjmp	.+22     	; 0x2836 <Endpoint_Read_Control_Stream_LE+0xe6>
    2820:	ea 01       	movw	r28, r20
    2822:	a8 81       	ld	r26, Y
    2824:	e6 01       	movw	r28, r12
    2826:	28 81       	ld	r18, Y
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	3a 2b       	or	r19, r26
    282c:	23 2b       	or	r18, r19
    282e:	49 f2       	breq	.-110    	; 0x27c2 <Endpoint_Read_Control_Stream_LE+0x72>
    2830:	a8 2f       	mov	r26, r24
    2832:	b9 2f       	mov	r27, r25
    2834:	b4 cf       	rjmp	.-152    	; 0x279e <Endpoint_Read_Control_Stream_LE+0x4e>
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	ff 90       	pop	r15
    2840:	df 90       	pop	r13
    2842:	cf 90       	pop	r12
    2844:	08 95       	ret

00002846 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    2846:	cf 92       	push	r12
    2848:	df 92       	push	r13
    284a:	ff 92       	push	r15
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2854:	20 91 cc 05 	lds	r18, 0x05CC
    2858:	30 91 cd 05 	lds	r19, 0x05CD
    285c:	26 17       	cp	r18, r22
    285e:	37 07       	cpc	r19, r23
    2860:	58 f0       	brcs	.+22     	; 0x2878 <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2862:	61 15       	cp	r22, r1
    2864:	71 05       	cpc	r23, r1
    2866:	39 f4       	brne	.+14     	; 0x2876 <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2868:	e8 ee       	ldi	r30, 0xE8	; 232
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	20 81       	ld	r18, Z
    286e:	2e 77       	andi	r18, 0x7E	; 126
    2870:	20 83       	st	Z, r18
    2872:	9b 01       	movw	r18, r22
    2874:	01 c0       	rjmp	.+2      	; 0x2878 <Endpoint_Write_Control_PStream_LE+0x32>
    2876:	9b 01       	movw	r18, r22
    2878:	e8 2f       	mov	r30, r24
    287a:	f9 2f       	mov	r31, r25
    287c:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    287e:	a8 ee       	ldi	r26, 0xE8	; 232
    2880:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2882:	63 ef       	ldi	r22, 0xF3	; 243
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	42 ef       	ldi	r20, 0xF2	; 242
    2888:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    288a:	0f 2e       	mov	r0, r31
    288c:	f1 ef       	ldi	r31, 0xF1	; 241
    288e:	cf 2e       	mov	r12, r31
    2890:	d1 2c       	mov	r13, r1
    2892:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2894:	01 e0       	ldi	r16, 0x01	; 1
    2896:	f1 2c       	mov	r15, r1
    2898:	33 c0       	rjmp	.+102    	; 0x2900 <Endpoint_Write_Control_PStream_LE+0xba>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    289a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    289c:	88 23       	and	r24, r24
    289e:	09 f4       	brne	.+2      	; 0x28a2 <Endpoint_Write_Control_PStream_LE+0x5c>
    28a0:	42 c0       	rjmp	.+132    	; 0x2926 <Endpoint_Write_Control_PStream_LE+0xe0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    28a2:	85 30       	cpi	r24, 0x05	; 5
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <Endpoint_Write_Control_PStream_LE+0x62>
    28a6:	41 c0       	rjmp	.+130    	; 0x292a <Endpoint_Write_Control_PStream_LE+0xe4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    28a8:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    28aa:	83 fd       	sbrc	r24, 3
    28ac:	40 c0       	rjmp	.+128    	; 0x292e <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    28ae:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    28b0:	82 ff       	sbrs	r24, 2
    28b2:	03 c0       	rjmp	.+6      	; 0x28ba <Endpoint_Write_Control_PStream_LE+0x74>
    28b4:	e8 ee       	ldi	r30, 0xE8	; 232
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	31 c0       	rjmp	.+98     	; 0x291c <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    28ba:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    28bc:	80 ff       	sbrs	r24, 0
    28be:	20 c0       	rjmp	.+64     	; 0x2900 <Endpoint_Write_Control_PStream_LE+0xba>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    28c0:	eb 01       	movw	r28, r22
    28c2:	18 81       	ld	r17, Y
    28c4:	ea 01       	movw	r28, r20
    28c6:	88 81       	ld	r24, Y
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    28cc:	21 15       	cp	r18, r1
    28ce:	31 05       	cpc	r19, r1
    28d0:	81 f0       	breq	.+32     	; 0x28f2 <Endpoint_Write_Control_PStream_LE+0xac>
    28d2:	88 30       	cpi	r24, 0x08	; 8
    28d4:	91 05       	cpc	r25, r1
    28d6:	68 f4       	brcc	.+26     	; 0x28f2 <Endpoint_Write_Control_PStream_LE+0xac>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    28d8:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    28da:	e6 01       	movw	r28, r12
    28dc:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    28de:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    28e0:	21 50       	subi	r18, 0x01	; 1
    28e2:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    28e4:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    28e6:	21 15       	cp	r18, r1
    28e8:	31 05       	cpc	r19, r1
    28ea:	19 f0       	breq	.+6      	; 0x28f2 <Endpoint_Write_Control_PStream_LE+0xac>
    28ec:	88 30       	cpi	r24, 0x08	; 8
    28ee:	91 05       	cpc	r25, r1
    28f0:	99 f7       	brne	.-26     	; 0x28d8 <Endpoint_Write_Control_PStream_LE+0x92>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    28f2:	10 2f       	mov	r17, r16
    28f4:	08 97       	sbiw	r24, 0x08	; 8
    28f6:	09 f0       	breq	.+2      	; 0x28fa <Endpoint_Write_Control_PStream_LE+0xb4>
    28f8:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    28fa:	8c 91       	ld	r24, X
    28fc:	8e 77       	andi	r24, 0x7E	; 126
    28fe:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2900:	21 15       	cp	r18, r1
    2902:	31 05       	cpc	r19, r1
    2904:	51 f6       	brne	.-108    	; 0x289a <Endpoint_Write_Control_PStream_LE+0x54>
    2906:	11 11       	cpse	r17, r1
    2908:	c8 cf       	rjmp	.-112    	; 0x289a <Endpoint_Write_Control_PStream_LE+0x54>
    290a:	d4 cf       	rjmp	.-88     	; 0x28b4 <Endpoint_Write_Control_PStream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    290c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    290e:	88 23       	and	r24, r24
    2910:	81 f0       	breq	.+32     	; 0x2932 <Endpoint_Write_Control_PStream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2912:	85 30       	cpi	r24, 0x05	; 5
    2914:	81 f0       	breq	.+32     	; 0x2936 <Endpoint_Write_Control_PStream_LE+0xf0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2916:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2918:	83 fd       	sbrc	r24, 3
    291a:	0f c0       	rjmp	.+30     	; 0x293a <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    291c:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    291e:	82 ff       	sbrs	r24, 2
    2920:	f5 cf       	rjmp	.-22     	; 0x290c <Endpoint_Write_Control_PStream_LE+0xc6>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	0b c0       	rjmp	.+22     	; 0x293c <Endpoint_Write_Control_PStream_LE+0xf6>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	09 c0       	rjmp	.+18     	; 0x293c <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	07 c0       	rjmp	.+14     	; 0x293c <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	05 c0       	rjmp	.+10     	; 0x293c <Endpoint_Write_Control_PStream_LE+0xf6>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2932:	82 e0       	ldi	r24, 0x02	; 2
    2934:	03 c0       	rjmp	.+6      	; 0x293c <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2936:	83 e0       	ldi	r24, 0x03	; 3
    2938:	01 c0       	rjmp	.+2      	; 0x293c <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    293a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	1f 91       	pop	r17
    2942:	0f 91       	pop	r16
    2944:	ff 90       	pop	r15
    2946:	df 90       	pop	r13
    2948:	cf 90       	pop	r12
    294a:	08 95       	ret

0000294c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    294c:	8f 92       	push	r8
    294e:	9f 92       	push	r9
    2950:	bf 92       	push	r11
    2952:	cf 92       	push	r12
    2954:	df 92       	push	r13
    2956:	ef 92       	push	r14
    2958:	ff 92       	push	r15
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	87 30       	cpi	r24, 0x07	; 7
    2964:	70 f1       	brcs	.+92     	; 0x29c2 <Endpoint_ConfigureEndpoint_Prv+0x76>
    2966:	26 c0       	rjmp	.+76     	; 0x29b4 <Endpoint_ConfigureEndpoint_Prv+0x68>
    2968:	59 2f       	mov	r21, r25
    296a:	5f 70       	andi	r21, 0x0F	; 15
    296c:	e8 01       	movw	r28, r16
    296e:	58 83       	st	Y, r21
    2970:	89 17       	cp	r24, r25
    2972:	31 f0       	breq	.+12     	; 0x2980 <Endpoint_ConfigureEndpoint_Prv+0x34>
    2974:	e9 01       	movw	r28, r18
    2976:	d8 80       	ld	r13, Y
    2978:	50 81       	ld	r21, Z
    297a:	e4 01       	movw	r28, r8
    297c:	78 81       	ld	r23, Y
    297e:	03 c0       	rjmp	.+6      	; 0x2986 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    2980:	5b 2d       	mov	r21, r11
    2982:	d6 2e       	mov	r13, r22
    2984:	7c 2d       	mov	r23, r12
    2986:	51 ff       	sbrs	r21, 1
    2988:	12 c0       	rjmp	.+36     	; 0x29ae <Endpoint_ConfigureEndpoint_Prv+0x62>
    298a:	4c 91       	ld	r20, X
    298c:	4e 7f       	andi	r20, 0xFE	; 254
    298e:	4c 93       	st	X, r20
    2990:	40 81       	ld	r20, Z
    2992:	4d 7f       	andi	r20, 0xFD	; 253
    2994:	40 83       	st	Z, r20
    2996:	4c 91       	ld	r20, X
    2998:	41 60       	ori	r20, 0x01	; 1
    299a:	4c 93       	st	X, r20
    299c:	e9 01       	movw	r28, r18
    299e:	d8 82       	st	Y, r13
    29a0:	50 83       	st	Z, r21
    29a2:	e4 01       	movw	r28, r8
    29a4:	78 83       	st	Y, r23
    29a6:	e7 01       	movw	r28, r14
    29a8:	58 81       	ld	r21, Y
    29aa:	55 23       	and	r21, r21
    29ac:	44 f4       	brge	.+16     	; 0x29be <Endpoint_ConfigureEndpoint_Prv+0x72>
    29ae:	9f 5f       	subi	r25, 0xFF	; 255
    29b0:	97 30       	cpi	r25, 0x07	; 7
    29b2:	d1 f6       	brne	.-76     	; 0x2968 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    29b4:	8f 70       	andi	r24, 0x0F	; 15
    29b6:	80 93 e9 00 	sts	0x00E9, r24
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	1f c0       	rjmp	.+62     	; 0x29fc <Endpoint_ConfigureEndpoint_Prv+0xb0>
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	1d c0       	rjmp	.+58     	; 0x29fc <Endpoint_ConfigureEndpoint_Prv+0xb0>
    29c2:	98 2f       	mov	r25, r24
    29c4:	9f 70       	andi	r25, 0x0F	; 15
    29c6:	90 93 e9 00 	sts	0x00E9, r25
    29ca:	98 2f       	mov	r25, r24
    29cc:	54 2f       	mov	r21, r20
    29ce:	d6 2e       	mov	r13, r22
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	ab ee       	ldi	r26, 0xEB	; 235
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	ed ee       	ldi	r30, 0xED	; 237
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	2c ee       	ldi	r18, 0xEC	; 236
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	0f 2e       	mov	r0, r31
    29e0:	f0 ef       	ldi	r31, 0xF0	; 240
    29e2:	8f 2e       	mov	r8, r31
    29e4:	91 2c       	mov	r9, r1
    29e6:	f0 2d       	mov	r31, r0
    29e8:	0f 2e       	mov	r0, r31
    29ea:	fe ee       	ldi	r31, 0xEE	; 238
    29ec:	ef 2e       	mov	r14, r31
    29ee:	f1 2c       	mov	r15, r1
    29f0:	f0 2d       	mov	r31, r0
    29f2:	09 ee       	ldi	r16, 0xE9	; 233
    29f4:	10 e0       	ldi	r17, 0x00	; 0
    29f6:	b4 2e       	mov	r11, r20
    29f8:	c1 2c       	mov	r12, r1
    29fa:	c5 cf       	rjmp	.-118    	; 0x2986 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	1f 91       	pop	r17
    2a02:	0f 91       	pop	r16
    2a04:	ff 90       	pop	r15
    2a06:	ef 90       	pop	r14
    2a08:	df 90       	pop	r13
    2a0a:	cf 90       	pop	r12
    2a0c:	bf 90       	pop	r11
    2a0e:	9f 90       	pop	r9
    2a10:	8f 90       	pop	r8
    2a12:	08 95       	ret

00002a14 <Endpoint_ConfigureEndpointTable>:
    2a14:	bf 92       	push	r11
    2a16:	cf 92       	push	r12
    2a18:	df 92       	push	r13
    2a1a:	ef 92       	push	r14
    2a1c:	ff 92       	push	r15
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	06 2f       	mov	r16, r22
    2a28:	66 23       	and	r22, r22
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <Endpoint_ConfigureEndpointTable+0x1a>
    2a2c:	41 c0       	rjmp	.+130    	; 0x2ab0 <Endpoint_ConfigureEndpointTable+0x9c>
    2a2e:	c8 2f       	mov	r28, r24
    2a30:	d9 2f       	mov	r29, r25
    2a32:	10 e0       	ldi	r17, 0x00	; 0
    2a34:	f1 2c       	mov	r15, r1
    2a36:	68 94       	set
    2a38:	dd 24       	eor	r13, r13
    2a3a:	d3 f8       	bld	r13, 3
    2a3c:	e1 2c       	mov	r14, r1
    2a3e:	68 94       	set
    2a40:	bb 24       	eor	r11, r11
    2a42:	b1 f8       	bld	r11, 1
    2a44:	0f 2e       	mov	r0, r31
    2a46:	f6 e0       	ldi	r31, 0x06	; 6
    2a48:	cf 2e       	mov	r12, r31
    2a4a:	f0 2d       	mov	r31, r0
    2a4c:	58 81       	ld	r21, Y
    2a4e:	55 23       	and	r21, r21
    2a50:	51 f1       	breq	.+84     	; 0x2aa6 <Endpoint_ConfigureEndpointTable+0x92>
    2a52:	9c 81       	ldd	r25, Y+4	; 0x04
    2a54:	e9 81       	ldd	r30, Y+1	; 0x01
    2a56:	fa 81       	ldd	r31, Y+2	; 0x02
    2a58:	7b 81       	ldd	r23, Y+3	; 0x03
    2a5a:	85 2f       	mov	r24, r21
    2a5c:	8f 70       	andi	r24, 0x0F	; 15
    2a5e:	87 30       	cpi	r24, 0x07	; 7
    2a60:	48 f5       	brcc	.+82     	; 0x2ab4 <Endpoint_ConfigureEndpointTable+0xa0>
    2a62:	92 30       	cpi	r25, 0x02	; 2
    2a64:	10 f0       	brcs	.+4      	; 0x2a6a <Endpoint_ConfigureEndpointTable+0x56>
    2a66:	4c 2d       	mov	r20, r12
    2a68:	01 c0       	rjmp	.+2      	; 0x2a6c <Endpoint_ConfigureEndpointTable+0x58>
    2a6a:	4b 2d       	mov	r20, r11
    2a6c:	e9 30       	cpi	r30, 0x09	; 9
    2a6e:	f1 05       	cpc	r31, r1
    2a70:	50 f0       	brcs	.+20     	; 0x2a86 <Endpoint_ConfigureEndpointTable+0x72>
    2a72:	2d 2d       	mov	r18, r13
    2a74:	3e 2d       	mov	r19, r14
    2a76:	9f 2d       	mov	r25, r15
    2a78:	9f 5f       	subi	r25, 0xFF	; 255
    2a7a:	22 0f       	add	r18, r18
    2a7c:	33 1f       	adc	r19, r19
    2a7e:	2e 17       	cp	r18, r30
    2a80:	3f 07       	cpc	r19, r31
    2a82:	d0 f3       	brcs	.-12     	; 0x2a78 <Endpoint_ConfigureEndpointTable+0x64>
    2a84:	01 c0       	rjmp	.+2      	; 0x2a88 <Endpoint_ConfigureEndpointTable+0x74>
    2a86:	9f 2d       	mov	r25, r15
    2a88:	92 95       	swap	r25
    2a8a:	90 7f       	andi	r25, 0xF0	; 240
    2a8c:	49 2b       	or	r20, r25
    2a8e:	55 1f       	adc	r21, r21
    2a90:	55 27       	eor	r21, r21
    2a92:	55 1f       	adc	r21, r21
    2a94:	90 e4       	ldi	r25, 0x40	; 64
    2a96:	79 9f       	mul	r23, r25
    2a98:	90 01       	movw	r18, r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	65 2f       	mov	r22, r21
    2a9e:	62 2b       	or	r22, r18
    2aa0:	55 df       	rcall	.-342    	; 0x294c <Endpoint_ConfigureEndpoint_Prv>
    2aa2:	88 23       	and	r24, r24
    2aa4:	51 f0       	breq	.+20     	; 0x2aba <Endpoint_ConfigureEndpointTable+0xa6>
    2aa6:	1f 5f       	subi	r17, 0xFF	; 255
    2aa8:	25 96       	adiw	r28, 0x05	; 5
    2aaa:	10 13       	cpse	r17, r16
    2aac:	cf cf       	rjmp	.-98     	; 0x2a4c <Endpoint_ConfigureEndpointTable+0x38>
    2aae:	04 c0       	rjmp	.+8      	; 0x2ab8 <Endpoint_ConfigureEndpointTable+0xa4>
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	03 c0       	rjmp	.+6      	; 0x2aba <Endpoint_ConfigureEndpointTable+0xa6>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	01 c0       	rjmp	.+2      	; 0x2aba <Endpoint_ConfigureEndpointTable+0xa6>
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	1f 91       	pop	r17
    2ac0:	0f 91       	pop	r16
    2ac2:	ff 90       	pop	r15
    2ac4:	ef 90       	pop	r14
    2ac6:	df 90       	pop	r13
    2ac8:	cf 90       	pop	r12
    2aca:	bf 90       	pop	r11
    2acc:	08 95       	ret

00002ace <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2ace:	80 91 c6 05 	lds	r24, 0x05C6
    2ad2:	88 23       	and	r24, r24
    2ad4:	1c f0       	brlt	.+6      	; 0x2adc <Endpoint_ClearStatusStage+0xe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2ad6:	e8 ee       	ldi	r30, 0xE8	; 232
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	12 c0       	rjmp	.+36     	; 0x2b00 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2adc:	e8 ee       	ldi	r30, 0xE8	; 232
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	03 c0       	rjmp	.+6      	; 0x2ae8 <Endpoint_ClearStatusStage+0x1a>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2ae2:	8e b3       	in	r24, 0x1e	; 30
    2ae4:	88 23       	and	r24, r24
    2ae6:	a1 f0       	breq	.+40     	; 0x2b10 <Endpoint_ClearStatusStage+0x42>
    2ae8:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2aea:	82 ff       	sbrs	r24, 2
    2aec:	fa cf       	rjmp	.-12     	; 0x2ae2 <Endpoint_ClearStatusStage+0x14>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2aee:	e8 ee       	ldi	r30, 0xE8	; 232
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	8b 77       	andi	r24, 0x7B	; 123
    2af6:	80 83       	st	Z, r24
    2af8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2afa:	8e b3       	in	r24, 0x1e	; 30
    2afc:	88 23       	and	r24, r24
    2afe:	41 f0       	breq	.+16     	; 0x2b10 <Endpoint_ClearStatusStage+0x42>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2b00:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2b02:	80 ff       	sbrs	r24, 0
    2b04:	fa cf       	rjmp	.-12     	; 0x2afa <Endpoint_ClearStatusStage+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2b06:	e8 ee       	ldi	r30, 0xE8	; 232
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	8e 77       	andi	r24, 0x7E	; 126
    2b0e:	80 83       	st	Z, r24
    2b10:	08 95       	ret

00002b12 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2b1a:	4b d0       	rcall	.+150    	; 0x2bb2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2b1c:	52 d0       	rcall	.+164    	; 0x2bc2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2b1e:	c8 ed       	ldi	r28, 0xD8	; 216
    2b20:	d0 e0       	ldi	r29, 0x00	; 0
    2b22:	88 81       	ld	r24, Y
    2b24:	8f 77       	andi	r24, 0x7F	; 127
    2b26:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    2b28:	88 81       	ld	r24, Y
    2b2a:	80 68       	ori	r24, 0x80	; 128
    2b2c:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2b2e:	88 81       	ld	r24, Y
    2b30:	8f 7d       	andi	r24, 0xDF	; 223
    2b32:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2b34:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2b36:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    2b38:	10 92 c2 05 	sts	0x05C2, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2b3c:	10 92 c4 05 	sts	0x05C4, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2b40:	10 92 c3 05 	sts	0x05C3, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2b44:	00 ee       	ldi	r16, 0xE0	; 224
    2b46:	10 e0       	ldi	r17, 0x00	; 0
    2b48:	f8 01       	movw	r30, r16
    2b4a:	80 81       	ld	r24, Z
    2b4c:	8b 7f       	andi	r24, 0xFB	; 251
    2b4e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2b50:	88 81       	ld	r24, Y
    2b52:	81 60       	ori	r24, 0x01	; 1
    2b54:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2b56:	42 e0       	ldi	r20, 0x02	; 2
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	f7 de       	rcall	.-530    	; 0x294c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2b5e:	e1 ee       	ldi	r30, 0xE1	; 225
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	8e 7f       	andi	r24, 0xFE	; 254
    2b66:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2b68:	e2 ee       	ldi	r30, 0xE2	; 226
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	81 60       	ori	r24, 0x01	; 1
    2b70:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2b72:	80 81       	ld	r24, Z
    2b74:	88 60       	ori	r24, 0x08	; 8
    2b76:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2b78:	f8 01       	movw	r30, r16
    2b7a:	80 81       	ld	r24, Z
    2b7c:	8e 7f       	andi	r24, 0xFE	; 254
    2b7e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2b80:	88 81       	ld	r24, Y
    2b82:	80 61       	ori	r24, 0x10	; 16
    2b84:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2b86:	df 91       	pop	r29
    2b88:	cf 91       	pop	r28
    2b8a:	1f 91       	pop	r17
    2b8c:	0f 91       	pop	r16
    2b8e:	08 95       	ret

00002b90 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2b90:	e8 ed       	ldi	r30, 0xD8	; 216
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	8f 7e       	andi	r24, 0xEF	; 239
    2b98:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2b9a:	e7 ed       	ldi	r30, 0xD7	; 215
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	81 60       	ori	r24, 0x01	; 1
    2ba2:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    2ba4:	84 e0       	ldi	r24, 0x04	; 4
    2ba6:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	80 93 c5 05 	sts	0x05C5, r24

	USB_ResetInterface();
    2bae:	b1 cf       	rjmp	.-158    	; 0x2b12 <USB_ResetInterface>
    2bb0:	08 95       	ret

00002bb2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    2bb2:	e8 ed       	ldi	r30, 0xD8	; 216
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	8e 7f       	andi	r24, 0xFE	; 254
    2bba:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2bbc:	10 92 e2 00 	sts	0x00E2, r1
    2bc0:	08 95       	ret

00002bc2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2bc2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2bc6:	10 92 e1 00 	sts	0x00E1, r1
    2bca:	08 95       	ret

00002bcc <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2bcc:	1f 92       	push	r1
    2bce:	0f 92       	push	r0
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	0f 92       	push	r0
    2bd4:	11 24       	eor	r1, r1
    2bd6:	2f 93       	push	r18
    2bd8:	3f 93       	push	r19
    2bda:	4f 93       	push	r20
    2bdc:	5f 93       	push	r21
    2bde:	6f 93       	push	r22
    2be0:	7f 93       	push	r23
    2be2:	8f 93       	push	r24
    2be4:	9f 93       	push	r25
    2be6:	af 93       	push	r26
    2be8:	bf 93       	push	r27
    2bea:	ef 93       	push	r30
    2bec:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2bee:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2bf2:	82 ff       	sbrs	r24, 2
    2bf4:	0a c0       	rjmp	.+20     	; 0x2c0a <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2bf6:	80 91 e2 00 	lds	r24, 0x00E2
    2bfa:	82 ff       	sbrs	r24, 2
    2bfc:	06 c0       	rjmp	.+12     	; 0x2c0a <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2bfe:	e1 ee       	ldi	r30, 0xE1	; 225
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	8b 7f       	andi	r24, 0xFB	; 251
    2c06:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2c08:	43 d2       	rcall	.+1158   	; 0x3090 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    2c0a:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2c0e:	80 ff       	sbrs	r24, 0
    2c10:	1a c0       	rjmp	.+52     	; 0x2c46 <__vector_10+0x7a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2c12:	80 91 d8 00 	lds	r24, 0x00D8
    2c16:	80 ff       	sbrs	r24, 0
    2c18:	16 c0       	rjmp	.+44     	; 0x2c46 <__vector_10+0x7a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    2c1a:	ea ed       	ldi	r30, 0xDA	; 218
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	8e 7f       	andi	r24, 0xFE	; 254
    2c22:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2c24:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2c28:	80 ff       	sbrs	r24, 0
    2c2a:	0a c0       	rjmp	.+20     	; 0x2c40 <__vector_10+0x74>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2c2c:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2c2e:	82 e0       	ldi	r24, 0x02	; 2
    2c30:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2c32:	09 b4       	in	r0, 0x29	; 41
    2c34:	00 fe       	sbrs	r0, 0
    2c36:	fd cf       	rjmp	.-6      	; 0x2c32 <__vector_10+0x66>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    2c3c:	28 db       	rcall	.-2480   	; 0x228e <EVENT_USB_Device_Connect>
    2c3e:	03 c0       	rjmp	.+6      	; 0x2c46 <__vector_10+0x7a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2c40:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2c42:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    2c44:	25 db       	rcall	.-2486   	; 0x2290 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2c46:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2c4a:	80 ff       	sbrs	r24, 0
    2c4c:	15 c0       	rjmp	.+42     	; 0x2c78 <__vector_10+0xac>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2c4e:	80 91 e2 00 	lds	r24, 0x00E2
    2c52:	80 ff       	sbrs	r24, 0
    2c54:	11 c0       	rjmp	.+34     	; 0x2c78 <__vector_10+0xac>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2c56:	e2 ee       	ldi	r30, 0xE2	; 226
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	8e 7f       	andi	r24, 0xFE	; 254
    2c5e:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2c60:	80 81       	ld	r24, Z
    2c62:	80 61       	ori	r24, 0x10	; 16
    2c64:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2c66:	e8 ed       	ldi	r30, 0xD8	; 216
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	80 62       	ori	r24, 0x20	; 32
    2c6e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2c70:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2c72:	85 e0       	ldi	r24, 0x05	; 5
    2c74:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    2c76:	0c d2       	rcall	.+1048   	; 0x3090 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2c78:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2c7c:	84 ff       	sbrs	r24, 4
    2c7e:	2c c0       	rjmp	.+88     	; 0x2cd8 <__vector_10+0x10c>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2c80:	80 91 e2 00 	lds	r24, 0x00E2
    2c84:	84 ff       	sbrs	r24, 4
    2c86:	28 c0       	rjmp	.+80     	; 0x2cd8 <__vector_10+0x10c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2c88:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2c8a:	82 e0       	ldi	r24, 0x02	; 2
    2c8c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2c8e:	09 b4       	in	r0, 0x29	; 41
    2c90:	00 fe       	sbrs	r0, 0
    2c92:	fd cf       	rjmp	.-6      	; 0x2c8e <__vector_10+0xc2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2c94:	e8 ed       	ldi	r30, 0xD8	; 216
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	8f 7d       	andi	r24, 0xDF	; 223
    2c9c:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2c9e:	e1 ee       	ldi	r30, 0xE1	; 225
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	8f 7e       	andi	r24, 0xEF	; 239
    2ca6:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2ca8:	e2 ee       	ldi	r30, 0xE2	; 226
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	8f 7e       	andi	r24, 0xEF	; 239
    2cb0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2cb2:	80 81       	ld	r24, Z
    2cb4:	81 60       	ori	r24, 0x01	; 1
    2cb6:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2cb8:	80 91 c2 05 	lds	r24, 0x05C2
    2cbc:	88 23       	and	r24, r24
    2cbe:	19 f0       	breq	.+6      	; 0x2cc6 <__vector_10+0xfa>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2cc0:	84 e0       	ldi	r24, 0x04	; 4
    2cc2:	8e bb       	out	0x1e, r24	; 30
    2cc4:	08 c0       	rjmp	.+16     	; 0x2cd6 <__vector_10+0x10a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2cc6:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2cca:	88 23       	and	r24, r24
    2ccc:	14 f4       	brge	.+4      	; 0x2cd2 <__vector_10+0x106>
    2cce:	83 e0       	ldi	r24, 0x03	; 3
    2cd0:	01 c0       	rjmp	.+2      	; 0x2cd4 <__vector_10+0x108>
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2cd6:	dc d1       	rcall	.+952    	; 0x3090 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2cd8:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2cdc:	83 ff       	sbrs	r24, 3
    2cde:	22 c0       	rjmp	.+68     	; 0x2d24 <__vector_10+0x158>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2ce0:	80 91 e2 00 	lds	r24, 0x00E2
    2ce4:	83 ff       	sbrs	r24, 3
    2ce6:	1e c0       	rjmp	.+60     	; 0x2d24 <__vector_10+0x158>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2ce8:	e1 ee       	ldi	r30, 0xE1	; 225
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	87 7f       	andi	r24, 0xF7	; 247
    2cf0:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    2cf6:	10 92 c2 05 	sts	0x05C2, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2cfa:	80 81       	ld	r24, Z
    2cfc:	8e 7f       	andi	r24, 0xFE	; 254
    2cfe:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2d00:	e2 ee       	ldi	r30, 0xE2	; 226
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	8e 7f       	andi	r24, 0xFE	; 254
    2d08:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2d0a:	80 81       	ld	r24, Z
    2d0c:	80 61       	ori	r24, 0x10	; 16
    2d0e:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2d10:	42 e0       	ldi	r20, 0x02	; 2
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	1a de       	rcall	.-972    	; 0x294c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2d18:	e0 ef       	ldi	r30, 0xF0	; 240
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	88 60       	ori	r24, 0x08	; 8
    2d20:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2d22:	b6 d1       	rcall	.+876    	; 0x3090 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2d24:	ff 91       	pop	r31
    2d26:	ef 91       	pop	r30
    2d28:	bf 91       	pop	r27
    2d2a:	af 91       	pop	r26
    2d2c:	9f 91       	pop	r25
    2d2e:	8f 91       	pop	r24
    2d30:	7f 91       	pop	r23
    2d32:	6f 91       	pop	r22
    2d34:	5f 91       	pop	r21
    2d36:	4f 91       	pop	r20
    2d38:	3f 91       	pop	r19
    2d3a:	2f 91       	pop	r18
    2d3c:	0f 90       	pop	r0
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	0f 90       	pop	r0
    2d42:	1f 90       	pop	r1
    2d44:	18 95       	reti

00002d46 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2d46:	1f 92       	push	r1
    2d48:	0f 92       	push	r0
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	0f 92       	push	r0
    2d4e:	11 24       	eor	r1, r1
    2d50:	2f 93       	push	r18
    2d52:	3f 93       	push	r19
    2d54:	4f 93       	push	r20
    2d56:	5f 93       	push	r21
    2d58:	6f 93       	push	r22
    2d5a:	7f 93       	push	r23
    2d5c:	8f 93       	push	r24
    2d5e:	9f 93       	push	r25
    2d60:	af 93       	push	r26
    2d62:	bf 93       	push	r27
    2d64:	cf 93       	push	r28
    2d66:	ef 93       	push	r30
    2d68:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2d6a:	c0 91 e9 00 	lds	r28, 0x00E9
    2d6e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2d70:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2d74:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2d78:	e0 ef       	ldi	r30, 0xF0	; 240
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	87 7f       	andi	r24, 0xF7	; 247
    2d80:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    2d82:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    2d84:	1b d0       	rcall	.+54     	; 0x2dbc <USB_Device_ProcessControlRequest>
    2d86:	e9 ee       	ldi	r30, 0xE9	; 233
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2d8c:	a0 ef       	ldi	r26, 0xF0	; 240
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	8c 91       	ld	r24, X
    2d92:	88 60       	ori	r24, 0x08	; 8
    2d94:	8c 93       	st	X, r24
    2d96:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    2d98:	ff 91       	pop	r31
    2d9a:	ef 91       	pop	r30
    2d9c:	cf 91       	pop	r28
    2d9e:	bf 91       	pop	r27
    2da0:	af 91       	pop	r26
    2da2:	9f 91       	pop	r25
    2da4:	8f 91       	pop	r24
    2da6:	7f 91       	pop	r23
    2da8:	6f 91       	pop	r22
    2daa:	5f 91       	pop	r21
    2dac:	4f 91       	pop	r20
    2dae:	3f 91       	pop	r19
    2db0:	2f 91       	pop	r18
    2db2:	0f 90       	pop	r0
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	0f 90       	pop	r0
    2db8:	1f 90       	pop	r1
    2dba:	18 95       	reti

00002dbc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2dbc:	0f 93       	push	r16
    2dbe:	1f 93       	push	r17
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	aa 97       	sbiw	r28, 0x2a	; 42
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	cd bf       	out	0x3d, r28	; 61
    2dd4:	e6 ec       	ldi	r30, 0xC6	; 198
    2dd6:	f5 e0       	ldi	r31, 0x05	; 5
    2dd8:	8e ec       	ldi	r24, 0xCE	; 206
    2dda:	95 e0       	ldi	r25, 0x05	; 5
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2ddc:	a1 ef       	ldi	r26, 0xF1	; 241
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	2c 91       	ld	r18, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2de2:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2de4:	e8 17       	cp	r30, r24
    2de6:	f9 07       	cpc	r31, r25
    2de8:	d9 f7       	brne	.-10     	; 0x2de0 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2dea:	5a da       	rcall	.-2892   	; 0x22a0 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2dec:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2df0:	83 ff       	sbrs	r24, 3
    2df2:	29 c1       	rjmp	.+594    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2df4:	90 91 c6 05 	lds	r25, 0x05C6

		switch (USB_ControlRequest.bRequest)
    2df8:	80 91 c7 05 	lds	r24, 0x05C7
    2dfc:	85 30       	cpi	r24, 0x05	; 5
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <USB_Device_ProcessControlRequest+0x46>
    2e00:	78 c0       	rjmp	.+240    	; 0x2ef2 <USB_Device_ProcessControlRequest+0x136>
    2e02:	30 f4       	brcc	.+12     	; 0x2e10 <USB_Device_ProcessControlRequest+0x54>
    2e04:	81 30       	cpi	r24, 0x01	; 1
    2e06:	b1 f1       	breq	.+108    	; 0x2e74 <USB_Device_ProcessControlRequest+0xb8>
    2e08:	68 f0       	brcs	.+26     	; 0x2e24 <USB_Device_ProcessControlRequest+0x68>
    2e0a:	83 30       	cpi	r24, 0x03	; 3
    2e0c:	99 f1       	breq	.+102    	; 0x2e74 <USB_Device_ProcessControlRequest+0xb8>
    2e0e:	1b c1       	rjmp	.+566    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
    2e10:	88 30       	cpi	r24, 0x08	; 8
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <USB_Device_ProcessControlRequest+0x5a>
    2e14:	e8 c0       	rjmp	.+464    	; 0x2fe6 <USB_Device_ProcessControlRequest+0x22a>
    2e16:	89 30       	cpi	r24, 0x09	; 9
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <USB_Device_ProcessControlRequest+0x60>
    2e1a:	f5 c0       	rjmp	.+490    	; 0x3006 <USB_Device_ProcessControlRequest+0x24a>
    2e1c:	86 30       	cpi	r24, 0x06	; 6
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <USB_Device_ProcessControlRequest+0x66>
    2e20:	12 c1       	rjmp	.+548    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
    2e22:	89 c0       	rjmp	.+274    	; 0x2f36 <USB_Device_ProcessControlRequest+0x17a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2e24:	90 38       	cpi	r25, 0x80	; 128
    2e26:	21 f0       	breq	.+8      	; 0x2e30 <USB_Device_ProcessControlRequest+0x74>
    2e28:	92 38       	cpi	r25, 0x82	; 130
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <USB_Device_ProcessControlRequest+0x72>
    2e2c:	0c c1       	rjmp	.+536    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
    2e2e:	08 c0       	rjmp	.+16     	; 0x2e40 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2e30:	80 91 c3 05 	lds	r24, 0x05C3
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2e34:	90 91 c4 05 	lds	r25, 0x05C4
    2e38:	99 23       	and	r25, r25
    2e3a:	71 f0       	breq	.+28     	; 0x2e58 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2e3c:	82 60       	ori	r24, 0x02	; 2
    2e3e:	0c c0       	rjmp	.+24     	; 0x2e58 <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2e40:	80 91 ca 05 	lds	r24, 0x05CA
    2e44:	8f 70       	andi	r24, 0x0F	; 15
    2e46:	e9 ee       	ldi	r30, 0xE9	; 233
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2e4c:	80 91 eb 00 	lds	r24, 0x00EB
    2e50:	85 fb       	bst	r24, 5
    2e52:	88 27       	eor	r24, r24
    2e54:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2e56:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2e58:	e8 ee       	ldi	r30, 0xE8	; 232
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	90 81       	ld	r25, Z
    2e5e:	97 7f       	andi	r25, 0xF7	; 247
    2e60:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2e62:	a1 ef       	ldi	r26, 0xF1	; 241
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    2e68:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2e6a:	80 81       	ld	r24, Z
    2e6c:	8e 77       	andi	r24, 0x7E	; 126
    2e6e:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2e70:	2e de       	rcall	.-932    	; 0x2ace <Endpoint_ClearStatusStage>
    2e72:	e9 c0       	rjmp	.+466    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2e74:	99 23       	and	r25, r25
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <USB_Device_ProcessControlRequest+0xbe>
    2e78:	f5 c0       	rjmp	.+490    	; 0x3064 <USB_Device_ProcessControlRequest+0x2a8>
    2e7a:	92 30       	cpi	r25, 0x02	; 2
    2e7c:	09 f0       	breq	.+2      	; 0x2e80 <USB_Device_ProcessControlRequest+0xc4>
    2e7e:	e3 c0       	rjmp	.+454    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
    2e80:	f6 c0       	rjmp	.+492    	; 0x306e <USB_Device_ProcessControlRequest+0x2b2>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2e82:	91 e0       	ldi	r25, 0x01	; 1
    2e84:	83 30       	cpi	r24, 0x03	; 3
    2e86:	09 f0       	breq	.+2      	; 0x2e8a <USB_Device_ProcessControlRequest+0xce>
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	90 93 c4 05 	sts	0x05C4, r25
    2e8e:	28 c0       	rjmp	.+80     	; 0x2ee0 <USB_Device_ProcessControlRequest+0x124>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2e90:	20 91 ca 05 	lds	r18, 0x05CA
    2e94:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <USB_Device_ProcessControlRequest+0xde>
    2e98:	d6 c0       	rjmp	.+428    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2e9a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2e9e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2ea2:	80 ff       	sbrs	r24, 0
    2ea4:	1d c0       	rjmp	.+58     	; 0x2ee0 <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2ea6:	80 91 c7 05 	lds	r24, 0x05C7
    2eaa:	83 30       	cpi	r24, 0x03	; 3
    2eac:	31 f4       	brne	.+12     	; 0x2eba <USB_Device_ProcessControlRequest+0xfe>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2eae:	eb ee       	ldi	r30, 0xEB	; 235
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	80 62       	ori	r24, 0x20	; 32
    2eb6:	80 83       	st	Z, r24
    2eb8:	13 c0       	rjmp	.+38     	; 0x2ee0 <USB_Device_ProcessControlRequest+0x124>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2eba:	eb ee       	ldi	r30, 0xEB	; 235
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	80 61       	ori	r24, 0x10	; 16
    2ec2:	80 83       	st	Z, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <USB_Device_ProcessControlRequest+0x112>
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	2a 95       	dec	r18
    2ed0:	e2 f7       	brpl	.-8      	; 0x2eca <USB_Device_ProcessControlRequest+0x10e>
    2ed2:	aa ee       	ldi	r26, 0xEA	; 234
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	8c 93       	st	X, r24
				UERST = 0;
    2ed8:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2eda:	80 81       	ld	r24, Z
    2edc:	88 60       	ori	r24, 0x08	; 8
    2ede:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2ee0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2ee4:	e8 ee       	ldi	r30, 0xE8	; 232
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	87 7f       	andi	r24, 0xF7	; 247
    2eec:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2eee:	ef dd       	rcall	.-1058   	; 0x2ace <Endpoint_ClearStatusStage>
    2ef0:	aa c0       	rjmp	.+340    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2ef2:	91 11       	cpse	r25, r1
    2ef4:	a8 c0       	rjmp	.+336    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2ef6:	10 91 c8 05 	lds	r17, 0x05C8
    2efa:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2efc:	e3 ee       	ldi	r30, 0xE3	; 227
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	80 78       	andi	r24, 0x80	; 128
    2f04:	81 2b       	or	r24, r17
    2f06:	80 83       	st	Z, r24
    2f08:	e8 ee       	ldi	r30, 0xE8	; 232
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	87 7f       	andi	r24, 0xF7	; 247
    2f10:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2f12:	dd dd       	rcall	.-1094   	; 0x2ace <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2f14:	e8 ee       	ldi	r30, 0xE8	; 232
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    2f1a:	80 ff       	sbrs	r24, 0
    2f1c:	fd cf       	rjmp	.-6      	; 0x2f18 <USB_Device_ProcessControlRequest+0x15c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2f1e:	e3 ee       	ldi	r30, 0xE3	; 227
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	80 68       	ori	r24, 0x80	; 128
    2f26:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2f28:	11 23       	and	r17, r17
    2f2a:	11 f0       	breq	.+4      	; 0x2f30 <USB_Device_ProcessControlRequest+0x174>
    2f2c:	83 e0       	ldi	r24, 0x03	; 3
    2f2e:	01 c0       	rjmp	.+2      	; 0x2f32 <USB_Device_ProcessControlRequest+0x176>
    2f30:	82 e0       	ldi	r24, 0x02	; 2
    2f32:	8e bb       	out	0x1e, r24	; 30
    2f34:	88 c0       	rjmp	.+272    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2f36:	90 58       	subi	r25, 0x80	; 128
    2f38:	92 30       	cpi	r25, 0x02	; 2
    2f3a:	08 f0       	brcs	.+2      	; 0x2f3e <USB_Device_ProcessControlRequest+0x182>
    2f3c:	84 c0       	rjmp	.+264    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2f3e:	80 91 c8 05 	lds	r24, 0x05C8
    2f42:	90 91 c9 05 	lds	r25, 0x05C9
    2f46:	8c 3d       	cpi	r24, 0xDC	; 220
    2f48:	23 e0       	ldi	r18, 0x03	; 3
    2f4a:	92 07       	cpc	r25, r18
    2f4c:	99 f5       	brne	.+102    	; 0x2fb4 <USB_Device_ProcessControlRequest+0x1f8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2f4e:	83 e0       	ldi	r24, 0x03	; 3
    2f50:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2f52:	8a e2       	ldi	r24, 0x2A	; 42
    2f54:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2f56:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2f58:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2f5a:	de 01       	movw	r26, r28
    2f5c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2f60:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2f62:	41 e2       	ldi	r20, 0x21	; 33
    2f64:	e3 2f       	mov	r30, r19
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	40 93 57 00 	sts	0x0057, r20
    2f6c:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    2f6e:	20 ff       	sbrs	r18, 0
    2f70:	03 c0       	rjmp	.+6      	; 0x2f78 <USB_Device_ProcessControlRequest+0x1bc>
					{
						SerialByte >>= 4;
    2f72:	82 95       	swap	r24
    2f74:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    2f76:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2f78:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2f7a:	8a 30       	cpi	r24, 0x0A	; 10
    2f7c:	18 f0       	brcs	.+6      	; 0x2f84 <USB_Device_ProcessControlRequest+0x1c8>
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	c7 96       	adiw	r24, 0x37	; 55
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <USB_Device_ProcessControlRequest+0x1cc>
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	c0 96       	adiw	r24, 0x30	; 48
    2f88:	8d 93       	st	X+, r24
    2f8a:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2f8c:	2f 5f       	subi	r18, 0xFF	; 255
    2f8e:	24 31       	cpi	r18, 0x14	; 20
    2f90:	49 f7       	brne	.-46     	; 0x2f64 <USB_Device_ProcessControlRequest+0x1a8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2f92:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2f94:	08 ee       	ldi	r16, 0xE8	; 232
    2f96:	10 e0       	ldi	r17, 0x00	; 0
    2f98:	f8 01       	movw	r30, r16
    2f9a:	80 81       	ld	r24, Z
    2f9c:	87 7f       	andi	r24, 0xF7	; 247
    2f9e:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2fa0:	6a e2       	ldi	r22, 0x2A	; 42
    2fa2:	70 e0       	ldi	r23, 0x00	; 0
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	01 96       	adiw	r24, 0x01	; 1
    2fa8:	50 db       	rcall	.-2400   	; 0x264a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2faa:	f8 01       	movw	r30, r16
    2fac:	80 81       	ld	r24, Z
    2fae:	8b 77       	andi	r24, 0x7B	; 123
    2fb0:	80 83       	st	Z, r24
    2fb2:	49 c0       	rjmp	.+146    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2fb4:	ae 01       	movw	r20, r28
    2fb6:	4f 5f       	subi	r20, 0xFF	; 255
    2fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    2fba:	60 91 ca 05 	lds	r22, 0x05CA
    2fbe:	0e 94 01 01 	call	0x202	; 0x202 <CALLBACK_USB_GetDescriptor>
    2fc2:	00 97       	sbiw	r24, 0x00	; 0
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <USB_Device_ProcessControlRequest+0x20c>
    2fc6:	3f c0       	rjmp	.+126    	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2fc8:	08 ee       	ldi	r16, 0xE8	; 232
    2fca:	10 e0       	ldi	r17, 0x00	; 0
    2fcc:	f8 01       	movw	r30, r16
    2fce:	20 81       	ld	r18, Z
    2fd0:	27 7f       	andi	r18, 0xF7	; 247
    2fd2:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
    2fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fda:	35 dc       	rcall	.-1942   	; 0x2846 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2fdc:	f8 01       	movw	r30, r16
    2fde:	80 81       	ld	r24, Z
    2fe0:	8b 77       	andi	r24, 0x7B	; 123
    2fe2:	80 83       	st	Z, r24
    2fe4:	30 c0       	rjmp	.+96     	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2fe6:	90 38       	cpi	r25, 0x80	; 128
    2fe8:	71 f5       	brne	.+92     	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2fea:	e8 ee       	ldi	r30, 0xE8	; 232
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	87 7f       	andi	r24, 0xF7	; 247
    2ff2:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2ff4:	80 91 c2 05 	lds	r24, 0x05C2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2ff8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2ffc:	80 81       	ld	r24, Z
    2ffe:	8e 77       	andi	r24, 0x7E	; 126
    3000:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3002:	65 dd       	rcall	.-1334   	; 0x2ace <Endpoint_ClearStatusStage>
    3004:	20 c0       	rjmp	.+64     	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3006:	91 11       	cpse	r25, r1
    3008:	1e c0       	rjmp	.+60     	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    300a:	80 91 c8 05 	lds	r24, 0x05C8
    300e:	82 30       	cpi	r24, 0x02	; 2
    3010:	d0 f4       	brcc	.+52     	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3012:	e8 ee       	ldi	r30, 0xE8	; 232
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	87 7f       	andi	r24, 0xF7	; 247
    301a:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    301c:	80 91 c8 05 	lds	r24, 0x05C8
    3020:	80 93 c2 05 	sts	0x05C2, r24

	Endpoint_ClearStatusStage();
    3024:	54 dd       	rcall	.-1368   	; 0x2ace <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    3026:	80 91 c2 05 	lds	r24, 0x05C2
    302a:	88 23       	and	r24, r24
    302c:	19 f0       	breq	.+6      	; 0x3034 <USB_Device_ProcessControlRequest+0x278>
	  USB_DeviceState = DEVICE_STATE_Configured;
    302e:	84 e0       	ldi	r24, 0x04	; 4
    3030:	8e bb       	out	0x1e, r24	; 30
    3032:	08 c0       	rjmp	.+16     	; 0x3044 <USB_Device_ProcessControlRequest+0x288>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3034:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3038:	88 23       	and	r24, r24
    303a:	14 f4       	brge	.+4      	; 0x3040 <USB_Device_ProcessControlRequest+0x284>
    303c:	84 e0       	ldi	r24, 0x04	; 4
    303e:	01 c0       	rjmp	.+2      	; 0x3042 <USB_Device_ProcessControlRequest+0x286>
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    3044:	26 d9       	rcall	.-3508   	; 0x2292 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3046:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    304a:	83 ff       	sbrs	r24, 3
    304c:	16 c0       	rjmp	.+44     	; 0x307a <USB_Device_ProcessControlRequest+0x2be>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    304e:	e8 ee       	ldi	r30, 0xE8	; 232
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	87 7f       	andi	r24, 0xF7	; 247
    3056:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3058:	eb ee       	ldi	r30, 0xEB	; 235
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	80 62       	ori	r24, 0x20	; 32
    3060:	80 83       	st	Z, r24
    3062:	0b c0       	rjmp	.+22     	; 0x307a <USB_Device_ProcessControlRequest+0x2be>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3064:	90 91 c8 05 	lds	r25, 0x05C8
    3068:	91 30       	cpi	r25, 0x01	; 1
    306a:	69 f7       	brne	.-38     	; 0x3046 <USB_Device_ProcessControlRequest+0x28a>
    306c:	0a cf       	rjmp	.-492    	; 0x2e82 <USB_Device_ProcessControlRequest+0xc6>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    306e:	80 91 c8 05 	lds	r24, 0x05C8
    3072:	88 23       	and	r24, r24
    3074:	09 f4       	brne	.+2      	; 0x3078 <USB_Device_ProcessControlRequest+0x2bc>
    3076:	0c cf       	rjmp	.-488    	; 0x2e90 <USB_Device_ProcessControlRequest+0xd4>
    3078:	33 cf       	rjmp	.-410    	; 0x2ee0 <USB_Device_ProcessControlRequest+0x124>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    307a:	aa 96       	adiw	r28, 0x2a	; 42
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	df 91       	pop	r29
    3088:	cf 91       	pop	r28
    308a:	1f 91       	pop	r17
    308c:	0f 91       	pop	r16
    308e:	08 95       	ret

00003090 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    3090:	08 95       	ret

00003092 <__udivmodsi4>:
    3092:	a1 e2       	ldi	r26, 0x21	; 33
    3094:	1a 2e       	mov	r1, r26
    3096:	aa 1b       	sub	r26, r26
    3098:	bb 1b       	sub	r27, r27
    309a:	fd 01       	movw	r30, r26
    309c:	0d c0       	rjmp	.+26     	; 0x30b8 <__udivmodsi4_ep>

0000309e <__udivmodsi4_loop>:
    309e:	aa 1f       	adc	r26, r26
    30a0:	bb 1f       	adc	r27, r27
    30a2:	ee 1f       	adc	r30, r30
    30a4:	ff 1f       	adc	r31, r31
    30a6:	a2 17       	cp	r26, r18
    30a8:	b3 07       	cpc	r27, r19
    30aa:	e4 07       	cpc	r30, r20
    30ac:	f5 07       	cpc	r31, r21
    30ae:	20 f0       	brcs	.+8      	; 0x30b8 <__udivmodsi4_ep>
    30b0:	a2 1b       	sub	r26, r18
    30b2:	b3 0b       	sbc	r27, r19
    30b4:	e4 0b       	sbc	r30, r20
    30b6:	f5 0b       	sbc	r31, r21

000030b8 <__udivmodsi4_ep>:
    30b8:	66 1f       	adc	r22, r22
    30ba:	77 1f       	adc	r23, r23
    30bc:	88 1f       	adc	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	1a 94       	dec	r1
    30c2:	69 f7       	brne	.-38     	; 0x309e <__udivmodsi4_loop>
    30c4:	60 95       	com	r22
    30c6:	70 95       	com	r23
    30c8:	80 95       	com	r24
    30ca:	90 95       	com	r25
    30cc:	9b 01       	movw	r18, r22
    30ce:	ac 01       	movw	r20, r24
    30d0:	bd 01       	movw	r22, r26
    30d2:	cf 01       	movw	r24, r30
    30d4:	08 95       	ret

000030d6 <__muluhisi3>:
    30d6:	09 d0       	rcall	.+18     	; 0x30ea <__umulhisi3>
    30d8:	a5 9f       	mul	r26, r21
    30da:	90 0d       	add	r25, r0
    30dc:	b4 9f       	mul	r27, r20
    30de:	90 0d       	add	r25, r0
    30e0:	a4 9f       	mul	r26, r20
    30e2:	80 0d       	add	r24, r0
    30e4:	91 1d       	adc	r25, r1
    30e6:	11 24       	eor	r1, r1
    30e8:	08 95       	ret

000030ea <__umulhisi3>:
    30ea:	a2 9f       	mul	r26, r18
    30ec:	b0 01       	movw	r22, r0
    30ee:	b3 9f       	mul	r27, r19
    30f0:	c0 01       	movw	r24, r0
    30f2:	a3 9f       	mul	r26, r19
    30f4:	70 0d       	add	r23, r0
    30f6:	81 1d       	adc	r24, r1
    30f8:	11 24       	eor	r1, r1
    30fa:	91 1d       	adc	r25, r1
    30fc:	b2 9f       	mul	r27, r18
    30fe:	70 0d       	add	r23, r0
    3100:	81 1d       	adc	r24, r1
    3102:	11 24       	eor	r1, r1
    3104:	91 1d       	adc	r25, r1
    3106:	08 95       	ret

00003108 <memcpy>:
    3108:	fb 01       	movw	r30, r22
    310a:	dc 01       	movw	r26, r24
    310c:	02 c0       	rjmp	.+4      	; 0x3112 <memcpy+0xa>
    310e:	01 90       	ld	r0, Z+
    3110:	0d 92       	st	X+, r0
    3112:	41 50       	subi	r20, 0x01	; 1
    3114:	50 40       	sbci	r21, 0x00	; 0
    3116:	d8 f7       	brcc	.-10     	; 0x310e <memcpy+0x6>
    3118:	08 95       	ret

0000311a <memset>:
    311a:	dc 01       	movw	r26, r24
    311c:	01 c0       	rjmp	.+2      	; 0x3120 <memset+0x6>
    311e:	6d 93       	st	X+, r22
    3120:	41 50       	subi	r20, 0x01	; 1
    3122:	50 40       	sbci	r21, 0x00	; 0
    3124:	e0 f7       	brcc	.-8      	; 0x311e <memset+0x4>
    3126:	08 95       	ret

00003128 <sprintf>:
    3128:	ae e0       	ldi	r26, 0x0E	; 14
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	e9 e9       	ldi	r30, 0x99	; 153
    312e:	f8 e1       	ldi	r31, 0x18	; 24
    3130:	a3 c2       	rjmp	.+1350   	; 0x3678 <__prologue_saves__+0x1c>
    3132:	0d 89       	ldd	r16, Y+21	; 0x15
    3134:	1e 89       	ldd	r17, Y+22	; 0x16
    3136:	86 e0       	ldi	r24, 0x06	; 6
    3138:	8c 83       	std	Y+4, r24	; 0x04
    313a:	1a 83       	std	Y+2, r17	; 0x02
    313c:	09 83       	std	Y+1, r16	; 0x01
    313e:	8f ef       	ldi	r24, 0xFF	; 255
    3140:	9f e7       	ldi	r25, 0x7F	; 127
    3142:	9e 83       	std	Y+6, r25	; 0x06
    3144:	8d 83       	std	Y+5, r24	; 0x05
    3146:	ae 01       	movw	r20, r28
    3148:	47 5e       	subi	r20, 0xE7	; 231
    314a:	5f 4f       	sbci	r21, 0xFF	; 255
    314c:	6f 89       	ldd	r22, Y+23	; 0x17
    314e:	78 8d       	ldd	r23, Y+24	; 0x18
    3150:	ce 01       	movw	r24, r28
    3152:	01 96       	adiw	r24, 0x01	; 1
    3154:	08 d0       	rcall	.+16     	; 0x3166 <vfprintf>
    3156:	ef 81       	ldd	r30, Y+7	; 0x07
    3158:	f8 85       	ldd	r31, Y+8	; 0x08
    315a:	e0 0f       	add	r30, r16
    315c:	f1 1f       	adc	r31, r17
    315e:	10 82       	st	Z, r1
    3160:	2e 96       	adiw	r28, 0x0e	; 14
    3162:	e4 e0       	ldi	r30, 0x04	; 4
    3164:	a5 c2       	rjmp	.+1354   	; 0x36b0 <__epilogue_restores__+0x1c>

00003166 <vfprintf>:
    3166:	ac e0       	ldi	r26, 0x0C	; 12
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	e8 eb       	ldi	r30, 0xB8	; 184
    316c:	f8 e1       	ldi	r31, 0x18	; 24
    316e:	76 c2       	rjmp	.+1260   	; 0x365c <__prologue_saves__>
    3170:	7c 01       	movw	r14, r24
    3172:	6b 01       	movw	r12, r22
    3174:	8a 01       	movw	r16, r20
    3176:	fc 01       	movw	r30, r24
    3178:	17 82       	std	Z+7, r1	; 0x07
    317a:	16 82       	std	Z+6, r1	; 0x06
    317c:	83 81       	ldd	r24, Z+3	; 0x03
    317e:	81 ff       	sbrs	r24, 1
    3180:	b0 c1       	rjmp	.+864    	; 0x34e2 <vfprintf+0x37c>
    3182:	ce 01       	movw	r24, r28
    3184:	01 96       	adiw	r24, 0x01	; 1
    3186:	4c 01       	movw	r8, r24
    3188:	f7 01       	movw	r30, r14
    318a:	93 81       	ldd	r25, Z+3	; 0x03
    318c:	f6 01       	movw	r30, r12
    318e:	93 fd       	sbrc	r25, 3
    3190:	85 91       	lpm	r24, Z+
    3192:	93 ff       	sbrs	r25, 3
    3194:	81 91       	ld	r24, Z+
    3196:	6f 01       	movw	r12, r30
    3198:	88 23       	and	r24, r24
    319a:	09 f4       	brne	.+2      	; 0x319e <vfprintf+0x38>
    319c:	9e c1       	rjmp	.+828    	; 0x34da <vfprintf+0x374>
    319e:	85 32       	cpi	r24, 0x25	; 37
    31a0:	39 f4       	brne	.+14     	; 0x31b0 <vfprintf+0x4a>
    31a2:	93 fd       	sbrc	r25, 3
    31a4:	85 91       	lpm	r24, Z+
    31a6:	93 ff       	sbrs	r25, 3
    31a8:	81 91       	ld	r24, Z+
    31aa:	6f 01       	movw	r12, r30
    31ac:	85 32       	cpi	r24, 0x25	; 37
    31ae:	21 f4       	brne	.+8      	; 0x31b8 <vfprintf+0x52>
    31b0:	b7 01       	movw	r22, r14
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	c3 d1       	rcall	.+902    	; 0x353c <fputc>
    31b6:	e8 cf       	rjmp	.-48     	; 0x3188 <vfprintf+0x22>
    31b8:	51 2c       	mov	r5, r1
    31ba:	31 2c       	mov	r3, r1
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	20 32       	cpi	r18, 0x20	; 32
    31c0:	a0 f4       	brcc	.+40     	; 0x31ea <vfprintf+0x84>
    31c2:	8b 32       	cpi	r24, 0x2B	; 43
    31c4:	69 f0       	breq	.+26     	; 0x31e0 <vfprintf+0x7a>
    31c6:	30 f4       	brcc	.+12     	; 0x31d4 <vfprintf+0x6e>
    31c8:	80 32       	cpi	r24, 0x20	; 32
    31ca:	59 f0       	breq	.+22     	; 0x31e2 <vfprintf+0x7c>
    31cc:	83 32       	cpi	r24, 0x23	; 35
    31ce:	69 f4       	brne	.+26     	; 0x31ea <vfprintf+0x84>
    31d0:	20 61       	ori	r18, 0x10	; 16
    31d2:	2c c0       	rjmp	.+88     	; 0x322c <vfprintf+0xc6>
    31d4:	8d 32       	cpi	r24, 0x2D	; 45
    31d6:	39 f0       	breq	.+14     	; 0x31e6 <vfprintf+0x80>
    31d8:	80 33       	cpi	r24, 0x30	; 48
    31da:	39 f4       	brne	.+14     	; 0x31ea <vfprintf+0x84>
    31dc:	21 60       	ori	r18, 0x01	; 1
    31de:	26 c0       	rjmp	.+76     	; 0x322c <vfprintf+0xc6>
    31e0:	22 60       	ori	r18, 0x02	; 2
    31e2:	24 60       	ori	r18, 0x04	; 4
    31e4:	23 c0       	rjmp	.+70     	; 0x322c <vfprintf+0xc6>
    31e6:	28 60       	ori	r18, 0x08	; 8
    31e8:	21 c0       	rjmp	.+66     	; 0x322c <vfprintf+0xc6>
    31ea:	27 fd       	sbrc	r18, 7
    31ec:	27 c0       	rjmp	.+78     	; 0x323c <vfprintf+0xd6>
    31ee:	30 ed       	ldi	r19, 0xD0	; 208
    31f0:	38 0f       	add	r19, r24
    31f2:	3a 30       	cpi	r19, 0x0A	; 10
    31f4:	78 f4       	brcc	.+30     	; 0x3214 <vfprintf+0xae>
    31f6:	26 ff       	sbrs	r18, 6
    31f8:	06 c0       	rjmp	.+12     	; 0x3206 <vfprintf+0xa0>
    31fa:	fa e0       	ldi	r31, 0x0A	; 10
    31fc:	5f 9e       	mul	r5, r31
    31fe:	30 0d       	add	r19, r0
    3200:	11 24       	eor	r1, r1
    3202:	53 2e       	mov	r5, r19
    3204:	13 c0       	rjmp	.+38     	; 0x322c <vfprintf+0xc6>
    3206:	8a e0       	ldi	r24, 0x0A	; 10
    3208:	38 9e       	mul	r3, r24
    320a:	30 0d       	add	r19, r0
    320c:	11 24       	eor	r1, r1
    320e:	33 2e       	mov	r3, r19
    3210:	20 62       	ori	r18, 0x20	; 32
    3212:	0c c0       	rjmp	.+24     	; 0x322c <vfprintf+0xc6>
    3214:	8e 32       	cpi	r24, 0x2E	; 46
    3216:	21 f4       	brne	.+8      	; 0x3220 <vfprintf+0xba>
    3218:	26 fd       	sbrc	r18, 6
    321a:	5f c1       	rjmp	.+702    	; 0x34da <vfprintf+0x374>
    321c:	20 64       	ori	r18, 0x40	; 64
    321e:	06 c0       	rjmp	.+12     	; 0x322c <vfprintf+0xc6>
    3220:	8c 36       	cpi	r24, 0x6C	; 108
    3222:	11 f4       	brne	.+4      	; 0x3228 <vfprintf+0xc2>
    3224:	20 68       	ori	r18, 0x80	; 128
    3226:	02 c0       	rjmp	.+4      	; 0x322c <vfprintf+0xc6>
    3228:	88 36       	cpi	r24, 0x68	; 104
    322a:	41 f4       	brne	.+16     	; 0x323c <vfprintf+0xd6>
    322c:	f6 01       	movw	r30, r12
    322e:	93 fd       	sbrc	r25, 3
    3230:	85 91       	lpm	r24, Z+
    3232:	93 ff       	sbrs	r25, 3
    3234:	81 91       	ld	r24, Z+
    3236:	6f 01       	movw	r12, r30
    3238:	81 11       	cpse	r24, r1
    323a:	c1 cf       	rjmp	.-126    	; 0x31be <vfprintf+0x58>
    323c:	98 2f       	mov	r25, r24
    323e:	9f 7d       	andi	r25, 0xDF	; 223
    3240:	95 54       	subi	r25, 0x45	; 69
    3242:	93 30       	cpi	r25, 0x03	; 3
    3244:	28 f4       	brcc	.+10     	; 0x3250 <vfprintf+0xea>
    3246:	0c 5f       	subi	r16, 0xFC	; 252
    3248:	1f 4f       	sbci	r17, 0xFF	; 255
    324a:	ff e3       	ldi	r31, 0x3F	; 63
    324c:	f9 83       	std	Y+1, r31	; 0x01
    324e:	0d c0       	rjmp	.+26     	; 0x326a <vfprintf+0x104>
    3250:	83 36       	cpi	r24, 0x63	; 99
    3252:	31 f0       	breq	.+12     	; 0x3260 <vfprintf+0xfa>
    3254:	83 37       	cpi	r24, 0x73	; 115
    3256:	71 f0       	breq	.+28     	; 0x3274 <vfprintf+0x10e>
    3258:	83 35       	cpi	r24, 0x53	; 83
    325a:	09 f0       	breq	.+2      	; 0x325e <vfprintf+0xf8>
    325c:	57 c0       	rjmp	.+174    	; 0x330c <vfprintf+0x1a6>
    325e:	21 c0       	rjmp	.+66     	; 0x32a2 <vfprintf+0x13c>
    3260:	f8 01       	movw	r30, r16
    3262:	80 81       	ld	r24, Z
    3264:	89 83       	std	Y+1, r24	; 0x01
    3266:	0e 5f       	subi	r16, 0xFE	; 254
    3268:	1f 4f       	sbci	r17, 0xFF	; 255
    326a:	44 24       	eor	r4, r4
    326c:	43 94       	inc	r4
    326e:	51 2c       	mov	r5, r1
    3270:	54 01       	movw	r10, r8
    3272:	14 c0       	rjmp	.+40     	; 0x329c <vfprintf+0x136>
    3274:	38 01       	movw	r6, r16
    3276:	f2 e0       	ldi	r31, 0x02	; 2
    3278:	6f 0e       	add	r6, r31
    327a:	71 1c       	adc	r7, r1
    327c:	f8 01       	movw	r30, r16
    327e:	a0 80       	ld	r10, Z
    3280:	b1 80       	ldd	r11, Z+1	; 0x01
    3282:	26 ff       	sbrs	r18, 6
    3284:	03 c0       	rjmp	.+6      	; 0x328c <vfprintf+0x126>
    3286:	65 2d       	mov	r22, r5
    3288:	70 e0       	ldi	r23, 0x00	; 0
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <vfprintf+0x12a>
    328c:	6f ef       	ldi	r22, 0xFF	; 255
    328e:	7f ef       	ldi	r23, 0xFF	; 255
    3290:	c5 01       	movw	r24, r10
    3292:	2c 87       	std	Y+12, r18	; 0x0c
    3294:	48 d1       	rcall	.+656    	; 0x3526 <strnlen>
    3296:	2c 01       	movw	r4, r24
    3298:	83 01       	movw	r16, r6
    329a:	2c 85       	ldd	r18, Y+12	; 0x0c
    329c:	2f 77       	andi	r18, 0x7F	; 127
    329e:	22 2e       	mov	r2, r18
    32a0:	16 c0       	rjmp	.+44     	; 0x32ce <vfprintf+0x168>
    32a2:	38 01       	movw	r6, r16
    32a4:	f2 e0       	ldi	r31, 0x02	; 2
    32a6:	6f 0e       	add	r6, r31
    32a8:	71 1c       	adc	r7, r1
    32aa:	f8 01       	movw	r30, r16
    32ac:	a0 80       	ld	r10, Z
    32ae:	b1 80       	ldd	r11, Z+1	; 0x01
    32b0:	26 ff       	sbrs	r18, 6
    32b2:	03 c0       	rjmp	.+6      	; 0x32ba <vfprintf+0x154>
    32b4:	65 2d       	mov	r22, r5
    32b6:	70 e0       	ldi	r23, 0x00	; 0
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <vfprintf+0x158>
    32ba:	6f ef       	ldi	r22, 0xFF	; 255
    32bc:	7f ef       	ldi	r23, 0xFF	; 255
    32be:	c5 01       	movw	r24, r10
    32c0:	2c 87       	std	Y+12, r18	; 0x0c
    32c2:	26 d1       	rcall	.+588    	; 0x3510 <strnlen_P>
    32c4:	2c 01       	movw	r4, r24
    32c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    32c8:	20 68       	ori	r18, 0x80	; 128
    32ca:	22 2e       	mov	r2, r18
    32cc:	83 01       	movw	r16, r6
    32ce:	23 fc       	sbrc	r2, 3
    32d0:	19 c0       	rjmp	.+50     	; 0x3304 <vfprintf+0x19e>
    32d2:	83 2d       	mov	r24, r3
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	48 16       	cp	r4, r24
    32d8:	59 06       	cpc	r5, r25
    32da:	a0 f4       	brcc	.+40     	; 0x3304 <vfprintf+0x19e>
    32dc:	b7 01       	movw	r22, r14
    32de:	80 e2       	ldi	r24, 0x20	; 32
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	2c d1       	rcall	.+600    	; 0x353c <fputc>
    32e4:	3a 94       	dec	r3
    32e6:	f5 cf       	rjmp	.-22     	; 0x32d2 <vfprintf+0x16c>
    32e8:	f5 01       	movw	r30, r10
    32ea:	27 fc       	sbrc	r2, 7
    32ec:	85 91       	lpm	r24, Z+
    32ee:	27 fe       	sbrs	r2, 7
    32f0:	81 91       	ld	r24, Z+
    32f2:	5f 01       	movw	r10, r30
    32f4:	b7 01       	movw	r22, r14
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	21 d1       	rcall	.+578    	; 0x353c <fputc>
    32fa:	31 10       	cpse	r3, r1
    32fc:	3a 94       	dec	r3
    32fe:	f1 e0       	ldi	r31, 0x01	; 1
    3300:	4f 1a       	sub	r4, r31
    3302:	51 08       	sbc	r5, r1
    3304:	41 14       	cp	r4, r1
    3306:	51 04       	cpc	r5, r1
    3308:	79 f7       	brne	.-34     	; 0x32e8 <vfprintf+0x182>
    330a:	de c0       	rjmp	.+444    	; 0x34c8 <vfprintf+0x362>
    330c:	84 36       	cpi	r24, 0x64	; 100
    330e:	11 f0       	breq	.+4      	; 0x3314 <vfprintf+0x1ae>
    3310:	89 36       	cpi	r24, 0x69	; 105
    3312:	31 f5       	brne	.+76     	; 0x3360 <vfprintf+0x1fa>
    3314:	f8 01       	movw	r30, r16
    3316:	27 ff       	sbrs	r18, 7
    3318:	07 c0       	rjmp	.+14     	; 0x3328 <vfprintf+0x1c2>
    331a:	60 81       	ld	r22, Z
    331c:	71 81       	ldd	r23, Z+1	; 0x01
    331e:	82 81       	ldd	r24, Z+2	; 0x02
    3320:	93 81       	ldd	r25, Z+3	; 0x03
    3322:	0c 5f       	subi	r16, 0xFC	; 252
    3324:	1f 4f       	sbci	r17, 0xFF	; 255
    3326:	08 c0       	rjmp	.+16     	; 0x3338 <vfprintf+0x1d2>
    3328:	60 81       	ld	r22, Z
    332a:	71 81       	ldd	r23, Z+1	; 0x01
    332c:	88 27       	eor	r24, r24
    332e:	77 fd       	sbrc	r23, 7
    3330:	80 95       	com	r24
    3332:	98 2f       	mov	r25, r24
    3334:	0e 5f       	subi	r16, 0xFE	; 254
    3336:	1f 4f       	sbci	r17, 0xFF	; 255
    3338:	2f 76       	andi	r18, 0x6F	; 111
    333a:	b2 2e       	mov	r11, r18
    333c:	97 ff       	sbrs	r25, 7
    333e:	09 c0       	rjmp	.+18     	; 0x3352 <vfprintf+0x1ec>
    3340:	90 95       	com	r25
    3342:	80 95       	com	r24
    3344:	70 95       	com	r23
    3346:	61 95       	neg	r22
    3348:	7f 4f       	sbci	r23, 0xFF	; 255
    334a:	8f 4f       	sbci	r24, 0xFF	; 255
    334c:	9f 4f       	sbci	r25, 0xFF	; 255
    334e:	20 68       	ori	r18, 0x80	; 128
    3350:	b2 2e       	mov	r11, r18
    3352:	2a e0       	ldi	r18, 0x0A	; 10
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	a4 01       	movw	r20, r8
    3358:	23 d1       	rcall	.+582    	; 0x35a0 <__ultoa_invert>
    335a:	a8 2e       	mov	r10, r24
    335c:	a8 18       	sub	r10, r8
    335e:	43 c0       	rjmp	.+134    	; 0x33e6 <vfprintf+0x280>
    3360:	85 37       	cpi	r24, 0x75	; 117
    3362:	29 f4       	brne	.+10     	; 0x336e <vfprintf+0x208>
    3364:	2f 7e       	andi	r18, 0xEF	; 239
    3366:	b2 2e       	mov	r11, r18
    3368:	2a e0       	ldi	r18, 0x0A	; 10
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	25 c0       	rjmp	.+74     	; 0x33b8 <vfprintf+0x252>
    336e:	f2 2f       	mov	r31, r18
    3370:	f9 7f       	andi	r31, 0xF9	; 249
    3372:	bf 2e       	mov	r11, r31
    3374:	8f 36       	cpi	r24, 0x6F	; 111
    3376:	c1 f0       	breq	.+48     	; 0x33a8 <vfprintf+0x242>
    3378:	18 f4       	brcc	.+6      	; 0x3380 <vfprintf+0x21a>
    337a:	88 35       	cpi	r24, 0x58	; 88
    337c:	79 f0       	breq	.+30     	; 0x339c <vfprintf+0x236>
    337e:	ad c0       	rjmp	.+346    	; 0x34da <vfprintf+0x374>
    3380:	80 37       	cpi	r24, 0x70	; 112
    3382:	19 f0       	breq	.+6      	; 0x338a <vfprintf+0x224>
    3384:	88 37       	cpi	r24, 0x78	; 120
    3386:	21 f0       	breq	.+8      	; 0x3390 <vfprintf+0x22a>
    3388:	a8 c0       	rjmp	.+336    	; 0x34da <vfprintf+0x374>
    338a:	2f 2f       	mov	r18, r31
    338c:	20 61       	ori	r18, 0x10	; 16
    338e:	b2 2e       	mov	r11, r18
    3390:	b4 fe       	sbrs	r11, 4
    3392:	0d c0       	rjmp	.+26     	; 0x33ae <vfprintf+0x248>
    3394:	8b 2d       	mov	r24, r11
    3396:	84 60       	ori	r24, 0x04	; 4
    3398:	b8 2e       	mov	r11, r24
    339a:	09 c0       	rjmp	.+18     	; 0x33ae <vfprintf+0x248>
    339c:	24 ff       	sbrs	r18, 4
    339e:	0a c0       	rjmp	.+20     	; 0x33b4 <vfprintf+0x24e>
    33a0:	9f 2f       	mov	r25, r31
    33a2:	96 60       	ori	r25, 0x06	; 6
    33a4:	b9 2e       	mov	r11, r25
    33a6:	06 c0       	rjmp	.+12     	; 0x33b4 <vfprintf+0x24e>
    33a8:	28 e0       	ldi	r18, 0x08	; 8
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	05 c0       	rjmp	.+10     	; 0x33b8 <vfprintf+0x252>
    33ae:	20 e1       	ldi	r18, 0x10	; 16
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	02 c0       	rjmp	.+4      	; 0x33b8 <vfprintf+0x252>
    33b4:	20 e1       	ldi	r18, 0x10	; 16
    33b6:	32 e0       	ldi	r19, 0x02	; 2
    33b8:	f8 01       	movw	r30, r16
    33ba:	b7 fe       	sbrs	r11, 7
    33bc:	07 c0       	rjmp	.+14     	; 0x33cc <vfprintf+0x266>
    33be:	60 81       	ld	r22, Z
    33c0:	71 81       	ldd	r23, Z+1	; 0x01
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	0c 5f       	subi	r16, 0xFC	; 252
    33c8:	1f 4f       	sbci	r17, 0xFF	; 255
    33ca:	06 c0       	rjmp	.+12     	; 0x33d8 <vfprintf+0x272>
    33cc:	60 81       	ld	r22, Z
    33ce:	71 81       	ldd	r23, Z+1	; 0x01
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	0e 5f       	subi	r16, 0xFE	; 254
    33d6:	1f 4f       	sbci	r17, 0xFF	; 255
    33d8:	a4 01       	movw	r20, r8
    33da:	e2 d0       	rcall	.+452    	; 0x35a0 <__ultoa_invert>
    33dc:	a8 2e       	mov	r10, r24
    33de:	a8 18       	sub	r10, r8
    33e0:	fb 2d       	mov	r31, r11
    33e2:	ff 77       	andi	r31, 0x7F	; 127
    33e4:	bf 2e       	mov	r11, r31
    33e6:	b6 fe       	sbrs	r11, 6
    33e8:	0b c0       	rjmp	.+22     	; 0x3400 <vfprintf+0x29a>
    33ea:	2b 2d       	mov	r18, r11
    33ec:	2e 7f       	andi	r18, 0xFE	; 254
    33ee:	a5 14       	cp	r10, r5
    33f0:	50 f4       	brcc	.+20     	; 0x3406 <vfprintf+0x2a0>
    33f2:	b4 fe       	sbrs	r11, 4
    33f4:	0a c0       	rjmp	.+20     	; 0x340a <vfprintf+0x2a4>
    33f6:	b2 fc       	sbrc	r11, 2
    33f8:	08 c0       	rjmp	.+16     	; 0x340a <vfprintf+0x2a4>
    33fa:	2b 2d       	mov	r18, r11
    33fc:	2e 7e       	andi	r18, 0xEE	; 238
    33fe:	05 c0       	rjmp	.+10     	; 0x340a <vfprintf+0x2a4>
    3400:	7a 2c       	mov	r7, r10
    3402:	2b 2d       	mov	r18, r11
    3404:	03 c0       	rjmp	.+6      	; 0x340c <vfprintf+0x2a6>
    3406:	7a 2c       	mov	r7, r10
    3408:	01 c0       	rjmp	.+2      	; 0x340c <vfprintf+0x2a6>
    340a:	75 2c       	mov	r7, r5
    340c:	24 ff       	sbrs	r18, 4
    340e:	0d c0       	rjmp	.+26     	; 0x342a <vfprintf+0x2c4>
    3410:	fe 01       	movw	r30, r28
    3412:	ea 0d       	add	r30, r10
    3414:	f1 1d       	adc	r31, r1
    3416:	80 81       	ld	r24, Z
    3418:	80 33       	cpi	r24, 0x30	; 48
    341a:	11 f4       	brne	.+4      	; 0x3420 <vfprintf+0x2ba>
    341c:	29 7e       	andi	r18, 0xE9	; 233
    341e:	09 c0       	rjmp	.+18     	; 0x3432 <vfprintf+0x2cc>
    3420:	22 ff       	sbrs	r18, 2
    3422:	06 c0       	rjmp	.+12     	; 0x3430 <vfprintf+0x2ca>
    3424:	73 94       	inc	r7
    3426:	73 94       	inc	r7
    3428:	04 c0       	rjmp	.+8      	; 0x3432 <vfprintf+0x2cc>
    342a:	82 2f       	mov	r24, r18
    342c:	86 78       	andi	r24, 0x86	; 134
    342e:	09 f0       	breq	.+2      	; 0x3432 <vfprintf+0x2cc>
    3430:	73 94       	inc	r7
    3432:	23 fd       	sbrc	r18, 3
    3434:	12 c0       	rjmp	.+36     	; 0x345a <vfprintf+0x2f4>
    3436:	20 ff       	sbrs	r18, 0
    3438:	06 c0       	rjmp	.+12     	; 0x3446 <vfprintf+0x2e0>
    343a:	5a 2c       	mov	r5, r10
    343c:	73 14       	cp	r7, r3
    343e:	18 f4       	brcc	.+6      	; 0x3446 <vfprintf+0x2e0>
    3440:	53 0c       	add	r5, r3
    3442:	57 18       	sub	r5, r7
    3444:	73 2c       	mov	r7, r3
    3446:	73 14       	cp	r7, r3
    3448:	60 f4       	brcc	.+24     	; 0x3462 <vfprintf+0x2fc>
    344a:	b7 01       	movw	r22, r14
    344c:	80 e2       	ldi	r24, 0x20	; 32
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	2c 87       	std	Y+12, r18	; 0x0c
    3452:	74 d0       	rcall	.+232    	; 0x353c <fputc>
    3454:	73 94       	inc	r7
    3456:	2c 85       	ldd	r18, Y+12	; 0x0c
    3458:	f6 cf       	rjmp	.-20     	; 0x3446 <vfprintf+0x2e0>
    345a:	73 14       	cp	r7, r3
    345c:	10 f4       	brcc	.+4      	; 0x3462 <vfprintf+0x2fc>
    345e:	37 18       	sub	r3, r7
    3460:	01 c0       	rjmp	.+2      	; 0x3464 <vfprintf+0x2fe>
    3462:	31 2c       	mov	r3, r1
    3464:	24 ff       	sbrs	r18, 4
    3466:	11 c0       	rjmp	.+34     	; 0x348a <vfprintf+0x324>
    3468:	b7 01       	movw	r22, r14
    346a:	80 e3       	ldi	r24, 0x30	; 48
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	2c 87       	std	Y+12, r18	; 0x0c
    3470:	65 d0       	rcall	.+202    	; 0x353c <fputc>
    3472:	2c 85       	ldd	r18, Y+12	; 0x0c
    3474:	22 ff       	sbrs	r18, 2
    3476:	16 c0       	rjmp	.+44     	; 0x34a4 <vfprintf+0x33e>
    3478:	21 ff       	sbrs	r18, 1
    347a:	03 c0       	rjmp	.+6      	; 0x3482 <vfprintf+0x31c>
    347c:	88 e5       	ldi	r24, 0x58	; 88
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <vfprintf+0x320>
    3482:	88 e7       	ldi	r24, 0x78	; 120
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	b7 01       	movw	r22, r14
    3488:	0c c0       	rjmp	.+24     	; 0x34a2 <vfprintf+0x33c>
    348a:	82 2f       	mov	r24, r18
    348c:	86 78       	andi	r24, 0x86	; 134
    348e:	51 f0       	breq	.+20     	; 0x34a4 <vfprintf+0x33e>
    3490:	21 fd       	sbrc	r18, 1
    3492:	02 c0       	rjmp	.+4      	; 0x3498 <vfprintf+0x332>
    3494:	80 e2       	ldi	r24, 0x20	; 32
    3496:	01 c0       	rjmp	.+2      	; 0x349a <vfprintf+0x334>
    3498:	8b e2       	ldi	r24, 0x2B	; 43
    349a:	27 fd       	sbrc	r18, 7
    349c:	8d e2       	ldi	r24, 0x2D	; 45
    349e:	b7 01       	movw	r22, r14
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	4c d0       	rcall	.+152    	; 0x353c <fputc>
    34a4:	a5 14       	cp	r10, r5
    34a6:	30 f4       	brcc	.+12     	; 0x34b4 <vfprintf+0x34e>
    34a8:	b7 01       	movw	r22, r14
    34aa:	80 e3       	ldi	r24, 0x30	; 48
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	46 d0       	rcall	.+140    	; 0x353c <fputc>
    34b0:	5a 94       	dec	r5
    34b2:	f8 cf       	rjmp	.-16     	; 0x34a4 <vfprintf+0x33e>
    34b4:	aa 94       	dec	r10
    34b6:	f4 01       	movw	r30, r8
    34b8:	ea 0d       	add	r30, r10
    34ba:	f1 1d       	adc	r31, r1
    34bc:	80 81       	ld	r24, Z
    34be:	b7 01       	movw	r22, r14
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	3c d0       	rcall	.+120    	; 0x353c <fputc>
    34c4:	a1 10       	cpse	r10, r1
    34c6:	f6 cf       	rjmp	.-20     	; 0x34b4 <vfprintf+0x34e>
    34c8:	33 20       	and	r3, r3
    34ca:	09 f4       	brne	.+2      	; 0x34ce <vfprintf+0x368>
    34cc:	5d ce       	rjmp	.-838    	; 0x3188 <vfprintf+0x22>
    34ce:	b7 01       	movw	r22, r14
    34d0:	80 e2       	ldi	r24, 0x20	; 32
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	33 d0       	rcall	.+102    	; 0x353c <fputc>
    34d6:	3a 94       	dec	r3
    34d8:	f7 cf       	rjmp	.-18     	; 0x34c8 <vfprintf+0x362>
    34da:	f7 01       	movw	r30, r14
    34dc:	86 81       	ldd	r24, Z+6	; 0x06
    34de:	97 81       	ldd	r25, Z+7	; 0x07
    34e0:	02 c0       	rjmp	.+4      	; 0x34e6 <vfprintf+0x380>
    34e2:	8f ef       	ldi	r24, 0xFF	; 255
    34e4:	9f ef       	ldi	r25, 0xFF	; 255
    34e6:	2c 96       	adiw	r28, 0x0c	; 12
    34e8:	e2 e1       	ldi	r30, 0x12	; 18
    34ea:	d4 c0       	rjmp	.+424    	; 0x3694 <__epilogue_restores__>

000034ec <__eeupd_byte_m32u4>:
    34ec:	26 2f       	mov	r18, r22

000034ee <__eeupd_r18_m32u4>:
    34ee:	f9 99       	sbic	0x1f, 1	; 31
    34f0:	fe cf       	rjmp	.-4      	; 0x34ee <__eeupd_r18_m32u4>
    34f2:	92 bd       	out	0x22, r25	; 34
    34f4:	81 bd       	out	0x21, r24	; 33
    34f6:	f8 9a       	sbi	0x1f, 0	; 31
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	00 b4       	in	r0, 0x20	; 32
    34fc:	02 16       	cp	r0, r18
    34fe:	39 f0       	breq	.+14     	; 0x350e <__eeupd_r18_m32u4+0x20>
    3500:	1f ba       	out	0x1f, r1	; 31
    3502:	20 bd       	out	0x20, r18	; 32
    3504:	0f b6       	in	r0, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	fa 9a       	sbi	0x1f, 2	; 31
    350a:	f9 9a       	sbi	0x1f, 1	; 31
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	08 95       	ret

00003510 <strnlen_P>:
    3510:	fc 01       	movw	r30, r24
    3512:	05 90       	lpm	r0, Z+
    3514:	61 50       	subi	r22, 0x01	; 1
    3516:	70 40       	sbci	r23, 0x00	; 0
    3518:	01 10       	cpse	r0, r1
    351a:	d8 f7       	brcc	.-10     	; 0x3512 <strnlen_P+0x2>
    351c:	80 95       	com	r24
    351e:	90 95       	com	r25
    3520:	8e 0f       	add	r24, r30
    3522:	9f 1f       	adc	r25, r31
    3524:	08 95       	ret

00003526 <strnlen>:
    3526:	fc 01       	movw	r30, r24
    3528:	61 50       	subi	r22, 0x01	; 1
    352a:	70 40       	sbci	r23, 0x00	; 0
    352c:	01 90       	ld	r0, Z+
    352e:	01 10       	cpse	r0, r1
    3530:	d8 f7       	brcc	.-10     	; 0x3528 <strnlen+0x2>
    3532:	80 95       	com	r24
    3534:	90 95       	com	r25
    3536:	8e 0f       	add	r24, r30
    3538:	9f 1f       	adc	r25, r31
    353a:	08 95       	ret

0000353c <fputc>:
    353c:	0f 93       	push	r16
    353e:	1f 93       	push	r17
    3540:	cf 93       	push	r28
    3542:	df 93       	push	r29
    3544:	18 2f       	mov	r17, r24
    3546:	09 2f       	mov	r16, r25
    3548:	eb 01       	movw	r28, r22
    354a:	8b 81       	ldd	r24, Y+3	; 0x03
    354c:	81 fd       	sbrc	r24, 1
    354e:	03 c0       	rjmp	.+6      	; 0x3556 <fputc+0x1a>
    3550:	8f ef       	ldi	r24, 0xFF	; 255
    3552:	9f ef       	ldi	r25, 0xFF	; 255
    3554:	20 c0       	rjmp	.+64     	; 0x3596 <fputc+0x5a>
    3556:	82 ff       	sbrs	r24, 2
    3558:	10 c0       	rjmp	.+32     	; 0x357a <fputc+0x3e>
    355a:	4e 81       	ldd	r20, Y+6	; 0x06
    355c:	5f 81       	ldd	r21, Y+7	; 0x07
    355e:	2c 81       	ldd	r18, Y+4	; 0x04
    3560:	3d 81       	ldd	r19, Y+5	; 0x05
    3562:	42 17       	cp	r20, r18
    3564:	53 07       	cpc	r21, r19
    3566:	7c f4       	brge	.+30     	; 0x3586 <fputc+0x4a>
    3568:	e8 81       	ld	r30, Y
    356a:	f9 81       	ldd	r31, Y+1	; 0x01
    356c:	9f 01       	movw	r18, r30
    356e:	2f 5f       	subi	r18, 0xFF	; 255
    3570:	3f 4f       	sbci	r19, 0xFF	; 255
    3572:	39 83       	std	Y+1, r19	; 0x01
    3574:	28 83       	st	Y, r18
    3576:	10 83       	st	Z, r17
    3578:	06 c0       	rjmp	.+12     	; 0x3586 <fputc+0x4a>
    357a:	e8 85       	ldd	r30, Y+8	; 0x08
    357c:	f9 85       	ldd	r31, Y+9	; 0x09
    357e:	81 2f       	mov	r24, r17
    3580:	09 95       	icall
    3582:	89 2b       	or	r24, r25
    3584:	29 f7       	brne	.-54     	; 0x3550 <fputc+0x14>
    3586:	2e 81       	ldd	r18, Y+6	; 0x06
    3588:	3f 81       	ldd	r19, Y+7	; 0x07
    358a:	2f 5f       	subi	r18, 0xFF	; 255
    358c:	3f 4f       	sbci	r19, 0xFF	; 255
    358e:	3f 83       	std	Y+7, r19	; 0x07
    3590:	2e 83       	std	Y+6, r18	; 0x06
    3592:	81 2f       	mov	r24, r17
    3594:	90 2f       	mov	r25, r16
    3596:	df 91       	pop	r29
    3598:	cf 91       	pop	r28
    359a:	1f 91       	pop	r17
    359c:	0f 91       	pop	r16
    359e:	08 95       	ret

000035a0 <__ultoa_invert>:
    35a0:	fa 01       	movw	r30, r20
    35a2:	aa 27       	eor	r26, r26
    35a4:	28 30       	cpi	r18, 0x08	; 8
    35a6:	51 f1       	breq	.+84     	; 0x35fc <__ultoa_invert+0x5c>
    35a8:	20 31       	cpi	r18, 0x10	; 16
    35aa:	81 f1       	breq	.+96     	; 0x360c <__ultoa_invert+0x6c>
    35ac:	e8 94       	clt
    35ae:	6f 93       	push	r22
    35b0:	6e 7f       	andi	r22, 0xFE	; 254
    35b2:	6e 5f       	subi	r22, 0xFE	; 254
    35b4:	7f 4f       	sbci	r23, 0xFF	; 255
    35b6:	8f 4f       	sbci	r24, 0xFF	; 255
    35b8:	9f 4f       	sbci	r25, 0xFF	; 255
    35ba:	af 4f       	sbci	r26, 0xFF	; 255
    35bc:	b1 e0       	ldi	r27, 0x01	; 1
    35be:	3e d0       	rcall	.+124    	; 0x363c <__ultoa_invert+0x9c>
    35c0:	b4 e0       	ldi	r27, 0x04	; 4
    35c2:	3c d0       	rcall	.+120    	; 0x363c <__ultoa_invert+0x9c>
    35c4:	67 0f       	add	r22, r23
    35c6:	78 1f       	adc	r23, r24
    35c8:	89 1f       	adc	r24, r25
    35ca:	9a 1f       	adc	r25, r26
    35cc:	a1 1d       	adc	r26, r1
    35ce:	68 0f       	add	r22, r24
    35d0:	79 1f       	adc	r23, r25
    35d2:	8a 1f       	adc	r24, r26
    35d4:	91 1d       	adc	r25, r1
    35d6:	a1 1d       	adc	r26, r1
    35d8:	6a 0f       	add	r22, r26
    35da:	71 1d       	adc	r23, r1
    35dc:	81 1d       	adc	r24, r1
    35de:	91 1d       	adc	r25, r1
    35e0:	a1 1d       	adc	r26, r1
    35e2:	20 d0       	rcall	.+64     	; 0x3624 <__ultoa_invert+0x84>
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <__ultoa_invert+0x48>
    35e6:	68 94       	set
    35e8:	3f 91       	pop	r19
    35ea:	2a e0       	ldi	r18, 0x0A	; 10
    35ec:	26 9f       	mul	r18, r22
    35ee:	11 24       	eor	r1, r1
    35f0:	30 19       	sub	r19, r0
    35f2:	30 5d       	subi	r19, 0xD0	; 208
    35f4:	31 93       	st	Z+, r19
    35f6:	de f6       	brtc	.-74     	; 0x35ae <__ultoa_invert+0xe>
    35f8:	cf 01       	movw	r24, r30
    35fa:	08 95       	ret
    35fc:	46 2f       	mov	r20, r22
    35fe:	47 70       	andi	r20, 0x07	; 7
    3600:	40 5d       	subi	r20, 0xD0	; 208
    3602:	41 93       	st	Z+, r20
    3604:	b3 e0       	ldi	r27, 0x03	; 3
    3606:	0f d0       	rcall	.+30     	; 0x3626 <__ultoa_invert+0x86>
    3608:	c9 f7       	brne	.-14     	; 0x35fc <__ultoa_invert+0x5c>
    360a:	f6 cf       	rjmp	.-20     	; 0x35f8 <__ultoa_invert+0x58>
    360c:	46 2f       	mov	r20, r22
    360e:	4f 70       	andi	r20, 0x0F	; 15
    3610:	40 5d       	subi	r20, 0xD0	; 208
    3612:	4a 33       	cpi	r20, 0x3A	; 58
    3614:	18 f0       	brcs	.+6      	; 0x361c <__ultoa_invert+0x7c>
    3616:	49 5d       	subi	r20, 0xD9	; 217
    3618:	31 fd       	sbrc	r19, 1
    361a:	40 52       	subi	r20, 0x20	; 32
    361c:	41 93       	st	Z+, r20
    361e:	02 d0       	rcall	.+4      	; 0x3624 <__ultoa_invert+0x84>
    3620:	a9 f7       	brne	.-22     	; 0x360c <__ultoa_invert+0x6c>
    3622:	ea cf       	rjmp	.-44     	; 0x35f8 <__ultoa_invert+0x58>
    3624:	b4 e0       	ldi	r27, 0x04	; 4
    3626:	a6 95       	lsr	r26
    3628:	97 95       	ror	r25
    362a:	87 95       	ror	r24
    362c:	77 95       	ror	r23
    362e:	67 95       	ror	r22
    3630:	ba 95       	dec	r27
    3632:	c9 f7       	brne	.-14     	; 0x3626 <__ultoa_invert+0x86>
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	61 05       	cpc	r22, r1
    3638:	71 05       	cpc	r23, r1
    363a:	08 95       	ret
    363c:	9b 01       	movw	r18, r22
    363e:	ac 01       	movw	r20, r24
    3640:	0a 2e       	mov	r0, r26
    3642:	06 94       	lsr	r0
    3644:	57 95       	ror	r21
    3646:	47 95       	ror	r20
    3648:	37 95       	ror	r19
    364a:	27 95       	ror	r18
    364c:	ba 95       	dec	r27
    364e:	c9 f7       	brne	.-14     	; 0x3642 <__ultoa_invert+0xa2>
    3650:	62 0f       	add	r22, r18
    3652:	73 1f       	adc	r23, r19
    3654:	84 1f       	adc	r24, r20
    3656:	95 1f       	adc	r25, r21
    3658:	a0 1d       	adc	r26, r0
    365a:	08 95       	ret

0000365c <__prologue_saves__>:
    365c:	2f 92       	push	r2
    365e:	3f 92       	push	r3
    3660:	4f 92       	push	r4
    3662:	5f 92       	push	r5
    3664:	6f 92       	push	r6
    3666:	7f 92       	push	r7
    3668:	8f 92       	push	r8
    366a:	9f 92       	push	r9
    366c:	af 92       	push	r10
    366e:	bf 92       	push	r11
    3670:	cf 92       	push	r12
    3672:	df 92       	push	r13
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	ca 1b       	sub	r28, r26
    3686:	db 0b       	sbc	r29, r27
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	09 94       	ijmp

00003694 <__epilogue_restores__>:
    3694:	2a 88       	ldd	r2, Y+18	; 0x12
    3696:	39 88       	ldd	r3, Y+17	; 0x11
    3698:	48 88       	ldd	r4, Y+16	; 0x10
    369a:	5f 84       	ldd	r5, Y+15	; 0x0f
    369c:	6e 84       	ldd	r6, Y+14	; 0x0e
    369e:	7d 84       	ldd	r7, Y+13	; 0x0d
    36a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    36a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    36a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    36a6:	b9 84       	ldd	r11, Y+9	; 0x09
    36a8:	c8 84       	ldd	r12, Y+8	; 0x08
    36aa:	df 80       	ldd	r13, Y+7	; 0x07
    36ac:	ee 80       	ldd	r14, Y+6	; 0x06
    36ae:	fd 80       	ldd	r15, Y+5	; 0x05
    36b0:	0c 81       	ldd	r16, Y+4	; 0x04
    36b2:	1b 81       	ldd	r17, Y+3	; 0x03
    36b4:	aa 81       	ldd	r26, Y+2	; 0x02
    36b6:	b9 81       	ldd	r27, Y+1	; 0x01
    36b8:	ce 0f       	add	r28, r30
    36ba:	d1 1d       	adc	r29, r1
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	f8 94       	cli
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	cd bf       	out	0x3d, r28	; 61
    36c6:	ed 01       	movw	r28, r26
    36c8:	08 95       	ret

000036ca <_exit>:
    36ca:	f8 94       	cli

000036cc <__stop_program>:
    36cc:	ff cf       	rjmp	.-2      	; 0x36cc <__stop_program>
