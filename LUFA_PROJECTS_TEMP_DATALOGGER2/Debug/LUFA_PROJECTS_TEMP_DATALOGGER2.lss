
LUFA_PROJECTS_TEMP_DATALOGGER2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00005dc8  00005e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005dc8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000066b  00800210  00800210  00005f8c  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00005f8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00005f8d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000550  00000000  00000000  00005fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b956  00000000  00000000  00006539  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020e1  00000000  00000000  00011e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000e8ff  00000000  00000000  00013f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019e8  00000000  00000000  00022870  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001a233  00000000  00000000  00024258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b7f6  00000000  00000000  0003e48b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001060  00000000  00000000  00049c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000090ca  00000000  00000000  0004ace1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c1 c0       	rjmp	.+386    	; 0x184 <__ctors_end>
       2:	00 00       	nop
       4:	dc c0       	rjmp	.+440    	; 0x1be <__bad_interrupt>
       6:	00 00       	nop
       8:	da c0       	rjmp	.+436    	; 0x1be <__bad_interrupt>
       a:	00 00       	nop
       c:	d8 c0       	rjmp	.+432    	; 0x1be <__bad_interrupt>
       e:	00 00       	nop
      10:	d6 c0       	rjmp	.+428    	; 0x1be <__bad_interrupt>
      12:	00 00       	nop
      14:	d4 c0       	rjmp	.+424    	; 0x1be <__bad_interrupt>
      16:	00 00       	nop
      18:	d2 c0       	rjmp	.+420    	; 0x1be <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d0 c0       	rjmp	.+416    	; 0x1be <__bad_interrupt>
      1e:	00 00       	nop
      20:	ce c0       	rjmp	.+412    	; 0x1be <__bad_interrupt>
      22:	00 00       	nop
      24:	cc c0       	rjmp	.+408    	; 0x1be <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 19 29 	jmp	0x5232	; 0x5232 <__vector_10>
      2c:	0c 94 d8 29 	jmp	0x53b0	; 0x53b0 <__vector_11>
      30:	c6 c0       	rjmp	.+396    	; 0x1be <__bad_interrupt>
      32:	00 00       	nop
      34:	c4 c0       	rjmp	.+392    	; 0x1be <__bad_interrupt>
      36:	00 00       	nop
      38:	c2 c0       	rjmp	.+388    	; 0x1be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c0 c0       	rjmp	.+384    	; 0x1be <__bad_interrupt>
      3e:	00 00       	nop
      40:	be c0       	rjmp	.+380    	; 0x1be <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 4a 1e 	jmp	0x3c94	; 0x3c94 <__vector_17>
      48:	ba c0       	rjmp	.+372    	; 0x1be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b8 c0       	rjmp	.+368    	; 0x1be <__bad_interrupt>
      4e:	00 00       	nop
      50:	b6 c0       	rjmp	.+364    	; 0x1be <__bad_interrupt>
      52:	00 00       	nop
      54:	b4 c0       	rjmp	.+360    	; 0x1be <__bad_interrupt>
      56:	00 00       	nop
      58:	b2 c0       	rjmp	.+356    	; 0x1be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b0 c0       	rjmp	.+352    	; 0x1be <__bad_interrupt>
      5e:	00 00       	nop
      60:	ae c0       	rjmp	.+348    	; 0x1be <__bad_interrupt>
      62:	00 00       	nop
      64:	ac c0       	rjmp	.+344    	; 0x1be <__bad_interrupt>
      66:	00 00       	nop
      68:	aa c0       	rjmp	.+340    	; 0x1be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a8 c0       	rjmp	.+336    	; 0x1be <__bad_interrupt>
      6e:	00 00       	nop
      70:	a6 c0       	rjmp	.+332    	; 0x1be <__bad_interrupt>
      72:	00 00       	nop
      74:	a4 c0       	rjmp	.+328    	; 0x1be <__bad_interrupt>
      76:	00 00       	nop
      78:	a2 c0       	rjmp	.+324    	; 0x1be <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a0 c0       	rjmp	.+320    	; 0x1be <__bad_interrupt>
      7e:	00 00       	nop
      80:	9e c0       	rjmp	.+316    	; 0x1be <__bad_interrupt>
      82:	00 00       	nop
      84:	9c c0       	rjmp	.+312    	; 0x1be <__bad_interrupt>
      86:	00 00       	nop
      88:	9a c0       	rjmp	.+308    	; 0x1be <__bad_interrupt>
      8a:	00 00       	nop
      8c:	98 c0       	rjmp	.+304    	; 0x1be <__bad_interrupt>
      8e:	00 00       	nop
      90:	96 c0       	rjmp	.+300    	; 0x1be <__bad_interrupt>
      92:	00 00       	nop
      94:	94 c0       	rjmp	.+296    	; 0x1be <__bad_interrupt>
      96:	00 00       	nop
      98:	92 c0       	rjmp	.+292    	; 0x1be <__bad_interrupt>
      9a:	00 00       	nop
      9c:	90 c0       	rjmp	.+288    	; 0x1be <__bad_interrupt>
      9e:	00 00       	nop
      a0:	8e c0       	rjmp	.+284    	; 0x1be <__bad_interrupt>
      a2:	00 00       	nop
      a4:	8c c0       	rjmp	.+280    	; 0x1be <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8a c0       	rjmp	.+276    	; 0x1be <__bad_interrupt>
	...

000000ac <ProductString>:
      ac:	2e 03 54 00 65 00 6d 00 70 00 65 00 72 00 61 00     ..T.e.m.p.e.r.a.
      bc:	74 00 75 00 72 00 65 00 20 00 44 00 61 00 74 00     t.u.r.e. .D.a.t.
      cc:	61 00 6c 00 6f 00 67 00 67 00 65 00 72 00 00 00     a.l.o.g.g.e.r...

000000dc <ManufacturerString>:
      dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
      f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
      fa:	09 02 39 00 02 01 00 c0 32 09 04 00 00 02 08 06     ..9.....2.......
     10a:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..
     11a:	09 04 01 00 01 03 00 00 00 09 21 11 01 00 01 22     ..........!...."
     12a:	20 00 07 05 81 03 10 00 05                           ........

00000133 <DeviceDescriptor>:
     133:	12 01 10 01 00 00 00 08 eb 03 63 20 01 00 01 02     ..........c ....
     143:	dc 01                                               ..

00000145 <GenericReport>:
     145:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     155:	02 81 02 09 03 15 00 25 ff 75 08 95 02 91 02 c0     .......%.u......

00000165 <__c.4323>:
     165:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     175:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0d 0a 00        ation failed...

00000184 <__ctors_end>:
     184:	11 24       	eor	r1, r1
     186:	1f be       	out	0x3f, r1	; 63
     188:	cf ef       	ldi	r28, 0xFF	; 255
     18a:	da e0       	ldi	r29, 0x0A	; 10
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	cd bf       	out	0x3d, r28	; 61

00000190 <__do_copy_data>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a0 e0       	ldi	r26, 0x00	; 0
     194:	b1 e0       	ldi	r27, 0x01	; 1
     196:	e8 ec       	ldi	r30, 0xC8	; 200
     198:	fd e5       	ldi	r31, 0x5D	; 93
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x10>
     19c:	05 90       	lpm	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	a0 31       	cpi	r26, 0x10	; 16
     1a2:	b1 07       	cpc	r27, r17
     1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0xc>

000001a6 <__do_clear_bss>:
     1a6:	28 e0       	ldi	r18, 0x08	; 8
     1a8:	a0 e1       	ldi	r26, 0x10	; 16
     1aa:	b2 e0       	ldi	r27, 0x02	; 2
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
     1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
     1b0:	ab 37       	cpi	r26, 0x7B	; 123
     1b2:	b2 07       	cpc	r27, r18
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
     1b6:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <main>
     1ba:	0c 94 e2 2e 	jmp	0x5dc4	; 0x5dc4 <_exit>

000001be <__bad_interrupt>:
     1be:	20 cf       	rjmp	.-448    	; 0x0 <__vectors>

000001c0 <Config_IO>:
#include "IO_Macros.h"
#include <avr/io.h>

void Config_IO(){
	
	configure_as_input(SD_DETECT);
     1c0:	27 98       	cbi	0x04, 7	; 4
	pullup_on(SD_DETECT);
     1c2:	2f 9a       	sbi	0x05, 7	; 5
	
	configure_as_input(REED_1);
     1c4:	56 98       	cbi	0x0a, 6	; 10
	pullup_on(REED_1);
     1c6:	5e 9a       	sbi	0x0b, 6	; 11
	
	configure_as_input(REED_2);
     1c8:	57 98       	cbi	0x0a, 7	; 10
	pullup_on(REED_2);	
     1ca:	5f 9a       	sbi	0x0b, 7	; 11

	configure_as_input(REED_3);
     1cc:	24 98       	cbi	0x04, 4	; 4
	pullup_on(REED_3);	
     1ce:	2c 9a       	sbi	0x05, 4	; 5
	
	configure_as_input(REED_4);
     1d0:	25 98       	cbi	0x04, 5	; 4
	pullup_on(REED_4);	
     1d2:	2d 9a       	sbi	0x05, 5	; 5

	configure_as_input(SD_MISO);
     1d4:	23 98       	cbi	0x04, 3	; 4
	pullup_on(SD_MISO);
     1d6:	2b 9a       	sbi	0x05, 3	; 5
	
	configure_as_output(SD_MOSI);
     1d8:	22 9a       	sbi	0x04, 2	; 4
	pullup_on(SD_MOSI);
     1da:	2a 9a       	sbi	0x05, 2	; 5
	
	configure_as_output(SENSE_CLK);
     1dc:	26 9a       	sbi	0x04, 6	; 4
	
	configure_as_input(SENSE_SER);
     1de:	3e 98       	cbi	0x07, 6	; 7
	pullup_on(SENSE_SER);
     1e0:	46 9a       	sbi	0x08, 6	; 8
	
	configure_as_output(SD_CLK);
     1e2:	21 9a       	sbi	0x04, 1	; 4
	
	configure_as_input(PIO_5);
     1e4:	20 98       	cbi	0x04, 0	; 4
	pullup_on(PIO_5);
     1e6:	28 9a       	sbi	0x05, 0	; 5
	
	configure_as_input(PIO_6);
     1e8:	6e 98       	cbi	0x0d, 6	; 13
	pullup_on(PIO_6);
     1ea:	76 9a       	sbi	0x0e, 6	; 14
	
	set_low(DUMMY_LOAD);
     1ec:	5d 98       	cbi	0x0b, 5	; 11
	configure_as_output(DUMMY_LOAD);
     1ee:	55 9a       	sbi	0x0a, 5	; 10
	
	configure_as_input(POK);
     1f0:	54 98       	cbi	0x0a, 4	; 10
	pullup_on(POK);
     1f2:	5c 9a       	sbi	0x0b, 4	; 11
	
	set_high(TX);
     1f4:	5b 9a       	sbi	0x0b, 3	; 11
	configure_as_output(TX);
     1f6:	53 9a       	sbi	0x0a, 3	; 10
	
	configure_as_input(RX);
     1f8:	52 98       	cbi	0x0a, 2	; 10
	pullup_on(RX);
     1fa:	5a 9a       	sbi	0x0b, 2	; 11
	
	set_high(SD_CHIP_SELECT);
     1fc:	59 9a       	sbi	0x0b, 1	; 11
	configure_as_output(SD_CHIP_SELECT);
     1fe:	51 9a       	sbi	0x0a, 1	; 10
	
	set_high(SD_POWER);
     200:	58 9a       	sbi	0x0b, 0	; 11
	configure_as_output(SD_POWER);
     202:	50 9a       	sbi	0x0a, 0	; 10
	
	set_high(SENSE_POWER);
     204:	72 9a       	sbi	0x0e, 2	; 14
	configure_as_output(SENSE_POWER);
     206:	6a 9a       	sbi	0x0d, 2	; 13
	
	configure_as_input(S1);
     208:	85 98       	cbi	0x10, 5	; 16
	pullup_on(S1);
     20a:	8d 9a       	sbi	0x11, 5	; 17
	
	configure_as_input(S2);
     20c:	86 98       	cbi	0x10, 6	; 16
	pullup_on(S2);
     20e:	8e 9a       	sbi	0x11, 6	; 17
	
	configure_as_input(S3);
     210:	87 98       	cbi	0x10, 7	; 16
	pullup_on(S3);
     212:	8f 9a       	sbi	0x11, 7	; 17
	
	set_low(BT_RESET);
     214:	8c 98       	cbi	0x11, 4	; 17
	configure_as_output(BT_RESET);
     216:	84 9a       	sbi	0x10, 4	; 16
	
	set_high(LED1);
     218:	89 9a       	sbi	0x11, 1	; 17
	configure_as_output(LED1);
     21a:	81 9a       	sbi	0x10, 1	; 16
	
	set_high(LED2);
     21c:	88 9a       	sbi	0x11, 0	; 17
	configure_as_output(LED2);
     21e:	80 9a       	sbi	0x10, 0	; 16
     220:	08 95       	ret

00000222 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     222:	29 2f       	mov	r18, r25
     224:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     226:	23 30       	cpi	r18, 0x03	; 3
     228:	31 05       	cpc	r19, r1
     22a:	c9 f0       	breq	.+50     	; 0x25e <CALLBACK_USB_GetDescriptor+0x3c>
     22c:	44 f4       	brge	.+16     	; 0x23e <CALLBACK_USB_GetDescriptor+0x1c>
     22e:	21 30       	cpi	r18, 0x01	; 1
     230:	31 05       	cpc	r19, r1
     232:	09 f4       	brne	.+2      	; 0x236 <CALLBACK_USB_GetDescriptor+0x14>
     234:	39 c0       	rjmp	.+114    	; 0x2a8 <CALLBACK_USB_GetDescriptor+0x86>
     236:	22 30       	cpi	r18, 0x02	; 2
     238:	31 05       	cpc	r19, r1
     23a:	61 f0       	breq	.+24     	; 0x254 <CALLBACK_USB_GetDescriptor+0x32>
     23c:	06 c0       	rjmp	.+12     	; 0x24a <CALLBACK_USB_GetDescriptor+0x28>
     23e:	21 32       	cpi	r18, 0x21	; 33
     240:	31 05       	cpc	r19, r1
     242:	41 f1       	breq	.+80     	; 0x294 <CALLBACK_USB_GetDescriptor+0x72>
     244:	22 32       	cpi	r18, 0x22	; 34
     246:	31 05       	cpc	r19, r1
     248:	51 f1       	breq	.+84     	; 0x29e <CALLBACK_USB_GetDescriptor+0x7c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	33 c0       	rjmp	.+102    	; 0x2ba <CALLBACK_USB_GetDescriptor+0x98>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     254:	89 e3       	ldi	r24, 0x39	; 57
     256:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     258:	2a ef       	ldi	r18, 0xFA	; 250
     25a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     25c:	2e c0       	rjmp	.+92     	; 0x2ba <CALLBACK_USB_GetDescriptor+0x98>
     25e:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	91 05       	cpc	r25, r1
     264:	59 f0       	breq	.+22     	; 0x27c <CALLBACK_USB_GetDescriptor+0x5a>
     266:	82 30       	cpi	r24, 0x02	; 2
     268:	91 05       	cpc	r25, r1
     26a:	71 f0       	breq	.+28     	; 0x288 <CALLBACK_USB_GetDescriptor+0x66>
     26c:	89 2b       	or	r24, r25
     26e:	09 f5       	brne	.+66     	; 0x2b2 <CALLBACK_USB_GetDescriptor+0x90>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     270:	e6 ef       	ldi	r30, 0xF6	; 246
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	84 91       	lpm	r24, Z
     276:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     278:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     27a:	1f c0       	rjmp	.+62     	; 0x2ba <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     27c:	ec ed       	ldi	r30, 0xDC	; 220
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	84 91       	lpm	r24, Z
     282:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     284:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     286:	19 c0       	rjmp	.+50     	; 0x2ba <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     288:	ec ea       	ldi	r30, 0xAC	; 172
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	84 91       	lpm	r24, Z
     28e:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     290:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     292:	13 c0       	rjmp	.+38     	; 0x2ba <CALLBACK_USB_GetDescriptor+0x98>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     294:	89 e0       	ldi	r24, 0x09	; 9
     296:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     298:	23 e2       	ldi	r18, 0x23	; 35
     29a:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     29c:	0e c0       	rjmp	.+28     	; 0x2ba <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     29e:	80 e2       	ldi	r24, 0x20	; 32
     2a0:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     2a2:	25 e4       	ldi	r18, 0x45	; 69
     2a4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
     2a6:	09 c0       	rjmp	.+18     	; 0x2ba <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     2a8:	82 e1       	ldi	r24, 0x12	; 18
     2aa:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     2ac:	23 e3       	ldi	r18, 0x33	; 51
     2ae:	31 e0       	ldi	r19, 0x01	; 1
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     2ba:	fa 01       	movw	r30, r20
     2bc:	31 83       	std	Z+1, r19	; 0x01
     2be:	20 83       	st	Z, r18
	return Size;
}
     2c0:	08 95       	ret

000002c2 <dly_us>:

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
     2c2:	23 b1       	in	r18, 0x03	; 3
#if F_CPU >= 6000000
		PINB;
     2c4:	23 b1       	in	r18, 0x03	; 3
#endif
#if F_CPU >= 7000000
		PINB;
     2c6:	23 b1       	in	r18, 0x03	; 3
#endif
#if F_CPU >= 8000000
		PINB;
     2c8:	23 b1       	in	r18, 0x03	; 3
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	00 97       	sbiw	r24, 0x00	; 0
     2ce:	c9 f7       	brne	.-14     	; 0x2c2 <dly_us>
}
     2d0:	08 95       	ret

000002d2 <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
     2d2:	fc 01       	movw	r30, r24
     2d4:	68 0f       	add	r22, r24
     2d6:	79 1f       	adc	r23, r25
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
     2d8:	81 91       	ld	r24, Z+
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
     2da:	88 23       	and	r24, r24
     2dc:	14 f4       	brge	.+4      	; 0x2e2 <xmit_mmc+0x10>
     2de:	2a 9a       	sbi	0x05, 2	; 5
     2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <xmit_mmc+0x12>
     2e2:	2b 98       	cbi	0x05, 3	; 5
		CK_H(); CK_L();
     2e4:	29 9a       	sbi	0x05, 1	; 5
     2e6:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
     2e8:	86 ff       	sbrs	r24, 6
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <xmit_mmc+0x1e>
     2ec:	2a 9a       	sbi	0x05, 2	; 5
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <xmit_mmc+0x20>
     2f0:	2b 98       	cbi	0x05, 3	; 5
		CK_H(); CK_L();
     2f2:	29 9a       	sbi	0x05, 1	; 5
     2f4:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
     2f6:	85 ff       	sbrs	r24, 5
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <xmit_mmc+0x2c>
     2fa:	2a 9a       	sbi	0x05, 2	; 5
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <xmit_mmc+0x2e>
     2fe:	2b 98       	cbi	0x05, 3	; 5
		CK_H(); CK_L();
     300:	29 9a       	sbi	0x05, 1	; 5
     302:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
     304:	84 ff       	sbrs	r24, 4
     306:	02 c0       	rjmp	.+4      	; 0x30c <xmit_mmc+0x3a>
     308:	2a 9a       	sbi	0x05, 2	; 5
     30a:	01 c0       	rjmp	.+2      	; 0x30e <xmit_mmc+0x3c>
     30c:	2b 98       	cbi	0x05, 3	; 5
		CK_H(); CK_L();
     30e:	29 9a       	sbi	0x05, 1	; 5
     310:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
     312:	83 ff       	sbrs	r24, 3
     314:	02 c0       	rjmp	.+4      	; 0x31a <xmit_mmc+0x48>
     316:	2a 9a       	sbi	0x05, 2	; 5
     318:	01 c0       	rjmp	.+2      	; 0x31c <xmit_mmc+0x4a>
     31a:	2b 98       	cbi	0x05, 3	; 5
		CK_H(); CK_L();
     31c:	29 9a       	sbi	0x05, 1	; 5
     31e:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
     320:	82 ff       	sbrs	r24, 2
     322:	02 c0       	rjmp	.+4      	; 0x328 <xmit_mmc+0x56>
     324:	2a 9a       	sbi	0x05, 2	; 5
     326:	01 c0       	rjmp	.+2      	; 0x32a <xmit_mmc+0x58>
     328:	2b 98       	cbi	0x05, 3	; 5
		CK_H(); CK_L();
     32a:	29 9a       	sbi	0x05, 1	; 5
     32c:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
     32e:	81 ff       	sbrs	r24, 1
     330:	02 c0       	rjmp	.+4      	; 0x336 <xmit_mmc+0x64>
     332:	2a 9a       	sbi	0x05, 2	; 5
     334:	01 c0       	rjmp	.+2      	; 0x338 <xmit_mmc+0x66>
     336:	2b 98       	cbi	0x05, 3	; 5
		CK_H(); CK_L();
     338:	29 9a       	sbi	0x05, 1	; 5
     33a:	29 98       	cbi	0x05, 1	; 5
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
     33c:	80 ff       	sbrs	r24, 0
     33e:	02 c0       	rjmp	.+4      	; 0x344 <xmit_mmc+0x72>
     340:	2a 9a       	sbi	0x05, 2	; 5
     342:	01 c0       	rjmp	.+2      	; 0x346 <xmit_mmc+0x74>
     344:	2b 98       	cbi	0x05, 3	; 5
		CK_H(); CK_L();
     346:	29 9a       	sbi	0x05, 1	; 5
     348:	29 98       	cbi	0x05, 1	; 5
	} while (--bc);
     34a:	e6 17       	cp	r30, r22
     34c:	f7 07       	cpc	r31, r23
     34e:	21 f6       	brne	.-120    	; 0x2d8 <xmit_mmc+0x6>
}
     350:	08 95       	ret

00000352 <rcvr_mmc>:
)
{
	BYTE r;


	DI_H();	/* Send 0xFF */
     352:	2a 9a       	sbi	0x05, 2	; 5
     354:	fc 01       	movw	r30, r24
     356:	68 0f       	add	r22, r24
     358:	79 1f       	adc	r23, r25
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit1 */
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit0 */
		CK_H(); CK_L();
		*buff++ = r;			/* Store a received byte */
     35a:	8f ef       	ldi	r24, 0xFF	; 255

	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
		CK_H(); CK_L();
     35c:	29 9a       	sbi	0x05, 1	; 5
     35e:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit6 */
		CK_H(); CK_L();
     360:	29 9a       	sbi	0x05, 1	; 5
     362:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit5 */
		CK_H(); CK_L();
     364:	29 9a       	sbi	0x05, 1	; 5
     366:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit4 */
		CK_H(); CK_L();
     368:	29 9a       	sbi	0x05, 1	; 5
     36a:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit3 */
		CK_H(); CK_L();
     36c:	29 9a       	sbi	0x05, 1	; 5
     36e:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit2 */
		CK_H(); CK_L();
     370:	29 9a       	sbi	0x05, 1	; 5
     372:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit1 */
		CK_H(); CK_L();
     374:	29 9a       	sbi	0x05, 1	; 5
     376:	29 98       	cbi	0x05, 1	; 5
		r <<= 1; if (DO) r++;	/* bit0 */
		CK_H(); CK_L();
     378:	29 9a       	sbi	0x05, 1	; 5
     37a:	29 98       	cbi	0x05, 1	; 5
		*buff++ = r;			/* Store a received byte */
     37c:	81 93       	st	Z+, r24
	} while (--bc);
     37e:	e6 17       	cp	r30, r22
     380:	f7 07       	cpc	r31, r23
     382:	61 f7       	brne	.-40     	; 0x35c <rcvr_mmc+0xa>
}
     384:	08 95       	ret

00000386 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	1f 92       	push	r1
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
     394:	08 e8       	ldi	r16, 0x88	; 136
     396:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	ce 01       	movw	r24, r28
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	d8 df       	rcall	.-80     	; 0x352 <rcvr_mmc>
		if (d == 0xFF) break;
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	8f 3f       	cpi	r24, 0xFF	; 255
     3a6:	41 f0       	breq	.+16     	; 0x3b8 <wait_ready+0x32>
		dly_us(100);
     3a8:	84 e6       	ldi	r24, 0x64	; 100
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	8a df       	rcall	.-236    	; 0x2c2 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
     3ae:	01 50       	subi	r16, 0x01	; 1
     3b0:	11 09       	sbc	r17, r1
     3b2:	01 15       	cp	r16, r1
     3b4:	11 05       	cpc	r17, r1
     3b6:	81 f7       	brne	.-32     	; 0x398 <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	01 2b       	or	r16, r17
     3be:	11 f4       	brne	.+4      	; 0x3c4 <wait_ready+0x3e>
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
}
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	08 95       	ret

000003d0 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	1f 92       	push	r1
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();
     3da:	59 9a       	sbi	0x0b, 1	; 11
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	b6 df       	rcall	.-148    	; 0x352 <rcvr_mmc>
}
     3e6:	0f 90       	pop	r0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	1f 92       	push	r1
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();
     3fc:	59 98       	cbi	0x0b, 1	; 11
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	a5 df       	rcall	.-182    	; 0x352 <rcvr_mmc>

	if (wait_ready()) return 1;	/* OK */
     408:	be df       	rcall	.-132    	; 0x386 <wait_ready>
     40a:	8c 01       	movw	r16, r24
     40c:	00 97       	sbiw	r24, 0x00	; 0
     40e:	11 f4       	brne	.+4      	; 0x414 <select+0x26>
	deselect();
     410:	df df       	rcall	.-66     	; 0x3d0 <deselect>
	return 0;			/* Failed */
     412:	02 c0       	rjmp	.+4      	; 0x418 <select+0x2a>
	BYTE d;

	CS_L();
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
     414:	01 e0       	ldi	r16, 0x01	; 1
     416:	10 e0       	ldi	r17, 0x00	; 0
	deselect();
	return 0;			/* Failed */
}
     418:	c8 01       	movw	r24, r16
     41a:	0f 90       	pop	r0
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	08 95       	ret

00000426 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
     426:	cf 92       	push	r12
     428:	df 92       	push	r13
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	00 d0       	rcall	.+0      	; 0x438 <rcvr_datablock+0x12>
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	7c 01       	movw	r14, r24
     43e:	6b 01       	movw	r12, r22
     440:	08 ee       	ldi	r16, 0xE8	; 232
     442:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	ce 01       	movw	r24, r28
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	82 df       	rcall	.-252    	; 0x352 <rcvr_mmc>
		if (d[0] != 0xFF) break;
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	8f 3f       	cpi	r24, 0xFF	; 255
     452:	41 f4       	brne	.+16     	; 0x464 <rcvr_datablock+0x3e>
		dly_us(100);
     454:	84 e6       	ldi	r24, 0x64	; 100
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	34 df       	rcall	.-408    	; 0x2c2 <dly_us>
     45a:	01 50       	subi	r16, 0x01	; 1
     45c:	11 09       	sbc	r17, r1
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
     45e:	01 15       	cp	r16, r1
     460:	11 05       	cpc	r17, r1
     462:	81 f7       	brne	.-32     	; 0x444 <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	8e 3f       	cpi	r24, 0xFE	; 254
     468:	59 f4       	brne	.+22     	; 0x480 <rcvr_datablock+0x5a>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
     46a:	b6 01       	movw	r22, r12
     46c:	c7 01       	movw	r24, r14
     46e:	71 df       	rcall	.-286    	; 0x352 <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
     470:	62 e0       	ldi	r22, 0x02	; 2
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	ce 01       	movw	r24, r28
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	6c df       	rcall	.-296    	; 0x352 <rcvr_mmc>

	return 1;						/* Return with success */
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	02 c0       	rjmp	.+4      	; 0x484 <rcvr_datablock+0x5e>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	08 95       	ret

0000049a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <xmit_datablock+0xc>
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	8c 01       	movw	r16, r24
     4ac:	f6 2e       	mov	r15, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
     4ae:	6b df       	rcall	.-298    	; 0x386 <wait_ready>
     4b0:	00 97       	sbiw	r24, 0x00	; 0
     4b2:	19 f1       	breq	.+70     	; 0x4fa <xmit_datablock+0x60>

	d[0] = token;
     4b4:	f9 82       	std	Y+1, r15	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	ce 01       	movw	r24, r28
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	09 df       	rcall	.-494    	; 0x2d2 <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
     4c0:	8d ef       	ldi	r24, 0xFD	; 253
     4c2:	f8 16       	cp	r15, r24
     4c4:	c1 f0       	breq	.+48     	; 0x4f6 <xmit_datablock+0x5c>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	72 e0       	ldi	r23, 0x02	; 2
     4ca:	c8 01       	movw	r24, r16
     4cc:	02 df       	rcall	.-508    	; 0x2d2 <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
     4ce:	62 e0       	ldi	r22, 0x02	; 2
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	ce 01       	movw	r24, r28
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	3d df       	rcall	.-390    	; 0x352 <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	38 df       	rcall	.-400    	; 0x352 <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	8f 71       	andi	r24, 0x1F	; 31
     4e6:	31 e0       	ldi	r19, 0x01	; 1
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	85 30       	cpi	r24, 0x05	; 5
     4ec:	09 f0       	breq	.+2      	; 0x4f0 <xmit_datablock+0x56>
     4ee:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
     4f0:	83 2f       	mov	r24, r19
     4f2:	92 2f       	mov	r25, r18
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <xmit_datablock+0x60>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
}
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	08 95       	ret

0000050a <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	27 97       	sbiw	r28, 0x07	; 7
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	18 2f       	mov	r17, r24
     52a:	04 2f       	mov	r16, r20
     52c:	f5 2e       	mov	r15, r21
     52e:	e6 2e       	mov	r14, r22
     530:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     532:	88 23       	and	r24, r24
     534:	4c f4       	brge	.+18     	; 0x548 <send_cmd+0x3e>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	ba 01       	movw	r22, r20
     53c:	87 e3       	ldi	r24, 0x37	; 55
     53e:	e5 df       	rcall	.-54     	; 0x50a <send_cmd>
		if (n > 1) return n;
     540:	82 30       	cpi	r24, 0x02	; 2
     542:	08 f0       	brcs	.+2      	; 0x546 <send_cmd+0x3c>
     544:	45 c0       	rjmp	.+138    	; 0x5d0 <send_cmd+0xc6>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     546:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     548:	1c 30       	cpi	r17, 0x0C	; 12
     54a:	59 f1       	breq	.+86     	; 0x5a2 <send_cmd+0x98>
		deselect();
     54c:	41 df       	rcall	.-382    	; 0x3d0 <deselect>
		if (!select()) return 0xFF;
     54e:	4f df       	rcall	.-354    	; 0x3ee <select>
     550:	89 2b       	or	r24, r25
     552:	29 f1       	breq	.+74     	; 0x59e <send_cmd+0x94>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
     554:	81 2f       	mov	r24, r17
     556:	80 64       	ori	r24, 0x40	; 64
     558:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
     55a:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
     55c:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
     55e:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
     560:	0e 83       	std	Y+6, r16	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
     562:	11 23       	and	r17, r17
     564:	69 f1       	breq	.+90     	; 0x5c0 <send_cmd+0xb6>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
     566:	18 30       	cpi	r17, 0x08	; 8
     568:	19 f1       	breq	.+70     	; 0x5b0 <send_cmd+0xa6>
	buf[5] = n;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     56e:	66 e0       	ldi	r22, 0x06	; 6
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	ce 01       	movw	r24, r28
     574:	02 96       	adiw	r24, 0x02	; 2
     576:	ad de       	rcall	.-678    	; 0x2d2 <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
     578:	1c 30       	cpi	r17, 0x0C	; 12
     57a:	29 f4       	brne	.+10     	; 0x586 <send_cmd+0x7c>
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	ce 01       	movw	r24, r28
     582:	01 96       	adiw	r24, 0x01	; 1
     584:	e6 de       	rcall	.-564    	; 0x352 <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     586:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
     588:	61 e0       	ldi	r22, 0x01	; 1
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	ce 01       	movw	r24, r28
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	e0 de       	rcall	.-576    	; 0x352 <rcvr_mmc>
	while ((d & 0x80) && --n);
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	88 23       	and	r24, r24
     596:	e4 f4       	brge	.+56     	; 0x5d0 <send_cmd+0xc6>
     598:	11 50       	subi	r17, 0x01	; 1
     59a:	b1 f7       	brne	.-20     	; 0x588 <send_cmd+0x7e>
     59c:	19 c0       	rjmp	.+50     	; 0x5d0 <send_cmd+0xc6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     59e:	8f ef       	ldi	r24, 0xFF	; 255
     5a0:	17 c0       	rjmp	.+46     	; 0x5d0 <send_cmd+0xc6>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
     5a2:	8c e4       	ldi	r24, 0x4C	; 76
     5a4:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
     5a6:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
     5a8:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
     5aa:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
     5ac:	0e 83       	std	Y+6, r16	; 0x06
     5ae:	dd cf       	rjmp	.-70     	; 0x56a <send_cmd+0x60>
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
     5b0:	87 e8       	ldi	r24, 0x87	; 135
     5b2:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     5b4:	66 e0       	ldi	r22, 0x06	; 6
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	ce 01       	movw	r24, r28
     5ba:	02 96       	adiw	r24, 0x02	; 2
     5bc:	8a de       	rcall	.-748    	; 0x2d2 <xmit_mmc>
     5be:	e3 cf       	rjmp	.-58     	; 0x586 <send_cmd+0x7c>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
     5c0:	85 e9       	ldi	r24, 0x95	; 149
     5c2:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     5c4:	66 e0       	ldi	r22, 0x06	; 6
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	ce 01       	movw	r24, r28
     5ca:	02 96       	adiw	r24, 0x02	; 2
     5cc:	82 de       	rcall	.-764    	; 0x2d2 <xmit_mmc>
     5ce:	db cf       	rjmp	.-74     	; 0x586 <send_cmd+0x7c>
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
     5d0:	27 96       	adiw	r28, 0x07	; 7
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	08 95       	ret

000005ec <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     5ec:	81 11       	cpse	r24, r1
     5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <disk_status+0xa>

	return Stat;
     5f0:	80 91 00 01 	lds	r24, 0x0100
     5f4:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     5f6:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
     5f8:	08 95       	ret

000005fa <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	00 d0       	rcall	.+0      	; 0x608 <disk_initialize+0xe>
     608:	00 d0       	rcall	.+0      	; 0x60a <disk_initialize+0x10>
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
     60e:	81 11       	cpse	r24, r1
     610:	a7 c0       	rjmp	.+334    	; 0x760 <disk_initialize+0x166>

	dly_us(10000);			/* 10ms */
     612:	80 e1       	ldi	r24, 0x10	; 16
     614:	97 e2       	ldi	r25, 0x27	; 39
     616:	55 de       	rcall	.-854    	; 0x2c2 <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
     618:	51 9a       	sbi	0x0a, 1	; 10
     61a:	59 9a       	sbi	0x0b, 1	; 11
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
     61c:	21 9a       	sbi	0x04, 1	; 4
     61e:	29 98       	cbi	0x05, 1	; 5
	DI_INIT();				/* Initialize port pin tied to DI */
     620:	22 9a       	sbi	0x04, 2	; 4
	DO_INIT();				/* Initialize port pin tied to DO */
     622:	23 98       	cbi	0x04, 3	; 4
     624:	1a e0       	ldi	r17, 0x0A	; 10

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	ce 01       	movw	r24, r28
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	91 de       	rcall	.-734    	; 0x352 <rcvr_mmc>
     630:	11 50       	subi	r17, 0x01	; 1
     632:	c9 f7       	brne	.-14     	; 0x626 <disk_initialize+0x2c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	ba 01       	movw	r22, r20
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	66 df       	rcall	.-308    	; 0x50a <send_cmd>
     63e:	81 30       	cpi	r24, 0x01	; 1
     640:	09 f0       	breq	.+2      	; 0x644 <disk_initialize+0x4a>
     642:	6f c0       	rjmp	.+222    	; 0x722 <disk_initialize+0x128>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     644:	4a ea       	ldi	r20, 0xAA	; 170
     646:	51 e0       	ldi	r21, 0x01	; 1
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	88 e0       	ldi	r24, 0x08	; 8
     64e:	5d df       	rcall	.-326    	; 0x50a <send_cmd>
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	b9 f5       	brne	.+110    	; 0x6c2 <disk_initialize+0xc8>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
     654:	64 e0       	ldi	r22, 0x04	; 4
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	7a de       	rcall	.-780    	; 0x352 <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	09 f0       	breq	.+2      	; 0x666 <disk_initialize+0x6c>
     664:	60 c0       	rjmp	.+192    	; 0x726 <disk_initialize+0x12c>
     666:	8c 81       	ldd	r24, Y+4	; 0x04
     668:	8a 3a       	cpi	r24, 0xAA	; 170
     66a:	09 f0       	breq	.+2      	; 0x66e <disk_initialize+0x74>
     66c:	5e c0       	rjmp	.+188    	; 0x72a <disk_initialize+0x130>
     66e:	08 ee       	ldi	r16, 0xE8	; 232
     670:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	70 e4       	ldi	r23, 0x40	; 64
     67a:	89 ea       	ldi	r24, 0xA9	; 169
     67c:	46 df       	rcall	.-372    	; 0x50a <send_cmd>
     67e:	88 23       	and	r24, r24
     680:	49 f0       	breq	.+18     	; 0x694 <disk_initialize+0x9a>
					dly_us(1000);
     682:	88 ee       	ldi	r24, 0xE8	; 232
     684:	93 e0       	ldi	r25, 0x03	; 3
     686:	1d de       	rcall	.-966    	; 0x2c2 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
     688:	01 50       	subi	r16, 0x01	; 1
     68a:	11 09       	sbc	r17, r1
     68c:	01 15       	cp	r16, r1
     68e:	11 05       	cpc	r17, r1
     690:	81 f7       	brne	.-32     	; 0x672 <disk_initialize+0x78>
     692:	4d c0       	rjmp	.+154    	; 0x72e <disk_initialize+0x134>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
     694:	01 2b       	or	r16, r17
     696:	09 f4       	brne	.+2      	; 0x69a <disk_initialize+0xa0>
     698:	4c c0       	rjmp	.+152    	; 0x732 <disk_initialize+0x138>
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	ba 01       	movw	r22, r20
     6a0:	8a e3       	ldi	r24, 0x3A	; 58
     6a2:	33 df       	rcall	.-410    	; 0x50a <send_cmd>
     6a4:	81 11       	cpse	r24, r1
     6a6:	47 c0       	rjmp	.+142    	; 0x736 <disk_initialize+0x13c>
					rcvr_mmc(buf, 4);
     6a8:	64 e0       	ldi	r22, 0x04	; 4
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	ce 01       	movw	r24, r28
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	50 de       	rcall	.-864    	; 0x352 <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	86 ff       	sbrs	r24, 6
     6b6:	41 c0       	rjmp	.+130    	; 0x73a <disk_initialize+0x140>
     6b8:	0f 2e       	mov	r0, r31
     6ba:	fc e0       	ldi	r31, 0x0C	; 12
     6bc:	ff 2e       	mov	r15, r31
     6be:	f0 2d       	mov	r31, r0
     6c0:	45 c0       	rjmp	.+138    	; 0x74c <disk_initialize+0x152>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	ba 01       	movw	r22, r20
     6c8:	89 ea       	ldi	r24, 0xA9	; 169
     6ca:	1f df       	rcall	.-450    	; 0x50a <send_cmd>
     6cc:	82 30       	cpi	r24, 0x02	; 2
     6ce:	40 f4       	brcc	.+16     	; 0x6e0 <disk_initialize+0xe6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     6d0:	0f 2e       	mov	r0, r31
     6d2:	f9 ea       	ldi	r31, 0xA9	; 169
     6d4:	ef 2e       	mov	r14, r31
     6d6:	f0 2d       	mov	r31, r0
     6d8:	68 94       	set
     6da:	ff 24       	eor	r15, r15
     6dc:	f1 f8       	bld	r15, 1
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <disk_initialize+0xee>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     6e0:	ee 24       	eor	r14, r14
     6e2:	e3 94       	inc	r14
     6e4:	ff 24       	eor	r15, r15
     6e6:	f3 94       	inc	r15
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
     6e8:	08 ee       	ldi	r16, 0xE8	; 232
     6ea:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	ba 01       	movw	r22, r20
     6f2:	8e 2d       	mov	r24, r14
     6f4:	0a df       	rcall	.-492    	; 0x50a <send_cmd>
     6f6:	88 23       	and	r24, r24
     6f8:	49 f0       	breq	.+18     	; 0x70c <disk_initialize+0x112>
				dly_us(1000);
     6fa:	88 ee       	ldi	r24, 0xE8	; 232
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	e1 dd       	rcall	.-1086   	; 0x2c2 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
     700:	01 50       	subi	r16, 0x01	; 1
     702:	11 09       	sbc	r17, r1
     704:	01 15       	cp	r16, r1
     706:	11 05       	cpc	r17, r1
     708:	89 f7       	brne	.-30     	; 0x6ec <disk_initialize+0xf2>
     70a:	1b c0       	rjmp	.+54     	; 0x742 <disk_initialize+0x148>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     70c:	01 2b       	or	r16, r17
     70e:	d9 f0       	breq	.+54     	; 0x746 <disk_initialize+0x14c>
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	52 e0       	ldi	r21, 0x02	; 2
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	80 e1       	ldi	r24, 0x10	; 16
     71a:	f7 de       	rcall	.-530    	; 0x50a <send_cmd>
     71c:	81 11       	cpse	r24, r1
     71e:	15 c0       	rjmp	.+42     	; 0x74a <disk_initialize+0x150>
     720:	15 c0       	rjmp	.+42     	; 0x74c <disk_initialize+0x152>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
     722:	f1 2c       	mov	r15, r1
     724:	13 c0       	rjmp	.+38     	; 0x74c <disk_initialize+0x152>
     726:	f1 2c       	mov	r15, r1
     728:	11 c0       	rjmp	.+34     	; 0x74c <disk_initialize+0x152>
     72a:	f1 2c       	mov	r15, r1
     72c:	0f c0       	rjmp	.+30     	; 0x74c <disk_initialize+0x152>
     72e:	f1 2c       	mov	r15, r1
     730:	0d c0       	rjmp	.+26     	; 0x74c <disk_initialize+0x152>
     732:	f1 2c       	mov	r15, r1
     734:	0b c0       	rjmp	.+22     	; 0x74c <disk_initialize+0x152>
     736:	f1 2c       	mov	r15, r1
     738:	09 c0       	rjmp	.+18     	; 0x74c <disk_initialize+0x152>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     73a:	68 94       	set
     73c:	ff 24       	eor	r15, r15
     73e:	f2 f8       	bld	r15, 2
     740:	05 c0       	rjmp	.+10     	; 0x74c <disk_initialize+0x152>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
     742:	f1 2c       	mov	r15, r1
     744:	03 c0       	rjmp	.+6      	; 0x74c <disk_initialize+0x152>
     746:	f1 2c       	mov	r15, r1
     748:	01 c0       	rjmp	.+2      	; 0x74c <disk_initialize+0x152>
     74a:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
     74c:	f0 92 10 02 	sts	0x0210, r15
	s = ty ? 0 : STA_NOINIT;
     750:	11 e0       	ldi	r17, 0x01	; 1
     752:	f1 10       	cpse	r15, r1
     754:	10 e0       	ldi	r17, 0x00	; 0
	Stat = s;
     756:	10 93 00 01 	sts	0x0100, r17

	deselect();
     75a:	3a de       	rcall	.-908    	; 0x3d0 <deselect>

	return s;
     75c:	81 2f       	mov	r24, r17
     75e:	01 c0       	rjmp	.+2      	; 0x762 <disk_initialize+0x168>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
     760:	83 e0       	ldi	r24, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	08 95       	ret

00000778 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     778:	ff 92       	push	r15
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	eb 01       	movw	r28, r22

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     784:	81 11       	cpse	r24, r1
     786:	3d c0       	rjmp	.+122    	; 0x802 <disk_read+0x8a>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     788:	80 91 00 01 	lds	r24, 0x0100
     78c:	80 fd       	sbrc	r24, 0
     78e:	3b c0       	rjmp	.+118    	; 0x806 <disk_read+0x8e>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
     790:	80 91 10 02 	lds	r24, 0x0210
     794:	83 fd       	sbrc	r24, 3
     796:	09 c0       	rjmp	.+18     	; 0x7aa <disk_read+0x32>
     798:	01 2e       	mov	r0, r17
     79a:	19 e0       	ldi	r17, 0x09	; 9
     79c:	22 0f       	add	r18, r18
     79e:	33 1f       	adc	r19, r19
     7a0:	44 1f       	adc	r20, r20
     7a2:	55 1f       	adc	r21, r21
     7a4:	1a 95       	dec	r17
     7a6:	d1 f7       	brne	.-12     	; 0x79c <disk_read+0x24>
     7a8:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     7aa:	02 30       	cpi	r16, 0x02	; 2
     7ac:	11 05       	cpc	r17, r1
     7ae:	28 f0       	brcs	.+10     	; 0x7ba <disk_read+0x42>
     7b0:	0f 2e       	mov	r0, r31
     7b2:	f2 e1       	ldi	r31, 0x12	; 18
     7b4:	ff 2e       	mov	r15, r31
     7b6:	f0 2d       	mov	r31, r0
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <disk_read+0x4a>
     7ba:	0f 2e       	mov	r0, r31
     7bc:	f1 e1       	ldi	r31, 0x11	; 17
     7be:	ff 2e       	mov	r15, r31
     7c0:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
     7c2:	ba 01       	movw	r22, r20
     7c4:	a9 01       	movw	r20, r18
     7c6:	8f 2d       	mov	r24, r15
     7c8:	a0 de       	rcall	.-704    	; 0x50a <send_cmd>
     7ca:	81 11       	cpse	r24, r1
     7cc:	14 c0       	rjmp	.+40     	; 0x7f6 <disk_read+0x7e>
		do {
			if (!rcvr_datablock(buff, 512)) break;
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	72 e0       	ldi	r23, 0x02	; 2
     7d2:	ce 01       	movw	r24, r28
     7d4:	28 de       	rcall	.-944    	; 0x426 <rcvr_datablock>
     7d6:	89 2b       	or	r24, r25
     7d8:	31 f0       	breq	.+12     	; 0x7e6 <disk_read+0x6e>
			buff += 512;
     7da:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
     7dc:	01 50       	subi	r16, 0x01	; 1
     7de:	11 09       	sbc	r17, r1
     7e0:	01 15       	cp	r16, r1
     7e2:	11 05       	cpc	r17, r1
     7e4:	a1 f7       	brne	.-24     	; 0x7ce <disk_read+0x56>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
     7e6:	82 e1       	ldi	r24, 0x12	; 18
     7e8:	f8 12       	cpse	r15, r24
     7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <disk_read+0x7e>
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	ba 01       	movw	r22, r20
     7f2:	8c e0       	ldi	r24, 0x0C	; 12
     7f4:	8a de       	rcall	.-748    	; 0x50a <send_cmd>
	}
	deselect();
     7f6:	ec dd       	rcall	.-1064   	; 0x3d0 <deselect>

	return count ? RES_ERROR : RES_OK;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	01 2b       	or	r16, r17
     7fc:	29 f4       	brne	.+10     	; 0x808 <disk_read+0x90>
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	03 c0       	rjmp	.+6      	; 0x808 <disk_read+0x90>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	01 c0       	rjmp	.+2      	; 0x808 <disk_read+0x90>
     806:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	08 95       	ret

00000814 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	eb 01       	movw	r28, r22
     826:	69 01       	movw	r12, r18
     828:	7a 01       	movw	r14, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     82a:	81 11       	cpse	r24, r1
     82c:	4b c0       	rjmp	.+150    	; 0x8c4 <disk_write+0xb0>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     82e:	80 91 00 01 	lds	r24, 0x0100
     832:	80 fd       	sbrc	r24, 0
     834:	49 c0       	rjmp	.+146    	; 0x8c8 <disk_write+0xb4>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
     836:	80 91 10 02 	lds	r24, 0x0210
     83a:	83 fd       	sbrc	r24, 3
     83c:	09 c0       	rjmp	.+18     	; 0x850 <disk_write+0x3c>
     83e:	0b 2e       	mov	r0, r27
     840:	b9 e0       	ldi	r27, 0x09	; 9
     842:	cc 0c       	add	r12, r12
     844:	dd 1c       	adc	r13, r13
     846:	ee 1c       	adc	r14, r14
     848:	ff 1c       	adc	r15, r15
     84a:	ba 95       	dec	r27
     84c:	d1 f7       	brne	.-12     	; 0x842 <disk_write+0x2e>
     84e:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     850:	01 30       	cpi	r16, 0x01	; 1
     852:	11 05       	cpc	r17, r1
     854:	89 f4       	brne	.+34     	; 0x878 <disk_write+0x64>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     856:	b7 01       	movw	r22, r14
     858:	a6 01       	movw	r20, r12
     85a:	88 e1       	ldi	r24, 0x18	; 24
     85c:	56 de       	rcall	.-852    	; 0x50a <send_cmd>
     85e:	81 11       	cpse	r24, r1
     860:	2b c0       	rjmp	.+86     	; 0x8b8 <disk_write+0xa4>
			&& xmit_datablock(buff, 0xFE))
     862:	6e ef       	ldi	r22, 0xFE	; 254
     864:	ce 01       	movw	r24, r28
     866:	19 de       	rcall	.-974    	; 0x49a <xmit_datablock>
     868:	31 e0       	ldi	r19, 0x01	; 1
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	89 2b       	or	r24, r25
     86e:	09 f0       	breq	.+2      	; 0x872 <disk_write+0x5e>
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	03 2f       	mov	r16, r19
     874:	12 2f       	mov	r17, r18
     876:	20 c0       	rjmp	.+64     	; 0x8b8 <disk_write+0xa4>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     878:	86 70       	andi	r24, 0x06	; 6
     87a:	29 f0       	breq	.+10     	; 0x886 <disk_write+0x72>
     87c:	a8 01       	movw	r20, r16
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	87 e9       	ldi	r24, 0x97	; 151
     884:	42 de       	rcall	.-892    	; 0x50a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     886:	b7 01       	movw	r22, r14
     888:	a6 01       	movw	r20, r12
     88a:	89 e1       	ldi	r24, 0x19	; 25
     88c:	3e de       	rcall	.-900    	; 0x50a <send_cmd>
     88e:	81 11       	cpse	r24, r1
     890:	13 c0       	rjmp	.+38     	; 0x8b8 <disk_write+0xa4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     892:	6c ef       	ldi	r22, 0xFC	; 252
     894:	ce 01       	movw	r24, r28
     896:	01 de       	rcall	.-1022   	; 0x49a <xmit_datablock>
     898:	89 2b       	or	r24, r25
     89a:	31 f0       	breq	.+12     	; 0x8a8 <disk_write+0x94>
				buff += 512;
     89c:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
     89e:	01 50       	subi	r16, 0x01	; 1
     8a0:	11 09       	sbc	r17, r1
     8a2:	01 15       	cp	r16, r1
     8a4:	11 05       	cpc	r17, r1
     8a6:	a9 f7       	brne	.-22     	; 0x892 <disk_write+0x7e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     8a8:	6d ef       	ldi	r22, 0xFD	; 253
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	f5 dd       	rcall	.-1046   	; 0x49a <xmit_datablock>
     8b0:	89 2b       	or	r24, r25
     8b2:	11 f4       	brne	.+4      	; 0x8b8 <disk_write+0xa4>
				count = 1;
     8b4:	01 e0       	ldi	r16, 0x01	; 1
     8b6:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
     8b8:	8b dd       	rcall	.-1258   	; 0x3d0 <deselect>

	return count ? RES_ERROR : RES_OK;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	01 2b       	or	r16, r17
     8be:	29 f4       	brne	.+10     	; 0x8ca <disk_write+0xb6>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <disk_write+0xb6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     8c4:	83 e0       	ldi	r24, 0x03	; 3
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <disk_write+0xb6>
     8c8:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	df 90       	pop	r13
     8d8:	cf 90       	pop	r12
     8da:	08 95       	ret

000008dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	60 97       	sbiw	r28, 0x10	; 16
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	8a 01       	movw	r16, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     8fe:	81 11       	cpse	r24, r1
     900:	96 c0       	rjmp	.+300    	; 0xa2e <disk_ioctl+0x152>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
     902:	80 91 00 01 	lds	r24, 0x0100
     906:	80 fd       	sbrc	r24, 0
     908:	94 c0       	rjmp	.+296    	; 0xa32 <disk_ioctl+0x156>

	res = RES_ERROR;
	switch (ctrl) {
     90a:	61 30       	cpi	r22, 0x01	; 1
     90c:	61 f0       	breq	.+24     	; 0x926 <disk_ioctl+0x4a>
     90e:	20 f0       	brcs	.+8      	; 0x918 <disk_ioctl+0x3c>
     910:	63 30       	cpi	r22, 0x03	; 3
     912:	09 f4       	brne	.+2      	; 0x916 <disk_ioctl+0x3a>
     914:	79 c0       	rjmp	.+242    	; 0xa08 <disk_ioctl+0x12c>
     916:	83 c0       	rjmp	.+262    	; 0xa1e <disk_ioctl+0x142>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
     918:	6a dd       	rcall	.-1324   	; 0x3ee <select>
     91a:	11 e0       	ldi	r17, 0x01	; 1
     91c:	89 2b       	or	r24, r25
     91e:	09 f4       	brne	.+2      	; 0x922 <disk_ioctl+0x46>
     920:	83 c0       	rjmp	.+262    	; 0xa28 <disk_ioctl+0x14c>
     922:	10 e0       	ldi	r17, 0x00	; 0
     924:	81 c0       	rjmp	.+258    	; 0xa28 <disk_ioctl+0x14c>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	ba 01       	movw	r22, r20
     92c:	89 e0       	ldi	r24, 0x09	; 9
     92e:	ed dd       	rcall	.-1062   	; 0x50a <send_cmd>
     930:	81 11       	cpse	r24, r1
     932:	77 c0       	rjmp	.+238    	; 0xa22 <disk_ioctl+0x146>
     934:	60 e1       	ldi	r22, 0x10	; 16
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	ce 01       	movw	r24, r28
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	74 dd       	rcall	.-1304   	; 0x426 <rcvr_datablock>
     93e:	89 2b       	or	r24, r25
     940:	09 f4       	brne	.+2      	; 0x944 <disk_ioctl+0x68>
     942:	71 c0       	rjmp	.+226    	; 0xa26 <disk_ioctl+0x14a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	82 95       	swap	r24
     948:	86 95       	lsr	r24
     94a:	86 95       	lsr	r24
     94c:	83 70       	andi	r24, 0x03	; 3
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	31 f5       	brne	.+76     	; 0x99e <disk_ioctl+0xc2>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     952:	88 85       	ldd	r24, Y+8	; 0x08
     954:	8f 73       	andi	r24, 0x3F	; 63
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	dc 01       	movw	r26, r24
     95e:	99 27       	eor	r25, r25
     960:	88 27       	eor	r24, r24
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	a1 1d       	adc	r26, r1
     966:	b1 1d       	adc	r27, r1
     968:	29 85       	ldd	r18, Y+9	; 0x09
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	32 2f       	mov	r19, r18
     96e:	22 27       	eor	r18, r18
     970:	4a 85       	ldd	r20, Y+10	; 0x0a
     972:	24 0f       	add	r18, r20
     974:	31 1d       	adc	r19, r1
     976:	82 0f       	add	r24, r18
     978:	93 1f       	adc	r25, r19
     97a:	a1 1d       	adc	r26, r1
     97c:	b1 1d       	adc	r27, r1
					*(DWORD*)buff = cs << 10;
     97e:	07 2e       	mov	r0, r23
     980:	7a e0       	ldi	r23, 0x0A	; 10
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	aa 1f       	adc	r26, r26
     988:	bb 1f       	adc	r27, r27
     98a:	7a 95       	dec	r23
     98c:	d1 f7       	brne	.-12     	; 0x982 <disk_ioctl+0xa6>
     98e:	70 2d       	mov	r23, r0
     990:	f8 01       	movw	r30, r16
     992:	80 83       	st	Z, r24
     994:	91 83       	std	Z+1, r25	; 0x01
     996:	a2 83       	std	Z+2, r26	; 0x02
     998:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
				}
				res = RES_OK;
     99a:	10 e0       	ldi	r17, 0x00	; 0
     99c:	45 c0       	rjmp	.+138    	; 0xa28 <disk_ioctl+0x14c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     99e:	49 85       	ldd	r20, Y+9	; 0x09
     9a0:	42 95       	swap	r20
     9a2:	46 95       	lsr	r20
     9a4:	46 95       	lsr	r20
     9a6:	43 70       	andi	r20, 0x03	; 3
     9a8:	88 85       	ldd	r24, Y+8	; 0x08
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	f4 e0       	ldi	r31, 0x04	; 4
     9ae:	8f 9f       	mul	r24, r31
     9b0:	40 0d       	add	r20, r0
     9b2:	51 1d       	adc	r21, r1
     9b4:	11 24       	eor	r1, r1
     9b6:	4f 5f       	subi	r20, 0xFF	; 255
     9b8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ba:	8f 81       	ldd	r24, Y+7	; 0x07
     9bc:	83 70       	andi	r24, 0x03	; 3
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	98 2f       	mov	r25, r24
     9c2:	88 27       	eor	r24, r24
     9c4:	99 0f       	add	r25, r25
     9c6:	99 0f       	add	r25, r25
     9c8:	48 0f       	add	r20, r24
     9ca:	59 1f       	adc	r21, r25
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     9d0:	9e 81       	ldd	r25, Y+6	; 0x06
     9d2:	9f 70       	andi	r25, 0x0F	; 15
     9d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9d6:	88 1f       	adc	r24, r24
     9d8:	88 27       	eor	r24, r24
     9da:	88 1f       	adc	r24, r24
     9dc:	89 0f       	add	r24, r25
     9de:	9a 85       	ldd	r25, Y+10	; 0x0a
     9e0:	93 70       	andi	r25, 0x03	; 3
     9e2:	99 0f       	add	r25, r25
     9e4:	89 0f       	add	r24, r25
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
     9e6:	87 50       	subi	r24, 0x07	; 7
     9e8:	6a 01       	movw	r12, r20
     9ea:	7b 01       	movw	r14, r22
     9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <disk_ioctl+0x11a>
     9ee:	cc 0c       	add	r12, r12
     9f0:	dd 1c       	adc	r13, r13
     9f2:	ee 1c       	adc	r14, r14
     9f4:	ff 1c       	adc	r15, r15
     9f6:	8a 95       	dec	r24
     9f8:	d2 f7       	brpl	.-12     	; 0x9ee <disk_ioctl+0x112>
     9fa:	f8 01       	movw	r30, r16
     9fc:	c0 82       	st	Z, r12
     9fe:	d1 82       	std	Z+1, r13	; 0x01
     a00:	e2 82       	std	Z+2, r14	; 0x02
     a02:	f3 82       	std	Z+3, r15	; 0x03
				}
				res = RES_OK;
     a04:	10 e0       	ldi	r17, 0x00	; 0
     a06:	10 c0       	rjmp	.+32     	; 0xa28 <disk_ioctl+0x14c>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
     a08:	80 e8       	ldi	r24, 0x80	; 128
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	fa 01       	movw	r30, r20
     a12:	80 83       	st	Z, r24
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	a2 83       	std	Z+2, r26	; 0x02
     a18:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
     a1a:	10 e0       	ldi	r17, 0x00	; 0
			break;
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <disk_ioctl+0x14c>

		default:
			res = RES_PARERR;
     a1e:	14 e0       	ldi	r17, 0x04	; 4
     a20:	03 c0       	rjmp	.+6      	; 0xa28 <disk_ioctl+0x14c>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
     a22:	11 e0       	ldi	r17, 0x01	; 1
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <disk_ioctl+0x14c>
     a26:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
     a28:	d3 dc       	rcall	.-1626   	; 0x3d0 <deselect>

	return res;
     a2a:	81 2f       	mov	r24, r17
     a2c:	03 c0       	rjmp	.+6      	; 0xa34 <disk_ioctl+0x158>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	01 c0       	rjmp	.+2      	; 0xa34 <disk_ioctl+0x158>
     a32:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
     a34:	60 96       	adiw	r28, 0x10	; 16
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
     a50:	08 95       	ret

00000a52 <mem_cpy>:
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
     a52:	41 15       	cp	r20, r1
     a54:	51 05       	cpc	r21, r1
     a56:	51 f0       	breq	.+20     	; 0xa6c <mem_cpy+0x1a>
     a58:	a6 2f       	mov	r26, r22
     a5a:	b7 2f       	mov	r27, r23
     a5c:	fc 01       	movw	r30, r24
     a5e:	84 0f       	add	r24, r20
     a60:	95 1f       	adc	r25, r21
     a62:	2d 91       	ld	r18, X+
     a64:	21 93       	st	Z+, r18
     a66:	e8 17       	cp	r30, r24
     a68:	f9 07       	cpc	r31, r25
     a6a:	d9 f7       	brne	.-10     	; 0xa62 <mem_cpy+0x10>
     a6c:	08 95       	ret

00000a6e <mem_set>:
     a6e:	41 15       	cp	r20, r1
     a70:	51 05       	cpc	r21, r1
     a72:	39 f0       	breq	.+14     	; 0xa82 <mem_set+0x14>
     a74:	fc 01       	movw	r30, r24
     a76:	84 0f       	add	r24, r20
     a78:	95 1f       	adc	r25, r21
     a7a:	61 93       	st	Z+, r22
     a7c:	e8 17       	cp	r30, r24
     a7e:	f9 07       	cpc	r31, r25
     a80:	e1 f7       	brne	.-8      	; 0xa7a <mem_set+0xc>
     a82:	08 95       	ret

00000a84 <ld_clust>:
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	dc 01       	movw	r26, r24
     a8a:	fb 01       	movw	r30, r22
     a8c:	63 8d       	ldd	r22, Z+27	; 0x1b
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	76 2f       	mov	r23, r22
     a92:	66 27       	eor	r22, r22
     a94:	82 8d       	ldd	r24, Z+26	; 0x1a
     a96:	68 2b       	or	r22, r24
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	2c 91       	ld	r18, X
     a9e:	23 30       	cpi	r18, 0x03	; 3
     aa0:	79 f4       	brne	.+30     	; 0xac0 <ld_clust+0x3c>
     aa2:	05 89       	ldd	r16, Z+21	; 0x15
     aa4:	10 e0       	ldi	r17, 0x00	; 0
     aa6:	10 2f       	mov	r17, r16
     aa8:	00 27       	eor	r16, r16
     aaa:	24 89       	ldd	r18, Z+20	; 0x14
     aac:	02 2b       	or	r16, r18
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	98 01       	movw	r18, r16
     ab4:	11 27       	eor	r17, r17
     ab6:	00 27       	eor	r16, r16
     ab8:	60 2b       	or	r22, r16
     aba:	71 2b       	or	r23, r17
     abc:	82 2b       	or	r24, r18
     abe:	93 2b       	or	r25, r19
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	08 95       	ret

00000ac6 <get_ldnumber>:
     ac6:	fc 01       	movw	r30, r24
     ac8:	a0 81       	ld	r26, Z
     aca:	b1 81       	ldd	r27, Z+1	; 0x01
     acc:	10 97       	sbiw	r26, 0x00	; 0
     ace:	09 f1       	breq	.+66     	; 0xb12 <__stack+0x13>
     ad0:	6c 91       	ld	r22, X
     ad2:	61 32       	cpi	r22, 0x21	; 33
     ad4:	58 f0       	brcs	.+22     	; 0xaec <get_ldnumber+0x26>
     ad6:	6a 33       	cpi	r22, 0x3A	; 58
     ad8:	41 f1       	breq	.+80     	; 0xb2a <__stack+0x2b>
     ada:	fd 01       	movw	r30, r26
     adc:	31 96       	adiw	r30, 0x01	; 1
     ade:	9f 01       	movw	r18, r30
     ae0:	41 91       	ld	r20, Z+
     ae2:	41 32       	cpi	r20, 0x21	; 33
     ae4:	28 f0       	brcs	.+10     	; 0xaf0 <get_ldnumber+0x2a>
     ae6:	4a 33       	cpi	r20, 0x3A	; 58
     ae8:	d1 f7       	brne	.-12     	; 0xade <get_ldnumber+0x18>
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <get_ldnumber+0x2e>
     aec:	46 2f       	mov	r20, r22
     aee:	9d 01       	movw	r18, r26
     af0:	4a 33       	cpi	r20, 0x3A	; 58
     af2:	91 f4       	brne	.+36     	; 0xb18 <__stack+0x19>
     af4:	ad 01       	movw	r20, r26
     af6:	4f 5f       	subi	r20, 0xFF	; 255
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	24 17       	cp	r18, r20
     afc:	35 07       	cpc	r19, r21
     afe:	79 f4       	brne	.+30     	; 0xb1e <__stack+0x1f>
     b00:	60 33       	cpi	r22, 0x30	; 48
     b02:	81 f4       	brne	.+32     	; 0xb24 <__stack+0x25>
     b04:	12 96       	adiw	r26, 0x02	; 2
     b06:	fc 01       	movw	r30, r24
     b08:	b1 83       	std	Z+1, r27	; 0x01
     b0a:	a0 83       	st	Z, r26
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	08 95       	ret
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	9f ef       	ldi	r25, 0xFF	; 255
     b16:	08 95       	ret
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	08 95       	ret
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	9f ef       	ldi	r25, 0xFF	; 255
     b22:	08 95       	ret
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	08 95       	ret
     b2a:	9d 01       	movw	r18, r26
     b2c:	e3 cf       	rjmp	.-58     	; 0xaf4 <get_ldnumber+0x2e>

00000b2e <sync_window>:
     b2e:	8f 92       	push	r8
     b30:	9f 92       	push	r9
     b32:	af 92       	push	r10
     b34:	bf 92       	push	r11
     b36:	cf 92       	push	r12
     b38:	df 92       	push	r13
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	ec 01       	movw	r28, r24
     b48:	8c 81       	ldd	r24, Y+4	; 0x04
     b4a:	88 23       	and	r24, r24
     b4c:	09 f4       	brne	.+2      	; 0xb50 <sync_window+0x22>
     b4e:	42 c0       	rjmp	.+132    	; 0xbd4 <sync_window+0xa6>
     b50:	ca a4       	ldd	r12, Y+42	; 0x2a
     b52:	db a4       	ldd	r13, Y+43	; 0x2b
     b54:	ec a4       	ldd	r14, Y+44	; 0x2c
     b56:	fd a4       	ldd	r15, Y+45	; 0x2d
     b58:	5e 01       	movw	r10, r28
     b5a:	8e e2       	ldi	r24, 0x2E	; 46
     b5c:	a8 0e       	add	r10, r24
     b5e:	b1 1c       	adc	r11, r1
     b60:	01 e0       	ldi	r16, 0x01	; 1
     b62:	10 e0       	ldi	r17, 0x00	; 0
     b64:	a7 01       	movw	r20, r14
     b66:	96 01       	movw	r18, r12
     b68:	b5 01       	movw	r22, r10
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	53 de       	rcall	.-858    	; 0x814 <disk_write>
     b6e:	81 11       	cpse	r24, r1
     b70:	33 c0       	rjmp	.+102    	; 0xbd8 <sync_window+0xaa>
     b72:	1c 82       	std	Y+4, r1	; 0x04
     b74:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b76:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b78:	a8 a1       	ldd	r26, Y+32	; 0x20
     b7a:	b9 a1       	ldd	r27, Y+33	; 0x21
     b7c:	b7 01       	movw	r22, r14
     b7e:	a6 01       	movw	r20, r12
     b80:	48 1b       	sub	r20, r24
     b82:	59 0b       	sbc	r21, r25
     b84:	6a 0b       	sbc	r22, r26
     b86:	7b 0b       	sbc	r23, r27
     b88:	8e 89       	ldd	r24, Y+22	; 0x16
     b8a:	9f 89       	ldd	r25, Y+23	; 0x17
     b8c:	a8 8d       	ldd	r26, Y+24	; 0x18
     b8e:	b9 8d       	ldd	r27, Y+25	; 0x19
     b90:	48 17       	cp	r20, r24
     b92:	59 07       	cpc	r21, r25
     b94:	6a 07       	cpc	r22, r26
     b96:	7b 07       	cpc	r23, r27
     b98:	08 f5       	brcc	.+66     	; 0xbdc <sync_window+0xae>
     b9a:	8b 80       	ldd	r8, Y+3	; 0x03
     b9c:	91 2c       	mov	r9, r1
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	88 16       	cp	r8, r24
     ba2:	91 04       	cpc	r9, r1
     ba4:	e8 f0       	brcs	.+58     	; 0xbe0 <sync_window+0xb2>
     ba6:	8e 89       	ldd	r24, Y+22	; 0x16
     ba8:	9f 89       	ldd	r25, Y+23	; 0x17
     baa:	a8 8d       	ldd	r26, Y+24	; 0x18
     bac:	b9 8d       	ldd	r27, Y+25	; 0x19
     bae:	c8 0e       	add	r12, r24
     bb0:	d9 1e       	adc	r13, r25
     bb2:	ea 1e       	adc	r14, r26
     bb4:	fb 1e       	adc	r15, r27
     bb6:	01 e0       	ldi	r16, 0x01	; 1
     bb8:	10 e0       	ldi	r17, 0x00	; 0
     bba:	a7 01       	movw	r20, r14
     bbc:	96 01       	movw	r18, r12
     bbe:	b5 01       	movw	r22, r10
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	28 de       	rcall	.-944    	; 0x814 <disk_write>
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	88 1a       	sub	r8, r24
     bc8:	91 08       	sbc	r9, r1
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	88 16       	cp	r8, r24
     bce:	91 04       	cpc	r9, r1
     bd0:	51 f7       	brne	.-44     	; 0xba6 <sync_window+0x78>
     bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <sync_window+0xb6>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	07 c0       	rjmp	.+14     	; 0xbe6 <sync_window+0xb8>
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <sync_window+0xb8>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <sync_window+0xb8>
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <sync_window+0xb8>
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	cf 90       	pop	r12
     bf6:	bf 90       	pop	r11
     bf8:	af 90       	pop	r10
     bfa:	9f 90       	pop	r9
     bfc:	8f 90       	pop	r8
     bfe:	08 95       	ret

00000c00 <move_window>:
     c00:	bf 92       	push	r11
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	ec 01       	movw	r28, r24
     c14:	6a 01       	movw	r12, r20
     c16:	7b 01       	movw	r14, r22
     c18:	8a a5       	ldd	r24, Y+42	; 0x2a
     c1a:	9b a5       	ldd	r25, Y+43	; 0x2b
     c1c:	ac a5       	ldd	r26, Y+44	; 0x2c
     c1e:	bd a5       	ldd	r27, Y+45	; 0x2d
     c20:	84 17       	cp	r24, r20
     c22:	95 07       	cpc	r25, r21
     c24:	a6 07       	cpc	r26, r22
     c26:	b7 07       	cpc	r27, r23
     c28:	d9 f0       	breq	.+54     	; 0xc60 <move_window+0x60>
     c2a:	ce 01       	movw	r24, r28
     c2c:	80 df       	rcall	.-256    	; 0xb2e <sync_window>
     c2e:	b8 2e       	mov	r11, r24
     c30:	81 11       	cpse	r24, r1
     c32:	17 c0       	rjmp	.+46     	; 0xc62 <move_window+0x62>
     c34:	01 e0       	ldi	r16, 0x01	; 1
     c36:	10 e0       	ldi	r17, 0x00	; 0
     c38:	a7 01       	movw	r20, r14
     c3a:	96 01       	movw	r18, r12
     c3c:	be 01       	movw	r22, r28
     c3e:	62 5d       	subi	r22, 0xD2	; 210
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	99 dd       	rcall	.-1230   	; 0x778 <disk_read>
     c46:	88 23       	and	r24, r24
     c48:	31 f0       	breq	.+12     	; 0xc56 <move_window+0x56>
     c4a:	bb 24       	eor	r11, r11
     c4c:	b3 94       	inc	r11
     c4e:	cc 24       	eor	r12, r12
     c50:	ca 94       	dec	r12
     c52:	dc 2c       	mov	r13, r12
     c54:	76 01       	movw	r14, r12
     c56:	ca a6       	std	Y+42, r12	; 0x2a
     c58:	db a6       	std	Y+43, r13	; 0x2b
     c5a:	ec a6       	std	Y+44, r14	; 0x2c
     c5c:	fd a6       	std	Y+45, r15	; 0x2d
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <move_window+0x62>
     c60:	b1 2c       	mov	r11, r1
     c62:	8b 2d       	mov	r24, r11
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	bf 90       	pop	r11
     c76:	08 95       	ret

00000c78 <check_fs>:
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
     c82:	1c 82       	std	Y+4, r1	; 0x04
     c84:	0f ef       	ldi	r16, 0xFF	; 255
     c86:	1f ef       	ldi	r17, 0xFF	; 255
     c88:	98 01       	movw	r18, r16
     c8a:	0a a7       	std	Y+42, r16	; 0x2a
     c8c:	1b a7       	std	Y+43, r17	; 0x2b
     c8e:	2c a7       	std	Y+44, r18	; 0x2c
     c90:	3d a7       	std	Y+45, r19	; 0x2d
     c92:	b6 df       	rcall	.-148    	; 0xc00 <move_window>
     c94:	81 11       	cpse	r24, r1
     c96:	51 c0       	rjmp	.+162    	; 0xd3a <check_fs+0xc2>
     c98:	fe 01       	movw	r30, r28
     c9a:	e3 5d       	subi	r30, 0xD3	; 211
     c9c:	fd 4f       	sbci	r31, 0xFD	; 253
     c9e:	80 81       	ld	r24, Z
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	98 2f       	mov	r25, r24
     ca4:	88 27       	eor	r24, r24
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	20 81       	ld	r18, Z
     caa:	82 2b       	or	r24, r18
     cac:	85 35       	cpi	r24, 0x55	; 85
     cae:	9a 4a       	sbci	r25, 0xAA	; 170
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <check_fs+0x3c>
     cb2:	45 c0       	rjmp	.+138    	; 0xd3e <check_fs+0xc6>
     cb4:	e5 5c       	subi	r30, 0xC5	; 197
     cb6:	f1 40       	sbci	r31, 0x01	; 1
     cb8:	80 81       	ld	r24, Z
     cba:	31 97       	sbiw	r30, 0x01	; 1
     cbc:	40 81       	ld	r20, Z
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	ba 01       	movw	r22, r20
     cc6:	55 27       	eor	r21, r21
     cc8:	44 27       	eor	r20, r20
     cca:	78 2b       	or	r23, r24
     ccc:	32 97       	sbiw	r30, 0x02	; 2
     cce:	80 81       	ld	r24, Z
     cd0:	48 2b       	or	r20, r24
     cd2:	31 96       	adiw	r30, 0x01	; 1
     cd4:	00 81       	ld	r16, Z
     cd6:	10 e0       	ldi	r17, 0x00	; 0
     cd8:	10 2f       	mov	r17, r16
     cda:	00 27       	eor	r16, r16
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 2b       	or	r20, r16
     ce2:	51 2b       	or	r21, r17
     ce4:	62 2b       	or	r22, r18
     ce6:	73 2b       	or	r23, r19
     ce8:	77 27       	eor	r23, r23
     cea:	46 34       	cpi	r20, 0x46	; 70
     cec:	51 44       	sbci	r21, 0x41	; 65
     cee:	64 45       	sbci	r22, 0x54	; 84
     cf0:	71 05       	cpc	r23, r1
     cf2:	39 f1       	breq	.+78     	; 0xd42 <check_fs+0xca>
     cf4:	7e 96       	adiw	r30, 0x1e	; 30
     cf6:	80 81       	ld	r24, Z
     cf8:	31 97       	sbiw	r30, 0x01	; 1
     cfa:	40 81       	ld	r20, Z
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	ba 01       	movw	r22, r20
     d04:	55 27       	eor	r21, r21
     d06:	44 27       	eor	r20, r20
     d08:	78 2b       	or	r23, r24
     d0a:	32 97       	sbiw	r30, 0x02	; 2
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2b       	or	r20, r24
     d10:	cf 57       	subi	r28, 0x7F	; 127
     d12:	df 4f       	sbci	r29, 0xFF	; 255
     d14:	88 81       	ld	r24, Y
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	98 2f       	mov	r25, r24
     d1a:	88 27       	eor	r24, r24
     d1c:	a0 e0       	ldi	r26, 0x00	; 0
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	48 2b       	or	r20, r24
     d22:	59 2b       	or	r21, r25
     d24:	6a 2b       	or	r22, r26
     d26:	7b 2b       	or	r23, r27
     d28:	77 27       	eor	r23, r23
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	46 34       	cpi	r20, 0x46	; 70
     d2e:	51 44       	sbci	r21, 0x41	; 65
     d30:	64 45       	sbci	r22, 0x54	; 84
     d32:	71 05       	cpc	r23, r1
     d34:	39 f4       	brne	.+14     	; 0xd44 <check_fs+0xcc>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <check_fs+0xcc>
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <check_fs+0xcc>
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <check_fs+0xcc>
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	08 95       	ret

00000d4e <validate>:
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	c1 f0       	breq	.+48     	; 0xd82 <validate+0x34>
     d52:	dc 01       	movw	r26, r24
     d54:	ed 91       	ld	r30, X+
     d56:	fc 91       	ld	r31, X
     d58:	11 97       	sbiw	r26, 0x01	; 1
     d5a:	30 97       	sbiw	r30, 0x00	; 0
     d5c:	a1 f0       	breq	.+40     	; 0xd86 <validate+0x38>
     d5e:	20 81       	ld	r18, Z
     d60:	22 23       	and	r18, r18
     d62:	99 f0       	breq	.+38     	; 0xd8a <validate+0x3c>
     d64:	26 81       	ldd	r18, Z+6	; 0x06
     d66:	37 81       	ldd	r19, Z+7	; 0x07
     d68:	12 96       	adiw	r26, 0x02	; 2
     d6a:	8d 91       	ld	r24, X+
     d6c:	9c 91       	ld	r25, X
     d6e:	13 97       	sbiw	r26, 0x03	; 3
     d70:	28 17       	cp	r18, r24
     d72:	39 07       	cpc	r19, r25
     d74:	61 f4       	brne	.+24     	; 0xd8e <validate+0x40>
     d76:	81 81       	ldd	r24, Z+1	; 0x01
     d78:	39 dc       	rcall	.-1934   	; 0x5ec <disk_status>
     d7a:	80 ff       	sbrs	r24, 0
     d7c:	0a c0       	rjmp	.+20     	; 0xd92 <validate+0x44>
     d7e:	83 e0       	ldi	r24, 0x03	; 3
     d80:	08 95       	ret
     d82:	89 e0       	ldi	r24, 0x09	; 9
     d84:	08 95       	ret
     d86:	89 e0       	ldi	r24, 0x09	; 9
     d88:	08 95       	ret
     d8a:	89 e0       	ldi	r24, 0x09	; 9
     d8c:	08 95       	ret
     d8e:	89 e0       	ldi	r24, 0x09	; 9
     d90:	08 95       	ret
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	08 95       	ret

00000d96 <find_volume>:
     d96:	2f 92       	push	r2
     d98:	3f 92       	push	r3
     d9a:	4f 92       	push	r4
     d9c:	5f 92       	push	r5
     d9e:	6f 92       	push	r6
     da0:	7f 92       	push	r7
     da2:	8f 92       	push	r8
     da4:	9f 92       	push	r9
     da6:	af 92       	push	r10
     da8:	bf 92       	push	r11
     daa:	cf 92       	push	r12
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	6d 97       	sbiw	r28, 0x1d	; 29
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	6c 01       	movw	r12, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	b4 2e       	mov	r11, r20
     dd0:	d6 01       	movw	r26, r12
     dd2:	1d 92       	st	X+, r1
     dd4:	1c 92       	st	X, r1
     dd6:	77 de       	rcall	.-786    	; 0xac6 <get_ldnumber>
     dd8:	7c 01       	movw	r14, r24
     dda:	99 23       	and	r25, r25
     ddc:	0c f4       	brge	.+2      	; 0xde0 <find_volume+0x4a>
     dde:	e1 c2       	rjmp	.+1474   	; 0x13a2 <find_volume+0x60c>
     de0:	fc 01       	movw	r30, r24
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	ed 5e       	subi	r30, 0xED	; 237
     de8:	fd 4f       	sbci	r31, 0xFD	; 253
     dea:	00 81       	ld	r16, Z
     dec:	11 81       	ldd	r17, Z+1	; 0x01
     dee:	01 15       	cp	r16, r1
     df0:	11 05       	cpc	r17, r1
     df2:	09 f4       	brne	.+2      	; 0xdf6 <find_volume+0x60>
     df4:	d8 c2       	rjmp	.+1456   	; 0x13a6 <find_volume+0x610>
     df6:	f6 01       	movw	r30, r12
     df8:	11 83       	std	Z+1, r17	; 0x01
     dfa:	00 83       	st	Z, r16
     dfc:	d8 01       	movw	r26, r16
     dfe:	8c 91       	ld	r24, X
     e00:	88 23       	and	r24, r24
     e02:	61 f0       	breq	.+24     	; 0xe1c <find_volume+0x86>
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	8c 91       	ld	r24, X
     e08:	f1 db       	rcall	.-2078   	; 0x5ec <disk_status>
     e0a:	80 fd       	sbrc	r24, 0
     e0c:	07 c0       	rjmp	.+14     	; 0xe1c <find_volume+0x86>
     e0e:	bb 20       	and	r11, r11
     e10:	09 f4       	brne	.+2      	; 0xe14 <find_volume+0x7e>
     e12:	cb c2       	rjmp	.+1430   	; 0x13aa <find_volume+0x614>
     e14:	82 fd       	sbrc	r24, 2
     e16:	cb c2       	rjmp	.+1430   	; 0x13ae <find_volume+0x618>
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	17 c3       	rjmp	.+1582   	; 0x144a <find_volume+0x6b4>
     e1c:	f8 01       	movw	r30, r16
     e1e:	10 82       	st	Z, r1
     e20:	e1 82       	std	Z+1, r14	; 0x01
     e22:	8e 2d       	mov	r24, r14
     e24:	ea db       	rcall	.-2092   	; 0x5fa <disk_initialize>
     e26:	80 fd       	sbrc	r24, 0
     e28:	c4 c2       	rjmp	.+1416   	; 0x13b2 <find_volume+0x61c>
     e2a:	bb 20       	and	r11, r11
     e2c:	11 f0       	breq	.+4      	; 0xe32 <find_volume+0x9c>
     e2e:	82 fd       	sbrc	r24, 2
     e30:	c2 c2       	rjmp	.+1412   	; 0x13b6 <find_volume+0x620>
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	ba 01       	movw	r22, r20
     e38:	c8 01       	movw	r24, r16
     e3a:	1e df       	rcall	.-452    	; 0xc78 <check_fs>
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	09 f0       	breq	.+2      	; 0xe42 <find_volume+0xac>
     e40:	52 c0       	rjmp	.+164    	; 0xee6 <find_volume+0x150>
     e42:	f8 01       	movw	r30, r16
     e44:	e0 51       	subi	r30, 0x10	; 16
     e46:	fe 4f       	sbci	r31, 0xFE	; 254
     e48:	7e 01       	movw	r14, r28
     e4a:	21 e1       	ldi	r18, 0x11	; 17
     e4c:	e2 0e       	add	r14, r18
     e4e:	f1 1c       	adc	r15, r1
     e50:	9e 01       	movw	r18, r28
     e52:	2f 5f       	subi	r18, 0xFF	; 255
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	a1 2c       	mov	r10, r1
     e58:	b1 2c       	mov	r11, r1
     e5a:	c1 2c       	mov	r12, r1
     e5c:	d1 2c       	mov	r13, r1
     e5e:	80 81       	ld	r24, Z
     e60:	88 23       	and	r24, r24
     e62:	b1 f0       	breq	.+44     	; 0xe90 <find_volume+0xfa>
     e64:	47 81       	ldd	r20, Z+7	; 0x07
     e66:	86 81       	ldd	r24, Z+6	; 0x06
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a0 e0       	ldi	r26, 0x00	; 0
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	dc 01       	movw	r26, r24
     e70:	99 27       	eor	r25, r25
     e72:	88 27       	eor	r24, r24
     e74:	b4 2b       	or	r27, r20
     e76:	44 81       	ldd	r20, Z+4	; 0x04
     e78:	84 2b       	or	r24, r20
     e7a:	45 81       	ldd	r20, Z+5	; 0x05
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	54 2f       	mov	r21, r20
     e80:	44 27       	eor	r20, r20
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	48 2b       	or	r20, r24
     e88:	59 2b       	or	r21, r25
     e8a:	6a 2b       	or	r22, r26
     e8c:	7b 2b       	or	r23, r27
     e8e:	04 c0       	rjmp	.+8      	; 0xe98 <find_volume+0x102>
     e90:	4a 2d       	mov	r20, r10
     e92:	5b 2d       	mov	r21, r11
     e94:	6c 2d       	mov	r22, r12
     e96:	7d 2d       	mov	r23, r13
     e98:	d9 01       	movw	r26, r18
     e9a:	4d 93       	st	X+, r20
     e9c:	5d 93       	st	X+, r21
     e9e:	6d 93       	st	X+, r22
     ea0:	7d 93       	st	X+, r23
     ea2:	9d 01       	movw	r18, r26
     ea4:	70 96       	adiw	r30, 0x10	; 16
     ea6:	ae 15       	cp	r26, r14
     ea8:	bf 05       	cpc	r27, r15
     eaa:	c9 f6       	brne	.-78     	; 0xe5e <find_volume+0xc8>
     eac:	fe 01       	movw	r30, r28
     eae:	31 96       	adiw	r30, 0x01	; 1
     eb0:	6f 01       	movw	r12, r30
     eb2:	68 94       	set
     eb4:	bb 24       	eor	r11, r11
     eb6:	b1 f8       	bld	r11, 1
     eb8:	d6 01       	movw	r26, r12
     eba:	4d 90       	ld	r4, X+
     ebc:	5d 90       	ld	r5, X+
     ebe:	6d 90       	ld	r6, X+
     ec0:	7d 90       	ld	r7, X+
     ec2:	6d 01       	movw	r12, r26
     ec4:	41 14       	cp	r4, r1
     ec6:	51 04       	cpc	r5, r1
     ec8:	61 04       	cpc	r6, r1
     eca:	71 04       	cpc	r7, r1
     ecc:	39 f0       	breq	.+14     	; 0xedc <find_volume+0x146>
     ece:	b3 01       	movw	r22, r6
     ed0:	a2 01       	movw	r20, r4
     ed2:	c8 01       	movw	r24, r16
     ed4:	d1 de       	rcall	.-606    	; 0xc78 <check_fs>
     ed6:	81 11       	cpse	r24, r1
     ed8:	02 c0       	rjmp	.+4      	; 0xede <find_volume+0x148>
     eda:	08 c0       	rjmp	.+16     	; 0xeec <find_volume+0x156>
     edc:	8b 2d       	mov	r24, r11
     ede:	ce 14       	cp	r12, r14
     ee0:	df 04       	cpc	r13, r15
     ee2:	51 f7       	brne	.-44     	; 0xeb8 <find_volume+0x122>
     ee4:	03 c0       	rjmp	.+6      	; 0xeec <find_volume+0x156>
     ee6:	41 2c       	mov	r4, r1
     ee8:	51 2c       	mov	r5, r1
     eea:	32 01       	movw	r6, r4
     eec:	83 30       	cpi	r24, 0x03	; 3
     eee:	09 f4       	brne	.+2      	; 0xef2 <find_volume+0x15c>
     ef0:	64 c2       	rjmp	.+1224   	; 0x13ba <find_volume+0x624>
     ef2:	81 11       	cpse	r24, r1
     ef4:	64 c2       	rjmp	.+1224   	; 0x13be <find_volume+0x628>
     ef6:	f8 01       	movw	r30, r16
     ef8:	82 ad       	ldd	r24, Z+58	; 0x3a
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	98 2f       	mov	r25, r24
     efe:	88 27       	eor	r24, r24
     f00:	21 ad       	ldd	r18, Z+57	; 0x39
     f02:	82 2b       	or	r24, r18
     f04:	81 15       	cp	r24, r1
     f06:	92 40       	sbci	r25, 0x02	; 2
     f08:	09 f0       	breq	.+2      	; 0xf0c <find_volume+0x176>
     f0a:	5b c2       	rjmp	.+1206   	; 0x13c2 <find_volume+0x62c>
     f0c:	f8 01       	movw	r30, r16
     f0e:	eb 5b       	subi	r30, 0xBB	; 187
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	c0 80       	ld	r12, Z
     f14:	d1 2c       	mov	r13, r1
     f16:	dc 2c       	mov	r13, r12
     f18:	cc 24       	eor	r12, r12
     f1a:	31 97       	sbiw	r30, 0x01	; 1
     f1c:	80 81       	ld	r24, Z
     f1e:	c8 2a       	or	r12, r24
     f20:	e1 2c       	mov	r14, r1
     f22:	f1 2c       	mov	r15, r1
     f24:	c1 14       	cp	r12, r1
     f26:	d1 04       	cpc	r13, r1
     f28:	e1 04       	cpc	r14, r1
     f2a:	f1 04       	cpc	r15, r1
     f2c:	c9 f4       	brne	.+50     	; 0xf60 <find_volume+0x1ca>
     f2e:	71 96       	adiw	r30, 0x11	; 17
     f30:	80 81       	ld	r24, Z
     f32:	31 97       	sbiw	r30, 0x01	; 1
     f34:	c0 80       	ld	r12, Z
     f36:	d1 2c       	mov	r13, r1
     f38:	e1 2c       	mov	r14, r1
     f3a:	f1 2c       	mov	r15, r1
     f3c:	76 01       	movw	r14, r12
     f3e:	dd 24       	eor	r13, r13
     f40:	cc 24       	eor	r12, r12
     f42:	f8 2a       	or	r15, r24
     f44:	32 97       	sbiw	r30, 0x02	; 2
     f46:	80 81       	ld	r24, Z
     f48:	c8 2a       	or	r12, r24
     f4a:	31 96       	adiw	r30, 0x01	; 1
     f4c:	80 81       	ld	r24, Z
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	98 2f       	mov	r25, r24
     f52:	88 27       	eor	r24, r24
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	c8 2a       	or	r12, r24
     f5a:	d9 2a       	or	r13, r25
     f5c:	ea 2a       	or	r14, r26
     f5e:	fb 2a       	or	r15, r27
     f60:	d8 01       	movw	r26, r16
     f62:	56 96       	adiw	r26, 0x16	; 22
     f64:	cd 92       	st	X+, r12
     f66:	dd 92       	st	X+, r13
     f68:	ed 92       	st	X+, r14
     f6a:	fc 92       	st	X, r15
     f6c:	59 97       	sbiw	r26, 0x19	; 25
     f6e:	de 96       	adiw	r26, 0x3e	; 62
     f70:	ac 91       	ld	r26, X
     f72:	f8 01       	movw	r30, r16
     f74:	a3 83       	std	Z+3, r26	; 0x03
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	8a 0f       	add	r24, r26
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <find_volume+0x1ea>
     f7e:	23 c2       	rjmp	.+1094   	; 0x13c6 <find_volume+0x630>
     f80:	f3 ad       	ldd	r31, Z+59	; 0x3b
     f82:	f9 8b       	std	Y+17, r31	; 0x11
     f84:	2f 2f       	mov	r18, r31
     f86:	f8 01       	movw	r30, r16
     f88:	22 83       	std	Z+2, r18	; 0x02
     f8a:	22 23       	and	r18, r18
     f8c:	09 f4       	brne	.+2      	; 0xf90 <find_volume+0x1fa>
     f8e:	1d c2       	rjmp	.+1082   	; 0x13ca <find_volume+0x634>
     f90:	82 2f       	mov	r24, r18
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9c 01       	movw	r18, r24
     f96:	21 50       	subi	r18, 0x01	; 1
     f98:	31 09       	sbc	r19, r1
     f9a:	82 23       	and	r24, r18
     f9c:	93 23       	and	r25, r19
     f9e:	89 2b       	or	r24, r25
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <find_volume+0x20e>
     fa2:	15 c2       	rjmp	.+1066   	; 0x13ce <find_volume+0x638>
     fa4:	e0 5c       	subi	r30, 0xC0	; 192
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	80 81       	ld	r24, Z
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	98 2f       	mov	r25, r24
     fae:	88 27       	eor	r24, r24
     fb0:	f8 01       	movw	r30, r16
     fb2:	27 ad       	ldd	r18, Z+63	; 0x3f
     fb4:	1c 01       	movw	r2, r24
     fb6:	22 2a       	or	r2, r18
     fb8:	31 86       	std	Z+9, r3	; 0x09
     fba:	20 86       	std	Z+8, r2	; 0x08
     fbc:	c1 01       	movw	r24, r2
     fbe:	8f 70       	andi	r24, 0x0F	; 15
     fc0:	99 27       	eor	r25, r25
     fc2:	89 2b       	or	r24, r25
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <find_volume+0x232>
     fc6:	05 c2       	rjmp	.+1034   	; 0x13d2 <find_volume+0x63c>
     fc8:	ee 5b       	subi	r30, 0xBE	; 190
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	80 80       	ld	r8, Z
     fce:	91 2c       	mov	r9, r1
     fd0:	98 2c       	mov	r9, r8
     fd2:	88 24       	eor	r8, r8
     fd4:	31 97       	sbiw	r30, 0x01	; 1
     fd6:	80 81       	ld	r24, Z
     fd8:	88 2a       	or	r8, r24
     fda:	a1 2c       	mov	r10, r1
     fdc:	b1 2c       	mov	r11, r1
     fde:	81 14       	cp	r8, r1
     fe0:	91 04       	cpc	r9, r1
     fe2:	a1 04       	cpc	r10, r1
     fe4:	b1 04       	cpc	r11, r1
     fe6:	d1 f4       	brne	.+52     	; 0x101c <find_volume+0x286>
     fe8:	70 96       	adiw	r30, 0x10	; 16
     fea:	80 81       	ld	r24, Z
     fec:	31 97       	sbiw	r30, 0x01	; 1
     fee:	80 80       	ld	r8, Z
     ff0:	91 2c       	mov	r9, r1
     ff2:	a1 2c       	mov	r10, r1
     ff4:	b1 2c       	mov	r11, r1
     ff6:	54 01       	movw	r10, r8
     ff8:	99 24       	eor	r9, r9
     ffa:	88 24       	eor	r8, r8
     ffc:	b8 2a       	or	r11, r24
     ffe:	32 97       	sbiw	r30, 0x02	; 2
    1000:	80 81       	ld	r24, Z
    1002:	88 2a       	or	r8, r24
    1004:	31 96       	adiw	r30, 0x01	; 1
    1006:	80 81       	ld	r24, Z
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	98 2f       	mov	r25, r24
    100c:	88 27       	eor	r24, r24
    100e:	ac 01       	movw	r20, r24
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	84 2a       	or	r8, r20
    1016:	95 2a       	or	r9, r21
    1018:	a6 2a       	or	r10, r22
    101a:	b7 2a       	or	r11, r23
    101c:	f8 01       	movw	r30, r16
    101e:	85 ad       	ldd	r24, Z+61	; 0x3d
    1020:	e8 2f       	mov	r30, r24
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	3e 2f       	mov	r19, r30
    1026:	22 27       	eor	r18, r18
    1028:	f8 01       	movw	r30, r16
    102a:	84 ad       	ldd	r24, Z+60	; 0x3c
    102c:	f9 01       	movw	r30, r18
    102e:	e8 2b       	or	r30, r24
    1030:	30 97       	sbiw	r30, 0x00	; 0
    1032:	09 f4       	brne	.+2      	; 0x1036 <find_volume+0x2a0>
    1034:	d0 c1       	rjmp	.+928    	; 0x13d6 <find_volume+0x640>
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	a7 01       	movw	r20, r14
    103a:	96 01       	movw	r18, r12
    103c:	0e 94 bc 2b 	call	0x5778	; 0x5778 <__muluhisi3>
    1040:	6a 8f       	std	Y+26, r22	; 0x1a
    1042:	7b 8f       	std	Y+27, r23	; 0x1b
    1044:	8c 8f       	std	Y+28, r24	; 0x1c
    1046:	9d 8f       	std	Y+29, r25	; 0x1d
    1048:	9f 01       	movw	r18, r30
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	2e 8b       	std	Y+22, r18	; 0x16
    1050:	3f 8b       	std	Y+23, r19	; 0x17
    1052:	48 8f       	std	Y+24, r20	; 0x18
    1054:	59 8f       	std	Y+25, r21	; 0x19
    1056:	c1 01       	movw	r24, r2
    1058:	92 95       	swap	r25
    105a:	82 95       	swap	r24
    105c:	8f 70       	andi	r24, 0x0F	; 15
    105e:	89 27       	eor	r24, r25
    1060:	9f 70       	andi	r25, 0x0F	; 15
    1062:	89 27       	eor	r24, r25
    1064:	28 0f       	add	r18, r24
    1066:	39 1f       	adc	r19, r25
    1068:	41 1d       	adc	r20, r1
    106a:	51 1d       	adc	r21, r1
    106c:	da 01       	movw	r26, r20
    106e:	c9 01       	movw	r24, r18
    1070:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1072:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1074:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1076:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1078:	28 0f       	add	r18, r24
    107a:	39 1f       	adc	r19, r25
    107c:	4a 1f       	adc	r20, r26
    107e:	5b 1f       	adc	r21, r27
    1080:	2a 8b       	std	Y+18, r18	; 0x12
    1082:	3b 8b       	std	Y+19, r19	; 0x13
    1084:	4c 8b       	std	Y+20, r20	; 0x14
    1086:	5d 8b       	std	Y+21, r21	; 0x15
    1088:	82 16       	cp	r8, r18
    108a:	93 06       	cpc	r9, r19
    108c:	a4 06       	cpc	r10, r20
    108e:	b5 06       	cpc	r11, r21
    1090:	08 f4       	brcc	.+2      	; 0x1094 <find_volume+0x2fe>
    1092:	a3 c1       	rjmp	.+838    	; 0x13da <find_volume+0x644>
    1094:	c5 01       	movw	r24, r10
    1096:	b4 01       	movw	r22, r8
    1098:	62 1b       	sub	r22, r18
    109a:	73 0b       	sbc	r23, r19
    109c:	84 0b       	sbc	r24, r20
    109e:	95 0b       	sbc	r25, r21
    10a0:	e9 89       	ldd	r30, Y+17	; 0x11
    10a2:	2e 2f       	mov	r18, r30
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__udivmodsi4>
    10ae:	da 01       	movw	r26, r20
    10b0:	c9 01       	movw	r24, r18
    10b2:	21 15       	cp	r18, r1
    10b4:	31 05       	cpc	r19, r1
    10b6:	41 05       	cpc	r20, r1
    10b8:	51 05       	cpc	r21, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <find_volume+0x328>
    10bc:	90 c1       	rjmp	.+800    	; 0x13de <find_volume+0x648>
    10be:	26 3f       	cpi	r18, 0xF6	; 246
    10c0:	ff e0       	ldi	r31, 0x0F	; 15
    10c2:	3f 07       	cpc	r19, r31
    10c4:	41 05       	cpc	r20, r1
    10c6:	51 05       	cpc	r21, r1
    10c8:	18 f4       	brcc	.+6      	; 0x10d0 <find_volume+0x33a>
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	69 8b       	std	Y+17, r22	; 0x11
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <find_volume+0x33e>
    10d0:	e2 e0       	ldi	r30, 0x02	; 2
    10d2:	e9 8b       	std	Y+17, r30	; 0x11
    10d4:	86 3f       	cpi	r24, 0xF6	; 246
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	a1 05       	cpc	r26, r1
    10da:	b1 05       	cpc	r27, r1
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <find_volume+0x34a>
    10de:	87 c1       	rjmp	.+782    	; 0x13ee <find_volume+0x658>
    10e0:	49 01       	movw	r8, r18
    10e2:	5a 01       	movw	r10, r20
    10e4:	62 e0       	ldi	r22, 0x02	; 2
    10e6:	86 0e       	add	r8, r22
    10e8:	91 1c       	adc	r9, r1
    10ea:	a1 1c       	adc	r10, r1
    10ec:	b1 1c       	adc	r11, r1
    10ee:	d8 01       	movw	r26, r16
    10f0:	52 96       	adiw	r26, 0x12	; 18
    10f2:	8d 92       	st	X+, r8
    10f4:	9d 92       	st	X+, r9
    10f6:	ad 92       	st	X+, r10
    10f8:	bc 92       	st	X, r11
    10fa:	55 97       	sbiw	r26, 0x15	; 21
    10fc:	f8 01       	movw	r30, r16
    10fe:	42 8e       	std	Z+26, r4	; 0x1a
    1100:	53 8e       	std	Z+27, r5	; 0x1b
    1102:	64 8e       	std	Z+28, r6	; 0x1c
    1104:	75 8e       	std	Z+29, r7	; 0x1d
    1106:	8e 89       	ldd	r24, Y+22	; 0x16
    1108:	9f 89       	ldd	r25, Y+23	; 0x17
    110a:	a8 8d       	ldd	r26, Y+24	; 0x18
    110c:	b9 8d       	ldd	r27, Y+25	; 0x19
    110e:	84 0d       	add	r24, r4
    1110:	95 1d       	adc	r25, r5
    1112:	a6 1d       	adc	r26, r6
    1114:	b7 1d       	adc	r27, r7
    1116:	86 8f       	std	Z+30, r24	; 0x1e
    1118:	97 8f       	std	Z+31, r25	; 0x1f
    111a:	a0 a3       	std	Z+32, r26	; 0x20
    111c:	b1 a3       	std	Z+33, r27	; 0x21
    111e:	4a 89       	ldd	r20, Y+18	; 0x12
    1120:	5b 89       	ldd	r21, Y+19	; 0x13
    1122:	6c 89       	ldd	r22, Y+20	; 0x14
    1124:	7d 89       	ldd	r23, Y+21	; 0x15
    1126:	44 0d       	add	r20, r4
    1128:	55 1d       	adc	r21, r5
    112a:	66 1d       	adc	r22, r6
    112c:	77 1d       	adc	r23, r7
    112e:	46 a3       	std	Z+38, r20	; 0x26
    1130:	57 a3       	std	Z+39, r21	; 0x27
    1132:	60 a7       	std	Z+40, r22	; 0x28
    1134:	71 a7       	std	Z+41, r23	; 0x29
    1136:	f9 89       	ldd	r31, Y+17	; 0x11
    1138:	f3 30       	cpi	r31, 0x03	; 3
    113a:	61 f5       	brne	.+88     	; 0x1194 <find_volume+0x3fe>
    113c:	23 28       	or	r2, r3
    113e:	09 f0       	breq	.+2      	; 0x1142 <find_volume+0x3ac>
    1140:	50 c1       	rjmp	.+672    	; 0x13e2 <find_volume+0x64c>
    1142:	f8 01       	movw	r30, r16
    1144:	e3 5a       	subi	r30, 0xA3	; 163
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	20 81       	ld	r18, Z
    114a:	31 97       	sbiw	r30, 0x01	; 1
    114c:	80 81       	ld	r24, Z
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a0 e0       	ldi	r26, 0x00	; 0
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	dc 01       	movw	r26, r24
    1156:	99 27       	eor	r25, r25
    1158:	88 27       	eor	r24, r24
    115a:	b2 2b       	or	r27, r18
    115c:	32 97       	sbiw	r30, 0x02	; 2
    115e:	20 81       	ld	r18, Z
    1160:	82 2b       	or	r24, r18
    1162:	31 96       	adiw	r30, 0x01	; 1
    1164:	40 81       	ld	r20, Z
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	54 2f       	mov	r21, r20
    116a:	44 27       	eor	r20, r20
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	84 2b       	or	r24, r20
    1172:	95 2b       	or	r25, r21
    1174:	a6 2b       	or	r26, r22
    1176:	b7 2b       	or	r27, r23
    1178:	f8 01       	movw	r30, r16
    117a:	82 a3       	std	Z+34, r24	; 0x22
    117c:	93 a3       	std	Z+35, r25	; 0x23
    117e:	a4 a3       	std	Z+36, r26	; 0x24
    1180:	b5 a3       	std	Z+37, r27	; 0x25
    1182:	88 0c       	add	r8, r8
    1184:	99 1c       	adc	r9, r9
    1186:	aa 1c       	adc	r10, r10
    1188:	bb 1c       	adc	r11, r11
    118a:	88 0c       	add	r8, r8
    118c:	99 1c       	adc	r9, r9
    118e:	aa 1c       	adc	r10, r10
    1190:	bb 1c       	adc	r11, r11
    1192:	2d c0       	rjmp	.+90     	; 0x11ee <find_volume+0x458>
    1194:	23 28       	or	r2, r3
    1196:	09 f4       	brne	.+2      	; 0x119a <find_volume+0x404>
    1198:	26 c1       	rjmp	.+588    	; 0x13e6 <find_volume+0x650>
    119a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    119c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    119e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    11a0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    11a2:	82 0f       	add	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	a4 1f       	adc	r26, r20
    11a8:	b5 1f       	adc	r27, r21
    11aa:	f8 01       	movw	r30, r16
    11ac:	82 a3       	std	Z+34, r24	; 0x22
    11ae:	93 a3       	std	Z+35, r25	; 0x23
    11b0:	a4 a3       	std	Z+36, r26	; 0x24
    11b2:	b5 a3       	std	Z+37, r27	; 0x25
    11b4:	f9 89       	ldd	r31, Y+17	; 0x11
    11b6:	f2 30       	cpi	r31, 0x02	; 2
    11b8:	29 f4       	brne	.+10     	; 0x11c4 <find_volume+0x42e>
    11ba:	88 0c       	add	r8, r8
    11bc:	99 1c       	adc	r9, r9
    11be:	aa 1c       	adc	r10, r10
    11c0:	bb 1c       	adc	r11, r11
    11c2:	15 c0       	rjmp	.+42     	; 0x11ee <find_volume+0x458>
    11c4:	a3 e0       	ldi	r26, 0x03	; 3
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	a5 01       	movw	r20, r10
    11ca:	94 01       	movw	r18, r8
    11cc:	0e 94 bc 2b 	call	0x5778	; 0x5778 <__muluhisi3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	b6 95       	lsr	r27
    11d6:	a7 95       	ror	r26
    11d8:	97 95       	ror	r25
    11da:	87 95       	ror	r24
    11dc:	21 e0       	ldi	r18, 0x01	; 1
    11de:	82 22       	and	r8, r18
    11e0:	99 24       	eor	r9, r9
    11e2:	aa 24       	eor	r10, r10
    11e4:	bb 24       	eor	r11, r11
    11e6:	88 0e       	add	r8, r24
    11e8:	99 1e       	adc	r9, r25
    11ea:	aa 1e       	adc	r10, r26
    11ec:	bb 1e       	adc	r11, r27
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
    11f0:	83 0e       	add	r8, r19
    11f2:	31 e0       	ldi	r19, 0x01	; 1
    11f4:	93 1e       	adc	r9, r19
    11f6:	a1 1c       	adc	r10, r1
    11f8:	b1 1c       	adc	r11, r1
    11fa:	07 2e       	mov	r0, r23
    11fc:	79 e0       	ldi	r23, 0x09	; 9
    11fe:	b6 94       	lsr	r11
    1200:	a7 94       	ror	r10
    1202:	97 94       	ror	r9
    1204:	87 94       	ror	r8
    1206:	7a 95       	dec	r23
    1208:	d1 f7       	brne	.-12     	; 0x11fe <find_volume+0x468>
    120a:	70 2d       	mov	r23, r0
    120c:	c8 14       	cp	r12, r8
    120e:	d9 04       	cpc	r13, r9
    1210:	ea 04       	cpc	r14, r10
    1212:	fb 04       	cpc	r15, r11
    1214:	08 f4       	brcc	.+2      	; 0x1218 <find_volume+0x482>
    1216:	e9 c0       	rjmp	.+466    	; 0x13ea <find_volume+0x654>
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	9f ef       	ldi	r25, 0xFF	; 255
    121c:	dc 01       	movw	r26, r24
    121e:	f8 01       	movw	r30, r16
    1220:	86 87       	std	Z+14, r24	; 0x0e
    1222:	97 87       	std	Z+15, r25	; 0x0f
    1224:	a0 8b       	std	Z+16, r26	; 0x10
    1226:	b1 8b       	std	Z+17, r27	; 0x11
    1228:	82 87       	std	Z+10, r24	; 0x0a
    122a:	93 87       	std	Z+11, r25	; 0x0b
    122c:	a4 87       	std	Z+12, r26	; 0x0c
    122e:	b5 87       	std	Z+13, r27	; 0x0d
    1230:	80 e8       	ldi	r24, 0x80	; 128
    1232:	85 83       	std	Z+5, r24	; 0x05
    1234:	f9 89       	ldd	r31, Y+17	; 0x11
    1236:	f3 30       	cpi	r31, 0x03	; 3
    1238:	09 f0       	breq	.+2      	; 0x123c <find_volume+0x4a6>
    123a:	a1 c0       	rjmp	.+322    	; 0x137e <find_volume+0x5e8>
    123c:	f8 01       	movw	r30, r16
    123e:	e1 5a       	subi	r30, 0xA1	; 161
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	80 81       	ld	r24, Z
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	98 2f       	mov	r25, r24
    1248:	88 27       	eor	r24, r24
    124a:	31 97       	sbiw	r30, 0x01	; 1
    124c:	20 81       	ld	r18, Z
    124e:	82 2b       	or	r24, r18
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	09 f0       	breq	.+2      	; 0x1256 <find_volume+0x4c0>
    1254:	94 c0       	rjmp	.+296    	; 0x137e <find_volume+0x5e8>
    1256:	b3 01       	movw	r22, r6
    1258:	a2 01       	movw	r20, r4
    125a:	4f 5f       	subi	r20, 0xFF	; 255
    125c:	5f 4f       	sbci	r21, 0xFF	; 255
    125e:	6f 4f       	sbci	r22, 0xFF	; 255
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	c8 01       	movw	r24, r16
    1264:	cd dc       	rcall	.-1638   	; 0xc00 <move_window>
    1266:	81 11       	cpse	r24, r1
    1268:	8a c0       	rjmp	.+276    	; 0x137e <find_volume+0x5e8>
    126a:	d8 01       	movw	r26, r16
    126c:	15 96       	adiw	r26, 0x05	; 5
    126e:	1c 92       	st	X, r1
    1270:	f8 01       	movw	r30, r16
    1272:	e3 5d       	subi	r30, 0xD3	; 211
    1274:	fd 4f       	sbci	r31, 0xFD	; 253
    1276:	80 81       	ld	r24, Z
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	98 2f       	mov	r25, r24
    127c:	88 27       	eor	r24, r24
    127e:	31 97       	sbiw	r30, 0x01	; 1
    1280:	20 81       	ld	r18, Z
    1282:	82 2b       	or	r24, r18
    1284:	85 35       	cpi	r24, 0x55	; 85
    1286:	9a 4a       	sbci	r25, 0xAA	; 170
    1288:	09 f0       	breq	.+2      	; 0x128c <find_volume+0x4f6>
    128a:	79 c0       	rjmp	.+242    	; 0x137e <find_volume+0x5e8>
    128c:	f8 01       	movw	r30, r16
    128e:	21 a9       	ldd	r18, Z+49	; 0x31
    1290:	80 a9       	ldd	r24, Z+48	; 0x30
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a0 e0       	ldi	r26, 0x00	; 0
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	dc 01       	movw	r26, r24
    129a:	99 27       	eor	r25, r25
    129c:	88 27       	eor	r24, r24
    129e:	b2 2b       	or	r27, r18
    12a0:	26 a5       	ldd	r18, Z+46	; 0x2e
    12a2:	82 2b       	or	r24, r18
    12a4:	47 a5       	ldd	r20, Z+47	; 0x2f
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	54 2f       	mov	r21, r20
    12aa:	44 27       	eor	r20, r20
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	84 2b       	or	r24, r20
    12b2:	95 2b       	or	r25, r21
    12b4:	a6 2b       	or	r26, r22
    12b6:	b7 2b       	or	r27, r23
    12b8:	82 35       	cpi	r24, 0x52	; 82
    12ba:	92 45       	sbci	r25, 0x52	; 82
    12bc:	a1 46       	sbci	r26, 0x61	; 97
    12be:	b1 44       	sbci	r27, 0x41	; 65
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <find_volume+0x52e>
    12c2:	5d c0       	rjmp	.+186    	; 0x137e <find_volume+0x5e8>
    12c4:	f8 01       	movw	r30, r16
    12c6:	eb 5e       	subi	r30, 0xEB	; 235
    12c8:	fd 4f       	sbci	r31, 0xFD	; 253
    12ca:	20 81       	ld	r18, Z
    12cc:	31 97       	sbiw	r30, 0x01	; 1
    12ce:	80 81       	ld	r24, Z
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a0 e0       	ldi	r26, 0x00	; 0
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	dc 01       	movw	r26, r24
    12d8:	99 27       	eor	r25, r25
    12da:	88 27       	eor	r24, r24
    12dc:	b2 2b       	or	r27, r18
    12de:	32 97       	sbiw	r30, 0x02	; 2
    12e0:	20 81       	ld	r18, Z
    12e2:	82 2b       	or	r24, r18
    12e4:	31 96       	adiw	r30, 0x01	; 1
    12e6:	40 81       	ld	r20, Z
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	54 2f       	mov	r21, r20
    12ec:	44 27       	eor	r20, r20
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	84 2b       	or	r24, r20
    12f4:	95 2b       	or	r25, r21
    12f6:	a6 2b       	or	r26, r22
    12f8:	b7 2b       	or	r27, r23
    12fa:	82 37       	cpi	r24, 0x72	; 114
    12fc:	92 47       	sbci	r25, 0x72	; 114
    12fe:	a1 44       	sbci	r26, 0x41	; 65
    1300:	b1 46       	sbci	r27, 0x61	; 97
    1302:	e9 f5       	brne	.+122    	; 0x137e <find_volume+0x5e8>
    1304:	36 96       	adiw	r30, 0x06	; 6
    1306:	20 81       	ld	r18, Z
    1308:	31 97       	sbiw	r30, 0x01	; 1
    130a:	80 81       	ld	r24, Z
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a0 e0       	ldi	r26, 0x00	; 0
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	dc 01       	movw	r26, r24
    1314:	99 27       	eor	r25, r25
    1316:	88 27       	eor	r24, r24
    1318:	b2 2b       	or	r27, r18
    131a:	32 97       	sbiw	r30, 0x02	; 2
    131c:	20 81       	ld	r18, Z
    131e:	82 2b       	or	r24, r18
    1320:	31 96       	adiw	r30, 0x01	; 1
    1322:	40 81       	ld	r20, Z
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	54 2f       	mov	r21, r20
    1328:	44 27       	eor	r20, r20
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	84 2b       	or	r24, r20
    1330:	95 2b       	or	r25, r21
    1332:	a6 2b       	or	r26, r22
    1334:	b7 2b       	or	r27, r23
    1336:	f8 01       	movw	r30, r16
    1338:	86 87       	std	Z+14, r24	; 0x0e
    133a:	97 87       	std	Z+15, r25	; 0x0f
    133c:	a0 8b       	std	Z+16, r26	; 0x10
    133e:	b1 8b       	std	Z+17, r27	; 0x11
    1340:	e3 5e       	subi	r30, 0xE3	; 227
    1342:	fd 4f       	sbci	r31, 0xFD	; 253
    1344:	20 81       	ld	r18, Z
    1346:	31 97       	sbiw	r30, 0x01	; 1
    1348:	80 81       	ld	r24, Z
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a0 e0       	ldi	r26, 0x00	; 0
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	dc 01       	movw	r26, r24
    1352:	99 27       	eor	r25, r25
    1354:	88 27       	eor	r24, r24
    1356:	b2 2b       	or	r27, r18
    1358:	32 97       	sbiw	r30, 0x02	; 2
    135a:	20 81       	ld	r18, Z
    135c:	82 2b       	or	r24, r18
    135e:	31 96       	adiw	r30, 0x01	; 1
    1360:	40 81       	ld	r20, Z
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	54 2f       	mov	r21, r20
    1366:	44 27       	eor	r20, r20
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	84 2b       	or	r24, r20
    136e:	95 2b       	or	r25, r21
    1370:	a6 2b       	or	r26, r22
    1372:	b7 2b       	or	r27, r23
    1374:	f8 01       	movw	r30, r16
    1376:	82 87       	std	Z+10, r24	; 0x0a
    1378:	93 87       	std	Z+11, r25	; 0x0b
    137a:	a4 87       	std	Z+12, r26	; 0x0c
    137c:	b5 87       	std	Z+13, r27	; 0x0d
    137e:	e9 89       	ldd	r30, Y+17	; 0x11
    1380:	d8 01       	movw	r26, r16
    1382:	ec 93       	st	X, r30
    1384:	80 91 11 02 	lds	r24, 0x0211
    1388:	90 91 12 02 	lds	r25, 0x0212
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	90 93 12 02 	sts	0x0212, r25
    1392:	80 93 11 02 	sts	0x0211, r24
    1396:	17 96       	adiw	r26, 0x07	; 7
    1398:	9c 93       	st	X, r25
    139a:	8e 93       	st	-X, r24
    139c:	16 97       	sbiw	r26, 0x06	; 6
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	54 c0       	rjmp	.+168    	; 0x144a <find_volume+0x6b4>
    13a2:	8b e0       	ldi	r24, 0x0B	; 11
    13a4:	52 c0       	rjmp	.+164    	; 0x144a <find_volume+0x6b4>
    13a6:	8c e0       	ldi	r24, 0x0C	; 12
    13a8:	50 c0       	rjmp	.+160    	; 0x144a <find_volume+0x6b4>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	4e c0       	rjmp	.+156    	; 0x144a <find_volume+0x6b4>
    13ae:	8a e0       	ldi	r24, 0x0A	; 10
    13b0:	4c c0       	rjmp	.+152    	; 0x144a <find_volume+0x6b4>
    13b2:	83 e0       	ldi	r24, 0x03	; 3
    13b4:	4a c0       	rjmp	.+148    	; 0x144a <find_volume+0x6b4>
    13b6:	8a e0       	ldi	r24, 0x0A	; 10
    13b8:	48 c0       	rjmp	.+144    	; 0x144a <find_volume+0x6b4>
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	46 c0       	rjmp	.+140    	; 0x144a <find_volume+0x6b4>
    13be:	8d e0       	ldi	r24, 0x0D	; 13
    13c0:	44 c0       	rjmp	.+136    	; 0x144a <find_volume+0x6b4>
    13c2:	8d e0       	ldi	r24, 0x0D	; 13
    13c4:	42 c0       	rjmp	.+132    	; 0x144a <find_volume+0x6b4>
    13c6:	8d e0       	ldi	r24, 0x0D	; 13
    13c8:	40 c0       	rjmp	.+128    	; 0x144a <find_volume+0x6b4>
    13ca:	8d e0       	ldi	r24, 0x0D	; 13
    13cc:	3e c0       	rjmp	.+124    	; 0x144a <find_volume+0x6b4>
    13ce:	8d e0       	ldi	r24, 0x0D	; 13
    13d0:	3c c0       	rjmp	.+120    	; 0x144a <find_volume+0x6b4>
    13d2:	8d e0       	ldi	r24, 0x0D	; 13
    13d4:	3a c0       	rjmp	.+116    	; 0x144a <find_volume+0x6b4>
    13d6:	8d e0       	ldi	r24, 0x0D	; 13
    13d8:	38 c0       	rjmp	.+112    	; 0x144a <find_volume+0x6b4>
    13da:	8d e0       	ldi	r24, 0x0D	; 13
    13dc:	36 c0       	rjmp	.+108    	; 0x144a <find_volume+0x6b4>
    13de:	8d e0       	ldi	r24, 0x0D	; 13
    13e0:	34 c0       	rjmp	.+104    	; 0x144a <find_volume+0x6b4>
    13e2:	8d e0       	ldi	r24, 0x0D	; 13
    13e4:	32 c0       	rjmp	.+100    	; 0x144a <find_volume+0x6b4>
    13e6:	8d e0       	ldi	r24, 0x0D	; 13
    13e8:	30 c0       	rjmp	.+96     	; 0x144a <find_volume+0x6b4>
    13ea:	8d e0       	ldi	r24, 0x0D	; 13
    13ec:	2e c0       	rjmp	.+92     	; 0x144a <find_volume+0x6b4>
    13ee:	49 01       	movw	r8, r18
    13f0:	5a 01       	movw	r10, r20
    13f2:	f2 e0       	ldi	r31, 0x02	; 2
    13f4:	8f 0e       	add	r8, r31
    13f6:	91 1c       	adc	r9, r1
    13f8:	a1 1c       	adc	r10, r1
    13fa:	b1 1c       	adc	r11, r1
    13fc:	d8 01       	movw	r26, r16
    13fe:	52 96       	adiw	r26, 0x12	; 18
    1400:	8d 92       	st	X+, r8
    1402:	9d 92       	st	X+, r9
    1404:	ad 92       	st	X+, r10
    1406:	bc 92       	st	X, r11
    1408:	55 97       	sbiw	r26, 0x15	; 21
    140a:	f8 01       	movw	r30, r16
    140c:	42 8e       	std	Z+26, r4	; 0x1a
    140e:	53 8e       	std	Z+27, r5	; 0x1b
    1410:	64 8e       	std	Z+28, r6	; 0x1c
    1412:	75 8e       	std	Z+29, r7	; 0x1d
    1414:	8e 89       	ldd	r24, Y+22	; 0x16
    1416:	9f 89       	ldd	r25, Y+23	; 0x17
    1418:	a8 8d       	ldd	r26, Y+24	; 0x18
    141a:	b9 8d       	ldd	r27, Y+25	; 0x19
    141c:	84 0d       	add	r24, r4
    141e:	95 1d       	adc	r25, r5
    1420:	a6 1d       	adc	r26, r6
    1422:	b7 1d       	adc	r27, r7
    1424:	86 8f       	std	Z+30, r24	; 0x1e
    1426:	97 8f       	std	Z+31, r25	; 0x1f
    1428:	a0 a3       	std	Z+32, r26	; 0x20
    142a:	b1 a3       	std	Z+33, r27	; 0x21
    142c:	8a 89       	ldd	r24, Y+18	; 0x12
    142e:	9b 89       	ldd	r25, Y+19	; 0x13
    1430:	ac 89       	ldd	r26, Y+20	; 0x14
    1432:	bd 89       	ldd	r27, Y+21	; 0x15
    1434:	84 0d       	add	r24, r4
    1436:	95 1d       	adc	r25, r5
    1438:	a6 1d       	adc	r26, r6
    143a:	b7 1d       	adc	r27, r7
    143c:	86 a3       	std	Z+38, r24	; 0x26
    143e:	97 a3       	std	Z+39, r25	; 0x27
    1440:	a0 a7       	std	Z+40, r26	; 0x28
    1442:	b1 a7       	std	Z+41, r27	; 0x29
    1444:	f3 e0       	ldi	r31, 0x03	; 3
    1446:	f9 8b       	std	Y+17, r31	; 0x11
    1448:	79 ce       	rjmp	.-782    	; 0x113c <find_volume+0x3a6>
    144a:	6d 96       	adiw	r28, 0x1d	; 29
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	bf 90       	pop	r11
    1468:	af 90       	pop	r10
    146a:	9f 90       	pop	r9
    146c:	8f 90       	pop	r8
    146e:	7f 90       	pop	r7
    1470:	6f 90       	pop	r6
    1472:	5f 90       	pop	r5
    1474:	4f 90       	pop	r4
    1476:	3f 90       	pop	r3
    1478:	2f 90       	pop	r2
    147a:	08 95       	ret

0000147c <sync_fs>:
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24
    148a:	51 db       	rcall	.-2398   	; 0xb2e <sync_window>
    148c:	98 2f       	mov	r25, r24
    148e:	81 11       	cpse	r24, r1
    1490:	5f c0       	rjmp	.+190    	; 0x1550 <sync_fs+0xd4>
    1492:	88 81       	ld	r24, Y
    1494:	83 30       	cpi	r24, 0x03	; 3
    1496:	09 f0       	breq	.+2      	; 0x149a <sync_fs+0x1e>
    1498:	52 c0       	rjmp	.+164    	; 0x153e <sync_fs+0xc2>
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	09 f0       	breq	.+2      	; 0x14a2 <sync_fs+0x26>
    14a0:	4e c0       	rjmp	.+156    	; 0x153e <sync_fs+0xc2>
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	52 e0       	ldi	r21, 0x02	; 2
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	7e 01       	movw	r14, r28
    14ac:	8e e2       	ldi	r24, 0x2E	; 46
    14ae:	e8 0e       	add	r14, r24
    14b0:	f1 1c       	adc	r15, r1
    14b2:	c7 01       	movw	r24, r14
    14b4:	dc da       	rcall	.-2632   	; 0xa6e <mem_set>
    14b6:	85 e5       	ldi	r24, 0x55	; 85
    14b8:	fe 01       	movw	r30, r28
    14ba:	e4 5d       	subi	r30, 0xD4	; 212
    14bc:	fd 4f       	sbci	r31, 0xFD	; 253
    14be:	80 83       	st	Z, r24
    14c0:	8a ea       	ldi	r24, 0xAA	; 170
    14c2:	31 96       	adiw	r30, 0x01	; 1
    14c4:	80 83       	st	Z, r24
    14c6:	82 e5       	ldi	r24, 0x52	; 82
    14c8:	8e a7       	std	Y+46, r24	; 0x2e
    14ca:	8f a7       	std	Y+47, r24	; 0x2f
    14cc:	81 e6       	ldi	r24, 0x61	; 97
    14ce:	88 ab       	std	Y+48, r24	; 0x30
    14d0:	91 e4       	ldi	r25, 0x41	; 65
    14d2:	99 ab       	std	Y+49, r25	; 0x31
    14d4:	22 e7       	ldi	r18, 0x72	; 114
    14d6:	7b 97       	sbiw	r30, 0x1b	; 27
    14d8:	20 83       	st	Z, r18
    14da:	31 96       	adiw	r30, 0x01	; 1
    14dc:	20 83       	st	Z, r18
    14de:	31 96       	adiw	r30, 0x01	; 1
    14e0:	90 83       	st	Z, r25
    14e2:	31 96       	adiw	r30, 0x01	; 1
    14e4:	80 83       	st	Z, r24
    14e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    14e8:	2f 85       	ldd	r18, Y+15	; 0x0f
    14ea:	98 89       	ldd	r25, Y+16	; 0x10
    14ec:	89 89       	ldd	r24, Y+17	; 0x11
    14ee:	31 96       	adiw	r30, 0x01	; 1
    14f0:	30 83       	st	Z, r19
    14f2:	31 96       	adiw	r30, 0x01	; 1
    14f4:	20 83       	st	Z, r18
    14f6:	31 96       	adiw	r30, 0x01	; 1
    14f8:	90 83       	st	Z, r25
    14fa:	31 96       	adiw	r30, 0x01	; 1
    14fc:	80 83       	st	Z, r24
    14fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1500:	2b 85       	ldd	r18, Y+11	; 0x0b
    1502:	9c 85       	ldd	r25, Y+12	; 0x0c
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	31 96       	adiw	r30, 0x01	; 1
    1508:	30 83       	st	Z, r19
    150a:	31 96       	adiw	r30, 0x01	; 1
    150c:	20 83       	st	Z, r18
    150e:	31 96       	adiw	r30, 0x01	; 1
    1510:	90 83       	st	Z, r25
    1512:	31 96       	adiw	r30, 0x01	; 1
    1514:	80 83       	st	Z, r24
    1516:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1518:	9b 8d       	ldd	r25, Y+27	; 0x1b
    151a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    151c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    151e:	9c 01       	movw	r18, r24
    1520:	ad 01       	movw	r20, r26
    1522:	2f 5f       	subi	r18, 0xFF	; 255
    1524:	3f 4f       	sbci	r19, 0xFF	; 255
    1526:	4f 4f       	sbci	r20, 0xFF	; 255
    1528:	5f 4f       	sbci	r21, 0xFF	; 255
    152a:	2a a7       	std	Y+42, r18	; 0x2a
    152c:	3b a7       	std	Y+43, r19	; 0x2b
    152e:	4c a7       	std	Y+44, r20	; 0x2c
    1530:	5d a7       	std	Y+45, r21	; 0x2d
    1532:	01 e0       	ldi	r16, 0x01	; 1
    1534:	10 e0       	ldi	r17, 0x00	; 0
    1536:	b7 01       	movw	r22, r14
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	6c d9       	rcall	.-3368   	; 0x814 <disk_write>
    153c:	1d 82       	std	Y+5, r1	; 0x05
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	ca d9       	rcall	.-3180   	; 0x8dc <disk_ioctl>
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	81 11       	cpse	r24, r1
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <sync_fs+0xd4>
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	89 2f       	mov	r24, r25
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	08 95       	ret

00001560 <clust2sect>:
    1560:	cf 92       	push	r12
    1562:	df 92       	push	r13
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	fc 01       	movw	r30, r24
    156a:	9a 01       	movw	r18, r20
    156c:	ab 01       	movw	r20, r22
    156e:	22 50       	subi	r18, 0x02	; 2
    1570:	31 09       	sbc	r19, r1
    1572:	41 09       	sbc	r20, r1
    1574:	51 09       	sbc	r21, r1
    1576:	c2 88       	ldd	r12, Z+18	; 0x12
    1578:	d3 88       	ldd	r13, Z+19	; 0x13
    157a:	e4 88       	ldd	r14, Z+20	; 0x14
    157c:	f5 88       	ldd	r15, Z+21	; 0x15
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	c8 1a       	sub	r12, r24
    1582:	d1 08       	sbc	r13, r1
    1584:	e1 08       	sbc	r14, r1
    1586:	f1 08       	sbc	r15, r1
    1588:	2c 15       	cp	r18, r12
    158a:	3d 05       	cpc	r19, r13
    158c:	4e 05       	cpc	r20, r14
    158e:	5f 05       	cpc	r21, r15
    1590:	68 f4       	brcc	.+26     	; 0x15ac <clust2sect+0x4c>
    1592:	a2 81       	ldd	r26, Z+2	; 0x02
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	0e 94 bc 2b 	call	0x5778	; 0x5778 <__muluhisi3>
    159a:	c6 a0       	ldd	r12, Z+38	; 0x26
    159c:	d7 a0       	ldd	r13, Z+39	; 0x27
    159e:	e0 a4       	ldd	r14, Z+40	; 0x28
    15a0:	f1 a4       	ldd	r15, Z+41	; 0x29
    15a2:	6c 0d       	add	r22, r12
    15a4:	7d 1d       	adc	r23, r13
    15a6:	8e 1d       	adc	r24, r14
    15a8:	9f 1d       	adc	r25, r15
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <clust2sect+0x52>
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	cb 01       	movw	r24, r22
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	08 95       	ret

000015bc <get_fat>:
    15bc:	af 92       	push	r10
    15be:	bf 92       	push	r11
    15c0:	cf 92       	push	r12
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	ec 01       	movw	r28, r24
    15d2:	6a 01       	movw	r12, r20
    15d4:	7b 01       	movw	r14, r22
    15d6:	42 30       	cpi	r20, 0x02	; 2
    15d8:	51 05       	cpc	r21, r1
    15da:	61 05       	cpc	r22, r1
    15dc:	71 05       	cpc	r23, r1
    15de:	08 f4       	brcc	.+2      	; 0x15e2 <get_fat+0x26>
    15e0:	c5 c0       	rjmp	.+394    	; 0x176c <get_fat+0x1b0>
    15e2:	4a 89       	ldd	r20, Y+18	; 0x12
    15e4:	5b 89       	ldd	r21, Y+19	; 0x13
    15e6:	6c 89       	ldd	r22, Y+20	; 0x14
    15e8:	7d 89       	ldd	r23, Y+21	; 0x15
    15ea:	c4 16       	cp	r12, r20
    15ec:	d5 06       	cpc	r13, r21
    15ee:	e6 06       	cpc	r14, r22
    15f0:	f7 06       	cpc	r15, r23
    15f2:	08 f0       	brcs	.+2      	; 0x15f6 <get_fat+0x3a>
    15f4:	c0 c0       	rjmp	.+384    	; 0x1776 <get_fat+0x1ba>
    15f6:	88 81       	ld	r24, Y
    15f8:	82 30       	cpi	r24, 0x02	; 2
    15fa:	09 f4       	brne	.+2      	; 0x15fe <get_fat+0x42>
    15fc:	4b c0       	rjmp	.+150    	; 0x1694 <get_fat+0xd8>
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	09 f4       	brne	.+2      	; 0x1604 <get_fat+0x48>
    1602:	6f c0       	rjmp	.+222    	; 0x16e2 <get_fat+0x126>
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	09 f0       	breq	.+2      	; 0x160a <get_fat+0x4e>
    1608:	bb c0       	rjmp	.+374    	; 0x1780 <get_fat+0x1c4>
    160a:	86 01       	movw	r16, r12
    160c:	16 95       	lsr	r17
    160e:	07 95       	ror	r16
    1610:	0c 0d       	add	r16, r12
    1612:	1d 1d       	adc	r17, r13
    1614:	c8 01       	movw	r24, r16
    1616:	89 2f       	mov	r24, r25
    1618:	99 27       	eor	r25, r25
    161a:	86 95       	lsr	r24
    161c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    161e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1620:	68 a1       	ldd	r22, Y+32	; 0x20
    1622:	79 a1       	ldd	r23, Y+33	; 0x21
    1624:	48 0f       	add	r20, r24
    1626:	59 1f       	adc	r21, r25
    1628:	61 1d       	adc	r22, r1
    162a:	71 1d       	adc	r23, r1
    162c:	ce 01       	movw	r24, r28
    162e:	e8 da       	rcall	.-2608   	; 0xc00 <move_window>
    1630:	81 11       	cpse	r24, r1
    1632:	ab c0       	rjmp	.+342    	; 0x178a <get_fat+0x1ce>
    1634:	58 01       	movw	r10, r16
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	a8 1a       	sub	r10, r24
    163a:	b8 0a       	sbc	r11, r24
    163c:	11 70       	andi	r17, 0x01	; 1
    163e:	fe 01       	movw	r30, r28
    1640:	e0 0f       	add	r30, r16
    1642:	f1 1f       	adc	r31, r17
    1644:	16 a5       	ldd	r17, Z+46	; 0x2e
    1646:	c5 01       	movw	r24, r10
    1648:	89 2f       	mov	r24, r25
    164a:	99 27       	eor	r25, r25
    164c:	86 95       	lsr	r24
    164e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1650:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1652:	68 a1       	ldd	r22, Y+32	; 0x20
    1654:	79 a1       	ldd	r23, Y+33	; 0x21
    1656:	48 0f       	add	r20, r24
    1658:	59 1f       	adc	r21, r25
    165a:	61 1d       	adc	r22, r1
    165c:	71 1d       	adc	r23, r1
    165e:	ce 01       	movw	r24, r28
    1660:	cf da       	rcall	.-2658   	; 0xc00 <move_window>
    1662:	81 11       	cpse	r24, r1
    1664:	96 c0       	rjmp	.+300    	; 0x1792 <get_fat+0x1d6>
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	b8 22       	and	r11, r24
    166a:	ca 0d       	add	r28, r10
    166c:	db 1d       	adc	r29, r11
    166e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1670:	61 2f       	mov	r22, r17
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	78 2b       	or	r23, r24
    1676:	c0 fe       	sbrs	r12, 0
    1678:	09 c0       	rjmp	.+18     	; 0x168c <get_fat+0xd0>
    167a:	72 95       	swap	r23
    167c:	62 95       	swap	r22
    167e:	6f 70       	andi	r22, 0x0F	; 15
    1680:	67 27       	eor	r22, r23
    1682:	7f 70       	andi	r23, 0x0F	; 15
    1684:	67 27       	eor	r22, r23
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	8e c0       	rjmp	.+284    	; 0x17a8 <get_fat+0x1ec>
    168c:	7f 70       	andi	r23, 0x0F	; 15
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	8a c0       	rjmp	.+276    	; 0x17a8 <get_fat+0x1ec>
    1694:	77 27       	eor	r23, r23
    1696:	6f 2d       	mov	r22, r15
    1698:	5e 2d       	mov	r21, r14
    169a:	4d 2d       	mov	r20, r13
    169c:	0e 8d       	ldd	r16, Y+30	; 0x1e
    169e:	1f 8d       	ldd	r17, Y+31	; 0x1f
    16a0:	28 a1       	ldd	r18, Y+32	; 0x20
    16a2:	39 a1       	ldd	r19, Y+33	; 0x21
    16a4:	40 0f       	add	r20, r16
    16a6:	51 1f       	adc	r21, r17
    16a8:	62 1f       	adc	r22, r18
    16aa:	73 1f       	adc	r23, r19
    16ac:	ce 01       	movw	r24, r28
    16ae:	a8 da       	rcall	.-2736   	; 0xc00 <move_window>
    16b0:	81 11       	cpse	r24, r1
    16b2:	73 c0       	rjmp	.+230    	; 0x179a <get_fat+0x1de>
    16b4:	cc 0c       	add	r12, r12
    16b6:	dd 1c       	adc	r13, r13
    16b8:	ee 1c       	adc	r14, r14
    16ba:	ff 1c       	adc	r15, r15
    16bc:	e8 94       	clt
    16be:	c0 f8       	bld	r12, 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	d8 22       	and	r13, r24
    16c4:	ee 24       	eor	r14, r14
    16c6:	ff 24       	eor	r15, r15
    16c8:	fe 01       	movw	r30, r28
    16ca:	ec 0d       	add	r30, r12
    16cc:	fd 1d       	adc	r31, r13
    16ce:	66 a5       	ldd	r22, Z+46	; 0x2e
    16d0:	fe 01       	movw	r30, r28
    16d2:	ec 0d       	add	r30, r12
    16d4:	fd 1d       	adc	r31, r13
    16d6:	87 a5       	ldd	r24, Z+47	; 0x2f
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	78 2b       	or	r23, r24
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	63 c0       	rjmp	.+198    	; 0x17a8 <get_fat+0x1ec>
    16e2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    16e4:	5f 8d       	ldd	r21, Y+31	; 0x1f
    16e6:	68 a1       	ldd	r22, Y+32	; 0x20
    16e8:	79 a1       	ldd	r23, Y+33	; 0x21
    16ea:	97 01       	movw	r18, r14
    16ec:	86 01       	movw	r16, r12
    16ee:	68 94       	set
    16f0:	16 f8       	bld	r1, 6
    16f2:	36 95       	lsr	r19
    16f4:	27 95       	ror	r18
    16f6:	17 95       	ror	r17
    16f8:	07 95       	ror	r16
    16fa:	16 94       	lsr	r1
    16fc:	d1 f7       	brne	.-12     	; 0x16f2 <get_fat+0x136>
    16fe:	40 0f       	add	r20, r16
    1700:	51 1f       	adc	r21, r17
    1702:	62 1f       	adc	r22, r18
    1704:	73 1f       	adc	r23, r19
    1706:	ce 01       	movw	r24, r28
    1708:	7b da       	rcall	.-2826   	; 0xc00 <move_window>
    170a:	81 11       	cpse	r24, r1
    170c:	4a c0       	rjmp	.+148    	; 0x17a2 <get_fat+0x1e6>
    170e:	cc 0c       	add	r12, r12
    1710:	dd 1c       	adc	r13, r13
    1712:	ee 1c       	adc	r14, r14
    1714:	ff 1c       	adc	r15, r15
    1716:	cc 0c       	add	r12, r12
    1718:	dd 1c       	adc	r13, r13
    171a:	ee 1c       	adc	r14, r14
    171c:	ff 1c       	adc	r15, r15
    171e:	8c ef       	ldi	r24, 0xFC	; 252
    1720:	c8 22       	and	r12, r24
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	d8 22       	and	r13, r24
    1726:	ee 24       	eor	r14, r14
    1728:	ff 24       	eor	r15, r15
    172a:	f6 01       	movw	r30, r12
    172c:	be 96       	adiw	r30, 0x2e	; 46
    172e:	ec 0f       	add	r30, r28
    1730:	fd 1f       	adc	r31, r29
    1732:	82 81       	ldd	r24, Z+2	; 0x02
    1734:	43 81       	ldd	r20, Z+3	; 0x03
    1736:	50 e0       	ldi	r21, 0x00	; 0
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	74 2f       	mov	r23, r20
    173e:	66 27       	eor	r22, r22
    1740:	55 27       	eor	r21, r21
    1742:	44 27       	eor	r20, r20
    1744:	68 2b       	or	r22, r24
    1746:	81 81       	ldd	r24, Z+1	; 0x01
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	98 2f       	mov	r25, r24
    174c:	88 27       	eor	r24, r24
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	84 2b       	or	r24, r20
    1754:	95 2b       	or	r25, r21
    1756:	a6 2b       	or	r26, r22
    1758:	b7 2b       	or	r27, r23
    175a:	fe 01       	movw	r30, r28
    175c:	ec 0d       	add	r30, r12
    175e:	fd 1d       	adc	r31, r13
    1760:	26 a5       	ldd	r18, Z+46	; 0x2e
    1762:	82 2b       	or	r24, r18
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	9f 70       	andi	r25, 0x0F	; 15
    176a:	1e c0       	rjmp	.+60     	; 0x17a8 <get_fat+0x1ec>
    176c:	61 e0       	ldi	r22, 0x01	; 1
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	19 c0       	rjmp	.+50     	; 0x17a8 <get_fat+0x1ec>
    1776:	61 e0       	ldi	r22, 0x01	; 1
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	14 c0       	rjmp	.+40     	; 0x17a8 <get_fat+0x1ec>
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <get_fat+0x1ec>
    178a:	6f ef       	ldi	r22, 0xFF	; 255
    178c:	7f ef       	ldi	r23, 0xFF	; 255
    178e:	cb 01       	movw	r24, r22
    1790:	0b c0       	rjmp	.+22     	; 0x17a8 <get_fat+0x1ec>
    1792:	6f ef       	ldi	r22, 0xFF	; 255
    1794:	7f ef       	ldi	r23, 0xFF	; 255
    1796:	cb 01       	movw	r24, r22
    1798:	07 c0       	rjmp	.+14     	; 0x17a8 <get_fat+0x1ec>
    179a:	6f ef       	ldi	r22, 0xFF	; 255
    179c:	7f ef       	ldi	r23, 0xFF	; 255
    179e:	cb 01       	movw	r24, r22
    17a0:	03 c0       	rjmp	.+6      	; 0x17a8 <get_fat+0x1ec>
    17a2:	6f ef       	ldi	r22, 0xFF	; 255
    17a4:	7f ef       	ldi	r23, 0xFF	; 255
    17a6:	cb 01       	movw	r24, r22
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	df 90       	pop	r13
    17b6:	cf 90       	pop	r12
    17b8:	bf 90       	pop	r11
    17ba:	af 90       	pop	r10
    17bc:	08 95       	ret

000017be <dir_sdi>:
    17be:	af 92       	push	r10
    17c0:	bf 92       	push	r11
    17c2:	cf 92       	push	r12
    17c4:	df 92       	push	r13
    17c6:	ef 92       	push	r14
    17c8:	ff 92       	push	r15
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	ec 01       	movw	r28, r24
    17d4:	8b 01       	movw	r16, r22
    17d6:	7d 83       	std	Y+5, r23	; 0x05
    17d8:	6c 83       	std	Y+4, r22	; 0x04
    17da:	ce 80       	ldd	r12, Y+6	; 0x06
    17dc:	df 80       	ldd	r13, Y+7	; 0x07
    17de:	e8 84       	ldd	r14, Y+8	; 0x08
    17e0:	f9 84       	ldd	r15, Y+9	; 0x09
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	c8 16       	cp	r12, r24
    17e6:	d1 04       	cpc	r13, r1
    17e8:	e1 04       	cpc	r14, r1
    17ea:	f1 04       	cpc	r15, r1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <dir_sdi+0x32>
    17ee:	8a c0       	rjmp	.+276    	; 0x1904 <dir_sdi+0x146>
    17f0:	e8 81       	ld	r30, Y
    17f2:	f9 81       	ldd	r31, Y+1	; 0x01
    17f4:	82 89       	ldd	r24, Z+18	; 0x12
    17f6:	93 89       	ldd	r25, Z+19	; 0x13
    17f8:	a4 89       	ldd	r26, Z+20	; 0x14
    17fa:	b5 89       	ldd	r27, Z+21	; 0x15
    17fc:	c8 16       	cp	r12, r24
    17fe:	d9 06       	cpc	r13, r25
    1800:	ea 06       	cpc	r14, r26
    1802:	fb 06       	cpc	r15, r27
    1804:	08 f0       	brcs	.+2      	; 0x1808 <dir_sdi+0x4a>
    1806:	80 c0       	rjmp	.+256    	; 0x1908 <dir_sdi+0x14a>
    1808:	c1 14       	cp	r12, r1
    180a:	d1 04       	cpc	r13, r1
    180c:	e1 04       	cpc	r14, r1
    180e:	f1 04       	cpc	r15, r1
    1810:	c1 f4       	brne	.+48     	; 0x1842 <dir_sdi+0x84>
    1812:	80 81       	ld	r24, Z
    1814:	83 30       	cpi	r24, 0x03	; 3
    1816:	41 f4       	brne	.+16     	; 0x1828 <dir_sdi+0x6a>
    1818:	82 a1       	ldd	r24, Z+34	; 0x22
    181a:	93 a1       	ldd	r25, Z+35	; 0x23
    181c:	a4 a1       	ldd	r26, Z+36	; 0x24
    181e:	b5 a1       	ldd	r27, Z+37	; 0x25
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	a1 05       	cpc	r26, r1
    1824:	b1 05       	cpc	r27, r1
    1826:	59 f4       	brne	.+22     	; 0x183e <dir_sdi+0x80>
    1828:	80 85       	ldd	r24, Z+8	; 0x08
    182a:	91 85       	ldd	r25, Z+9	; 0x09
    182c:	08 17       	cp	r16, r24
    182e:	19 07       	cpc	r17, r25
    1830:	08 f0       	brcs	.+2      	; 0x1834 <dir_sdi+0x76>
    1832:	6c c0       	rjmp	.+216    	; 0x190c <dir_sdi+0x14e>
    1834:	62 a1       	ldd	r22, Z+34	; 0x22
    1836:	73 a1       	ldd	r23, Z+35	; 0x23
    1838:	84 a1       	ldd	r24, Z+36	; 0x24
    183a:	95 a1       	ldd	r25, Z+37	; 0x25
    183c:	35 c0       	rjmp	.+106    	; 0x18a8 <dir_sdi+0xea>
    183e:	6c 01       	movw	r12, r24
    1840:	7d 01       	movw	r14, r26
    1842:	a2 80       	ldd	r10, Z+2	; 0x02
    1844:	80 e1       	ldi	r24, 0x10	; 16
    1846:	a8 9e       	mul	r10, r24
    1848:	50 01       	movw	r10, r0
    184a:	11 24       	eor	r1, r1
    184c:	0a 15       	cp	r16, r10
    184e:	1b 05       	cpc	r17, r11
    1850:	30 f1       	brcs	.+76     	; 0x189e <dir_sdi+0xe0>
    1852:	b7 01       	movw	r22, r14
    1854:	a6 01       	movw	r20, r12
    1856:	88 81       	ld	r24, Y
    1858:	99 81       	ldd	r25, Y+1	; 0x01
    185a:	b0 de       	rcall	.-672    	; 0x15bc <get_fat>
    185c:	6b 01       	movw	r12, r22
    185e:	7c 01       	movw	r14, r24
    1860:	8f ef       	ldi	r24, 0xFF	; 255
    1862:	c8 16       	cp	r12, r24
    1864:	d8 06       	cpc	r13, r24
    1866:	e8 06       	cpc	r14, r24
    1868:	f8 06       	cpc	r15, r24
    186a:	09 f4       	brne	.+2      	; 0x186e <dir_sdi+0xb0>
    186c:	51 c0       	rjmp	.+162    	; 0x1910 <dir_sdi+0x152>
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	c8 16       	cp	r12, r24
    1872:	d1 04       	cpc	r13, r1
    1874:	e1 04       	cpc	r14, r1
    1876:	f1 04       	cpc	r15, r1
    1878:	08 f4       	brcc	.+2      	; 0x187c <dir_sdi+0xbe>
    187a:	4c c0       	rjmp	.+152    	; 0x1914 <dir_sdi+0x156>
    187c:	e8 81       	ld	r30, Y
    187e:	f9 81       	ldd	r31, Y+1	; 0x01
    1880:	82 89       	ldd	r24, Z+18	; 0x12
    1882:	93 89       	ldd	r25, Z+19	; 0x13
    1884:	a4 89       	ldd	r26, Z+20	; 0x14
    1886:	b5 89       	ldd	r27, Z+21	; 0x15
    1888:	c8 16       	cp	r12, r24
    188a:	d9 06       	cpc	r13, r25
    188c:	ea 06       	cpc	r14, r26
    188e:	fb 06       	cpc	r15, r27
    1890:	08 f0       	brcs	.+2      	; 0x1894 <dir_sdi+0xd6>
    1892:	42 c0       	rjmp	.+132    	; 0x1918 <dir_sdi+0x15a>
    1894:	0a 19       	sub	r16, r10
    1896:	1b 09       	sbc	r17, r11
    1898:	0a 15       	cp	r16, r10
    189a:	1b 05       	cpc	r17, r11
    189c:	d0 f6       	brcc	.-76     	; 0x1852 <dir_sdi+0x94>
    189e:	b7 01       	movw	r22, r14
    18a0:	a6 01       	movw	r20, r12
    18a2:	88 81       	ld	r24, Y
    18a4:	99 81       	ldd	r25, Y+1	; 0x01
    18a6:	5c de       	rcall	.-840    	; 0x1560 <clust2sect>
    18a8:	ca 86       	std	Y+10, r12	; 0x0a
    18aa:	db 86       	std	Y+11, r13	; 0x0b
    18ac:	ec 86       	std	Y+12, r14	; 0x0c
    18ae:	fd 86       	std	Y+13, r15	; 0x0d
    18b0:	61 15       	cp	r22, r1
    18b2:	71 05       	cpc	r23, r1
    18b4:	81 05       	cpc	r24, r1
    18b6:	91 05       	cpc	r25, r1
    18b8:	89 f1       	breq	.+98     	; 0x191c <dir_sdi+0x15e>
    18ba:	98 01       	movw	r18, r16
    18bc:	32 95       	swap	r19
    18be:	22 95       	swap	r18
    18c0:	2f 70       	andi	r18, 0x0F	; 15
    18c2:	23 27       	eor	r18, r19
    18c4:	3f 70       	andi	r19, 0x0F	; 15
    18c6:	23 27       	eor	r18, r19
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	82 0f       	add	r24, r18
    18ce:	93 1f       	adc	r25, r19
    18d0:	a1 1d       	adc	r26, r1
    18d2:	b1 1d       	adc	r27, r1
    18d4:	8e 87       	std	Y+14, r24	; 0x0e
    18d6:	9f 87       	std	Y+15, r25	; 0x0f
    18d8:	a8 8b       	std	Y+16, r26	; 0x10
    18da:	b9 8b       	std	Y+17, r27	; 0x11
    18dc:	0f 70       	andi	r16, 0x0F	; 15
    18de:	11 27       	eor	r17, r17
    18e0:	c8 01       	movw	r24, r16
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	82 95       	swap	r24
    18e8:	92 95       	swap	r25
    18ea:	90 7f       	andi	r25, 0xF0	; 240
    18ec:	98 27       	eor	r25, r24
    18ee:	80 7f       	andi	r24, 0xF0	; 240
    18f0:	98 27       	eor	r25, r24
    18f2:	8e 96       	adiw	r24, 0x2e	; 46
    18f4:	28 81       	ld	r18, Y
    18f6:	39 81       	ldd	r19, Y+1	; 0x01
    18f8:	82 0f       	add	r24, r18
    18fa:	93 1f       	adc	r25, r19
    18fc:	9b 8b       	std	Y+19, r25	; 0x13
    18fe:	8a 8b       	std	Y+18, r24	; 0x12
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	0d c0       	rjmp	.+26     	; 0x191e <dir_sdi+0x160>
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	0b c0       	rjmp	.+22     	; 0x191e <dir_sdi+0x160>
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	09 c0       	rjmp	.+18     	; 0x191e <dir_sdi+0x160>
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	07 c0       	rjmp	.+14     	; 0x191e <dir_sdi+0x160>
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	05 c0       	rjmp	.+10     	; 0x191e <dir_sdi+0x160>
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	03 c0       	rjmp	.+6      	; 0x191e <dir_sdi+0x160>
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	01 c0       	rjmp	.+2      	; 0x191e <dir_sdi+0x160>
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	df 90       	pop	r13
    192c:	cf 90       	pop	r12
    192e:	bf 90       	pop	r11
    1930:	af 90       	pop	r10
    1932:	08 95       	ret

00001934 <put_fat>:
    1934:	4f 92       	push	r4
    1936:	5f 92       	push	r5
    1938:	6f 92       	push	r6
    193a:	7f 92       	push	r7
    193c:	8f 92       	push	r8
    193e:	9f 92       	push	r9
    1940:	af 92       	push	r10
    1942:	bf 92       	push	r11
    1944:	cf 92       	push	r12
    1946:	df 92       	push	r13
    1948:	ef 92       	push	r14
    194a:	ff 92       	push	r15
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	ec 01       	movw	r28, r24
    1956:	6a 01       	movw	r12, r20
    1958:	7b 01       	movw	r14, r22
    195a:	28 01       	movw	r4, r16
    195c:	39 01       	movw	r6, r18
    195e:	42 30       	cpi	r20, 0x02	; 2
    1960:	51 05       	cpc	r21, r1
    1962:	61 05       	cpc	r22, r1
    1964:	71 05       	cpc	r23, r1
    1966:	08 f4       	brcc	.+2      	; 0x196a <put_fat+0x36>
    1968:	dd c0       	rjmp	.+442    	; 0x1b24 <put_fat+0x1f0>
    196a:	8a 89       	ldd	r24, Y+18	; 0x12
    196c:	9b 89       	ldd	r25, Y+19	; 0x13
    196e:	ac 89       	ldd	r26, Y+20	; 0x14
    1970:	bd 89       	ldd	r27, Y+21	; 0x15
    1972:	48 17       	cp	r20, r24
    1974:	59 07       	cpc	r21, r25
    1976:	6a 07       	cpc	r22, r26
    1978:	7b 07       	cpc	r23, r27
    197a:	08 f0       	brcs	.+2      	; 0x197e <put_fat+0x4a>
    197c:	d5 c0       	rjmp	.+426    	; 0x1b28 <put_fat+0x1f4>
    197e:	88 81       	ld	r24, Y
    1980:	82 30       	cpi	r24, 0x02	; 2
    1982:	09 f4       	brne	.+2      	; 0x1986 <put_fat+0x52>
    1984:	69 c0       	rjmp	.+210    	; 0x1a58 <put_fat+0x124>
    1986:	83 30       	cpi	r24, 0x03	; 3
    1988:	09 f4       	brne	.+2      	; 0x198c <put_fat+0x58>
    198a:	8b c0       	rjmp	.+278    	; 0x1aa2 <put_fat+0x16e>
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	09 f0       	breq	.+2      	; 0x1992 <put_fat+0x5e>
    1990:	cd c0       	rjmp	.+410    	; 0x1b2c <put_fat+0x1f8>
    1992:	5a 01       	movw	r10, r20
    1994:	b6 94       	lsr	r11
    1996:	a7 94       	ror	r10
    1998:	a4 0e       	add	r10, r20
    199a:	b5 1e       	adc	r11, r21
    199c:	c5 01       	movw	r24, r10
    199e:	89 2f       	mov	r24, r25
    19a0:	99 27       	eor	r25, r25
    19a2:	86 95       	lsr	r24
    19a4:	4e 8d       	ldd	r20, Y+30	; 0x1e
    19a6:	5f 8d       	ldd	r21, Y+31	; 0x1f
    19a8:	68 a1       	ldd	r22, Y+32	; 0x20
    19aa:	79 a1       	ldd	r23, Y+33	; 0x21
    19ac:	48 0f       	add	r20, r24
    19ae:	59 1f       	adc	r21, r25
    19b0:	61 1d       	adc	r22, r1
    19b2:	71 1d       	adc	r23, r1
    19b4:	ce 01       	movw	r24, r28
    19b6:	24 d9       	rcall	.-3512   	; 0xc00 <move_window>
    19b8:	81 11       	cpse	r24, r1
    19ba:	b9 c0       	rjmp	.+370    	; 0x1b2e <put_fat+0x1fa>
    19bc:	85 01       	movw	r16, r10
    19be:	0f 5f       	subi	r16, 0xFF	; 255
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
    19c2:	c5 01       	movw	r24, r10
    19c4:	91 70       	andi	r25, 0x01	; 1
    19c6:	46 01       	movw	r8, r12
    19c8:	57 01       	movw	r10, r14
    19ca:	51 e0       	ldi	r21, 0x01	; 1
    19cc:	85 22       	and	r8, r21
    19ce:	99 24       	eor	r9, r9
    19d0:	aa 24       	eor	r10, r10
    19d2:	bb 24       	eor	r11, r11
    19d4:	c0 fe       	sbrs	r12, 0
    19d6:	0b c0       	rjmp	.+22     	; 0x19ee <put_fat+0xba>
    19d8:	fe 01       	movw	r30, r28
    19da:	e8 0f       	add	r30, r24
    19dc:	f9 1f       	adc	r31, r25
    19de:	46 a5       	ldd	r20, Z+46	; 0x2e
    19e0:	4f 70       	andi	r20, 0x0F	; 15
    19e2:	50 e1       	ldi	r21, 0x10	; 16
    19e4:	45 9e       	mul	r4, r21
    19e6:	90 01       	movw	r18, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	24 2b       	or	r18, r20
    19ec:	01 c0       	rjmp	.+2      	; 0x19f0 <put_fat+0xbc>
    19ee:	24 2d       	mov	r18, r4
    19f0:	fe 01       	movw	r30, r28
    19f2:	e8 0f       	add	r30, r24
    19f4:	f9 1f       	adc	r31, r25
    19f6:	26 a7       	std	Z+46, r18	; 0x2e
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	8c 83       	std	Y+4, r24	; 0x04
    19fc:	4e 8d       	ldd	r20, Y+30	; 0x1e
    19fe:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1a00:	68 a1       	ldd	r22, Y+32	; 0x20
    1a02:	79 a1       	ldd	r23, Y+33	; 0x21
    1a04:	c8 01       	movw	r24, r16
    1a06:	89 2f       	mov	r24, r25
    1a08:	99 27       	eor	r25, r25
    1a0a:	86 95       	lsr	r24
    1a0c:	48 0f       	add	r20, r24
    1a0e:	59 1f       	adc	r21, r25
    1a10:	61 1d       	adc	r22, r1
    1a12:	71 1d       	adc	r23, r1
    1a14:	ce 01       	movw	r24, r28
    1a16:	f4 d8       	rcall	.-3608   	; 0xc00 <move_window>
    1a18:	81 11       	cpse	r24, r1
    1a1a:	89 c0       	rjmp	.+274    	; 0x1b2e <put_fat+0x1fa>
    1a1c:	11 70       	andi	r17, 0x01	; 1
    1a1e:	89 28       	or	r8, r9
    1a20:	8a 28       	or	r8, r10
    1a22:	8b 28       	or	r8, r11
    1a24:	49 f0       	breq	.+18     	; 0x1a38 <put_fat+0x104>
    1a26:	68 94       	set
    1a28:	13 f8       	bld	r1, 3
    1a2a:	76 94       	lsr	r7
    1a2c:	67 94       	ror	r6
    1a2e:	57 94       	ror	r5
    1a30:	47 94       	ror	r4
    1a32:	16 94       	lsr	r1
    1a34:	d1 f7       	brne	.-12     	; 0x1a2a <put_fat+0xf6>
    1a36:	09 c0       	rjmp	.+18     	; 0x1a4a <put_fat+0x116>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e0 0f       	add	r30, r16
    1a3c:	f1 1f       	adc	r31, r17
    1a3e:	26 a5       	ldd	r18, Z+46	; 0x2e
    1a40:	20 7f       	andi	r18, 0xF0	; 240
    1a42:	95 2d       	mov	r25, r5
    1a44:	9f 70       	andi	r25, 0x0F	; 15
    1a46:	42 2e       	mov	r4, r18
    1a48:	49 2a       	or	r4, r25
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e0 0f       	add	r30, r16
    1a4e:	f1 1f       	adc	r31, r17
    1a50:	46 a6       	std	Z+46, r4	; 0x2e
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	9c 83       	std	Y+4, r25	; 0x04
    1a56:	6b c0       	rjmp	.+214    	; 0x1b2e <put_fat+0x1fa>
    1a58:	45 2f       	mov	r20, r21
    1a5a:	56 2f       	mov	r21, r22
    1a5c:	67 2f       	mov	r22, r23
    1a5e:	77 27       	eor	r23, r23
    1a60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a64:	a8 a1       	ldd	r26, Y+32	; 0x20
    1a66:	b9 a1       	ldd	r27, Y+33	; 0x21
    1a68:	48 0f       	add	r20, r24
    1a6a:	59 1f       	adc	r21, r25
    1a6c:	6a 1f       	adc	r22, r26
    1a6e:	7b 1f       	adc	r23, r27
    1a70:	ce 01       	movw	r24, r28
    1a72:	c6 d8       	rcall	.-3700   	; 0xc00 <move_window>
    1a74:	81 11       	cpse	r24, r1
    1a76:	5b c0       	rjmp	.+182    	; 0x1b2e <put_fat+0x1fa>
    1a78:	cc 0c       	add	r12, r12
    1a7a:	dd 1c       	adc	r13, r13
    1a7c:	ee 1c       	adc	r14, r14
    1a7e:	ff 1c       	adc	r15, r15
    1a80:	e8 94       	clt
    1a82:	c0 f8       	bld	r12, 0
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	d9 22       	and	r13, r25
    1a88:	ee 24       	eor	r14, r14
    1a8a:	ff 24       	eor	r15, r15
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	ec 0d       	add	r30, r12
    1a90:	fd 1d       	adc	r31, r13
    1a92:	46 a6       	std	Z+46, r4	; 0x2e
    1a94:	fe 01       	movw	r30, r28
    1a96:	ec 0d       	add	r30, r12
    1a98:	fd 1d       	adc	r31, r13
    1a9a:	57 a6       	std	Z+47, r5	; 0x2f
    1a9c:	91 e0       	ldi	r25, 0x01	; 1
    1a9e:	9c 83       	std	Y+4, r25	; 0x04
    1aa0:	46 c0       	rjmp	.+140    	; 0x1b2e <put_fat+0x1fa>
    1aa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1aa6:	a8 a1       	ldd	r26, Y+32	; 0x20
    1aa8:	b9 a1       	ldd	r27, Y+33	; 0x21
    1aaa:	68 94       	set
    1aac:	16 f8       	bld	r1, 6
    1aae:	76 95       	lsr	r23
    1ab0:	67 95       	ror	r22
    1ab2:	57 95       	ror	r21
    1ab4:	47 95       	ror	r20
    1ab6:	16 94       	lsr	r1
    1ab8:	d1 f7       	brne	.-12     	; 0x1aae <put_fat+0x17a>
    1aba:	48 0f       	add	r20, r24
    1abc:	59 1f       	adc	r21, r25
    1abe:	6a 1f       	adc	r22, r26
    1ac0:	7b 1f       	adc	r23, r27
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	9d d8       	rcall	.-3782   	; 0xc00 <move_window>
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	32 c0       	rjmp	.+100    	; 0x1b2e <put_fat+0x1fa>
    1aca:	cc 0c       	add	r12, r12
    1acc:	dd 1c       	adc	r13, r13
    1ace:	ee 1c       	adc	r14, r14
    1ad0:	ff 1c       	adc	r15, r15
    1ad2:	cc 0c       	add	r12, r12
    1ad4:	dd 1c       	adc	r13, r13
    1ad6:	ee 1c       	adc	r14, r14
    1ad8:	ff 1c       	adc	r15, r15
    1ada:	2c ef       	ldi	r18, 0xFC	; 252
    1adc:	c2 22       	and	r12, r18
    1ade:	21 e0       	ldi	r18, 0x01	; 1
    1ae0:	d2 22       	and	r13, r18
    1ae2:	ee 24       	eor	r14, r14
    1ae4:	ff 24       	eor	r15, r15
    1ae6:	f6 01       	movw	r30, r12
    1ae8:	be 96       	adiw	r30, 0x2e	; 46
    1aea:	ec 0f       	add	r30, r28
    1aec:	fd 1f       	adc	r31, r29
    1aee:	43 81       	ldd	r20, Z+3	; 0x03
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	74 2f       	mov	r23, r20
    1af8:	66 27       	eor	r22, r22
    1afa:	55 27       	eor	r21, r21
    1afc:	44 27       	eor	r20, r20
    1afe:	de 01       	movw	r26, r28
    1b00:	ac 0d       	add	r26, r12
    1b02:	bd 1d       	adc	r27, r13
    1b04:	44 27       	eor	r20, r20
    1b06:	55 27       	eor	r21, r21
    1b08:	66 27       	eor	r22, r22
    1b0a:	70 7f       	andi	r23, 0xF0	; 240
    1b0c:	44 2a       	or	r4, r20
    1b0e:	55 2a       	or	r5, r21
    1b10:	66 2a       	or	r6, r22
    1b12:	77 2a       	or	r7, r23
    1b14:	9e 96       	adiw	r26, 0x2e	; 46
    1b16:	4c 92       	st	X, r4
    1b18:	51 82       	std	Z+1, r5	; 0x01
    1b1a:	62 82       	std	Z+2, r6	; 0x02
    1b1c:	73 82       	std	Z+3, r7	; 0x03
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	9c 83       	std	Y+4, r25	; 0x04
    1b22:	05 c0       	rjmp	.+10     	; 0x1b2e <put_fat+0x1fa>
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <put_fat+0x1fa>
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <put_fat+0x1fa>
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	ff 90       	pop	r15
    1b38:	ef 90       	pop	r14
    1b3a:	df 90       	pop	r13
    1b3c:	cf 90       	pop	r12
    1b3e:	bf 90       	pop	r11
    1b40:	af 90       	pop	r10
    1b42:	9f 90       	pop	r9
    1b44:	8f 90       	pop	r8
    1b46:	7f 90       	pop	r7
    1b48:	6f 90       	pop	r6
    1b4a:	5f 90       	pop	r5
    1b4c:	4f 90       	pop	r4
    1b4e:	08 95       	ret

00001b50 <create_chain>:
    1b50:	2f 92       	push	r2
    1b52:	3f 92       	push	r3
    1b54:	4f 92       	push	r4
    1b56:	5f 92       	push	r5
    1b58:	6f 92       	push	r6
    1b5a:	7f 92       	push	r7
    1b5c:	8f 92       	push	r8
    1b5e:	9f 92       	push	r9
    1b60:	af 92       	push	r10
    1b62:	bf 92       	push	r11
    1b64:	cf 92       	push	r12
    1b66:	df 92       	push	r13
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	ec 01       	movw	r28, r24
    1b76:	2a 01       	movw	r4, r20
    1b78:	3b 01       	movw	r6, r22
    1b7a:	41 15       	cp	r20, r1
    1b7c:	51 05       	cpc	r21, r1
    1b7e:	61 05       	cpc	r22, r1
    1b80:	71 05       	cpc	r23, r1
    1b82:	99 f4       	brne	.+38     	; 0x1baa <create_chain+0x5a>
    1b84:	8a 84       	ldd	r8, Y+10	; 0x0a
    1b86:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b88:	ac 84       	ldd	r10, Y+12	; 0x0c
    1b8a:	bd 84       	ldd	r11, Y+13	; 0x0d
    1b8c:	81 14       	cp	r8, r1
    1b8e:	91 04       	cpc	r9, r1
    1b90:	a1 04       	cpc	r10, r1
    1b92:	b1 04       	cpc	r11, r1
    1b94:	29 f1       	breq	.+74     	; 0x1be0 <create_chain+0x90>
    1b96:	8a 89       	ldd	r24, Y+18	; 0x12
    1b98:	9b 89       	ldd	r25, Y+19	; 0x13
    1b9a:	ac 89       	ldd	r26, Y+20	; 0x14
    1b9c:	bd 89       	ldd	r27, Y+21	; 0x15
    1b9e:	88 16       	cp	r8, r24
    1ba0:	99 06       	cpc	r9, r25
    1ba2:	aa 06       	cpc	r10, r26
    1ba4:	bb 06       	cpc	r11, r27
    1ba6:	08 f5       	brcc	.+66     	; 0x1bea <create_chain+0x9a>
    1ba8:	24 c0       	rjmp	.+72     	; 0x1bf2 <create_chain+0xa2>
    1baa:	08 dd       	rcall	.-1520   	; 0x15bc <get_fat>
    1bac:	62 30       	cpi	r22, 0x02	; 2
    1bae:	71 05       	cpc	r23, r1
    1bb0:	81 05       	cpc	r24, r1
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	08 f4       	brcc	.+2      	; 0x1bb8 <create_chain+0x68>
    1bb6:	9b c0       	rjmp	.+310    	; 0x1cee <create_chain+0x19e>
    1bb8:	6f 3f       	cpi	r22, 0xFF	; 255
    1bba:	2f ef       	ldi	r18, 0xFF	; 255
    1bbc:	72 07       	cpc	r23, r18
    1bbe:	82 07       	cpc	r24, r18
    1bc0:	92 07       	cpc	r25, r18
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <create_chain+0x76>
    1bc4:	99 c0       	rjmp	.+306    	; 0x1cf8 <create_chain+0x1a8>
    1bc6:	0a 89       	ldd	r16, Y+18	; 0x12
    1bc8:	1b 89       	ldd	r17, Y+19	; 0x13
    1bca:	2c 89       	ldd	r18, Y+20	; 0x14
    1bcc:	3d 89       	ldd	r19, Y+21	; 0x15
    1bce:	60 17       	cp	r22, r16
    1bd0:	71 07       	cpc	r23, r17
    1bd2:	82 07       	cpc	r24, r18
    1bd4:	93 07       	cpc	r25, r19
    1bd6:	08 f4       	brcc	.+2      	; 0x1bda <create_chain+0x8a>
    1bd8:	93 c0       	rjmp	.+294    	; 0x1d00 <create_chain+0x1b0>
    1bda:	53 01       	movw	r10, r6
    1bdc:	42 01       	movw	r8, r4
    1bde:	09 c0       	rjmp	.+18     	; 0x1bf2 <create_chain+0xa2>
    1be0:	81 2c       	mov	r8, r1
    1be2:	91 2c       	mov	r9, r1
    1be4:	54 01       	movw	r10, r8
    1be6:	83 94       	inc	r8
    1be8:	04 c0       	rjmp	.+8      	; 0x1bf2 <create_chain+0xa2>
    1bea:	81 2c       	mov	r8, r1
    1bec:	91 2c       	mov	r9, r1
    1bee:	54 01       	movw	r10, r8
    1bf0:	83 94       	inc	r8
    1bf2:	75 01       	movw	r14, r10
    1bf4:	64 01       	movw	r12, r8
    1bf6:	68 94       	set
    1bf8:	22 24       	eor	r2, r2
    1bfa:	21 f8       	bld	r2, 1
    1bfc:	31 2c       	mov	r3, r1
    1bfe:	00 e0       	ldi	r16, 0x00	; 0
    1c00:	10 e0       	ldi	r17, 0x00	; 0
    1c02:	8f ef       	ldi	r24, 0xFF	; 255
    1c04:	c8 1a       	sub	r12, r24
    1c06:	d8 0a       	sbc	r13, r24
    1c08:	e8 0a       	sbc	r14, r24
    1c0a:	f8 0a       	sbc	r15, r24
    1c0c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c0e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c10:	ac 89       	ldd	r26, Y+20	; 0x14
    1c12:	bd 89       	ldd	r27, Y+21	; 0x15
    1c14:	c8 16       	cp	r12, r24
    1c16:	d9 06       	cpc	r13, r25
    1c18:	ea 06       	cpc	r14, r26
    1c1a:	fb 06       	cpc	r15, r27
    1c1c:	58 f0       	brcs	.+22     	; 0x1c34 <create_chain+0xe4>
    1c1e:	22 e0       	ldi	r18, 0x02	; 2
    1c20:	82 16       	cp	r8, r18
    1c22:	91 04       	cpc	r9, r1
    1c24:	a1 04       	cpc	r10, r1
    1c26:	b1 04       	cpc	r11, r1
    1c28:	08 f4       	brcc	.+2      	; 0x1c2c <create_chain+0xdc>
    1c2a:	6e c0       	rjmp	.+220    	; 0x1d08 <create_chain+0x1b8>
    1c2c:	c2 2c       	mov	r12, r2
    1c2e:	d3 2c       	mov	r13, r3
    1c30:	e0 2e       	mov	r14, r16
    1c32:	f1 2e       	mov	r15, r17
    1c34:	b7 01       	movw	r22, r14
    1c36:	a6 01       	movw	r20, r12
    1c38:	ce 01       	movw	r24, r28
    1c3a:	c0 dc       	rcall	.-1664   	; 0x15bc <get_fat>
    1c3c:	61 15       	cp	r22, r1
    1c3e:	71 05       	cpc	r23, r1
    1c40:	81 05       	cpc	r24, r1
    1c42:	91 05       	cpc	r25, r1
    1c44:	99 f0       	breq	.+38     	; 0x1c6c <create_chain+0x11c>
    1c46:	6f 3f       	cpi	r22, 0xFF	; 255
    1c48:	2f ef       	ldi	r18, 0xFF	; 255
    1c4a:	72 07       	cpc	r23, r18
    1c4c:	82 07       	cpc	r24, r18
    1c4e:	92 07       	cpc	r25, r18
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <create_chain+0x104>
    1c52:	5f c0       	rjmp	.+190    	; 0x1d12 <create_chain+0x1c2>
    1c54:	61 30       	cpi	r22, 0x01	; 1
    1c56:	71 05       	cpc	r23, r1
    1c58:	81 05       	cpc	r24, r1
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <create_chain+0x110>
    1c5e:	5d c0       	rjmp	.+186    	; 0x1d1a <create_chain+0x1ca>
    1c60:	c8 14       	cp	r12, r8
    1c62:	d9 04       	cpc	r13, r9
    1c64:	ea 04       	cpc	r14, r10
    1c66:	fb 04       	cpc	r15, r11
    1c68:	61 f6       	brne	.-104    	; 0x1c02 <create_chain+0xb2>
    1c6a:	5b c0       	rjmp	.+182    	; 0x1d22 <create_chain+0x1d2>
    1c6c:	8c 2c       	mov	r8, r12
    1c6e:	9d 2c       	mov	r9, r13
    1c70:	ae 2c       	mov	r10, r14
    1c72:	bf 2c       	mov	r11, r15
    1c74:	0f ef       	ldi	r16, 0xFF	; 255
    1c76:	1f ef       	ldi	r17, 0xFF	; 255
    1c78:	2f ef       	ldi	r18, 0xFF	; 255
    1c7a:	3f e0       	ldi	r19, 0x0F	; 15
    1c7c:	b7 01       	movw	r22, r14
    1c7e:	a6 01       	movw	r20, r12
    1c80:	ce 01       	movw	r24, r28
    1c82:	58 de       	rcall	.-848    	; 0x1934 <put_fat>
    1c84:	81 11       	cpse	r24, r1
    1c86:	2c c0       	rjmp	.+88     	; 0x1ce0 <create_chain+0x190>
    1c88:	41 14       	cp	r4, r1
    1c8a:	51 04       	cpc	r5, r1
    1c8c:	61 04       	cpc	r6, r1
    1c8e:	71 04       	cpc	r7, r1
    1c90:	51 f0       	breq	.+20     	; 0x1ca6 <create_chain+0x156>
    1c92:	0c 2d       	mov	r16, r12
    1c94:	1d 2d       	mov	r17, r13
    1c96:	2e 2d       	mov	r18, r14
    1c98:	3f 2d       	mov	r19, r15
    1c9a:	b3 01       	movw	r22, r6
    1c9c:	a2 01       	movw	r20, r4
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	49 de       	rcall	.-878    	; 0x1934 <put_fat>
    1ca2:	81 11       	cpse	r24, r1
    1ca4:	1d c0       	rjmp	.+58     	; 0x1ce0 <create_chain+0x190>
    1ca6:	8a 86       	std	Y+10, r8	; 0x0a
    1ca8:	9b 86       	std	Y+11, r9	; 0x0b
    1caa:	ac 86       	std	Y+12, r10	; 0x0c
    1cac:	bd 86       	std	Y+13, r11	; 0x0d
    1cae:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cb0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cb2:	a8 89       	ldd	r26, Y+16	; 0x10
    1cb4:	b9 89       	ldd	r27, Y+17	; 0x11
    1cb6:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb8:	2f ef       	ldi	r18, 0xFF	; 255
    1cba:	92 07       	cpc	r25, r18
    1cbc:	a2 07       	cpc	r26, r18
    1cbe:	b2 07       	cpc	r27, r18
    1cc0:	a9 f1       	breq	.+106    	; 0x1d2c <create_chain+0x1dc>
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	a1 09       	sbc	r26, r1
    1cc6:	b1 09       	sbc	r27, r1
    1cc8:	8e 87       	std	Y+14, r24	; 0x0e
    1cca:	9f 87       	std	Y+15, r25	; 0x0f
    1ccc:	a8 8b       	std	Y+16, r26	; 0x10
    1cce:	b9 8b       	std	Y+17, r27	; 0x11
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	81 60       	ori	r24, 0x01	; 1
    1cd4:	8d 83       	std	Y+5, r24	; 0x05
    1cd6:	4c 2d       	mov	r20, r12
    1cd8:	3d 2d       	mov	r19, r13
    1cda:	2e 2d       	mov	r18, r14
    1cdc:	9f 2d       	mov	r25, r15
    1cde:	2f c0       	rjmp	.+94     	; 0x1d3e <create_chain+0x1ee>
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	49 f5       	brne	.+82     	; 0x1d36 <create_chain+0x1e6>
    1ce4:	4f ef       	ldi	r20, 0xFF	; 255
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	2f ef       	ldi	r18, 0xFF	; 255
    1cea:	9f ef       	ldi	r25, 0xFF	; 255
    1cec:	28 c0       	rjmp	.+80     	; 0x1d3e <create_chain+0x1ee>
    1cee:	41 e0       	ldi	r20, 0x01	; 1
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	23 c0       	rjmp	.+70     	; 0x1d3e <create_chain+0x1ee>
    1cf8:	46 2f       	mov	r20, r22
    1cfa:	37 2f       	mov	r19, r23
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	1f c0       	rjmp	.+62     	; 0x1d3e <create_chain+0x1ee>
    1d00:	46 2f       	mov	r20, r22
    1d02:	37 2f       	mov	r19, r23
    1d04:	28 2f       	mov	r18, r24
    1d06:	1b c0       	rjmp	.+54     	; 0x1d3e <create_chain+0x1ee>
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	16 c0       	rjmp	.+44     	; 0x1d3e <create_chain+0x1ee>
    1d12:	46 2f       	mov	r20, r22
    1d14:	37 2f       	mov	r19, r23
    1d16:	28 2f       	mov	r18, r24
    1d18:	12 c0       	rjmp	.+36     	; 0x1d3e <create_chain+0x1ee>
    1d1a:	46 2f       	mov	r20, r22
    1d1c:	37 2f       	mov	r19, r23
    1d1e:	28 2f       	mov	r18, r24
    1d20:	0e c0       	rjmp	.+28     	; 0x1d3e <create_chain+0x1ee>
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	09 c0       	rjmp	.+18     	; 0x1d3e <create_chain+0x1ee>
    1d2c:	4c 2d       	mov	r20, r12
    1d2e:	3d 2d       	mov	r19, r13
    1d30:	2e 2d       	mov	r18, r14
    1d32:	9f 2d       	mov	r25, r15
    1d34:	04 c0       	rjmp	.+8      	; 0x1d3e <create_chain+0x1ee>
    1d36:	41 e0       	ldi	r20, 0x01	; 1
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	64 2f       	mov	r22, r20
    1d40:	73 2f       	mov	r23, r19
    1d42:	82 2f       	mov	r24, r18
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	ff 90       	pop	r15
    1d4e:	ef 90       	pop	r14
    1d50:	df 90       	pop	r13
    1d52:	cf 90       	pop	r12
    1d54:	bf 90       	pop	r11
    1d56:	af 90       	pop	r10
    1d58:	9f 90       	pop	r9
    1d5a:	8f 90       	pop	r8
    1d5c:	7f 90       	pop	r7
    1d5e:	6f 90       	pop	r6
    1d60:	5f 90       	pop	r5
    1d62:	4f 90       	pop	r4
    1d64:	3f 90       	pop	r3
    1d66:	2f 90       	pop	r2
    1d68:	08 95       	ret

00001d6a <dir_next>:
    1d6a:	7f 92       	push	r7
    1d6c:	8f 92       	push	r8
    1d6e:	9f 92       	push	r9
    1d70:	af 92       	push	r10
    1d72:	bf 92       	push	r11
    1d74:	cf 92       	push	r12
    1d76:	df 92       	push	r13
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	ec 01       	movw	r28, r24
    1d86:	7b 01       	movw	r14, r22
    1d88:	0c 81       	ldd	r16, Y+4	; 0x04
    1d8a:	1d 81       	ldd	r17, Y+5	; 0x05
    1d8c:	0f 5f       	subi	r16, 0xFF	; 255
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	01 15       	cp	r16, r1
    1d92:	11 05       	cpc	r17, r1
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <dir_next+0x2e>
    1d96:	e4 c0       	rjmp	.+456    	; 0x1f60 <dir_next+0x1f6>
    1d98:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d9c:	a8 89       	ldd	r26, Y+16	; 0x10
    1d9e:	b9 89       	ldd	r27, Y+17	; 0x11
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	a1 05       	cpc	r26, r1
    1da4:	b1 05       	cpc	r27, r1
    1da6:	09 f4       	brne	.+2      	; 0x1daa <dir_next+0x40>
    1da8:	dd c0       	rjmp	.+442    	; 0x1f64 <dir_next+0x1fa>
    1daa:	68 01       	movw	r12, r16
    1dac:	2f e0       	ldi	r18, 0x0F	; 15
    1dae:	c2 22       	and	r12, r18
    1db0:	dd 24       	eor	r13, r13
    1db2:	c1 14       	cp	r12, r1
    1db4:	d1 04       	cpc	r13, r1
    1db6:	09 f0       	breq	.+2      	; 0x1dba <dir_next+0x50>
    1db8:	bc c0       	rjmp	.+376    	; 0x1f32 <dir_next+0x1c8>
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	a1 1d       	adc	r26, r1
    1dbe:	b1 1d       	adc	r27, r1
    1dc0:	8e 87       	std	Y+14, r24	; 0x0e
    1dc2:	9f 87       	std	Y+15, r25	; 0x0f
    1dc4:	a8 8b       	std	Y+16, r26	; 0x10
    1dc6:	b9 8b       	std	Y+17, r27	; 0x11
    1dc8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1dca:	5b 85       	ldd	r21, Y+11	; 0x0b
    1dcc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dce:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dd0:	41 15       	cp	r20, r1
    1dd2:	51 05       	cpc	r21, r1
    1dd4:	61 05       	cpc	r22, r1
    1dd6:	71 05       	cpc	r23, r1
    1dd8:	49 f4       	brne	.+18     	; 0x1dec <dir_next+0x82>
    1dda:	e8 81       	ld	r30, Y
    1ddc:	f9 81       	ldd	r31, Y+1	; 0x01
    1dde:	80 85       	ldd	r24, Z+8	; 0x08
    1de0:	91 85       	ldd	r25, Z+9	; 0x09
    1de2:	08 17       	cp	r16, r24
    1de4:	19 07       	cpc	r17, r25
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <dir_next+0x80>
    1de8:	bf c0       	rjmp	.+382    	; 0x1f68 <dir_next+0x1fe>
    1dea:	a3 c0       	rjmp	.+326    	; 0x1f32 <dir_next+0x1c8>
    1dec:	e8 81       	ld	r30, Y
    1dee:	f9 81       	ldd	r31, Y+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	98 01       	movw	r18, r16
    1df8:	32 95       	swap	r19
    1dfa:	22 95       	swap	r18
    1dfc:	2f 70       	andi	r18, 0x0F	; 15
    1dfe:	23 27       	eor	r18, r19
    1e00:	3f 70       	andi	r19, 0x0F	; 15
    1e02:	23 27       	eor	r18, r19
    1e04:	82 23       	and	r24, r18
    1e06:	93 23       	and	r25, r19
    1e08:	89 2b       	or	r24, r25
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <dir_next+0xa4>
    1e0c:	92 c0       	rjmp	.+292    	; 0x1f32 <dir_next+0x1c8>
    1e0e:	cf 01       	movw	r24, r30
    1e10:	d5 db       	rcall	.-2134   	; 0x15bc <get_fat>
    1e12:	4b 01       	movw	r8, r22
    1e14:	5c 01       	movw	r10, r24
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	88 16       	cp	r8, r24
    1e1a:	91 04       	cpc	r9, r1
    1e1c:	a1 04       	cpc	r10, r1
    1e1e:	b1 04       	cpc	r11, r1
    1e20:	08 f4       	brcc	.+2      	; 0x1e24 <dir_next+0xba>
    1e22:	a4 c0       	rjmp	.+328    	; 0x1f6c <dir_next+0x202>
    1e24:	ef ef       	ldi	r30, 0xFF	; 255
    1e26:	8e 16       	cp	r8, r30
    1e28:	9e 06       	cpc	r9, r30
    1e2a:	ae 06       	cpc	r10, r30
    1e2c:	be 06       	cpc	r11, r30
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <dir_next+0xc8>
    1e30:	9f c0       	rjmp	.+318    	; 0x1f70 <dir_next+0x206>
    1e32:	e8 81       	ld	r30, Y
    1e34:	f9 81       	ldd	r31, Y+1	; 0x01
    1e36:	82 89       	ldd	r24, Z+18	; 0x12
    1e38:	93 89       	ldd	r25, Z+19	; 0x13
    1e3a:	a4 89       	ldd	r26, Z+20	; 0x14
    1e3c:	b5 89       	ldd	r27, Z+21	; 0x15
    1e3e:	88 16       	cp	r8, r24
    1e40:	99 06       	cpc	r9, r25
    1e42:	aa 06       	cpc	r10, r26
    1e44:	bb 06       	cpc	r11, r27
    1e46:	08 f4       	brcc	.+2      	; 0x1e4a <dir_next+0xe0>
    1e48:	67 c0       	rjmp	.+206    	; 0x1f18 <dir_next+0x1ae>
    1e4a:	ef 28       	or	r14, r15
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <dir_next+0xe6>
    1e4e:	92 c0       	rjmp	.+292    	; 0x1f74 <dir_next+0x20a>
    1e50:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e52:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e54:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e56:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e58:	cf 01       	movw	r24, r30
    1e5a:	7a de       	rcall	.-780    	; 0x1b50 <create_chain>
    1e5c:	4b 01       	movw	r8, r22
    1e5e:	5c 01       	movw	r10, r24
    1e60:	61 15       	cp	r22, r1
    1e62:	71 05       	cpc	r23, r1
    1e64:	81 05       	cpc	r24, r1
    1e66:	91 05       	cpc	r25, r1
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <dir_next+0x102>
    1e6a:	86 c0       	rjmp	.+268    	; 0x1f78 <dir_next+0x20e>
    1e6c:	61 30       	cpi	r22, 0x01	; 1
    1e6e:	71 05       	cpc	r23, r1
    1e70:	81 05       	cpc	r24, r1
    1e72:	91 05       	cpc	r25, r1
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <dir_next+0x10e>
    1e76:	82 c0       	rjmp	.+260    	; 0x1f7c <dir_next+0x212>
    1e78:	6f 3f       	cpi	r22, 0xFF	; 255
    1e7a:	2f ef       	ldi	r18, 0xFF	; 255
    1e7c:	72 07       	cpc	r23, r18
    1e7e:	82 07       	cpc	r24, r18
    1e80:	92 07       	cpc	r25, r18
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <dir_next+0x11c>
    1e84:	7d c0       	rjmp	.+250    	; 0x1f80 <dir_next+0x216>
    1e86:	88 81       	ld	r24, Y
    1e88:	99 81       	ldd	r25, Y+1	; 0x01
    1e8a:	0e 94 97 05 	call	0xb2e	; 0xb2e <sync_window>
    1e8e:	81 11       	cpse	r24, r1
    1e90:	79 c0       	rjmp	.+242    	; 0x1f84 <dir_next+0x21a>
    1e92:	88 81       	ld	r24, Y
    1e94:	99 81       	ldd	r25, Y+1	; 0x01
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	52 e0       	ldi	r21, 0x02	; 2
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	8e 96       	adiw	r24, 0x2e	; 46
    1ea0:	0e 94 37 05 	call	0xa6e	; 0xa6e <mem_set>
    1ea4:	e8 80       	ld	r14, Y
    1ea6:	f9 80       	ldd	r15, Y+1	; 0x01
    1ea8:	b5 01       	movw	r22, r10
    1eaa:	a4 01       	movw	r20, r8
    1eac:	c7 01       	movw	r24, r14
    1eae:	58 db       	rcall	.-2384   	; 0x1560 <clust2sect>
    1eb0:	f7 01       	movw	r30, r14
    1eb2:	62 a7       	std	Z+42, r22	; 0x2a
    1eb4:	73 a7       	std	Z+43, r23	; 0x2b
    1eb6:	84 a7       	std	Z+44, r24	; 0x2c
    1eb8:	95 a7       	std	Z+45, r25	; 0x2d
    1eba:	e1 2c       	mov	r14, r1
    1ebc:	f1 2c       	mov	r15, r1
    1ebe:	77 24       	eor	r7, r7
    1ec0:	73 94       	inc	r7
    1ec2:	17 c0       	rjmp	.+46     	; 0x1ef2 <dir_next+0x188>
    1ec4:	74 82       	std	Z+4, r7	; 0x04
    1ec6:	88 81       	ld	r24, Y
    1ec8:	99 81       	ldd	r25, Y+1	; 0x01
    1eca:	0e 94 97 05 	call	0xb2e	; 0xb2e <sync_window>
    1ece:	81 11       	cpse	r24, r1
    1ed0:	5b c0       	rjmp	.+182    	; 0x1f88 <dir_next+0x21e>
    1ed2:	e8 81       	ld	r30, Y
    1ed4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ed6:	82 a5       	ldd	r24, Z+42	; 0x2a
    1ed8:	93 a5       	ldd	r25, Z+43	; 0x2b
    1eda:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1edc:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	a1 1d       	adc	r26, r1
    1ee2:	b1 1d       	adc	r27, r1
    1ee4:	82 a7       	std	Z+42, r24	; 0x2a
    1ee6:	93 a7       	std	Z+43, r25	; 0x2b
    1ee8:	a4 a7       	std	Z+44, r26	; 0x2c
    1eea:	b5 a7       	std	Z+45, r27	; 0x2d
    1eec:	ff ef       	ldi	r31, 0xFF	; 255
    1eee:	ef 1a       	sub	r14, r31
    1ef0:	ff 0a       	sbc	r15, r31
    1ef2:	e8 81       	ld	r30, Y
    1ef4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ef6:	82 81       	ldd	r24, Z+2	; 0x02
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	e8 16       	cp	r14, r24
    1efc:	f9 06       	cpc	r15, r25
    1efe:	10 f3       	brcs	.-60     	; 0x1ec4 <dir_next+0x15a>
    1f00:	82 a5       	ldd	r24, Z+42	; 0x2a
    1f02:	93 a5       	ldd	r25, Z+43	; 0x2b
    1f04:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1f06:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1f08:	8e 19       	sub	r24, r14
    1f0a:	9f 09       	sbc	r25, r15
    1f0c:	a1 09       	sbc	r26, r1
    1f0e:	b1 09       	sbc	r27, r1
    1f10:	82 a7       	std	Z+42, r24	; 0x2a
    1f12:	93 a7       	std	Z+43, r25	; 0x2b
    1f14:	a4 a7       	std	Z+44, r26	; 0x2c
    1f16:	b5 a7       	std	Z+45, r27	; 0x2d
    1f18:	8a 86       	std	Y+10, r8	; 0x0a
    1f1a:	9b 86       	std	Y+11, r9	; 0x0b
    1f1c:	ac 86       	std	Y+12, r10	; 0x0c
    1f1e:	bd 86       	std	Y+13, r11	; 0x0d
    1f20:	b5 01       	movw	r22, r10
    1f22:	a4 01       	movw	r20, r8
    1f24:	88 81       	ld	r24, Y
    1f26:	99 81       	ldd	r25, Y+1	; 0x01
    1f28:	1b db       	rcall	.-2506   	; 0x1560 <clust2sect>
    1f2a:	6e 87       	std	Y+14, r22	; 0x0e
    1f2c:	7f 87       	std	Y+15, r23	; 0x0f
    1f2e:	88 8b       	std	Y+16, r24	; 0x10
    1f30:	99 8b       	std	Y+17, r25	; 0x11
    1f32:	1d 83       	std	Y+5, r17	; 0x05
    1f34:	0c 83       	std	Y+4, r16	; 0x04
    1f36:	cc 0c       	add	r12, r12
    1f38:	dd 1c       	adc	r13, r13
    1f3a:	cc 0c       	add	r12, r12
    1f3c:	dd 1c       	adc	r13, r13
    1f3e:	cc 0c       	add	r12, r12
    1f40:	dd 1c       	adc	r13, r13
    1f42:	cc 0c       	add	r12, r12
    1f44:	dd 1c       	adc	r13, r13
    1f46:	cc 0c       	add	r12, r12
    1f48:	dd 1c       	adc	r13, r13
    1f4a:	2e e2       	ldi	r18, 0x2E	; 46
    1f4c:	c2 0e       	add	r12, r18
    1f4e:	d1 1c       	adc	r13, r1
    1f50:	88 81       	ld	r24, Y
    1f52:	99 81       	ldd	r25, Y+1	; 0x01
    1f54:	c8 0e       	add	r12, r24
    1f56:	d9 1e       	adc	r13, r25
    1f58:	db 8a       	std	Y+19, r13	; 0x13
    1f5a:	ca 8a       	std	Y+18, r12	; 0x12
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	15 c0       	rjmp	.+42     	; 0x1f8a <dir_next+0x220>
    1f60:	84 e0       	ldi	r24, 0x04	; 4
    1f62:	13 c0       	rjmp	.+38     	; 0x1f8a <dir_next+0x220>
    1f64:	84 e0       	ldi	r24, 0x04	; 4
    1f66:	11 c0       	rjmp	.+34     	; 0x1f8a <dir_next+0x220>
    1f68:	84 e0       	ldi	r24, 0x04	; 4
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <dir_next+0x220>
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	0d c0       	rjmp	.+26     	; 0x1f8a <dir_next+0x220>
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	0b c0       	rjmp	.+22     	; 0x1f8a <dir_next+0x220>
    1f74:	84 e0       	ldi	r24, 0x04	; 4
    1f76:	09 c0       	rjmp	.+18     	; 0x1f8a <dir_next+0x220>
    1f78:	87 e0       	ldi	r24, 0x07	; 7
    1f7a:	07 c0       	rjmp	.+14     	; 0x1f8a <dir_next+0x220>
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	05 c0       	rjmp	.+10     	; 0x1f8a <dir_next+0x220>
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <dir_next+0x220>
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	01 c0       	rjmp	.+2      	; 0x1f8a <dir_next+0x220>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	ff 90       	pop	r15
    1f94:	ef 90       	pop	r14
    1f96:	df 90       	pop	r13
    1f98:	cf 90       	pop	r12
    1f9a:	bf 90       	pop	r11
    1f9c:	af 90       	pop	r10
    1f9e:	9f 90       	pop	r9
    1fa0:	8f 90       	pop	r8
    1fa2:	7f 90       	pop	r7
    1fa4:	08 95       	ret

00001fa6 <follow_path>:
    1fa6:	2f 92       	push	r2
    1fa8:	3f 92       	push	r3
    1faa:	4f 92       	push	r4
    1fac:	5f 92       	push	r5
    1fae:	6f 92       	push	r6
    1fb0:	7f 92       	push	r7
    1fb2:	8f 92       	push	r8
    1fb4:	9f 92       	push	r9
    1fb6:	af 92       	push	r10
    1fb8:	bf 92       	push	r11
    1fba:	cf 92       	push	r12
    1fbc:	df 92       	push	r13
    1fbe:	ef 92       	push	r14
    1fc0:	ff 92       	push	r15
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <follow_path+0x26>
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <follow_path+0x28>
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	7c 01       	movw	r14, r24
    1fd4:	8b 01       	movw	r16, r22
    1fd6:	db 01       	movw	r26, r22
    1fd8:	8c 91       	ld	r24, X
    1fda:	8f 32       	cpi	r24, 0x2F	; 47
    1fdc:	11 f0       	breq	.+4      	; 0x1fe2 <follow_path+0x3c>
    1fde:	8c 35       	cpi	r24, 0x5C	; 92
    1fe0:	11 f4       	brne	.+4      	; 0x1fe6 <follow_path+0x40>
    1fe2:	0f 5f       	subi	r16, 0xFF	; 255
    1fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe6:	f7 01       	movw	r30, r14
    1fe8:	16 82       	std	Z+6, r1	; 0x06
    1fea:	17 82       	std	Z+7, r1	; 0x07
    1fec:	10 86       	std	Z+8, r1	; 0x08
    1fee:	11 86       	std	Z+9, r1	; 0x09
    1ff0:	d8 01       	movw	r26, r16
    1ff2:	8c 91       	ld	r24, X
    1ff4:	80 32       	cpi	r24, 0x20	; 32
    1ff6:	40 f4       	brcc	.+16     	; 0x2008 <follow_path+0x62>
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	c7 01       	movw	r24, r14
    1ffe:	df db       	rcall	.-2114   	; 0x17be <dir_sdi>
    2000:	f7 01       	movw	r30, r14
    2002:	13 8a       	std	Z+19, r1	; 0x13
    2004:	12 8a       	std	Z+18, r1	; 0x12
    2006:	4d c1       	rjmp	.+666    	; 0x22a2 <follow_path+0x2fc>
    2008:	0f 2e       	mov	r0, r31
    200a:	fb e0       	ldi	r31, 0x0B	; 11
    200c:	6f 2e       	mov	r6, r31
    200e:	f0 2d       	mov	r31, r0
    2010:	51 2c       	mov	r5, r1
    2012:	c1 2c       	mov	r12, r1
    2014:	d1 2c       	mov	r13, r1
    2016:	68 94       	set
    2018:	88 24       	eor	r8, r8
    201a:	83 f8       	bld	r8, 3
    201c:	71 2c       	mov	r7, r1
    201e:	b1 2c       	mov	r11, r1
    2020:	79 82       	std	Y+1, r7	; 0x01
    2022:	a5 2c       	mov	r10, r5
    2024:	17 01       	movw	r2, r14
    2026:	8a 82       	std	Y+2, r8	; 0x02
    2028:	46 2c       	mov	r4, r6
    202a:	f8 01       	movw	r30, r16
    202c:	8f 01       	movw	r16, r30
    202e:	81 91       	ld	r24, Z+
    2030:	8f 32       	cpi	r24, 0x2F	; 47
    2032:	e1 f3       	breq	.-8      	; 0x202c <follow_path+0x86>
    2034:	8c 35       	cpi	r24, 0x5C	; 92
    2036:	d1 f3       	breq	.-12     	; 0x202c <follow_path+0x86>
    2038:	d1 01       	movw	r26, r2
    203a:	54 96       	adiw	r26, 0x14	; 20
    203c:	ed 90       	ld	r14, X+
    203e:	fc 90       	ld	r15, X
    2040:	55 97       	sbiw	r26, 0x15	; 21
    2042:	46 2d       	mov	r20, r6
    2044:	55 2d       	mov	r21, r5
    2046:	60 e2       	ldi	r22, 0x20	; 32
    2048:	70 e0       	ldi	r23, 0x00	; 0
    204a:	c7 01       	movw	r24, r14
    204c:	0e 94 37 05 	call	0xa6e	; 0xa6e <mem_set>
    2050:	8c 2d       	mov	r24, r12
    2052:	9d 2d       	mov	r25, r13
    2054:	4c 2d       	mov	r20, r12
    2056:	5d 2d       	mov	r21, r13
    2058:	28 2d       	mov	r18, r8
    205a:	37 2d       	mov	r19, r7
    205c:	9b 2c       	mov	r9, r11
    205e:	3c 82       	std	Y+4, r3	; 0x04
    2060:	2b 82       	std	Y+3, r2	; 0x03
    2062:	ba 01       	movw	r22, r20
    2064:	6f 5f       	subi	r22, 0xFF	; 255
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	f8 01       	movw	r30, r16
    206a:	e4 0f       	add	r30, r20
    206c:	f5 1f       	adc	r31, r21
    206e:	a0 81       	ld	r26, Z
    2070:	a1 32       	cpi	r26, 0x21	; 33
    2072:	08 f4       	brcc	.+2      	; 0x2076 <follow_path+0xd0>
    2074:	f3 c0       	rjmp	.+486    	; 0x225c <follow_path+0x2b6>
    2076:	af 32       	cpi	r26, 0x2F	; 47
    2078:	09 f4       	brne	.+2      	; 0x207c <follow_path+0xd6>
    207a:	f7 c0       	rjmp	.+494    	; 0x226a <follow_path+0x2c4>
    207c:	ac 35       	cpi	r26, 0x5C	; 92
    207e:	09 f4       	brne	.+2      	; 0x2082 <follow_path+0xdc>
    2080:	f4 c0       	rjmp	.+488    	; 0x226a <follow_path+0x2c4>
    2082:	ae 32       	cpi	r26, 0x2E	; 46
    2084:	09 f4       	brne	.+2      	; 0x2088 <follow_path+0xe2>
    2086:	de c0       	rjmp	.+444    	; 0x2244 <follow_path+0x29e>
    2088:	82 17       	cp	r24, r18
    208a:	93 07       	cpc	r25, r19
    208c:	08 f0       	brcs	.+2      	; 0x2090 <follow_path+0xea>
    208e:	c8 c0       	rjmp	.+400    	; 0x2220 <follow_path+0x27a>
    2090:	08 c0       	rjmp	.+16     	; 0x20a2 <follow_path+0xfc>
    2092:	99 0c       	add	r9, r9
    2094:	99 0c       	add	r9, r9
    2096:	ab 01       	movw	r20, r22
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	99 81       	ldd	r25, Y+1	; 0x01
    209c:	24 2d       	mov	r18, r4
    209e:	3a 2d       	mov	r19, r10
    20a0:	e0 cf       	rjmp	.-64     	; 0x2062 <follow_path+0xbc>
    20a2:	aa 23       	and	r26, r26
    20a4:	1c f4       	brge	.+6      	; 0x20ac <follow_path+0x106>
    20a6:	b9 2d       	mov	r27, r9
    20a8:	b3 60       	ori	r27, 0x03	; 3
    20aa:	9b 2e       	mov	r9, r27
    20ac:	ef e7       	ldi	r30, 0x7F	; 127
    20ae:	ea 0f       	add	r30, r26
    20b0:	ef 31       	cpi	r30, 0x1F	; 31
    20b2:	20 f0       	brcs	.+8      	; 0x20bc <follow_path+0x116>
    20b4:	e0 e2       	ldi	r30, 0x20	; 32
    20b6:	ea 0f       	add	r30, r26
    20b8:	ed 31       	cpi	r30, 0x1D	; 29
    20ba:	08 f5       	brcc	.+66     	; 0x20fe <follow_path+0x158>
    20bc:	4e 5f       	subi	r20, 0xFE	; 254
    20be:	5f 4f       	sbci	r21, 0xFF	; 255
    20c0:	f8 01       	movw	r30, r16
    20c2:	e6 0f       	add	r30, r22
    20c4:	f7 1f       	adc	r31, r23
    20c6:	b0 81       	ld	r27, Z
    20c8:	60 ec       	ldi	r22, 0xC0	; 192
    20ca:	6b 0f       	add	r22, r27
    20cc:	6f 33       	cpi	r22, 0x3F	; 63
    20ce:	28 f0       	brcs	.+10     	; 0x20da <follow_path+0x134>
    20d0:	60 e8       	ldi	r22, 0x80	; 128
    20d2:	6b 0f       	add	r22, r27
    20d4:	6d 37       	cpi	r22, 0x7D	; 125
    20d6:	08 f0       	brcs	.+2      	; 0x20da <follow_path+0x134>
    20d8:	a5 c0       	rjmp	.+330    	; 0x2224 <follow_path+0x27e>
    20da:	b9 01       	movw	r22, r18
    20dc:	61 50       	subi	r22, 0x01	; 1
    20de:	71 09       	sbc	r23, r1
    20e0:	86 17       	cp	r24, r22
    20e2:	97 07       	cpc	r25, r23
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <follow_path+0x142>
    20e6:	a0 c0       	rjmp	.+320    	; 0x2228 <follow_path+0x282>
    20e8:	f7 01       	movw	r30, r14
    20ea:	e8 0f       	add	r30, r24
    20ec:	f9 1f       	adc	r31, r25
    20ee:	a0 83       	st	Z, r26
    20f0:	fc 01       	movw	r30, r24
    20f2:	31 96       	adiw	r30, 0x01	; 1
    20f4:	ee 0d       	add	r30, r14
    20f6:	ff 1d       	adc	r31, r15
    20f8:	02 96       	adiw	r24, 0x02	; 2
    20fa:	b0 83       	st	Z, r27
    20fc:	b2 cf       	rjmp	.-156    	; 0x2062 <follow_path+0xbc>
    20fe:	2a 2e       	mov	r2, r26
    2100:	31 2c       	mov	r3, r1
    2102:	e2 e2       	ldi	r30, 0x22	; 34
    2104:	2e 16       	cp	r2, r30
    2106:	31 04       	cpc	r3, r1
    2108:	09 f4       	brne	.+2      	; 0x210c <follow_path+0x166>
    210a:	90 c0       	rjmp	.+288    	; 0x222c <follow_path+0x286>
    210c:	ed e5       	ldi	r30, 0x5D	; 93
    210e:	f1 e0       	ldi	r31, 0x01	; 1
    2110:	a9 01       	movw	r20, r18
    2112:	21 91       	ld	r18, Z+
    2114:	22 23       	and	r18, r18
    2116:	09 f4       	brne	.+2      	; 0x211a <follow_path+0x174>
    2118:	9a c0       	rjmp	.+308    	; 0x224e <follow_path+0x2a8>
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	22 16       	cp	r2, r18
    211e:	33 06       	cpc	r3, r19
    2120:	c1 f7       	brne	.-16     	; 0x2112 <follow_path+0x16c>
    2122:	86 c0       	rjmp	.+268    	; 0x2230 <follow_path+0x28a>
    2124:	49 2d       	mov	r20, r9
    2126:	42 60       	ori	r20, 0x02	; 2
    2128:	94 2e       	mov	r9, r20
    212a:	08 c0       	rjmp	.+16     	; 0x213c <follow_path+0x196>
    212c:	4f e9       	ldi	r20, 0x9F	; 159
    212e:	4a 0f       	add	r20, r26
    2130:	4a 31       	cpi	r20, 0x1A	; 26
    2132:	20 f4       	brcc	.+8      	; 0x213c <follow_path+0x196>
    2134:	59 2d       	mov	r21, r9
    2136:	51 60       	ori	r21, 0x01	; 1
    2138:	95 2e       	mov	r9, r21
    213a:	a0 52       	subi	r26, 0x20	; 32
    213c:	f7 01       	movw	r30, r14
    213e:	e8 0f       	add	r30, r24
    2140:	f9 1f       	adc	r31, r25
    2142:	a0 83       	st	Z, r26
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	ab 01       	movw	r20, r22
    2148:	8c cf       	rjmp	.-232    	; 0x2062 <follow_path+0xbc>
    214a:	89 2b       	or	r24, r25
    214c:	09 f4       	brne	.+2      	; 0x2150 <follow_path+0x1aa>
    214e:	72 c0       	rjmp	.+228    	; 0x2234 <follow_path+0x28e>
    2150:	d7 01       	movw	r26, r14
    2152:	8c 91       	ld	r24, X
    2154:	85 3e       	cpi	r24, 0xE5	; 229
    2156:	11 f4       	brne	.+4      	; 0x215c <follow_path+0x1b6>
    2158:	e5 e0       	ldi	r30, 0x05	; 5
    215a:	ec 93       	st	X, r30
    215c:	28 30       	cpi	r18, 0x08	; 8
    215e:	31 05       	cpc	r19, r1
    2160:	19 f4       	brne	.+6      	; 0x2168 <follow_path+0x1c2>
    2162:	95 2e       	mov	r9, r21
    2164:	99 0c       	add	r9, r9
    2166:	99 0c       	add	r9, r9
    2168:	89 2d       	mov	r24, r9
    216a:	83 70       	andi	r24, 0x03	; 3
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	09 f4       	brne	.+2      	; 0x2172 <follow_path+0x1cc>
    2170:	40 61       	ori	r20, 0x10	; 16
    2172:	89 2d       	mov	r24, r9
    2174:	8c 70       	andi	r24, 0x0C	; 12
    2176:	84 30       	cpi	r24, 0x04	; 4
    2178:	09 f4       	brne	.+2      	; 0x217c <follow_path+0x1d6>
    217a:	48 60       	ori	r20, 0x08	; 8
    217c:	d7 01       	movw	r26, r14
    217e:	1b 96       	adiw	r26, 0x0b	; 11
    2180:	4c 93       	st	X, r20
    2182:	6c 2d       	mov	r22, r12
    2184:	7d 2d       	mov	r23, r13
    2186:	c1 01       	movw	r24, r2
    2188:	1a db       	rcall	.-2508   	; 0x17be <dir_sdi>
    218a:	81 11       	cpse	r24, r1
    218c:	75 c0       	rjmp	.+234    	; 0x2278 <follow_path+0x2d2>
    218e:	71 01       	movw	r14, r2
    2190:	f7 01       	movw	r30, r14
    2192:	46 85       	ldd	r20, Z+14	; 0x0e
    2194:	57 85       	ldd	r21, Z+15	; 0x0f
    2196:	60 89       	ldd	r22, Z+16	; 0x10
    2198:	71 89       	ldd	r23, Z+17	; 0x11
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	0e 94 00 06 	call	0xc00	; 0xc00 <move_window>
    21a2:	81 11       	cpse	r24, r1
    21a4:	6a c0       	rjmp	.+212    	; 0x227a <follow_path+0x2d4>
    21a6:	d7 01       	movw	r26, r14
    21a8:	52 96       	adiw	r26, 0x12	; 18
    21aa:	6d 91       	ld	r22, X+
    21ac:	7c 91       	ld	r23, X
    21ae:	53 97       	sbiw	r26, 0x13	; 19
    21b0:	fb 01       	movw	r30, r22
    21b2:	90 81       	ld	r25, Z
    21b4:	99 23       	and	r25, r25
    21b6:	09 f4       	brne	.+2      	; 0x21ba <follow_path+0x214>
    21b8:	69 c0       	rjmp	.+210    	; 0x228c <follow_path+0x2e6>
    21ba:	93 85       	ldd	r25, Z+11	; 0x0b
    21bc:	93 fd       	sbrc	r25, 3
    21be:	13 c0       	rjmp	.+38     	; 0x21e6 <follow_path+0x240>
    21c0:	54 96       	adiw	r26, 0x14	; 20
    21c2:	4d 91       	ld	r20, X+
    21c4:	5c 91       	ld	r21, X
    21c6:	55 97       	sbiw	r26, 0x15	; 21
    21c8:	da 01       	movw	r26, r20
    21ca:	9b 01       	movw	r18, r22
    21cc:	25 5f       	subi	r18, 0xF5	; 245
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	17 01       	movw	r2, r14
    21d2:	04 c0       	rjmp	.+8      	; 0x21dc <follow_path+0x236>
    21d4:	e2 17       	cp	r30, r18
    21d6:	f3 07       	cpc	r31, r19
    21d8:	09 f4       	brne	.+2      	; 0x21dc <follow_path+0x236>
    21da:	5f c0       	rjmp	.+190    	; 0x229a <follow_path+0x2f4>
    21dc:	f1 90       	ld	r15, Z+
    21de:	9d 91       	ld	r25, X+
    21e0:	f9 16       	cp	r15, r25
    21e2:	c1 f3       	breq	.-16     	; 0x21d4 <follow_path+0x22e>
    21e4:	71 01       	movw	r14, r2
    21e6:	6c 2d       	mov	r22, r12
    21e8:	7d 2d       	mov	r23, r13
    21ea:	c7 01       	movw	r24, r14
    21ec:	be dd       	rcall	.-1156   	; 0x1d6a <dir_next>
    21ee:	88 23       	and	r24, r24
    21f0:	79 f2       	breq	.-98     	; 0x2190 <follow_path+0x1ea>
    21f2:	43 c0       	rjmp	.+134    	; 0x227a <follow_path+0x2d4>
    21f4:	92 ff       	sbrs	r25, 2
    21f6:	20 c0       	rjmp	.+64     	; 0x2238 <follow_path+0x292>
    21f8:	84 e0       	ldi	r24, 0x04	; 4
    21fa:	53 c0       	rjmp	.+166    	; 0x22a2 <follow_path+0x2fc>
    21fc:	db 01       	movw	r26, r22
    21fe:	1b 96       	adiw	r26, 0x0b	; 11
    2200:	8c 91       	ld	r24, X
    2202:	84 ff       	sbrs	r24, 4
    2204:	1b c0       	rjmp	.+54     	; 0x223c <follow_path+0x296>
    2206:	f1 01       	movw	r30, r2
    2208:	80 81       	ld	r24, Z
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	0e 94 42 05 	call	0xa84	; 0xa84 <ld_clust>
    2210:	d1 01       	movw	r26, r2
    2212:	16 96       	adiw	r26, 0x06	; 6
    2214:	6d 93       	st	X+, r22
    2216:	7d 93       	st	X+, r23
    2218:	8d 93       	st	X+, r24
    221a:	9c 93       	st	X, r25
    221c:	19 97       	sbiw	r26, 0x09	; 9
    221e:	05 cf       	rjmp	.-502    	; 0x202a <follow_path+0x84>
    2220:	86 e0       	ldi	r24, 0x06	; 6
    2222:	3f c0       	rjmp	.+126    	; 0x22a2 <follow_path+0x2fc>
    2224:	86 e0       	ldi	r24, 0x06	; 6
    2226:	3d c0       	rjmp	.+122    	; 0x22a2 <follow_path+0x2fc>
    2228:	86 e0       	ldi	r24, 0x06	; 6
    222a:	3b c0       	rjmp	.+118    	; 0x22a2 <follow_path+0x2fc>
    222c:	86 e0       	ldi	r24, 0x06	; 6
    222e:	39 c0       	rjmp	.+114    	; 0x22a2 <follow_path+0x2fc>
    2230:	86 e0       	ldi	r24, 0x06	; 6
    2232:	37 c0       	rjmp	.+110    	; 0x22a2 <follow_path+0x2fc>
    2234:	86 e0       	ldi	r24, 0x06	; 6
    2236:	35 c0       	rjmp	.+106    	; 0x22a2 <follow_path+0x2fc>
    2238:	85 e0       	ldi	r24, 0x05	; 5
    223a:	33 c0       	rjmp	.+102    	; 0x22a2 <follow_path+0x2fc>
    223c:	85 e0       	ldi	r24, 0x05	; 5
    223e:	31 c0       	rjmp	.+98     	; 0x22a2 <follow_path+0x2fc>
    2240:	86 e0       	ldi	r24, 0x06	; 6
    2242:	2f c0       	rjmp	.+94     	; 0x22a2 <follow_path+0x2fc>
    2244:	28 30       	cpi	r18, 0x08	; 8
    2246:	31 05       	cpc	r19, r1
    2248:	09 f4       	brne	.+2      	; 0x224c <follow_path+0x2a6>
    224a:	23 cf       	rjmp	.-442    	; 0x2092 <follow_path+0xec>
    224c:	f9 cf       	rjmp	.-14     	; 0x2240 <follow_path+0x29a>
    224e:	9a 01       	movw	r18, r20
    2250:	4f eb       	ldi	r20, 0xBF	; 191
    2252:	4a 0f       	add	r20, r26
    2254:	4a 31       	cpi	r20, 0x1A	; 26
    2256:	08 f4       	brcc	.+2      	; 0x225a <follow_path+0x2b4>
    2258:	65 cf       	rjmp	.-310    	; 0x2124 <follow_path+0x17e>
    225a:	68 cf       	rjmp	.-304    	; 0x212c <follow_path+0x186>
    225c:	2b 80       	ldd	r2, Y+3	; 0x03
    225e:	3c 80       	ldd	r3, Y+4	; 0x04
    2260:	06 0f       	add	r16, r22
    2262:	17 1f       	adc	r17, r23
    2264:	59 2d       	mov	r21, r9
    2266:	44 e0       	ldi	r20, 0x04	; 4
    2268:	70 cf       	rjmp	.-288    	; 0x214a <follow_path+0x1a4>
    226a:	2b 80       	ldd	r2, Y+3	; 0x03
    226c:	3c 80       	ldd	r3, Y+4	; 0x04
    226e:	06 0f       	add	r16, r22
    2270:	17 1f       	adc	r17, r23
    2272:	59 2d       	mov	r21, r9
    2274:	4b 2d       	mov	r20, r11
    2276:	69 cf       	rjmp	.-302    	; 0x214a <follow_path+0x1a4>
    2278:	71 01       	movw	r14, r2
    227a:	d7 01       	movw	r26, r14
    227c:	54 96       	adiw	r26, 0x14	; 20
    227e:	ed 91       	ld	r30, X+
    2280:	fc 91       	ld	r31, X
    2282:	55 97       	sbiw	r26, 0x15	; 21
    2284:	93 85       	ldd	r25, Z+11	; 0x0b
    2286:	84 30       	cpi	r24, 0x04	; 4
    2288:	61 f4       	brne	.+24     	; 0x22a2 <follow_path+0x2fc>
    228a:	b4 cf       	rjmp	.-152    	; 0x21f4 <follow_path+0x24e>
    228c:	d7 01       	movw	r26, r14
    228e:	54 96       	adiw	r26, 0x14	; 20
    2290:	ed 91       	ld	r30, X+
    2292:	fc 91       	ld	r31, X
    2294:	55 97       	sbiw	r26, 0x15	; 21
    2296:	93 85       	ldd	r25, Z+11	; 0x0b
    2298:	ad cf       	rjmp	.-166    	; 0x21f4 <follow_path+0x24e>
    229a:	fa 01       	movw	r30, r20
    229c:	93 85       	ldd	r25, Z+11	; 0x0b
    229e:	92 ff       	sbrs	r25, 2
    22a0:	ad cf       	rjmp	.-166    	; 0x21fc <follow_path+0x256>
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	ff 90       	pop	r15
    22b4:	ef 90       	pop	r14
    22b6:	df 90       	pop	r13
    22b8:	cf 90       	pop	r12
    22ba:	bf 90       	pop	r11
    22bc:	af 90       	pop	r10
    22be:	9f 90       	pop	r9
    22c0:	8f 90       	pop	r8
    22c2:	7f 90       	pop	r7
    22c4:	6f 90       	pop	r6
    22c6:	5f 90       	pop	r5
    22c8:	4f 90       	pop	r4
    22ca:	3f 90       	pop	r3
    22cc:	2f 90       	pop	r2
    22ce:	08 95       	ret

000022d0 <dir_register>:
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	ec 01       	movw	r28, r24
    22d8:	60 e0       	ldi	r22, 0x00	; 0
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	70 da       	rcall	.-2848   	; 0x17be <dir_sdi>
    22de:	18 2f       	mov	r17, r24
    22e0:	81 11       	cpse	r24, r1
    22e2:	19 c0       	rjmp	.+50     	; 0x2316 <dir_register+0x46>
    22e4:	4e 85       	ldd	r20, Y+14	; 0x0e
    22e6:	5f 85       	ldd	r21, Y+15	; 0x0f
    22e8:	68 89       	ldd	r22, Y+16	; 0x10
    22ea:	79 89       	ldd	r23, Y+17	; 0x11
    22ec:	88 81       	ld	r24, Y
    22ee:	99 81       	ldd	r25, Y+1	; 0x01
    22f0:	0e 94 00 06 	call	0xc00	; 0xc00 <move_window>
    22f4:	18 2f       	mov	r17, r24
    22f6:	81 11       	cpse	r24, r1
    22f8:	0e c0       	rjmp	.+28     	; 0x2316 <dir_register+0x46>
    22fa:	ea 89       	ldd	r30, Y+18	; 0x12
    22fc:	fb 89       	ldd	r31, Y+19	; 0x13
    22fe:	80 81       	ld	r24, Z
    2300:	85 3e       	cpi	r24, 0xE5	; 229
    2302:	69 f0       	breq	.+26     	; 0x231e <dir_register+0x4e>
    2304:	88 23       	and	r24, r24
    2306:	59 f0       	breq	.+22     	; 0x231e <dir_register+0x4e>
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	ce 01       	movw	r24, r28
    230e:	2d dd       	rcall	.-1446   	; 0x1d6a <dir_next>
    2310:	18 2f       	mov	r17, r24
    2312:	88 23       	and	r24, r24
    2314:	39 f3       	breq	.-50     	; 0x22e4 <dir_register+0x14>
    2316:	14 30       	cpi	r17, 0x04	; 4
    2318:	11 f1       	breq	.+68     	; 0x235e <dir_register+0x8e>
    231a:	11 11       	cpse	r17, r1
    231c:	21 c0       	rjmp	.+66     	; 0x2360 <dir_register+0x90>
    231e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2320:	5f 85       	ldd	r21, Y+15	; 0x0f
    2322:	68 89       	ldd	r22, Y+16	; 0x10
    2324:	79 89       	ldd	r23, Y+17	; 0x11
    2326:	88 81       	ld	r24, Y
    2328:	99 81       	ldd	r25, Y+1	; 0x01
    232a:	0e 94 00 06 	call	0xc00	; 0xc00 <move_window>
    232e:	18 2f       	mov	r17, r24
    2330:	81 11       	cpse	r24, r1
    2332:	16 c0       	rjmp	.+44     	; 0x2360 <dir_register+0x90>
    2334:	40 e2       	ldi	r20, 0x20	; 32
    2336:	50 e0       	ldi	r21, 0x00	; 0
    2338:	60 e0       	ldi	r22, 0x00	; 0
    233a:	70 e0       	ldi	r23, 0x00	; 0
    233c:	8a 89       	ldd	r24, Y+18	; 0x12
    233e:	9b 89       	ldd	r25, Y+19	; 0x13
    2340:	0e 94 37 05 	call	0xa6e	; 0xa6e <mem_set>
    2344:	6c 89       	ldd	r22, Y+20	; 0x14
    2346:	7d 89       	ldd	r23, Y+21	; 0x15
    2348:	4b e0       	ldi	r20, 0x0B	; 11
    234a:	50 e0       	ldi	r21, 0x00	; 0
    234c:	8a 89       	ldd	r24, Y+18	; 0x12
    234e:	9b 89       	ldd	r25, Y+19	; 0x13
    2350:	0e 94 29 05 	call	0xa52	; 0xa52 <mem_cpy>
    2354:	e8 81       	ld	r30, Y
    2356:	f9 81       	ldd	r31, Y+1	; 0x01
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	84 83       	std	Z+4, r24	; 0x04
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <dir_register+0x90>
    235e:	17 e0       	ldi	r17, 0x07	; 7
    2360:	81 2f       	mov	r24, r17
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	1f 91       	pop	r17
    2368:	08 95       	ret

0000236a <remove_chain>:
    236a:	8f 92       	push	r8
    236c:	9f 92       	push	r9
    236e:	af 92       	push	r10
    2370:	bf 92       	push	r11
    2372:	cf 92       	push	r12
    2374:	df 92       	push	r13
    2376:	ef 92       	push	r14
    2378:	ff 92       	push	r15
    237a:	0f 93       	push	r16
    237c:	1f 93       	push	r17
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	ec 01       	movw	r28, r24
    2384:	4a 01       	movw	r8, r20
    2386:	5b 01       	movw	r10, r22
    2388:	42 30       	cpi	r20, 0x02	; 2
    238a:	51 05       	cpc	r21, r1
    238c:	61 05       	cpc	r22, r1
    238e:	71 05       	cpc	r23, r1
    2390:	08 f4       	brcc	.+2      	; 0x2394 <remove_chain+0x2a>
    2392:	4b c0       	rjmp	.+150    	; 0x242a <remove_chain+0xc0>
    2394:	4a 89       	ldd	r20, Y+18	; 0x12
    2396:	5b 89       	ldd	r21, Y+19	; 0x13
    2398:	6c 89       	ldd	r22, Y+20	; 0x14
    239a:	7d 89       	ldd	r23, Y+21	; 0x15
    239c:	84 16       	cp	r8, r20
    239e:	95 06       	cpc	r9, r21
    23a0:	a6 06       	cpc	r10, r22
    23a2:	b7 06       	cpc	r11, r23
    23a4:	08 f0       	brcs	.+2      	; 0x23a8 <remove_chain+0x3e>
    23a6:	43 c0       	rjmp	.+134    	; 0x242e <remove_chain+0xc4>
    23a8:	b5 01       	movw	r22, r10
    23aa:	a4 01       	movw	r20, r8
    23ac:	ce 01       	movw	r24, r28
    23ae:	06 d9       	rcall	.-3572   	; 0x15bc <get_fat>
    23b0:	6b 01       	movw	r12, r22
    23b2:	7c 01       	movw	r14, r24
    23b4:	61 15       	cp	r22, r1
    23b6:	71 05       	cpc	r23, r1
    23b8:	81 05       	cpc	r24, r1
    23ba:	91 05       	cpc	r25, r1
    23bc:	d1 f1       	breq	.+116    	; 0x2432 <remove_chain+0xc8>
    23be:	91 e0       	ldi	r25, 0x01	; 1
    23c0:	c9 16       	cp	r12, r25
    23c2:	d1 04       	cpc	r13, r1
    23c4:	e1 04       	cpc	r14, r1
    23c6:	f1 04       	cpc	r15, r1
    23c8:	b1 f1       	breq	.+108    	; 0x2436 <remove_chain+0xcc>
    23ca:	8f ef       	ldi	r24, 0xFF	; 255
    23cc:	c8 16       	cp	r12, r24
    23ce:	d8 06       	cpc	r13, r24
    23d0:	e8 06       	cpc	r14, r24
    23d2:	f8 06       	cpc	r15, r24
    23d4:	91 f1       	breq	.+100    	; 0x243a <remove_chain+0xd0>
    23d6:	00 e0       	ldi	r16, 0x00	; 0
    23d8:	10 e0       	ldi	r17, 0x00	; 0
    23da:	98 01       	movw	r18, r16
    23dc:	b5 01       	movw	r22, r10
    23de:	a4 01       	movw	r20, r8
    23e0:	ce 01       	movw	r24, r28
    23e2:	a8 da       	rcall	.-2736   	; 0x1934 <put_fat>
    23e4:	81 11       	cpse	r24, r1
    23e6:	2a c0       	rjmp	.+84     	; 0x243c <remove_chain+0xd2>
    23e8:	4e 85       	ldd	r20, Y+14	; 0x0e
    23ea:	5f 85       	ldd	r21, Y+15	; 0x0f
    23ec:	68 89       	ldd	r22, Y+16	; 0x10
    23ee:	79 89       	ldd	r23, Y+17	; 0x11
    23f0:	4f 3f       	cpi	r20, 0xFF	; 255
    23f2:	9f ef       	ldi	r25, 0xFF	; 255
    23f4:	59 07       	cpc	r21, r25
    23f6:	69 07       	cpc	r22, r25
    23f8:	79 07       	cpc	r23, r25
    23fa:	59 f0       	breq	.+22     	; 0x2412 <remove_chain+0xa8>
    23fc:	4f 5f       	subi	r20, 0xFF	; 255
    23fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2400:	6f 4f       	sbci	r22, 0xFF	; 255
    2402:	7f 4f       	sbci	r23, 0xFF	; 255
    2404:	4e 87       	std	Y+14, r20	; 0x0e
    2406:	5f 87       	std	Y+15, r21	; 0x0f
    2408:	68 8b       	std	Y+16, r22	; 0x10
    240a:	79 8b       	std	Y+17, r23	; 0x11
    240c:	9d 81       	ldd	r25, Y+5	; 0x05
    240e:	91 60       	ori	r25, 0x01	; 1
    2410:	9d 83       	std	Y+5, r25	; 0x05
    2412:	4a 89       	ldd	r20, Y+18	; 0x12
    2414:	5b 89       	ldd	r21, Y+19	; 0x13
    2416:	6c 89       	ldd	r22, Y+20	; 0x14
    2418:	7d 89       	ldd	r23, Y+21	; 0x15
    241a:	c4 16       	cp	r12, r20
    241c:	d5 06       	cpc	r13, r21
    241e:	e6 06       	cpc	r14, r22
    2420:	f7 06       	cpc	r15, r23
    2422:	60 f4       	brcc	.+24     	; 0x243c <remove_chain+0xd2>
    2424:	46 01       	movw	r8, r12
    2426:	57 01       	movw	r10, r14
    2428:	bf cf       	rjmp	.-130    	; 0x23a8 <remove_chain+0x3e>
    242a:	82 e0       	ldi	r24, 0x02	; 2
    242c:	07 c0       	rjmp	.+14     	; 0x243c <remove_chain+0xd2>
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	05 c0       	rjmp	.+10     	; 0x243c <remove_chain+0xd2>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	03 c0       	rjmp	.+6      	; 0x243c <remove_chain+0xd2>
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	01 c0       	rjmp	.+2      	; 0x243c <remove_chain+0xd2>
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	ff 90       	pop	r15
    2446:	ef 90       	pop	r14
    2448:	df 90       	pop	r13
    244a:	cf 90       	pop	r12
    244c:	bf 90       	pop	r11
    244e:	af 90       	pop	r10
    2450:	9f 90       	pop	r9
    2452:	8f 90       	pop	r8
    2454:	08 95       	ret

00002456 <f_mount>:
    2456:	1f 93       	push	r17
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	00 d0       	rcall	.+0      	; 0x245e <f_mount+0x8>
    245e:	00 d0       	rcall	.+0      	; 0x2460 <f_mount+0xa>
    2460:	00 d0       	rcall	.+0      	; 0x2462 <f_mount+0xc>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	9c 83       	std	Y+4, r25	; 0x04
    2468:	8b 83       	std	Y+3, r24	; 0x03
    246a:	7e 83       	std	Y+6, r23	; 0x06
    246c:	6d 83       	std	Y+5, r22	; 0x05
    246e:	14 2f       	mov	r17, r20
    2470:	7a 83       	std	Y+2, r23	; 0x02
    2472:	69 83       	std	Y+1, r22	; 0x01
    2474:	ce 01       	movw	r24, r28
    2476:	01 96       	adiw	r24, 0x01	; 1
    2478:	0e 94 63 05 	call	0xac6	; 0xac6 <get_ldnumber>
    247c:	99 23       	and	r25, r25
    247e:	34 f1       	brlt	.+76     	; 0x24cc <f_mount+0x76>
    2480:	fc 01       	movw	r30, r24
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	ed 5e       	subi	r30, 0xED	; 237
    2488:	fd 4f       	sbci	r31, 0xFD	; 253
    248a:	01 90       	ld	r0, Z+
    248c:	f0 81       	ld	r31, Z
    248e:	e0 2d       	mov	r30, r0
    2490:	30 97       	sbiw	r30, 0x00	; 0
    2492:	09 f0       	breq	.+2      	; 0x2496 <f_mount+0x40>
    2494:	10 82       	st	Z, r1
    2496:	eb 81       	ldd	r30, Y+3	; 0x03
    2498:	fc 81       	ldd	r31, Y+4	; 0x04
    249a:	30 97       	sbiw	r30, 0x00	; 0
    249c:	e9 f0       	breq	.+58     	; 0x24d8 <f_mount+0x82>
    249e:	10 82       	st	Z, r1
    24a0:	2b 81       	ldd	r18, Y+3	; 0x03
    24a2:	3c 81       	ldd	r19, Y+4	; 0x04
    24a4:	fc 01       	movw	r30, r24
    24a6:	ee 0f       	add	r30, r30
    24a8:	ff 1f       	adc	r31, r31
    24aa:	ed 5e       	subi	r30, 0xED	; 237
    24ac:	fd 4f       	sbci	r31, 0xFD	; 253
    24ae:	31 83       	std	Z+1, r19	; 0x01
    24b0:	20 83       	st	Z, r18
    24b2:	23 2b       	or	r18, r19
    24b4:	69 f0       	breq	.+26     	; 0x24d0 <f_mount+0x7a>
    24b6:	11 30       	cpi	r17, 0x01	; 1
    24b8:	69 f4       	brne	.+26     	; 0x24d4 <f_mount+0x7e>
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	be 01       	movw	r22, r28
    24be:	6b 5f       	subi	r22, 0xFB	; 251
    24c0:	7f 4f       	sbci	r23, 0xFF	; 255
    24c2:	ce 01       	movw	r24, r28
    24c4:	03 96       	adiw	r24, 0x03	; 3
    24c6:	0e 94 cb 06 	call	0xd96	; 0xd96 <find_volume>
    24ca:	0e c0       	rjmp	.+28     	; 0x24e8 <f_mount+0x92>
    24cc:	8b e0       	ldi	r24, 0x0B	; 11
    24ce:	0c c0       	rjmp	.+24     	; 0x24e8 <f_mount+0x92>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	0a c0       	rjmp	.+20     	; 0x24e8 <f_mount+0x92>
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	08 c0       	rjmp	.+16     	; 0x24e8 <f_mount+0x92>
    24d8:	fc 01       	movw	r30, r24
    24da:	ee 0f       	add	r30, r30
    24dc:	ff 1f       	adc	r31, r31
    24de:	ed 5e       	subi	r30, 0xED	; 237
    24e0:	fd 4f       	sbci	r31, 0xFD	; 253
    24e2:	11 82       	std	Z+1, r1	; 0x01
    24e4:	10 82       	st	Z, r1
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	26 96       	adiw	r28, 0x06	; 6
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	1f 91       	pop	r17
    24fa:	08 95       	ret

000024fc <f_open>:
    24fc:	4f 92       	push	r4
    24fe:	5f 92       	push	r5
    2500:	6f 92       	push	r6
    2502:	7f 92       	push	r7
    2504:	bf 92       	push	r11
    2506:	cf 92       	push	r12
    2508:	df 92       	push	r13
    250a:	ef 92       	push	r14
    250c:	ff 92       	push	r15
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	a8 97       	sbiw	r28, 0x28	; 40
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	8c 01       	movw	r16, r24
    2528:	7c a3       	std	Y+36, r23	; 0x24
    252a:	6b a3       	std	Y+35, r22	; 0x23
    252c:	f4 2e       	mov	r15, r20
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	09 f4       	brne	.+2      	; 0x2534 <f_open+0x38>
    2532:	e5 c0       	rjmp	.+458    	; 0x26fe <f_open+0x202>
    2534:	dc 01       	movw	r26, r24
    2536:	1d 92       	st	X+, r1
    2538:	1c 92       	st	X, r1
    253a:	4e 71       	andi	r20, 0x1E	; 30
    253c:	be 01       	movw	r22, r28
    253e:	6d 5d       	subi	r22, 0xDD	; 221
    2540:	7f 4f       	sbci	r23, 0xFF	; 255
    2542:	ce 01       	movw	r24, r28
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	0e 94 cb 06 	call	0xd96	; 0xd96 <find_volume>
    254a:	81 11       	cpse	r24, r1
    254c:	ec c0       	rjmp	.+472    	; 0x2726 <f_open+0x22a>
    254e:	bf 2d       	mov	r27, r15
    2550:	bf 71       	andi	r27, 0x1F	; 31
    2552:	bb 2e       	mov	r11, r27
    2554:	ce 01       	movw	r24, r28
    2556:	47 96       	adiw	r24, 0x17	; 23
    2558:	9e 8b       	std	Y+22, r25	; 0x16
    255a:	8d 8b       	std	Y+21, r24	; 0x15
    255c:	6b a1       	ldd	r22, Y+35	; 0x23
    255e:	7c a1       	ldd	r23, Y+36	; 0x24
    2560:	46 97       	sbiw	r24, 0x16	; 22
    2562:	21 dd       	rcall	.-1470   	; 0x1fa6 <follow_path>
    2564:	cb 88       	ldd	r12, Y+19	; 0x13
    2566:	dc 88       	ldd	r13, Y+20	; 0x14
    2568:	81 11       	cpse	r24, r1
    256a:	d1 c0       	rjmp	.+418    	; 0x270e <f_open+0x212>
    256c:	c1 14       	cp	r12, r1
    256e:	d1 04       	cpc	r13, r1
    2570:	09 f0       	breq	.+2      	; 0x2574 <f_open+0x78>
    2572:	c7 c0       	rjmp	.+398    	; 0x2702 <f_open+0x206>
    2574:	cb c0       	rjmp	.+406    	; 0x270c <f_open+0x210>
    2576:	88 23       	and	r24, r24
    2578:	71 f0       	breq	.+28     	; 0x2596 <f_open+0x9a>
    257a:	84 30       	cpi	r24, 0x04	; 4
    257c:	09 f0       	breq	.+2      	; 0x2580 <f_open+0x84>
    257e:	d3 c0       	rjmp	.+422    	; 0x2726 <f_open+0x22a>
    2580:	ce 01       	movw	r24, r28
    2582:	01 96       	adiw	r24, 0x01	; 1
    2584:	a5 de       	rcall	.-694    	; 0x22d0 <dir_register>
    2586:	eb 2d       	mov	r30, r11
    2588:	e8 60       	ori	r30, 0x08	; 8
    258a:	be 2e       	mov	r11, r30
    258c:	cb 88       	ldd	r12, Y+19	; 0x13
    258e:	dc 88       	ldd	r13, Y+20	; 0x14
    2590:	88 23       	and	r24, r24
    2592:	49 f0       	breq	.+18     	; 0x25a6 <f_open+0xaa>
    2594:	c8 c0       	rjmp	.+400    	; 0x2726 <f_open+0x22a>
    2596:	d6 01       	movw	r26, r12
    2598:	1b 96       	adiw	r26, 0x0b	; 11
    259a:	8c 91       	ld	r24, X
    259c:	81 71       	andi	r24, 0x11	; 17
    259e:	09 f0       	breq	.+2      	; 0x25a2 <f_open+0xa6>
    25a0:	bb c0       	rjmp	.+374    	; 0x2718 <f_open+0x21c>
    25a2:	f2 fc       	sbrc	r15, 2
    25a4:	bb c0       	rjmp	.+374    	; 0x271c <f_open+0x220>
    25a6:	b3 fe       	sbrs	r11, 3
    25a8:	56 c0       	rjmp	.+172    	; 0x2656 <f_open+0x15a>
    25aa:	f6 01       	movw	r30, r12
    25ac:	16 86       	std	Z+14, r1	; 0x0e
    25ae:	17 86       	std	Z+15, r1	; 0x0f
    25b0:	89 e6       	ldi	r24, 0x69	; 105
    25b2:	80 8b       	std	Z+16, r24	; 0x10
    25b4:	8d eb       	ldi	r24, 0xBD	; 189
    25b6:	81 8b       	std	Z+17, r24	; 0x11
    25b8:	13 86       	std	Z+11, r1	; 0x0b
    25ba:	14 8e       	std	Z+28, r1	; 0x1c
    25bc:	15 8e       	std	Z+29, r1	; 0x1d
    25be:	16 8e       	std	Z+30, r1	; 0x1e
    25c0:	17 8e       	std	Z+31, r1	; 0x1f
    25c2:	e9 80       	ldd	r14, Y+1	; 0x01
    25c4:	fa 80       	ldd	r15, Y+2	; 0x02
    25c6:	b6 01       	movw	r22, r12
    25c8:	c7 01       	movw	r24, r14
    25ca:	0e 94 42 05 	call	0xa84	; 0xa84 <ld_clust>
    25ce:	2b 01       	movw	r4, r22
    25d0:	3c 01       	movw	r6, r24
    25d2:	d6 01       	movw	r26, r12
    25d4:	5a 96       	adiw	r26, 0x1a	; 26
    25d6:	1c 92       	st	X, r1
    25d8:	5a 97       	sbiw	r26, 0x1a	; 26
    25da:	5b 96       	adiw	r26, 0x1b	; 27
    25dc:	1c 92       	st	X, r1
    25de:	5b 97       	sbiw	r26, 0x1b	; 27
    25e0:	54 96       	adiw	r26, 0x14	; 20
    25e2:	1c 92       	st	X, r1
    25e4:	54 97       	sbiw	r26, 0x14	; 20
    25e6:	55 96       	adiw	r26, 0x15	; 21
    25e8:	1c 92       	st	X, r1
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	f7 01       	movw	r30, r14
    25ee:	84 83       	std	Z+4, r24	; 0x04
    25f0:	41 14       	cp	r4, r1
    25f2:	51 04       	cpc	r5, r1
    25f4:	61 04       	cpc	r6, r1
    25f6:	71 04       	cpc	r7, r1
    25f8:	71 f1       	breq	.+92     	; 0x2656 <f_open+0x15a>
    25fa:	82 a5       	ldd	r24, Z+42	; 0x2a
    25fc:	93 a5       	ldd	r25, Z+43	; 0x2b
    25fe:	a4 a5       	ldd	r26, Z+44	; 0x2c
    2600:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2602:	8d a3       	std	Y+37, r24	; 0x25
    2604:	9e a3       	std	Y+38, r25	; 0x26
    2606:	af a3       	std	Y+39, r26	; 0x27
    2608:	b8 a7       	std	Y+40, r27	; 0x28
    260a:	b3 01       	movw	r22, r6
    260c:	a2 01       	movw	r20, r4
    260e:	c7 01       	movw	r24, r14
    2610:	ac de       	rcall	.-680    	; 0x236a <remove_chain>
    2612:	81 11       	cpse	r24, r1
    2614:	88 c0       	rjmp	.+272    	; 0x2726 <f_open+0x22a>
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	b3 01       	movw	r22, r6
    261c:	a2 01       	movw	r20, r4
    261e:	41 50       	subi	r20, 0x01	; 1
    2620:	51 09       	sbc	r21, r1
    2622:	61 09       	sbc	r22, r1
    2624:	71 09       	sbc	r23, r1
    2626:	fc 01       	movw	r30, r24
    2628:	42 87       	std	Z+10, r20	; 0x0a
    262a:	53 87       	std	Z+11, r21	; 0x0b
    262c:	64 87       	std	Z+12, r22	; 0x0c
    262e:	75 87       	std	Z+13, r23	; 0x0d
    2630:	4d a1       	ldd	r20, Y+37	; 0x25
    2632:	5e a1       	ldd	r21, Y+38	; 0x26
    2634:	6f a1       	ldd	r22, Y+39	; 0x27
    2636:	78 a5       	ldd	r23, Y+40	; 0x28
    2638:	0e 94 00 06 	call	0xc00	; 0xc00 <move_window>
    263c:	0a c0       	rjmp	.+20     	; 0x2652 <f_open+0x156>
    263e:	d6 01       	movw	r26, r12
    2640:	1b 96       	adiw	r26, 0x0b	; 11
    2642:	8c 91       	ld	r24, X
    2644:	84 fd       	sbrc	r24, 4
    2646:	6c c0       	rjmp	.+216    	; 0x2720 <f_open+0x224>
    2648:	f1 fe       	sbrs	r15, 1
    264a:	05 c0       	rjmp	.+10     	; 0x2656 <f_open+0x15a>
    264c:	80 fd       	sbrc	r24, 0
    264e:	6a c0       	rjmp	.+212    	; 0x2724 <f_open+0x228>
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <f_open+0x15a>
    2652:	81 11       	cpse	r24, r1
    2654:	68 c0       	rjmp	.+208    	; 0x2726 <f_open+0x22a>
    2656:	b3 fe       	sbrs	r11, 3
    2658:	03 c0       	rjmp	.+6      	; 0x2660 <f_open+0x164>
    265a:	bb 2d       	mov	r27, r11
    265c:	b0 62       	ori	r27, 0x20	; 32
    265e:	bb 2e       	mov	r11, r27
    2660:	e9 80       	ldd	r14, Y+1	; 0x01
    2662:	fa 80       	ldd	r15, Y+2	; 0x02
    2664:	f7 01       	movw	r30, r14
    2666:	82 a5       	ldd	r24, Z+42	; 0x2a
    2668:	93 a5       	ldd	r25, Z+43	; 0x2b
    266a:	a4 a5       	ldd	r26, Z+44	; 0x2c
    266c:	b5 a5       	ldd	r27, Z+45	; 0x2d
    266e:	f8 01       	movw	r30, r16
    2670:	82 8f       	std	Z+26, r24	; 0x1a
    2672:	93 8f       	std	Z+27, r25	; 0x1b
    2674:	a4 8f       	std	Z+28, r26	; 0x1c
    2676:	b5 8f       	std	Z+29, r27	; 0x1d
    2678:	d7 8e       	std	Z+31, r13	; 0x1f
    267a:	c6 8e       	std	Z+30, r12	; 0x1e
    267c:	b4 82       	std	Z+4, r11	; 0x04
    267e:	15 82       	std	Z+5, r1	; 0x05
    2680:	b6 01       	movw	r22, r12
    2682:	c7 01       	movw	r24, r14
    2684:	0e 94 42 05 	call	0xa84	; 0xa84 <ld_clust>
    2688:	d8 01       	movw	r26, r16
    268a:	1e 96       	adiw	r26, 0x0e	; 14
    268c:	6d 93       	st	X+, r22
    268e:	7d 93       	st	X+, r23
    2690:	8d 93       	st	X+, r24
    2692:	9c 93       	st	X, r25
    2694:	51 97       	sbiw	r26, 0x11	; 17
    2696:	f6 01       	movw	r30, r12
    2698:	87 8d       	ldd	r24, Z+31	; 0x1f
    269a:	46 8d       	ldd	r20, Z+30	; 0x1e
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	ba 01       	movw	r22, r20
    26a4:	55 27       	eor	r21, r21
    26a6:	44 27       	eor	r20, r20
    26a8:	78 2b       	or	r23, r24
    26aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    26ac:	48 2b       	or	r20, r24
    26ae:	85 8d       	ldd	r24, Z+29	; 0x1d
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	98 2f       	mov	r25, r24
    26b4:	88 27       	eor	r24, r24
    26b6:	a0 e0       	ldi	r26, 0x00	; 0
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	48 2b       	or	r20, r24
    26bc:	59 2b       	or	r21, r25
    26be:	6a 2b       	or	r22, r26
    26c0:	7b 2b       	or	r23, r27
    26c2:	d8 01       	movw	r26, r16
    26c4:	1a 96       	adiw	r26, 0x0a	; 10
    26c6:	4d 93       	st	X+, r20
    26c8:	5d 93       	st	X+, r21
    26ca:	6d 93       	st	X+, r22
    26cc:	7c 93       	st	X, r23
    26ce:	1d 97       	sbiw	r26, 0x0d	; 13
    26d0:	f8 01       	movw	r30, r16
    26d2:	16 82       	std	Z+6, r1	; 0x06
    26d4:	17 82       	std	Z+7, r1	; 0x07
    26d6:	10 86       	std	Z+8, r1	; 0x08
    26d8:	11 86       	std	Z+9, r1	; 0x09
    26da:	56 96       	adiw	r26, 0x16	; 22
    26dc:	1d 92       	st	X+, r1
    26de:	1d 92       	st	X+, r1
    26e0:	1d 92       	st	X+, r1
    26e2:	1c 92       	st	X, r1
    26e4:	59 97       	sbiw	r26, 0x19	; 25
    26e6:	11 96       	adiw	r26, 0x01	; 1
    26e8:	fc 92       	st	X, r15
    26ea:	ee 92       	st	-X, r14
    26ec:	f7 01       	movw	r30, r14
    26ee:	86 81       	ldd	r24, Z+6	; 0x06
    26f0:	97 81       	ldd	r25, Z+7	; 0x07
    26f2:	13 96       	adiw	r26, 0x03	; 3
    26f4:	9c 93       	st	X, r25
    26f6:	8e 93       	st	-X, r24
    26f8:	12 97       	sbiw	r26, 0x02	; 2
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	14 c0       	rjmp	.+40     	; 0x2726 <f_open+0x22a>
    26fe:	89 e0       	ldi	r24, 0x09	; 9
    2700:	12 c0       	rjmp	.+36     	; 0x2726 <f_open+0x22a>
    2702:	8f 2d       	mov	r24, r15
    2704:	8c 71       	andi	r24, 0x1C	; 28
    2706:	09 f0       	breq	.+2      	; 0x270a <f_open+0x20e>
    2708:	46 cf       	rjmp	.-372    	; 0x2596 <f_open+0x9a>
    270a:	99 cf       	rjmp	.-206    	; 0x263e <f_open+0x142>
    270c:	86 e0       	ldi	r24, 0x06	; 6
    270e:	9f 2d       	mov	r25, r15
    2710:	9c 71       	andi	r25, 0x1C	; 28
    2712:	09 f0       	breq	.+2      	; 0x2716 <f_open+0x21a>
    2714:	30 cf       	rjmp	.-416    	; 0x2576 <f_open+0x7a>
    2716:	9d cf       	rjmp	.-198    	; 0x2652 <f_open+0x156>
    2718:	87 e0       	ldi	r24, 0x07	; 7
    271a:	05 c0       	rjmp	.+10     	; 0x2726 <f_open+0x22a>
    271c:	88 e0       	ldi	r24, 0x08	; 8
    271e:	03 c0       	rjmp	.+6      	; 0x2726 <f_open+0x22a>
    2720:	84 e0       	ldi	r24, 0x04	; 4
    2722:	01 c0       	rjmp	.+2      	; 0x2726 <f_open+0x22a>
    2724:	87 e0       	ldi	r24, 0x07	; 7
    2726:	a8 96       	adiw	r28, 0x28	; 40
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	1f 91       	pop	r17
    2738:	0f 91       	pop	r16
    273a:	ff 90       	pop	r15
    273c:	ef 90       	pop	r14
    273e:	df 90       	pop	r13
    2740:	cf 90       	pop	r12
    2742:	bf 90       	pop	r11
    2744:	7f 90       	pop	r7
    2746:	6f 90       	pop	r6
    2748:	5f 90       	pop	r5
    274a:	4f 90       	pop	r4
    274c:	08 95       	ret

0000274e <f_write>:
    274e:	2f 92       	push	r2
    2750:	3f 92       	push	r3
    2752:	4f 92       	push	r4
    2754:	5f 92       	push	r5
    2756:	6f 92       	push	r6
    2758:	7f 92       	push	r7
    275a:	8f 92       	push	r8
    275c:	9f 92       	push	r9
    275e:	af 92       	push	r10
    2760:	bf 92       	push	r11
    2762:	cf 92       	push	r12
    2764:	df 92       	push	r13
    2766:	ef 92       	push	r14
    2768:	ff 92       	push	r15
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	00 d0       	rcall	.+0      	; 0x2774 <f_write+0x26>
    2774:	00 d0       	rcall	.+0      	; 0x2776 <f_write+0x28>
    2776:	1f 92       	push	r1
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	9d 83       	std	Y+5, r25	; 0x05
    277e:	8c 83       	std	Y+4, r24	; 0x04
    2780:	5b 01       	movw	r10, r22
    2782:	7a 01       	movw	r14, r20
    2784:	69 01       	movw	r12, r18
    2786:	d9 01       	movw	r26, r18
    2788:	1d 92       	st	X+, r1
    278a:	1c 92       	st	X, r1
    278c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <validate>
    2790:	81 11       	cpse	r24, r1
    2792:	b4 c1       	rjmp	.+872    	; 0x2afc <f_write+0x3ae>
    2794:	ec 81       	ldd	r30, Y+4	; 0x04
    2796:	fd 81       	ldd	r31, Y+5	; 0x05
    2798:	85 81       	ldd	r24, Z+5	; 0x05
    279a:	81 11       	cpse	r24, r1
    279c:	af c1       	rjmp	.+862    	; 0x2afc <f_write+0x3ae>
    279e:	84 81       	ldd	r24, Z+4	; 0x04
    27a0:	81 ff       	sbrs	r24, 1
    27a2:	ab c1       	rjmp	.+854    	; 0x2afa <f_write+0x3ac>
    27a4:	86 81       	ldd	r24, Z+6	; 0x06
    27a6:	97 81       	ldd	r25, Z+7	; 0x07
    27a8:	a0 85       	ldd	r26, Z+8	; 0x08
    27aa:	b1 85       	ldd	r27, Z+9	; 0x09
    27ac:	ac 01       	movw	r20, r24
    27ae:	bd 01       	movw	r22, r26
    27b0:	4e 0d       	add	r20, r14
    27b2:	5f 1d       	adc	r21, r15
    27b4:	61 1d       	adc	r22, r1
    27b6:	71 1d       	adc	r23, r1
    27b8:	48 17       	cp	r20, r24
    27ba:	59 07       	cpc	r21, r25
    27bc:	6a 07       	cpc	r22, r26
    27be:	7b 07       	cpc	r23, r27
    27c0:	08 f4       	brcc	.+2      	; 0x27c4 <f_write+0x76>
    27c2:	7e c1       	rjmp	.+764    	; 0x2ac0 <f_write+0x372>
    27c4:	e1 14       	cp	r14, r1
    27c6:	f1 04       	cpc	r15, r1
    27c8:	09 f4       	brne	.+2      	; 0x27cc <f_write+0x7e>
    27ca:	7a c1       	rjmp	.+756    	; 0x2ac0 <f_write+0x372>
    27cc:	b0 96       	adiw	r30, 0x20	; 32
    27ce:	fb 83       	std	Y+3, r31	; 0x03
    27d0:	ea 83       	std	Y+2, r30	; 0x02
    27d2:	ec 81       	ldd	r30, Y+4	; 0x04
    27d4:	fd 81       	ldd	r31, Y+5	; 0x05
    27d6:	86 81       	ldd	r24, Z+6	; 0x06
    27d8:	97 81       	ldd	r25, Z+7	; 0x07
    27da:	a0 85       	ldd	r26, Z+8	; 0x08
    27dc:	b1 85       	ldd	r27, Z+9	; 0x09
    27de:	ac 01       	movw	r20, r24
    27e0:	bd 01       	movw	r22, r26
    27e2:	51 70       	andi	r21, 0x01	; 1
    27e4:	66 27       	eor	r22, r22
    27e6:	77 27       	eor	r23, r23
    27e8:	45 2b       	or	r20, r21
    27ea:	46 2b       	or	r20, r22
    27ec:	47 2b       	or	r20, r23
    27ee:	09 f0       	breq	.+2      	; 0x27f2 <f_write+0xa4>
    27f0:	29 c1       	rjmp	.+594    	; 0x2a44 <f_write+0x2f6>
    27f2:	80 80       	ld	r8, Z
    27f4:	91 80       	ldd	r9, Z+1	; 0x01
    27f6:	f4 01       	movw	r30, r8
    27f8:	22 81       	ldd	r18, Z+2	; 0x02
    27fa:	21 50       	subi	r18, 0x01	; 1
    27fc:	ac 01       	movw	r20, r24
    27fe:	bd 01       	movw	r22, r26
    2800:	03 2e       	mov	r0, r19
    2802:	39 e0       	ldi	r19, 0x09	; 9
    2804:	76 95       	lsr	r23
    2806:	67 95       	ror	r22
    2808:	57 95       	ror	r21
    280a:	47 95       	ror	r20
    280c:	3a 95       	dec	r19
    280e:	d1 f7       	brne	.-12     	; 0x2804 <f_write+0xb6>
    2810:	30 2d       	mov	r19, r0
    2812:	24 23       	and	r18, r20
    2814:	29 83       	std	Y+1, r18	; 0x01
    2816:	21 11       	cpse	r18, r1
    2818:	52 c0       	rjmp	.+164    	; 0x28be <f_write+0x170>
    281a:	89 2b       	or	r24, r25
    281c:	8a 2b       	or	r24, r26
    281e:	8b 2b       	or	r24, r27
    2820:	99 f4       	brne	.+38     	; 0x2848 <f_write+0xfa>
    2822:	ac 81       	ldd	r26, Y+4	; 0x04
    2824:	bd 81       	ldd	r27, Y+5	; 0x05
    2826:	1e 96       	adiw	r26, 0x0e	; 14
    2828:	6d 91       	ld	r22, X+
    282a:	7d 91       	ld	r23, X+
    282c:	8d 91       	ld	r24, X+
    282e:	9c 91       	ld	r25, X
    2830:	51 97       	sbiw	r26, 0x11	; 17
    2832:	61 15       	cp	r22, r1
    2834:	71 05       	cpc	r23, r1
    2836:	81 05       	cpc	r24, r1
    2838:	91 05       	cpc	r25, r1
    283a:	a1 f4       	brne	.+40     	; 0x2864 <f_write+0x116>
    283c:	40 e0       	ldi	r20, 0x00	; 0
    283e:	50 e0       	ldi	r21, 0x00	; 0
    2840:	ba 01       	movw	r22, r20
    2842:	c4 01       	movw	r24, r8
    2844:	85 d9       	rcall	.-3318   	; 0x1b50 <create_chain>
    2846:	08 c0       	rjmp	.+16     	; 0x2858 <f_write+0x10a>
    2848:	ec 81       	ldd	r30, Y+4	; 0x04
    284a:	fd 81       	ldd	r31, Y+5	; 0x05
    284c:	42 89       	ldd	r20, Z+18	; 0x12
    284e:	53 89       	ldd	r21, Z+19	; 0x13
    2850:	64 89       	ldd	r22, Z+20	; 0x14
    2852:	75 89       	ldd	r23, Z+21	; 0x15
    2854:	c4 01       	movw	r24, r8
    2856:	7c d9       	rcall	.-3336   	; 0x1b50 <create_chain>
    2858:	61 15       	cp	r22, r1
    285a:	71 05       	cpc	r23, r1
    285c:	81 05       	cpc	r24, r1
    285e:	91 05       	cpc	r25, r1
    2860:	09 f4       	brne	.+2      	; 0x2864 <f_write+0x116>
    2862:	2e c1       	rjmp	.+604    	; 0x2ac0 <f_write+0x372>
    2864:	61 30       	cpi	r22, 0x01	; 1
    2866:	71 05       	cpc	r23, r1
    2868:	81 05       	cpc	r24, r1
    286a:	91 05       	cpc	r25, r1
    286c:	31 f4       	brne	.+12     	; 0x287a <f_write+0x12c>
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	ac 81       	ldd	r26, Y+4	; 0x04
    2872:	bd 81       	ldd	r27, Y+5	; 0x05
    2874:	15 96       	adiw	r26, 0x05	; 5
    2876:	8c 93       	st	X, r24
    2878:	41 c1       	rjmp	.+642    	; 0x2afc <f_write+0x3ae>
    287a:	6f 3f       	cpi	r22, 0xFF	; 255
    287c:	bf ef       	ldi	r27, 0xFF	; 255
    287e:	7b 07       	cpc	r23, r27
    2880:	8b 07       	cpc	r24, r27
    2882:	9b 07       	cpc	r25, r27
    2884:	29 f4       	brne	.+10     	; 0x2890 <f_write+0x142>
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	ec 81       	ldd	r30, Y+4	; 0x04
    288a:	fd 81       	ldd	r31, Y+5	; 0x05
    288c:	85 83       	std	Z+5, r24	; 0x05
    288e:	36 c1       	rjmp	.+620    	; 0x2afc <f_write+0x3ae>
    2890:	ac 81       	ldd	r26, Y+4	; 0x04
    2892:	bd 81       	ldd	r27, Y+5	; 0x05
    2894:	52 96       	adiw	r26, 0x12	; 18
    2896:	6d 93       	st	X+, r22
    2898:	7d 93       	st	X+, r23
    289a:	8d 93       	st	X+, r24
    289c:	9c 93       	st	X, r25
    289e:	55 97       	sbiw	r26, 0x15	; 21
    28a0:	1e 96       	adiw	r26, 0x0e	; 14
    28a2:	4d 90       	ld	r4, X+
    28a4:	5d 90       	ld	r5, X+
    28a6:	6d 90       	ld	r6, X+
    28a8:	7c 90       	ld	r7, X
    28aa:	51 97       	sbiw	r26, 0x11	; 17
    28ac:	45 28       	or	r4, r5
    28ae:	46 28       	or	r4, r6
    28b0:	47 28       	or	r4, r7
    28b2:	29 f4       	brne	.+10     	; 0x28be <f_write+0x170>
    28b4:	fd 01       	movw	r30, r26
    28b6:	66 87       	std	Z+14, r22	; 0x0e
    28b8:	77 87       	std	Z+15, r23	; 0x0f
    28ba:	80 8b       	std	Z+16, r24	; 0x10
    28bc:	91 8b       	std	Z+17, r25	; 0x11
    28be:	ac 81       	ldd	r26, Y+4	; 0x04
    28c0:	bd 81       	ldd	r27, Y+5	; 0x05
    28c2:	14 96       	adiw	r26, 0x04	; 4
    28c4:	8c 91       	ld	r24, X
    28c6:	14 97       	sbiw	r26, 0x04	; 4
    28c8:	86 ff       	sbrs	r24, 6
    28ca:	1e c0       	rjmp	.+60     	; 0x2908 <f_write+0x1ba>
    28cc:	56 96       	adiw	r26, 0x16	; 22
    28ce:	2d 91       	ld	r18, X+
    28d0:	3d 91       	ld	r19, X+
    28d2:	4d 91       	ld	r20, X+
    28d4:	5c 91       	ld	r21, X
    28d6:	59 97       	sbiw	r26, 0x19	; 25
    28d8:	ed 91       	ld	r30, X+
    28da:	fc 91       	ld	r31, X
    28dc:	01 e0       	ldi	r16, 0x01	; 1
    28de:	10 e0       	ldi	r17, 0x00	; 0
    28e0:	6a 81       	ldd	r22, Y+2	; 0x02
    28e2:	7b 81       	ldd	r23, Y+3	; 0x03
    28e4:	81 81       	ldd	r24, Z+1	; 0x01
    28e6:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
    28ea:	88 23       	and	r24, r24
    28ec:	29 f0       	breq	.+10     	; 0x28f8 <f_write+0x1aa>
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	ec 81       	ldd	r30, Y+4	; 0x04
    28f2:	fd 81       	ldd	r31, Y+5	; 0x05
    28f4:	85 83       	std	Z+5, r24	; 0x05
    28f6:	02 c1       	rjmp	.+516    	; 0x2afc <f_write+0x3ae>
    28f8:	ac 81       	ldd	r26, Y+4	; 0x04
    28fa:	bd 81       	ldd	r27, Y+5	; 0x05
    28fc:	14 96       	adiw	r26, 0x04	; 4
    28fe:	8c 91       	ld	r24, X
    2900:	14 97       	sbiw	r26, 0x04	; 4
    2902:	8f 7b       	andi	r24, 0xBF	; 191
    2904:	14 96       	adiw	r26, 0x04	; 4
    2906:	8c 93       	st	X, r24
    2908:	ec 81       	ldd	r30, Y+4	; 0x04
    290a:	fd 81       	ldd	r31, Y+5	; 0x05
    290c:	20 80       	ld	r2, Z
    290e:	31 80       	ldd	r3, Z+1	; 0x01
    2910:	42 89       	ldd	r20, Z+18	; 0x12
    2912:	53 89       	ldd	r21, Z+19	; 0x13
    2914:	64 89       	ldd	r22, Z+20	; 0x14
    2916:	75 89       	ldd	r23, Z+21	; 0x15
    2918:	c1 01       	movw	r24, r2
    291a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <clust2sect>
    291e:	61 15       	cp	r22, r1
    2920:	71 05       	cpc	r23, r1
    2922:	81 05       	cpc	r24, r1
    2924:	91 05       	cpc	r25, r1
    2926:	31 f4       	brne	.+12     	; 0x2934 <f_write+0x1e6>
    2928:	82 e0       	ldi	r24, 0x02	; 2
    292a:	ac 81       	ldd	r26, Y+4	; 0x04
    292c:	bd 81       	ldd	r27, Y+5	; 0x05
    292e:	15 96       	adiw	r26, 0x05	; 5
    2930:	8c 93       	st	X, r24
    2932:	e4 c0       	rjmp	.+456    	; 0x2afc <f_write+0x3ae>
    2934:	2b 01       	movw	r4, r22
    2936:	3c 01       	movw	r6, r24
    2938:	b9 81       	ldd	r27, Y+1	; 0x01
    293a:	4b 0e       	add	r4, r27
    293c:	51 1c       	adc	r5, r1
    293e:	61 1c       	adc	r6, r1
    2940:	71 1c       	adc	r7, r1
    2942:	47 01       	movw	r8, r14
    2944:	89 2c       	mov	r8, r9
    2946:	99 24       	eor	r9, r9
    2948:	86 94       	lsr	r8
    294a:	81 14       	cp	r8, r1
    294c:	91 04       	cpc	r9, r1
    294e:	09 f4       	brne	.+2      	; 0x2952 <f_write+0x204>
    2950:	47 c0       	rjmp	.+142    	; 0x29e0 <f_write+0x292>
    2952:	f1 01       	movw	r30, r2
    2954:	42 81       	ldd	r20, Z+2	; 0x02
    2956:	24 2f       	mov	r18, r20
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	c4 01       	movw	r24, r8
    295c:	8b 0f       	add	r24, r27
    295e:	91 1d       	adc	r25, r1
    2960:	28 17       	cp	r18, r24
    2962:	39 07       	cpc	r19, r25
    2964:	18 f4       	brcc	.+6      	; 0x296c <f_write+0x21e>
    2966:	49 01       	movw	r8, r18
    2968:	8b 1a       	sub	r8, r27
    296a:	91 08       	sbc	r9, r1
    296c:	84 01       	movw	r16, r8
    296e:	a3 01       	movw	r20, r6
    2970:	92 01       	movw	r18, r4
    2972:	b5 01       	movw	r22, r10
    2974:	d1 01       	movw	r26, r2
    2976:	11 96       	adiw	r26, 0x01	; 1
    2978:	8c 91       	ld	r24, X
    297a:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
    297e:	88 23       	and	r24, r24
    2980:	29 f0       	breq	.+10     	; 0x298c <f_write+0x23e>
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	ec 81       	ldd	r30, Y+4	; 0x04
    2986:	fd 81       	ldd	r31, Y+5	; 0x05
    2988:	85 83       	std	Z+5, r24	; 0x05
    298a:	b8 c0       	rjmp	.+368    	; 0x2afc <f_write+0x3ae>
    298c:	ec 81       	ldd	r30, Y+4	; 0x04
    298e:	fd 81       	ldd	r31, Y+5	; 0x05
    2990:	86 89       	ldd	r24, Z+22	; 0x16
    2992:	97 89       	ldd	r25, Z+23	; 0x17
    2994:	a0 8d       	ldd	r26, Z+24	; 0x18
    2996:	b1 8d       	ldd	r27, Z+25	; 0x19
    2998:	84 19       	sub	r24, r4
    299a:	95 09       	sbc	r25, r5
    299c:	a6 09       	sbc	r26, r6
    299e:	b7 09       	sbc	r27, r7
    29a0:	a4 01       	movw	r20, r8
    29a2:	60 e0       	ldi	r22, 0x00	; 0
    29a4:	70 e0       	ldi	r23, 0x00	; 0
    29a6:	84 17       	cp	r24, r20
    29a8:	95 07       	cpc	r25, r21
    29aa:	a6 07       	cpc	r26, r22
    29ac:	b7 07       	cpc	r27, r23
    29ae:	a0 f4       	brcc	.+40     	; 0x29d8 <f_write+0x28a>
    29b0:	98 2f       	mov	r25, r24
    29b2:	88 27       	eor	r24, r24
    29b4:	99 0f       	add	r25, r25
    29b6:	b5 01       	movw	r22, r10
    29b8:	68 0f       	add	r22, r24
    29ba:	79 1f       	adc	r23, r25
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	52 e0       	ldi	r21, 0x02	; 2
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	9b 81       	ldd	r25, Y+3	; 0x03
    29c4:	0e 94 29 05 	call	0xa52	; 0xa52 <mem_cpy>
    29c8:	ac 81       	ldd	r26, Y+4	; 0x04
    29ca:	bd 81       	ldd	r27, Y+5	; 0x05
    29cc:	14 96       	adiw	r26, 0x04	; 4
    29ce:	8c 91       	ld	r24, X
    29d0:	14 97       	sbiw	r26, 0x04	; 4
    29d2:	8f 7b       	andi	r24, 0xBF	; 191
    29d4:	14 96       	adiw	r26, 0x04	; 4
    29d6:	8c 93       	st	X, r24
    29d8:	98 2c       	mov	r9, r8
    29da:	88 24       	eor	r8, r8
    29dc:	99 0c       	add	r9, r9
    29de:	54 c0       	rjmp	.+168    	; 0x2a88 <f_write+0x33a>
    29e0:	ec 81       	ldd	r30, Y+4	; 0x04
    29e2:	fd 81       	ldd	r31, Y+5	; 0x05
    29e4:	86 89       	ldd	r24, Z+22	; 0x16
    29e6:	97 89       	ldd	r25, Z+23	; 0x17
    29e8:	a0 8d       	ldd	r26, Z+24	; 0x18
    29ea:	b1 8d       	ldd	r27, Z+25	; 0x19
    29ec:	84 15       	cp	r24, r4
    29ee:	95 05       	cpc	r25, r5
    29f0:	a6 05       	cpc	r26, r6
    29f2:	b7 05       	cpc	r27, r7
    29f4:	f9 f0       	breq	.+62     	; 0x2a34 <f_write+0x2e6>
    29f6:	46 81       	ldd	r20, Z+6	; 0x06
    29f8:	57 81       	ldd	r21, Z+7	; 0x07
    29fa:	60 85       	ldd	r22, Z+8	; 0x08
    29fc:	71 85       	ldd	r23, Z+9	; 0x09
    29fe:	82 85       	ldd	r24, Z+10	; 0x0a
    2a00:	93 85       	ldd	r25, Z+11	; 0x0b
    2a02:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a04:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a06:	48 17       	cp	r20, r24
    2a08:	59 07       	cpc	r21, r25
    2a0a:	6a 07       	cpc	r22, r26
    2a0c:	7b 07       	cpc	r23, r27
    2a0e:	90 f4       	brcc	.+36     	; 0x2a34 <f_write+0x2e6>
    2a10:	01 e0       	ldi	r16, 0x01	; 1
    2a12:	10 e0       	ldi	r17, 0x00	; 0
    2a14:	a3 01       	movw	r20, r6
    2a16:	92 01       	movw	r18, r4
    2a18:	6a 81       	ldd	r22, Y+2	; 0x02
    2a1a:	7b 81       	ldd	r23, Y+3	; 0x03
    2a1c:	d1 01       	movw	r26, r2
    2a1e:	11 96       	adiw	r26, 0x01	; 1
    2a20:	8c 91       	ld	r24, X
    2a22:	0e 94 bc 03 	call	0x778	; 0x778 <disk_read>
    2a26:	88 23       	and	r24, r24
    2a28:	29 f0       	breq	.+10     	; 0x2a34 <f_write+0x2e6>
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	ec 81       	ldd	r30, Y+4	; 0x04
    2a2e:	fd 81       	ldd	r31, Y+5	; 0x05
    2a30:	85 83       	std	Z+5, r24	; 0x05
    2a32:	64 c0       	rjmp	.+200    	; 0x2afc <f_write+0x3ae>
    2a34:	ac 81       	ldd	r26, Y+4	; 0x04
    2a36:	bd 81       	ldd	r27, Y+5	; 0x05
    2a38:	56 96       	adiw	r26, 0x16	; 22
    2a3a:	4d 92       	st	X+, r4
    2a3c:	5d 92       	st	X+, r5
    2a3e:	6d 92       	st	X+, r6
    2a40:	7c 92       	st	X, r7
    2a42:	59 97       	sbiw	r26, 0x19	; 25
    2a44:	ec 81       	ldd	r30, Y+4	; 0x04
    2a46:	fd 81       	ldd	r31, Y+5	; 0x05
    2a48:	86 81       	ldd	r24, Z+6	; 0x06
    2a4a:	97 81       	ldd	r25, Z+7	; 0x07
    2a4c:	a0 85       	ldd	r26, Z+8	; 0x08
    2a4e:	b1 85       	ldd	r27, Z+9	; 0x09
    2a50:	9c 01       	movw	r18, r24
    2a52:	31 70       	andi	r19, 0x01	; 1
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	52 e0       	ldi	r21, 0x02	; 2
    2a58:	42 1b       	sub	r20, r18
    2a5a:	53 0b       	sbc	r21, r19
    2a5c:	47 01       	movw	r8, r14
    2a5e:	4e 15       	cp	r20, r14
    2a60:	5f 05       	cpc	r21, r15
    2a62:	08 f4       	brcc	.+2      	; 0x2a66 <f_write+0x318>
    2a64:	4a 01       	movw	r8, r20
    2a66:	91 70       	andi	r25, 0x01	; 1
    2a68:	aa 27       	eor	r26, r26
    2a6a:	bb 27       	eor	r27, r27
    2a6c:	80 96       	adiw	r24, 0x20	; 32
    2a6e:	a4 01       	movw	r20, r8
    2a70:	b5 01       	movw	r22, r10
    2a72:	ac 81       	ldd	r26, Y+4	; 0x04
    2a74:	bd 81       	ldd	r27, Y+5	; 0x05
    2a76:	8a 0f       	add	r24, r26
    2a78:	9b 1f       	adc	r25, r27
    2a7a:	0e 94 29 05 	call	0xa52	; 0xa52 <mem_cpy>
    2a7e:	ec 81       	ldd	r30, Y+4	; 0x04
    2a80:	fd 81       	ldd	r31, Y+5	; 0x05
    2a82:	84 81       	ldd	r24, Z+4	; 0x04
    2a84:	80 64       	ori	r24, 0x40	; 64
    2a86:	84 83       	std	Z+4, r24	; 0x04
    2a88:	a8 0c       	add	r10, r8
    2a8a:	b9 1c       	adc	r11, r9
    2a8c:	ec 81       	ldd	r30, Y+4	; 0x04
    2a8e:	fd 81       	ldd	r31, Y+5	; 0x05
    2a90:	86 81       	ldd	r24, Z+6	; 0x06
    2a92:	97 81       	ldd	r25, Z+7	; 0x07
    2a94:	a0 85       	ldd	r26, Z+8	; 0x08
    2a96:	b1 85       	ldd	r27, Z+9	; 0x09
    2a98:	88 0d       	add	r24, r8
    2a9a:	99 1d       	adc	r25, r9
    2a9c:	a1 1d       	adc	r26, r1
    2a9e:	b1 1d       	adc	r27, r1
    2aa0:	86 83       	std	Z+6, r24	; 0x06
    2aa2:	97 83       	std	Z+7, r25	; 0x07
    2aa4:	a0 87       	std	Z+8, r26	; 0x08
    2aa6:	b1 87       	std	Z+9, r27	; 0x09
    2aa8:	d6 01       	movw	r26, r12
    2aaa:	8d 91       	ld	r24, X+
    2aac:	9c 91       	ld	r25, X
    2aae:	11 97       	sbiw	r26, 0x01	; 1
    2ab0:	88 0d       	add	r24, r8
    2ab2:	99 1d       	adc	r25, r9
    2ab4:	8d 93       	st	X+, r24
    2ab6:	9c 93       	st	X, r25
    2ab8:	e8 18       	sub	r14, r8
    2aba:	f9 08       	sbc	r15, r9
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <f_write+0x372>
    2abe:	89 ce       	rjmp	.-750    	; 0x27d2 <f_write+0x84>
    2ac0:	ec 81       	ldd	r30, Y+4	; 0x04
    2ac2:	fd 81       	ldd	r31, Y+5	; 0x05
    2ac4:	86 81       	ldd	r24, Z+6	; 0x06
    2ac6:	97 81       	ldd	r25, Z+7	; 0x07
    2ac8:	a0 85       	ldd	r26, Z+8	; 0x08
    2aca:	b1 85       	ldd	r27, Z+9	; 0x09
    2acc:	42 85       	ldd	r20, Z+10	; 0x0a
    2ace:	53 85       	ldd	r21, Z+11	; 0x0b
    2ad0:	64 85       	ldd	r22, Z+12	; 0x0c
    2ad2:	75 85       	ldd	r23, Z+13	; 0x0d
    2ad4:	48 17       	cp	r20, r24
    2ad6:	59 07       	cpc	r21, r25
    2ad8:	6a 07       	cpc	r22, r26
    2ada:	7b 07       	cpc	r23, r27
    2adc:	20 f4       	brcc	.+8      	; 0x2ae6 <f_write+0x398>
    2ade:	82 87       	std	Z+10, r24	; 0x0a
    2ae0:	93 87       	std	Z+11, r25	; 0x0b
    2ae2:	a4 87       	std	Z+12, r26	; 0x0c
    2ae4:	b5 87       	std	Z+13, r27	; 0x0d
    2ae6:	ac 81       	ldd	r26, Y+4	; 0x04
    2ae8:	bd 81       	ldd	r27, Y+5	; 0x05
    2aea:	14 96       	adiw	r26, 0x04	; 4
    2aec:	8c 91       	ld	r24, X
    2aee:	14 97       	sbiw	r26, 0x04	; 4
    2af0:	80 62       	ori	r24, 0x20	; 32
    2af2:	14 96       	adiw	r26, 0x04	; 4
    2af4:	8c 93       	st	X, r24
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	01 c0       	rjmp	.+2      	; 0x2afc <f_write+0x3ae>
    2afa:	87 e0       	ldi	r24, 0x07	; 7
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	1f 91       	pop	r17
    2b0c:	0f 91       	pop	r16
    2b0e:	ff 90       	pop	r15
    2b10:	ef 90       	pop	r14
    2b12:	df 90       	pop	r13
    2b14:	cf 90       	pop	r12
    2b16:	bf 90       	pop	r11
    2b18:	af 90       	pop	r10
    2b1a:	9f 90       	pop	r9
    2b1c:	8f 90       	pop	r8
    2b1e:	7f 90       	pop	r7
    2b20:	6f 90       	pop	r6
    2b22:	5f 90       	pop	r5
    2b24:	4f 90       	pop	r4
    2b26:	3f 90       	pop	r3
    2b28:	2f 90       	pop	r2
    2b2a:	08 95       	ret

00002b2c <f_sync>:
    2b2c:	0f 93       	push	r16
    2b2e:	1f 93       	push	r17
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	ec 01       	movw	r28, r24
    2b36:	0e 94 a7 06 	call	0xd4e	; 0xd4e <validate>
    2b3a:	81 11       	cpse	r24, r1
    2b3c:	51 c0       	rjmp	.+162    	; 0x2be0 <f_sync+0xb4>
    2b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b40:	85 ff       	sbrs	r24, 5
    2b42:	4b c0       	rjmp	.+150    	; 0x2bda <f_sync+0xae>
    2b44:	86 ff       	sbrs	r24, 6
    2b46:	13 c0       	rjmp	.+38     	; 0x2b6e <f_sync+0x42>
    2b48:	2e 89       	ldd	r18, Y+22	; 0x16
    2b4a:	3f 89       	ldd	r19, Y+23	; 0x17
    2b4c:	48 8d       	ldd	r20, Y+24	; 0x18
    2b4e:	59 8d       	ldd	r21, Y+25	; 0x19
    2b50:	e8 81       	ld	r30, Y
    2b52:	f9 81       	ldd	r31, Y+1	; 0x01
    2b54:	01 e0       	ldi	r16, 0x01	; 1
    2b56:	10 e0       	ldi	r17, 0x00	; 0
    2b58:	be 01       	movw	r22, r28
    2b5a:	60 5e       	subi	r22, 0xE0	; 224
    2b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5e:	81 81       	ldd	r24, Z+1	; 0x01
    2b60:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
    2b64:	81 11       	cpse	r24, r1
    2b66:	3b c0       	rjmp	.+118    	; 0x2bde <f_sync+0xb2>
    2b68:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6a:	8f 7b       	andi	r24, 0xBF	; 191
    2b6c:	8c 83       	std	Y+4, r24	; 0x04
    2b6e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2b70:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2b72:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2b74:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2b76:	88 81       	ld	r24, Y
    2b78:	99 81       	ldd	r25, Y+1	; 0x01
    2b7a:	0e 94 00 06 	call	0xc00	; 0xc00 <move_window>
    2b7e:	81 11       	cpse	r24, r1
    2b80:	2f c0       	rjmp	.+94     	; 0x2be0 <f_sync+0xb4>
    2b82:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b84:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b86:	83 85       	ldd	r24, Z+11	; 0x0b
    2b88:	80 62       	ori	r24, 0x20	; 32
    2b8a:	83 87       	std	Z+11, r24	; 0x0b
    2b8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b8e:	84 8f       	std	Z+28, r24	; 0x1c
    2b90:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b92:	85 8f       	std	Z+29, r24	; 0x1d
    2b94:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b96:	86 8f       	std	Z+30, r24	; 0x1e
    2b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9a:	87 8f       	std	Z+31, r24	; 0x1f
    2b9c:	4e 85       	ldd	r20, Y+14	; 0x0e
    2b9e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2ba0:	68 89       	ldd	r22, Y+16	; 0x10
    2ba2:	79 89       	ldd	r23, Y+17	; 0x11
    2ba4:	42 8f       	std	Z+26, r20	; 0x1a
    2ba6:	53 8f       	std	Z+27, r21	; 0x1b
    2ba8:	ab 01       	movw	r20, r22
    2baa:	66 27       	eor	r22, r22
    2bac:	77 27       	eor	r23, r23
    2bae:	44 8b       	std	Z+20, r20	; 0x14
    2bb0:	55 8b       	std	Z+21, r21	; 0x15
    2bb2:	16 8a       	std	Z+22, r1	; 0x16
    2bb4:	17 8a       	std	Z+23, r1	; 0x17
    2bb6:	89 e6       	ldi	r24, 0x69	; 105
    2bb8:	80 8f       	std	Z+24, r24	; 0x18
    2bba:	8d eb       	ldi	r24, 0xBD	; 189
    2bbc:	81 8f       	std	Z+25, r24	; 0x19
    2bbe:	12 8a       	std	Z+18, r1	; 0x12
    2bc0:	13 8a       	std	Z+19, r1	; 0x13
    2bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc4:	8f 7d       	andi	r24, 0xDF	; 223
    2bc6:	8c 83       	std	Y+4, r24	; 0x04
    2bc8:	e8 81       	ld	r30, Y
    2bca:	f9 81       	ldd	r31, Y+1	; 0x01
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	84 83       	std	Z+4, r24	; 0x04
    2bd0:	88 81       	ld	r24, Y
    2bd2:	99 81       	ldd	r25, Y+1	; 0x01
    2bd4:	0e 94 3e 0a 	call	0x147c	; 0x147c <sync_fs>
    2bd8:	03 c0       	rjmp	.+6      	; 0x2be0 <f_sync+0xb4>
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	01 c0       	rjmp	.+2      	; 0x2be0 <f_sync+0xb4>
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	1f 91       	pop	r17
    2be6:	0f 91       	pop	r16
    2be8:	08 95       	ret

00002bea <f_close>:
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	ec 01       	movw	r28, r24
    2bf0:	9d df       	rcall	.-198    	; 0x2b2c <f_sync>
    2bf2:	81 11       	cpse	r24, r1
    2bf4:	07 c0       	rjmp	.+14     	; 0x2c04 <f_close+0x1a>
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <validate>
    2bfc:	81 11       	cpse	r24, r1
    2bfe:	02 c0       	rjmp	.+4      	; 0x2c04 <f_close+0x1a>
    2c00:	19 82       	std	Y+1, r1	; 0x01
    2c02:	18 82       	st	Y, r1
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	08 95       	ret

00002c0a <f_lseek>:
    2c0a:	2f 92       	push	r2
    2c0c:	3f 92       	push	r3
    2c0e:	4f 92       	push	r4
    2c10:	5f 92       	push	r5
    2c12:	6f 92       	push	r6
    2c14:	7f 92       	push	r7
    2c16:	8f 92       	push	r8
    2c18:	9f 92       	push	r9
    2c1a:	af 92       	push	r10
    2c1c:	bf 92       	push	r11
    2c1e:	cf 92       	push	r12
    2c20:	df 92       	push	r13
    2c22:	ef 92       	push	r14
    2c24:	ff 92       	push	r15
    2c26:	0f 93       	push	r16
    2c28:	1f 93       	push	r17
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <f_lseek+0x26>
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <f_lseek+0x28>
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	1c 01       	movw	r2, r24
    2c38:	6a 01       	movw	r12, r20
    2c3a:	7b 01       	movw	r14, r22
    2c3c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <validate>
    2c40:	81 11       	cpse	r24, r1
    2c42:	bd c1       	rjmp	.+890    	; 0x2fbe <f_lseek+0x3b4>
    2c44:	d1 01       	movw	r26, r2
    2c46:	15 96       	adiw	r26, 0x05	; 5
    2c48:	8c 91       	ld	r24, X
    2c4a:	15 97       	sbiw	r26, 0x05	; 5
    2c4c:	81 11       	cpse	r24, r1
    2c4e:	b7 c1       	rjmp	.+878    	; 0x2fbe <f_lseek+0x3b4>
    2c50:	1a 96       	adiw	r26, 0x0a	; 10
    2c52:	8d 91       	ld	r24, X+
    2c54:	9d 91       	ld	r25, X+
    2c56:	0d 90       	ld	r0, X+
    2c58:	bc 91       	ld	r27, X
    2c5a:	a0 2d       	mov	r26, r0
    2c5c:	8c 15       	cp	r24, r12
    2c5e:	9d 05       	cpc	r25, r13
    2c60:	ae 05       	cpc	r26, r14
    2c62:	bf 05       	cpc	r27, r15
    2c64:	30 f4       	brcc	.+12     	; 0x2c72 <f_lseek+0x68>
    2c66:	f1 01       	movw	r30, r2
    2c68:	24 81       	ldd	r18, Z+4	; 0x04
    2c6a:	21 fd       	sbrc	r18, 1
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <f_lseek+0x68>
    2c6e:	6c 01       	movw	r12, r24
    2c70:	7d 01       	movw	r14, r26
    2c72:	d1 01       	movw	r26, r2
    2c74:	16 96       	adiw	r26, 0x06	; 6
    2c76:	4d 90       	ld	r4, X+
    2c78:	5d 90       	ld	r5, X+
    2c7a:	6d 90       	ld	r6, X+
    2c7c:	7c 90       	ld	r7, X
    2c7e:	19 97       	sbiw	r26, 0x09	; 9
    2c80:	f1 01       	movw	r30, r2
    2c82:	16 82       	std	Z+6, r1	; 0x06
    2c84:	17 82       	std	Z+7, r1	; 0x07
    2c86:	10 86       	std	Z+8, r1	; 0x08
    2c88:	11 86       	std	Z+9, r1	; 0x09
    2c8a:	c1 14       	cp	r12, r1
    2c8c:	d1 04       	cpc	r13, r1
    2c8e:	e1 04       	cpc	r14, r1
    2c90:	f1 04       	cpc	r15, r1
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <f_lseek+0x8c>
    2c94:	91 c1       	rjmp	.+802    	; 0x2fb8 <f_lseek+0x3ae>
    2c96:	00 81       	ld	r16, Z
    2c98:	11 81       	ldd	r17, Z+1	; 0x01
    2c9a:	d8 01       	movw	r26, r16
    2c9c:	12 96       	adiw	r26, 0x02	; 2
    2c9e:	8c 90       	ld	r8, X
    2ca0:	91 2c       	mov	r9, r1
    2ca2:	a1 2c       	mov	r10, r1
    2ca4:	b1 2c       	mov	r11, r1
    2ca6:	07 2e       	mov	r0, r23
    2ca8:	79 e0       	ldi	r23, 0x09	; 9
    2caa:	88 0c       	add	r8, r8
    2cac:	99 1c       	adc	r9, r9
    2cae:	aa 1c       	adc	r10, r10
    2cb0:	bb 1c       	adc	r11, r11
    2cb2:	7a 95       	dec	r23
    2cb4:	d1 f7       	brne	.-12     	; 0x2caa <f_lseek+0xa0>
    2cb6:	70 2d       	mov	r23, r0
    2cb8:	41 14       	cp	r4, r1
    2cba:	51 04       	cpc	r5, r1
    2cbc:	61 04       	cpc	r6, r1
    2cbe:	71 04       	cpc	r7, r1
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <f_lseek+0xba>
    2cc2:	3f c0       	rjmp	.+126    	; 0x2d42 <f_lseek+0x138>
    2cc4:	b1 e0       	ldi	r27, 0x01	; 1
    2cc6:	4b 1a       	sub	r4, r27
    2cc8:	51 08       	sbc	r5, r1
    2cca:	61 08       	sbc	r6, r1
    2ccc:	71 08       	sbc	r7, r1
    2cce:	c7 01       	movw	r24, r14
    2cd0:	b6 01       	movw	r22, r12
    2cd2:	61 50       	subi	r22, 0x01	; 1
    2cd4:	71 09       	sbc	r23, r1
    2cd6:	81 09       	sbc	r24, r1
    2cd8:	91 09       	sbc	r25, r1
    2cda:	a5 01       	movw	r20, r10
    2cdc:	94 01       	movw	r18, r8
    2cde:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__udivmodsi4>
    2ce2:	29 83       	std	Y+1, r18	; 0x01
    2ce4:	3a 83       	std	Y+2, r19	; 0x02
    2ce6:	4b 83       	std	Y+3, r20	; 0x03
    2ce8:	5c 83       	std	Y+4, r21	; 0x04
    2cea:	c3 01       	movw	r24, r6
    2cec:	b2 01       	movw	r22, r4
    2cee:	a5 01       	movw	r20, r10
    2cf0:	94 01       	movw	r18, r8
    2cf2:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__udivmodsi4>
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfa:	ab 81       	ldd	r26, Y+3	; 0x03
    2cfc:	bc 81       	ldd	r27, Y+4	; 0x04
    2cfe:	82 17       	cp	r24, r18
    2d00:	93 07       	cpc	r25, r19
    2d02:	a4 07       	cpc	r26, r20
    2d04:	b5 07       	cpc	r27, r21
    2d06:	e8 f0       	brcs	.+58     	; 0x2d42 <f_lseek+0x138>
    2d08:	88 27       	eor	r24, r24
    2d0a:	99 27       	eor	r25, r25
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	88 19       	sub	r24, r8
    2d10:	99 09       	sbc	r25, r9
    2d12:	aa 09       	sbc	r26, r10
    2d14:	bb 09       	sbc	r27, r11
    2d16:	48 22       	and	r4, r24
    2d18:	59 22       	and	r5, r25
    2d1a:	6a 22       	and	r6, r26
    2d1c:	7b 22       	and	r7, r27
    2d1e:	d1 01       	movw	r26, r2
    2d20:	16 96       	adiw	r26, 0x06	; 6
    2d22:	4d 92       	st	X+, r4
    2d24:	5d 92       	st	X+, r5
    2d26:	6d 92       	st	X+, r6
    2d28:	7c 92       	st	X, r7
    2d2a:	19 97       	sbiw	r26, 0x09	; 9
    2d2c:	c4 18       	sub	r12, r4
    2d2e:	d5 08       	sbc	r13, r5
    2d30:	e6 08       	sbc	r14, r6
    2d32:	f7 08       	sbc	r15, r7
    2d34:	52 96       	adiw	r26, 0x12	; 18
    2d36:	6d 91       	ld	r22, X+
    2d38:	7d 91       	ld	r23, X+
    2d3a:	8d 91       	ld	r24, X+
    2d3c:	9c 91       	ld	r25, X
    2d3e:	55 97       	sbiw	r26, 0x15	; 21
    2d40:	30 c0       	rjmp	.+96     	; 0x2da2 <f_lseek+0x198>
    2d42:	f1 01       	movw	r30, r2
    2d44:	66 85       	ldd	r22, Z+14	; 0x0e
    2d46:	77 85       	ldd	r23, Z+15	; 0x0f
    2d48:	80 89       	ldd	r24, Z+16	; 0x10
    2d4a:	91 89       	ldd	r25, Z+17	; 0x11
    2d4c:	61 15       	cp	r22, r1
    2d4e:	71 05       	cpc	r23, r1
    2d50:	81 05       	cpc	r24, r1
    2d52:	91 05       	cpc	r25, r1
    2d54:	09 f5       	brne	.+66     	; 0x2d98 <f_lseek+0x18e>
    2d56:	40 e0       	ldi	r20, 0x00	; 0
    2d58:	50 e0       	ldi	r21, 0x00	; 0
    2d5a:	ba 01       	movw	r22, r20
    2d5c:	c8 01       	movw	r24, r16
    2d5e:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <create_chain>
    2d62:	61 30       	cpi	r22, 0x01	; 1
    2d64:	71 05       	cpc	r23, r1
    2d66:	81 05       	cpc	r24, r1
    2d68:	91 05       	cpc	r25, r1
    2d6a:	29 f4       	brne	.+10     	; 0x2d76 <f_lseek+0x16c>
    2d6c:	82 e0       	ldi	r24, 0x02	; 2
    2d6e:	d1 01       	movw	r26, r2
    2d70:	15 96       	adiw	r26, 0x05	; 5
    2d72:	8c 93       	st	X, r24
    2d74:	24 c1       	rjmp	.+584    	; 0x2fbe <f_lseek+0x3b4>
    2d76:	6f 3f       	cpi	r22, 0xFF	; 255
    2d78:	bf ef       	ldi	r27, 0xFF	; 255
    2d7a:	7b 07       	cpc	r23, r27
    2d7c:	8b 07       	cpc	r24, r27
    2d7e:	9b 07       	cpc	r25, r27
    2d80:	21 f4       	brne	.+8      	; 0x2d8a <f_lseek+0x180>
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	f1 01       	movw	r30, r2
    2d86:	85 83       	std	Z+5, r24	; 0x05
    2d88:	1a c1       	rjmp	.+564    	; 0x2fbe <f_lseek+0x3b4>
    2d8a:	d1 01       	movw	r26, r2
    2d8c:	1e 96       	adiw	r26, 0x0e	; 14
    2d8e:	6d 93       	st	X+, r22
    2d90:	7d 93       	st	X+, r23
    2d92:	8d 93       	st	X+, r24
    2d94:	9c 93       	st	X, r25
    2d96:	51 97       	sbiw	r26, 0x11	; 17
    2d98:	f1 01       	movw	r30, r2
    2d9a:	62 8b       	std	Z+18, r22	; 0x12
    2d9c:	73 8b       	std	Z+19, r23	; 0x13
    2d9e:	84 8b       	std	Z+20, r24	; 0x14
    2da0:	95 8b       	std	Z+21, r25	; 0x15
    2da2:	61 15       	cp	r22, r1
    2da4:	71 05       	cpc	r23, r1
    2da6:	81 05       	cpc	r24, r1
    2da8:	91 05       	cpc	r25, r1
    2daa:	09 f4       	brne	.+2      	; 0x2dae <f_lseek+0x1a4>
    2dac:	9f c0       	rjmp	.+318    	; 0x2eec <f_lseek+0x2e2>
    2dae:	8c 14       	cp	r8, r12
    2db0:	9d 04       	cpc	r9, r13
    2db2:	ae 04       	cpc	r10, r14
    2db4:	bf 04       	cpc	r11, r15
    2db6:	08 f0       	brcs	.+2      	; 0x2dba <f_lseek+0x1b0>
    2db8:	62 c0       	rjmp	.+196    	; 0x2e7e <f_lseek+0x274>
    2dba:	ab 01       	movw	r20, r22
    2dbc:	bc 01       	movw	r22, r24
    2dbe:	d1 01       	movw	r26, r2
    2dc0:	14 96       	adiw	r26, 0x04	; 4
    2dc2:	2c 91       	ld	r18, X
    2dc4:	14 97       	sbiw	r26, 0x04	; 4
    2dc6:	21 ff       	sbrs	r18, 1
    2dc8:	0c c0       	rjmp	.+24     	; 0x2de2 <f_lseek+0x1d8>
    2dca:	8d 91       	ld	r24, X+
    2dcc:	9c 91       	ld	r25, X
    2dce:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <create_chain>
    2dd2:	ab 01       	movw	r20, r22
    2dd4:	bc 01       	movw	r22, r24
    2dd6:	41 15       	cp	r20, r1
    2dd8:	51 05       	cpc	r21, r1
    2dda:	61 05       	cpc	r22, r1
    2ddc:	71 05       	cpc	r23, r1
    2dde:	41 f4       	brne	.+16     	; 0x2df0 <f_lseek+0x1e6>
    2de0:	4a c0       	rjmp	.+148    	; 0x2e76 <f_lseek+0x26c>
    2de2:	f1 01       	movw	r30, r2
    2de4:	80 81       	ld	r24, Z
    2de6:	91 81       	ldd	r25, Z+1	; 0x01
    2de8:	0e 94 de 0a 	call	0x15bc	; 0x15bc <get_fat>
    2dec:	ab 01       	movw	r20, r22
    2dee:	bc 01       	movw	r22, r24
    2df0:	4f 3f       	cpi	r20, 0xFF	; 255
    2df2:	ff ef       	ldi	r31, 0xFF	; 255
    2df4:	5f 07       	cpc	r21, r31
    2df6:	6f 07       	cpc	r22, r31
    2df8:	7f 07       	cpc	r23, r31
    2dfa:	29 f4       	brne	.+10     	; 0x2e06 <f_lseek+0x1fc>
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	d1 01       	movw	r26, r2
    2e00:	15 96       	adiw	r26, 0x05	; 5
    2e02:	8c 93       	st	X, r24
    2e04:	dc c0       	rjmp	.+440    	; 0x2fbe <f_lseek+0x3b4>
    2e06:	42 30       	cpi	r20, 0x02	; 2
    2e08:	51 05       	cpc	r21, r1
    2e0a:	61 05       	cpc	r22, r1
    2e0c:	71 05       	cpc	r23, r1
    2e0e:	60 f0       	brcs	.+24     	; 0x2e28 <f_lseek+0x21e>
    2e10:	d1 01       	movw	r26, r2
    2e12:	ed 91       	ld	r30, X+
    2e14:	fc 91       	ld	r31, X
    2e16:	02 89       	ldd	r16, Z+18	; 0x12
    2e18:	13 89       	ldd	r17, Z+19	; 0x13
    2e1a:	24 89       	ldd	r18, Z+20	; 0x14
    2e1c:	35 89       	ldd	r19, Z+21	; 0x15
    2e1e:	40 17       	cp	r20, r16
    2e20:	51 07       	cpc	r21, r17
    2e22:	62 07       	cpc	r22, r18
    2e24:	73 07       	cpc	r23, r19
    2e26:	20 f0       	brcs	.+8      	; 0x2e30 <f_lseek+0x226>
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	f1 01       	movw	r30, r2
    2e2c:	85 83       	std	Z+5, r24	; 0x05
    2e2e:	c7 c0       	rjmp	.+398    	; 0x2fbe <f_lseek+0x3b4>
    2e30:	d1 01       	movw	r26, r2
    2e32:	52 96       	adiw	r26, 0x12	; 18
    2e34:	4d 93       	st	X+, r20
    2e36:	5d 93       	st	X+, r21
    2e38:	6d 93       	st	X+, r22
    2e3a:	7c 93       	st	X, r23
    2e3c:	55 97       	sbiw	r26, 0x15	; 21
    2e3e:	16 96       	adiw	r26, 0x06	; 6
    2e40:	0d 91       	ld	r16, X+
    2e42:	1d 91       	ld	r17, X+
    2e44:	2d 91       	ld	r18, X+
    2e46:	3c 91       	ld	r19, X
    2e48:	19 97       	sbiw	r26, 0x09	; 9
    2e4a:	08 0d       	add	r16, r8
    2e4c:	19 1d       	adc	r17, r9
    2e4e:	2a 1d       	adc	r18, r10
    2e50:	3b 1d       	adc	r19, r11
    2e52:	f1 01       	movw	r30, r2
    2e54:	06 83       	std	Z+6, r16	; 0x06
    2e56:	17 83       	std	Z+7, r17	; 0x07
    2e58:	20 87       	std	Z+8, r18	; 0x08
    2e5a:	31 87       	std	Z+9, r19	; 0x09
    2e5c:	c8 18       	sub	r12, r8
    2e5e:	d9 08       	sbc	r13, r9
    2e60:	ea 08       	sbc	r14, r10
    2e62:	fb 08       	sbc	r15, r11
    2e64:	8c 14       	cp	r8, r12
    2e66:	9d 04       	cpc	r9, r13
    2e68:	ae 04       	cpc	r10, r14
    2e6a:	bf 04       	cpc	r11, r15
    2e6c:	08 f4       	brcc	.+2      	; 0x2e70 <f_lseek+0x266>
    2e6e:	a7 cf       	rjmp	.-178    	; 0x2dbe <f_lseek+0x1b4>
    2e70:	cb 01       	movw	r24, r22
    2e72:	ba 01       	movw	r22, r20
    2e74:	04 c0       	rjmp	.+8      	; 0x2e7e <f_lseek+0x274>
    2e76:	cb 01       	movw	r24, r22
    2e78:	ba 01       	movw	r22, r20
    2e7a:	75 01       	movw	r14, r10
    2e7c:	64 01       	movw	r12, r8
    2e7e:	d1 01       	movw	r26, r2
    2e80:	16 96       	adiw	r26, 0x06	; 6
    2e82:	0d 91       	ld	r16, X+
    2e84:	1d 91       	ld	r17, X+
    2e86:	2d 91       	ld	r18, X+
    2e88:	3c 91       	ld	r19, X
    2e8a:	19 97       	sbiw	r26, 0x09	; 9
    2e8c:	0c 0d       	add	r16, r12
    2e8e:	1d 1d       	adc	r17, r13
    2e90:	2e 1d       	adc	r18, r14
    2e92:	3f 1d       	adc	r19, r15
    2e94:	f1 01       	movw	r30, r2
    2e96:	06 83       	std	Z+6, r16	; 0x06
    2e98:	17 83       	std	Z+7, r17	; 0x07
    2e9a:	20 87       	std	Z+8, r18	; 0x08
    2e9c:	31 87       	std	Z+9, r19	; 0x09
    2e9e:	97 01       	movw	r18, r14
    2ea0:	86 01       	movw	r16, r12
    2ea2:	11 70       	andi	r17, 0x01	; 1
    2ea4:	22 27       	eor	r18, r18
    2ea6:	33 27       	eor	r19, r19
    2ea8:	01 2b       	or	r16, r17
    2eaa:	02 2b       	or	r16, r18
    2eac:	03 2b       	or	r16, r19
    2eae:	11 f1       	breq	.+68     	; 0x2ef4 <f_lseek+0x2ea>
    2eb0:	ab 01       	movw	r20, r22
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <clust2sect>
    2ebc:	61 15       	cp	r22, r1
    2ebe:	71 05       	cpc	r23, r1
    2ec0:	81 05       	cpc	r24, r1
    2ec2:	91 05       	cpc	r25, r1
    2ec4:	29 f4       	brne	.+10     	; 0x2ed0 <f_lseek+0x2c6>
    2ec6:	82 e0       	ldi	r24, 0x02	; 2
    2ec8:	d1 01       	movw	r26, r2
    2eca:	15 96       	adiw	r26, 0x05	; 5
    2ecc:	8c 93       	st	X, r24
    2ece:	77 c0       	rjmp	.+238    	; 0x2fbe <f_lseek+0x3b4>
    2ed0:	0b 2e       	mov	r0, r27
    2ed2:	b9 e0       	ldi	r27, 0x09	; 9
    2ed4:	f6 94       	lsr	r15
    2ed6:	e7 94       	ror	r14
    2ed8:	d7 94       	ror	r13
    2eda:	c7 94       	ror	r12
    2edc:	ba 95       	dec	r27
    2ede:	d1 f7       	brne	.-12     	; 0x2ed4 <f_lseek+0x2ca>
    2ee0:	b0 2d       	mov	r27, r0
    2ee2:	c6 0e       	add	r12, r22
    2ee4:	d7 1e       	adc	r13, r23
    2ee6:	e8 1e       	adc	r14, r24
    2ee8:	f9 1e       	adc	r15, r25
    2eea:	07 c0       	rjmp	.+14     	; 0x2efa <f_lseek+0x2f0>
    2eec:	c1 2c       	mov	r12, r1
    2eee:	d1 2c       	mov	r13, r1
    2ef0:	76 01       	movw	r14, r12
    2ef2:	03 c0       	rjmp	.+6      	; 0x2efa <f_lseek+0x2f0>
    2ef4:	c1 2c       	mov	r12, r1
    2ef6:	d1 2c       	mov	r13, r1
    2ef8:	76 01       	movw	r14, r12
    2efa:	f1 01       	movw	r30, r2
    2efc:	86 81       	ldd	r24, Z+6	; 0x06
    2efe:	97 81       	ldd	r25, Z+7	; 0x07
    2f00:	a0 85       	ldd	r26, Z+8	; 0x08
    2f02:	b1 85       	ldd	r27, Z+9	; 0x09
    2f04:	91 70       	andi	r25, 0x01	; 1
    2f06:	aa 27       	eor	r26, r26
    2f08:	bb 27       	eor	r27, r27
    2f0a:	89 2b       	or	r24, r25
    2f0c:	8a 2b       	or	r24, r26
    2f0e:	8b 2b       	or	r24, r27
    2f10:	e1 f1       	breq	.+120    	; 0x2f8a <f_lseek+0x380>
    2f12:	26 89       	ldd	r18, Z+22	; 0x16
    2f14:	37 89       	ldd	r19, Z+23	; 0x17
    2f16:	40 8d       	ldd	r20, Z+24	; 0x18
    2f18:	51 8d       	ldd	r21, Z+25	; 0x19
    2f1a:	2c 15       	cp	r18, r12
    2f1c:	3d 05       	cpc	r19, r13
    2f1e:	4e 05       	cpc	r20, r14
    2f20:	5f 05       	cpc	r21, r15
    2f22:	99 f1       	breq	.+102    	; 0x2f8a <f_lseek+0x380>
    2f24:	84 81       	ldd	r24, Z+4	; 0x04
    2f26:	86 ff       	sbrs	r24, 6
    2f28:	16 c0       	rjmp	.+44     	; 0x2f56 <f_lseek+0x34c>
    2f2a:	01 90       	ld	r0, Z+
    2f2c:	f0 81       	ld	r31, Z
    2f2e:	e0 2d       	mov	r30, r0
    2f30:	01 e0       	ldi	r16, 0x01	; 1
    2f32:	10 e0       	ldi	r17, 0x00	; 0
    2f34:	b1 01       	movw	r22, r2
    2f36:	60 5e       	subi	r22, 0xE0	; 224
    2f38:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3a:	81 81       	ldd	r24, Z+1	; 0x01
    2f3c:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
    2f40:	88 23       	and	r24, r24
    2f42:	29 f0       	breq	.+10     	; 0x2f4e <f_lseek+0x344>
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	d1 01       	movw	r26, r2
    2f48:	15 96       	adiw	r26, 0x05	; 5
    2f4a:	8c 93       	st	X, r24
    2f4c:	38 c0       	rjmp	.+112    	; 0x2fbe <f_lseek+0x3b4>
    2f4e:	f1 01       	movw	r30, r2
    2f50:	84 81       	ldd	r24, Z+4	; 0x04
    2f52:	8f 7b       	andi	r24, 0xBF	; 191
    2f54:	84 83       	std	Z+4, r24	; 0x04
    2f56:	d1 01       	movw	r26, r2
    2f58:	ed 91       	ld	r30, X+
    2f5a:	fc 91       	ld	r31, X
    2f5c:	01 e0       	ldi	r16, 0x01	; 1
    2f5e:	10 e0       	ldi	r17, 0x00	; 0
    2f60:	a7 01       	movw	r20, r14
    2f62:	96 01       	movw	r18, r12
    2f64:	b1 01       	movw	r22, r2
    2f66:	60 5e       	subi	r22, 0xE0	; 224
    2f68:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6a:	81 81       	ldd	r24, Z+1	; 0x01
    2f6c:	0e 94 bc 03 	call	0x778	; 0x778 <disk_read>
    2f70:	88 23       	and	r24, r24
    2f72:	21 f0       	breq	.+8      	; 0x2f7c <f_lseek+0x372>
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	f1 01       	movw	r30, r2
    2f78:	85 83       	std	Z+5, r24	; 0x05
    2f7a:	21 c0       	rjmp	.+66     	; 0x2fbe <f_lseek+0x3b4>
    2f7c:	d1 01       	movw	r26, r2
    2f7e:	56 96       	adiw	r26, 0x16	; 22
    2f80:	cd 92       	st	X+, r12
    2f82:	dd 92       	st	X+, r13
    2f84:	ed 92       	st	X+, r14
    2f86:	fc 92       	st	X, r15
    2f88:	59 97       	sbiw	r26, 0x19	; 25
    2f8a:	f1 01       	movw	r30, r2
    2f8c:	86 81       	ldd	r24, Z+6	; 0x06
    2f8e:	97 81       	ldd	r25, Z+7	; 0x07
    2f90:	a0 85       	ldd	r26, Z+8	; 0x08
    2f92:	b1 85       	ldd	r27, Z+9	; 0x09
    2f94:	42 85       	ldd	r20, Z+10	; 0x0a
    2f96:	53 85       	ldd	r21, Z+11	; 0x0b
    2f98:	64 85       	ldd	r22, Z+12	; 0x0c
    2f9a:	75 85       	ldd	r23, Z+13	; 0x0d
    2f9c:	48 17       	cp	r20, r24
    2f9e:	59 07       	cpc	r21, r25
    2fa0:	6a 07       	cpc	r22, r26
    2fa2:	7b 07       	cpc	r23, r27
    2fa4:	58 f4       	brcc	.+22     	; 0x2fbc <f_lseek+0x3b2>
    2fa6:	82 87       	std	Z+10, r24	; 0x0a
    2fa8:	93 87       	std	Z+11, r25	; 0x0b
    2faa:	a4 87       	std	Z+12, r26	; 0x0c
    2fac:	b5 87       	std	Z+13, r27	; 0x0d
    2fae:	84 81       	ldd	r24, Z+4	; 0x04
    2fb0:	80 62       	ori	r24, 0x20	; 32
    2fb2:	84 83       	std	Z+4, r24	; 0x04
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	03 c0       	rjmp	.+6      	; 0x2fbe <f_lseek+0x3b4>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	01 c0       	rjmp	.+2      	; 0x2fbe <f_lseek+0x3b4>
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	0f 90       	pop	r0
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	ff 90       	pop	r15
    2fd0:	ef 90       	pop	r14
    2fd2:	df 90       	pop	r13
    2fd4:	cf 90       	pop	r12
    2fd6:	bf 90       	pop	r11
    2fd8:	af 90       	pop	r10
    2fda:	9f 90       	pop	r9
    2fdc:	8f 90       	pop	r8
    2fde:	7f 90       	pop	r7
    2fe0:	6f 90       	pop	r6
    2fe2:	5f 90       	pop	r5
    2fe4:	4f 90       	pop	r4
    2fe6:	3f 90       	pop	r3
    2fe8:	2f 90       	pop	r2
    2fea:	08 95       	ret

00002fec <f_mkfs>:
FRESULT f_mkfs (
	const TCHAR* path,	/* Logical drive number */
	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au				/* Size of allocation unit in unit of byte or sector */
)
{
    2fec:	2f 92       	push	r2
    2fee:	3f 92       	push	r3
    2ff0:	4f 92       	push	r4
    2ff2:	5f 92       	push	r5
    2ff4:	6f 92       	push	r6
    2ff6:	7f 92       	push	r7
    2ff8:	8f 92       	push	r8
    2ffa:	9f 92       	push	r9
    2ffc:	af 92       	push	r10
    2ffe:	bf 92       	push	r11
    3000:	cf 92       	push	r12
    3002:	df 92       	push	r13
    3004:	ef 92       	push	r14
    3006:	ff 92       	push	r15
    3008:	0f 93       	push	r16
    300a:	1f 93       	push	r17
    300c:	cf 93       	push	r28
    300e:	df 93       	push	r29
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	a6 97       	sbiw	r28, 0x26	; 38
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	9a 87       	std	Y+10, r25	; 0x0a
    3022:	89 87       	std	Y+9, r24	; 0x09
    3024:	16 2f       	mov	r17, r22
    3026:	7a 01       	movw	r14, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
    3028:	62 30       	cpi	r22, 0x02	; 2
    302a:	08 f0       	brcs	.+2      	; 0x302e <f_mkfs+0x42>
    302c:	ae c4       	rjmp	.+2396   	; 0x398a <f_mkfs+0x99e>
	vol = get_ldnumber(&path);
    302e:	ce 01       	movw	r24, r28
    3030:	09 96       	adiw	r24, 0x09	; 9
    3032:	0e 94 63 05 	call	0xac6	; 0xac6 <get_ldnumber>
    3036:	5c 01       	movw	r10, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    3038:	99 23       	and	r25, r25
    303a:	0c f4       	brge	.+2      	; 0x303e <f_mkfs+0x52>
    303c:	a8 c4       	rjmp	.+2384   	; 0x398e <f_mkfs+0x9a2>
	fs = FatFs[vol];
    303e:	fc 01       	movw	r30, r24
    3040:	ee 0f       	add	r30, r30
    3042:	ff 1f       	adc	r31, r31
    3044:	ed 5e       	subi	r30, 0xED	; 237
    3046:	fd 4f       	sbci	r31, 0xFD	; 253
    3048:	80 80       	ld	r8, Z
    304a:	91 80       	ldd	r9, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;
    304c:	81 14       	cp	r8, r1
    304e:	91 04       	cpc	r9, r1
    3050:	09 f4       	brne	.+2      	; 0x3054 <f_mkfs+0x68>
    3052:	9f c4       	rjmp	.+2366   	; 0x3992 <f_mkfs+0x9a6>
	fs->fs_type = 0;
    3054:	d4 01       	movw	r26, r8
    3056:	1c 92       	st	X, r1
	pdrv = LD2PD(vol);	/* Physical drive */
    3058:	8f 87       	std	Y+15, r24	; 0x0f
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/

	/* Get disk statics */
	stat = disk_initialize(pdrv);
    305a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    305e:	80 fd       	sbrc	r24, 0
    3060:	9a c4       	rjmp	.+2356   	; 0x3996 <f_mkfs+0x9aa>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    3062:	82 fd       	sbrc	r24, 2
    3064:	9a c4       	rjmp	.+2356   	; 0x399a <f_mkfs+0x9ae>
		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = LD_DWORD(tbl+8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl+12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
    3066:	ae 01       	movw	r20, r28
    3068:	4b 5f       	subi	r20, 0xFB	; 251
    306a:	5f 4f       	sbci	r21, 0xFF	; 255
    306c:	61 e0       	ldi	r22, 0x01	; 1
    306e:	8a 2d       	mov	r24, r10
    3070:	0e 94 6e 04 	call	0x8dc	; 0x8dc <disk_ioctl>
    3074:	81 11       	cpse	r24, r1
    3076:	93 c4       	rjmp	.+2342   	; 0x399e <f_mkfs+0x9b2>
    3078:	4d 80       	ldd	r4, Y+5	; 0x05
    307a:	5e 80       	ldd	r5, Y+6	; 0x06
    307c:	6f 80       	ldd	r6, Y+7	; 0x07
    307e:	78 84       	ldd	r7, Y+8	; 0x08
    3080:	b0 e8       	ldi	r27, 0x80	; 128
    3082:	4b 16       	cp	r4, r27
    3084:	51 04       	cpc	r5, r1
    3086:	61 04       	cpc	r6, r1
    3088:	71 04       	cpc	r7, r1
    308a:	08 f4       	brcc	.+2      	; 0x308e <f_mkfs+0xa2>
    308c:	8a c4       	rjmp	.+2324   	; 0x39a2 <f_mkfs+0x9b6>
			return FR_DISK_ERR;
		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
    308e:	11 23       	and	r17, r17
    3090:	29 f0       	breq	.+10     	; 0x309c <f_mkfs+0xb0>
    3092:	18 8e       	std	Y+24, r1	; 0x18
    3094:	19 8e       	std	Y+25, r1	; 0x19
    3096:	1a 8e       	std	Y+26, r1	; 0x1a
    3098:	1b 8e       	std	Y+27, r1	; 0x1b
    309a:	08 c0       	rjmp	.+16     	; 0x30ac <f_mkfs+0xc0>
    309c:	2f e3       	ldi	r18, 0x3F	; 63
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e0       	ldi	r20, 0x00	; 0
    30a2:	50 e0       	ldi	r21, 0x00	; 0
    30a4:	28 8f       	std	Y+24, r18	; 0x18
    30a6:	39 8f       	std	Y+25, r19	; 0x19
    30a8:	4a 8f       	std	Y+26, r20	; 0x1a
    30aa:	5b 8f       	std	Y+27, r21	; 0x1b
		n_vol -= b_vol;				/* Volume size */
    30ac:	88 8d       	ldd	r24, Y+24	; 0x18
    30ae:	99 8d       	ldd	r25, Y+25	; 0x19
    30b0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    30b2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    30b4:	48 1a       	sub	r4, r24
    30b6:	59 0a       	sbc	r5, r25
    30b8:	6a 0a       	sbc	r6, r26
    30ba:	7b 0a       	sbc	r7, r27
    30bc:	4d 82       	std	Y+5, r4	; 0x05
    30be:	5e 82       	std	Y+6, r5	; 0x06
    30c0:	6f 82       	std	Y+7, r6	; 0x07
    30c2:	78 86       	std	Y+8, r7	; 0x08
	}

	if (au & (au - 1)) au = 0;
    30c4:	c7 01       	movw	r24, r14
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	8e 21       	and	r24, r14
    30ca:	9f 21       	and	r25, r15
    30cc:	89 2b       	or	r24, r25
    30ce:	19 f4       	brne	.+6      	; 0x30d6 <f_mkfs+0xea>
	if (!au) {						/* AU auto selection */
    30d0:	e1 14       	cp	r14, r1
    30d2:	f1 04       	cpc	r15, r1
    30d4:	51 f5       	brne	.+84     	; 0x312a <f_mkfs+0x13e>
		vs = n_vol / (2000 / (SS(fs) / 512));
    30d6:	c3 01       	movw	r24, r6
    30d8:	b2 01       	movw	r22, r4
    30da:	20 ed       	ldi	r18, 0xD0	; 208
    30dc:	37 e0       	ldi	r19, 0x07	; 7
    30de:	40 e0       	ldi	r20, 0x00	; 0
    30e0:	50 e0       	ldi	r21, 0x00	; 0
    30e2:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__udivmodsi4>
		for (i = 0; vs < vst[i]; i++) ;
    30e6:	21 15       	cp	r18, r1
    30e8:	94 e0       	ldi	r25, 0x04	; 4
    30ea:	39 07       	cpc	r19, r25
    30ec:	41 05       	cpc	r20, r1
    30ee:	51 05       	cpc	r21, r1
    30f0:	98 f4       	brcc	.+38     	; 0x3118 <f_mkfs+0x12c>
    30f2:	e7 eb       	ldi	r30, 0xB7	; 183
    30f4:	f1 e0       	ldi	r31, 0x01	; 1
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	69 01       	movw	r12, r18
    30fc:	7a 01       	movw	r14, r20
    30fe:	a1 2f       	mov	r26, r17
    3100:	01 96       	adiw	r24, 0x01	; 1
    3102:	41 91       	ld	r20, Z+
    3104:	51 91       	ld	r21, Z+
    3106:	60 e0       	ldi	r22, 0x00	; 0
    3108:	70 e0       	ldi	r23, 0x00	; 0
    310a:	c4 16       	cp	r12, r20
    310c:	d5 06       	cpc	r13, r21
    310e:	e6 06       	cpc	r14, r22
    3110:	f7 06       	cpc	r15, r23
    3112:	b0 f3       	brcs	.-20     	; 0x3100 <f_mkfs+0x114>
    3114:	1a 2f       	mov	r17, r26
    3116:	02 c0       	rjmp	.+4      	; 0x311c <f_mkfs+0x130>
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
		au = cst[i];
    311c:	88 0f       	add	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	fc 01       	movw	r30, r24
    3122:	e1 56       	subi	r30, 0x61	; 97
    3124:	fe 4f       	sbci	r31, 0xFE	; 254
    3126:	e0 80       	ld	r14, Z
    3128:	f1 80       	ldd	r15, Z+1	; 0x01
	}
	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
    312a:	e1 14       	cp	r14, r1
    312c:	a2 e0       	ldi	r26, 0x02	; 2
    312e:	fa 06       	cpc	r15, r26
    3130:	20 f0       	brcs	.+8      	; 0x313a <f_mkfs+0x14e>
    3132:	8f 2d       	mov	r24, r15
    3134:	86 95       	lsr	r24
    3136:	e8 2e       	mov	r14, r24
    3138:	f1 2c       	mov	r15, r1
	if (!au) au = 1;
    313a:	e1 14       	cp	r14, r1
    313c:	f1 04       	cpc	r15, r1
    313e:	19 f4       	brne	.+6      	; 0x3146 <f_mkfs+0x15a>
    3140:	ee 24       	eor	r14, r14
    3142:	e3 94       	inc	r14
    3144:	f1 2c       	mov	r15, r1
    3146:	fe 8e       	std	Y+30, r15	; 0x1e
    3148:	ed 8e       	std	Y+29, r14	; 0x1d
    314a:	f7 01       	movw	r30, r14
    314c:	e1 38       	cpi	r30, 0x81	; 129
    314e:	f1 05       	cpc	r31, r1
    3150:	20 f0       	brcs	.+8      	; 0x315a <f_mkfs+0x16e>
    3152:	20 e8       	ldi	r18, 0x80	; 128
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	3e 8f       	std	Y+30, r19	; 0x1e
    3158:	2d 8f       	std	Y+29, r18	; 0x1d
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
    315a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    315c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    315e:	6a 01       	movw	r12, r20
    3160:	e1 2c       	mov	r14, r1
    3162:	f1 2c       	mov	r15, r1
    3164:	c3 01       	movw	r24, r6
    3166:	b2 01       	movw	r22, r4
    3168:	a7 01       	movw	r20, r14
    316a:	96 01       	movw	r18, r12
    316c:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__udivmodsi4>
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
    3170:	26 3f       	cpi	r18, 0xF6	; 246
    3172:	6f e0       	ldi	r22, 0x0F	; 15
    3174:	36 07       	cpc	r19, r22
    3176:	41 05       	cpc	r20, r1
    3178:	51 05       	cpc	r21, r1
    317a:	08 f0       	brcs	.+2      	; 0x317e <f_mkfs+0x192>
    317c:	2e c4       	rjmp	.+2140   	; 0x39da <f_mkfs+0x9ee>
    317e:	25 c4       	rjmp	.+2122   	; 0x39ca <f_mkfs+0x9de>
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
    3180:	da 01       	movw	r26, r20
    3182:	c9 01       	movw	r24, r18
    3184:	88 0f       	add	r24, r24
    3186:	99 1f       	adc	r25, r25
    3188:	aa 1f       	adc	r26, r26
    318a:	bb 1f       	adc	r27, r27
    318c:	88 0f       	add	r24, r24
    318e:	99 1f       	adc	r25, r25
    3190:	aa 1f       	adc	r26, r26
    3192:	bb 1f       	adc	r27, r27
    3194:	89 5f       	subi	r24, 0xF9	; 249
    3196:	9d 4f       	sbci	r25, 0xFD	; 253
    3198:	af 4f       	sbci	r26, 0xFF	; 255
    319a:	bf 4f       	sbci	r27, 0xFF	; 255
    319c:	9c 01       	movw	r18, r24
    319e:	ad 01       	movw	r20, r26
    31a0:	01 2e       	mov	r0, r17
    31a2:	19 e0       	ldi	r17, 0x09	; 9
    31a4:	56 95       	lsr	r21
    31a6:	47 95       	ror	r20
    31a8:	37 95       	ror	r19
    31aa:	27 95       	ror	r18
    31ac:	1a 95       	dec	r17
    31ae:	d1 f7       	brne	.-12     	; 0x31a4 <f_mkfs+0x1b8>
    31b0:	10 2d       	mov	r17, r0
    31b2:	2c 8b       	std	Y+20, r18	; 0x14
    31b4:	3d 8b       	std	Y+21, r19	; 0x15
    31b6:	4e 8b       	std	Y+22, r20	; 0x16
    31b8:	5f 8b       	std	Y+23, r21	; 0x17
    31ba:	33 e0       	ldi	r19, 0x03	; 3
    31bc:	3c 8f       	std	Y+28, r19	; 0x1c
		n_rsv = 32;
		n_dir = 0;
    31be:	1f 8e       	std	Y+31, r1	; 0x1f
    31c0:	18 a2       	std	Y+32, r1	; 0x20
    31c2:	19 a2       	std	Y+33, r1	; 0x21
    31c4:	1a a2       	std	Y+34, r1	; 0x22
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
    31c6:	80 e2       	ldi	r24, 0x20	; 32
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	a0 e0       	ldi	r26, 0x00	; 0
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	8b 87       	std	Y+11, r24	; 0x0b
    31d0:	9c 87       	std	Y+12, r25	; 0x0c
    31d2:	ad 87       	std	Y+13, r26	; 0x0d
    31d4:	be 87       	std	Y+14, r27	; 0x0e
    31d6:	41 c0       	rjmp	.+130    	; 0x325a <f_mkfs+0x26e>
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
    31d8:	a3 e0       	ldi	r26, 0x03	; 3
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	0e 94 bc 2b 	call	0x5778	; 0x5778 <__muluhisi3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	01 96       	adiw	r24, 0x01	; 1
    31e6:	a1 1d       	adc	r26, r1
    31e8:	b1 1d       	adc	r27, r1
    31ea:	b6 95       	lsr	r27
    31ec:	a7 95       	ror	r26
    31ee:	97 95       	ror	r25
    31f0:	87 95       	ror	r24
    31f2:	03 96       	adiw	r24, 0x03	; 3
    31f4:	a1 1d       	adc	r26, r1
    31f6:	b1 1d       	adc	r27, r1
	if (!au) au = 1;
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
    31f8:	e1 e0       	ldi	r30, 0x01	; 1
    31fa:	ec 8f       	std	Y+28, r30	; 0x1c
    31fc:	0b c0       	rjmp	.+22     	; 0x3214 <f_mkfs+0x228>
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
    31fe:	da 01       	movw	r26, r20
    3200:	c9 01       	movw	r24, r18
    3202:	02 96       	adiw	r24, 0x02	; 2
    3204:	a1 1d       	adc	r26, r1
    3206:	b1 1d       	adc	r27, r1
    3208:	88 0f       	add	r24, r24
    320a:	99 1f       	adc	r25, r25
    320c:	aa 1f       	adc	r26, r26
    320e:	bb 1f       	adc	r27, r27
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
    3210:	f2 e0       	ldi	r31, 0x02	; 2
    3212:	fc 8f       	std	Y+28, r31	; 0x1c
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
    3214:	81 50       	subi	r24, 0x01	; 1
    3216:	9e 4f       	sbci	r25, 0xFE	; 254
    3218:	af 4f       	sbci	r26, 0xFF	; 255
    321a:	bf 4f       	sbci	r27, 0xFF	; 255
    321c:	9c 01       	movw	r18, r24
    321e:	ad 01       	movw	r20, r26
    3220:	01 2e       	mov	r0, r17
    3222:	19 e0       	ldi	r17, 0x09	; 9
    3224:	56 95       	lsr	r21
    3226:	47 95       	ror	r20
    3228:	37 95       	ror	r19
    322a:	27 95       	ror	r18
    322c:	1a 95       	dec	r17
    322e:	d1 f7       	brne	.-12     	; 0x3224 <f_mkfs+0x238>
    3230:	10 2d       	mov	r17, r0
    3232:	2c 8b       	std	Y+20, r18	; 0x14
    3234:	3d 8b       	std	Y+21, r19	; 0x15
    3236:	4e 8b       	std	Y+22, r20	; 0x16
    3238:	5f 8b       	std	Y+23, r21	; 0x17
		n_rsv = 1;
		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
    323a:	80 e2       	ldi	r24, 0x20	; 32
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	a0 e0       	ldi	r26, 0x00	; 0
    3240:	b0 e0       	ldi	r27, 0x00	; 0
    3242:	8f 8f       	std	Y+31, r24	; 0x1f
    3244:	98 a3       	std	Y+32, r25	; 0x20
    3246:	a9 a3       	std	Y+33, r26	; 0x21
    3248:	ba a3       	std	Y+34, r27	; 0x22
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
		n_rsv = 1;
    324a:	21 e0       	ldi	r18, 0x01	; 1
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e0       	ldi	r20, 0x00	; 0
    3250:	50 e0       	ldi	r21, 0x00	; 0
    3252:	2b 87       	std	Y+11, r18	; 0x0b
    3254:	3c 87       	std	Y+12, r19	; 0x0c
    3256:	4d 87       	std	Y+13, r20	; 0x0d
    3258:	5e 87       	std	Y+14, r21	; 0x0e
		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
    325a:	8b 85       	ldd	r24, Y+11	; 0x0b
    325c:	9c 85       	ldd	r25, Y+12	; 0x0c
    325e:	ad 85       	ldd	r26, Y+13	; 0x0d
    3260:	be 85       	ldd	r27, Y+14	; 0x0e
    3262:	28 8d       	ldd	r18, Y+24	; 0x18
    3264:	39 8d       	ldd	r19, Y+25	; 0x19
    3266:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3268:	5b 8d       	ldd	r21, Y+27	; 0x1b
    326a:	82 0f       	add	r24, r18
    326c:	93 1f       	adc	r25, r19
    326e:	a4 1f       	adc	r26, r20
    3270:	b5 1f       	adc	r27, r21
    3272:	8b a3       	std	Y+35, r24	; 0x23
    3274:	9c a3       	std	Y+36, r25	; 0x24
    3276:	ad a3       	std	Y+37, r26	; 0x25
    3278:	be a3       	std	Y+38, r27	; 0x26
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
    327a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    327c:	98 a1       	ldd	r25, Y+32	; 0x20
    327e:	a9 a1       	ldd	r26, Y+33	; 0x21
    3280:	ba a1       	ldd	r27, Y+34	; 0x22
    3282:	2c 89       	ldd	r18, Y+20	; 0x14
    3284:	3d 89       	ldd	r19, Y+21	; 0x15
    3286:	4e 89       	ldd	r20, Y+22	; 0x16
    3288:	5f 89       	ldd	r21, Y+23	; 0x17
    328a:	82 0f       	add	r24, r18
    328c:	93 1f       	adc	r25, r19
    328e:	a4 1f       	adc	r26, r20
    3290:	b5 1f       	adc	r27, r21
	b_data = b_dir + n_dir;				/* Data area start sector */
    3292:	2b a1       	ldd	r18, Y+35	; 0x23
    3294:	3c a1       	ldd	r19, Y+36	; 0x24
    3296:	4d a1       	ldd	r20, Y+37	; 0x25
    3298:	5e a1       	ldd	r21, Y+38	; 0x26
    329a:	28 0f       	add	r18, r24
    329c:	39 1f       	adc	r19, r25
    329e:	4a 1f       	adc	r20, r26
    32a0:	5b 1f       	adc	r21, r27
    32a2:	28 8b       	std	Y+16, r18	; 0x10
    32a4:	39 8b       	std	Y+17, r19	; 0x11
    32a6:	4a 8b       	std	Y+18, r20	; 0x12
    32a8:	5b 8b       	std	Y+19, r21	; 0x13
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
    32aa:	d7 01       	movw	r26, r14
    32ac:	c6 01       	movw	r24, r12
    32ae:	28 8d       	ldd	r18, Y+24	; 0x18
    32b0:	39 8d       	ldd	r19, Y+25	; 0x19
    32b2:	4a 8d       	ldd	r20, Y+26	; 0x1a
    32b4:	5b 8d       	ldd	r21, Y+27	; 0x1b
    32b6:	82 1b       	sub	r24, r18
    32b8:	93 0b       	sbc	r25, r19
    32ba:	a4 0b       	sbc	r26, r20
    32bc:	b5 0b       	sbc	r27, r21
    32be:	28 89       	ldd	r18, Y+16	; 0x10
    32c0:	39 89       	ldd	r19, Y+17	; 0x11
    32c2:	4a 89       	ldd	r20, Y+18	; 0x12
    32c4:	5b 89       	ldd	r21, Y+19	; 0x13
    32c6:	82 0f       	add	r24, r18
    32c8:	93 1f       	adc	r25, r19
    32ca:	a4 1f       	adc	r26, r20
    32cc:	b5 1f       	adc	r27, r21
    32ce:	48 16       	cp	r4, r24
    32d0:	59 06       	cpc	r5, r25
    32d2:	6a 06       	cpc	r6, r26
    32d4:	7b 06       	cpc	r7, r27
    32d6:	08 f4       	brcc	.+2      	; 0x32da <f_mkfs+0x2ee>
    32d8:	66 c3       	rjmp	.+1740   	; 0x39a6 <f_mkfs+0x9ba>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
    32da:	ae 01       	movw	r20, r28
    32dc:	4f 5f       	subi	r20, 0xFF	; 255
    32de:	5f 4f       	sbci	r21, 0xFF	; 255
    32e0:	63 e0       	ldi	r22, 0x03	; 3
    32e2:	8a 2d       	mov	r24, r10
    32e4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <disk_ioctl>
    32e8:	81 11       	cpse	r24, r1
    32ea:	0c c0       	rjmp	.+24     	; 0x3304 <f_mkfs+0x318>
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	9a 81       	ldd	r25, Y+2	; 0x02
    32f0:	ab 81       	ldd	r26, Y+3	; 0x03
    32f2:	bc 81       	ldd	r27, Y+4	; 0x04
    32f4:	01 97       	sbiw	r24, 0x01	; 1
    32f6:	a1 09       	sbc	r26, r1
    32f8:	b1 09       	sbc	r27, r1
    32fa:	81 15       	cp	r24, r1
    32fc:	90 48       	sbci	r25, 0x80	; 128
    32fe:	a1 05       	cpc	r26, r1
    3300:	b1 05       	cpc	r27, r1
    3302:	40 f0       	brcs	.+16     	; 0x3314 <f_mkfs+0x328>
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	a0 e0       	ldi	r26, 0x00	; 0
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	9a 83       	std	Y+2, r25	; 0x02
    3310:	ab 83       	std	Y+3, r26	; 0x03
    3312:	bc 83       	std	Y+4, r27	; 0x04
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
    3314:	49 81       	ldd	r20, Y+1	; 0x01
    3316:	5a 81       	ldd	r21, Y+2	; 0x02
    3318:	6b 81       	ldd	r22, Y+3	; 0x03
    331a:	7c 81       	ldd	r23, Y+4	; 0x04
    331c:	db 01       	movw	r26, r22
    331e:	ca 01       	movw	r24, r20
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	a1 09       	sbc	r26, r1
    3324:	b1 09       	sbc	r27, r1
    3326:	48 88       	ldd	r4, Y+16	; 0x10
    3328:	59 88       	ldd	r5, Y+17	; 0x11
    332a:	6a 88       	ldd	r6, Y+18	; 0x12
    332c:	7b 88       	ldd	r7, Y+19	; 0x13
    332e:	48 0e       	add	r4, r24
    3330:	59 1e       	adc	r5, r25
    3332:	6a 1e       	adc	r6, r26
    3334:	7b 1e       	adc	r7, r27
    3336:	88 27       	eor	r24, r24
    3338:	99 27       	eor	r25, r25
    333a:	dc 01       	movw	r26, r24
    333c:	84 1b       	sub	r24, r20
    333e:	95 0b       	sbc	r25, r21
    3340:	a6 0b       	sbc	r26, r22
    3342:	b7 0b       	sbc	r27, r23
    3344:	84 21       	and	r24, r4
    3346:	95 21       	and	r25, r5
    3348:	a6 21       	and	r26, r6
    334a:	b7 21       	and	r27, r7
	n = (n - b_data) / N_FATS;
    334c:	48 88       	ldd	r4, Y+16	; 0x10
    334e:	59 88       	ldd	r5, Y+17	; 0x11
    3350:	6a 88       	ldd	r6, Y+18	; 0x12
    3352:	7b 88       	ldd	r7, Y+19	; 0x13
    3354:	84 19       	sub	r24, r4
    3356:	95 09       	sbc	r25, r5
    3358:	a6 09       	sbc	r26, r6
    335a:	b7 09       	sbc	r27, r7
    335c:	89 83       	std	Y+1, r24	; 0x01
    335e:	9a 83       	std	Y+2, r25	; 0x02
    3360:	ab 83       	std	Y+3, r26	; 0x03
    3362:	bc 83       	std	Y+4, r27	; 0x04
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
    3364:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3366:	23 30       	cpi	r18, 0x03	; 3
    3368:	09 f0       	breq	.+2      	; 0x336c <f_mkfs+0x380>
    336a:	46 c0       	rjmp	.+140    	; 0x33f8 <f_mkfs+0x40c>
		n_rsv += n;
    336c:	4b 84       	ldd	r4, Y+11	; 0x0b
    336e:	5c 84       	ldd	r5, Y+12	; 0x0c
    3370:	6d 84       	ldd	r6, Y+13	; 0x0d
    3372:	7e 84       	ldd	r7, Y+14	; 0x0e
    3374:	48 0e       	add	r4, r24
    3376:	59 1e       	adc	r5, r25
    3378:	6a 1e       	adc	r6, r26
    337a:	7b 1e       	adc	r7, r27
    337c:	4b 86       	std	Y+11, r4	; 0x0b
    337e:	5c 86       	std	Y+12, r5	; 0x0c
    3380:	6d 86       	std	Y+13, r6	; 0x0d
    3382:	7e 86       	std	Y+14, r7	; 0x0e
		b_fat += n;
    3384:	4b a0       	ldd	r4, Y+35	; 0x23
    3386:	5c a0       	ldd	r5, Y+36	; 0x24
    3388:	6d a0       	ldd	r6, Y+37	; 0x25
    338a:	7e a0       	ldd	r7, Y+38	; 0x26
    338c:	48 0e       	add	r4, r24
    338e:	59 1e       	adc	r5, r25
    3390:	6a 1e       	adc	r6, r26
    3392:	7b 1e       	adc	r7, r27
    3394:	4b a2       	std	Y+35, r4	; 0x23
    3396:	5c a2       	std	Y+36, r5	; 0x24
    3398:	6d a2       	std	Y+37, r6	; 0x25
    339a:	7e a2       	std	Y+38, r7	; 0x26
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
    339c:	8d 81       	ldd	r24, Y+5	; 0x05
    339e:	9e 81       	ldd	r25, Y+6	; 0x06
    33a0:	af 81       	ldd	r26, Y+7	; 0x07
    33a2:	b8 85       	ldd	r27, Y+8	; 0x08
    33a4:	4b 84       	ldd	r4, Y+11	; 0x0b
    33a6:	5c 84       	ldd	r5, Y+12	; 0x0c
    33a8:	6d 84       	ldd	r6, Y+13	; 0x0d
    33aa:	7e 84       	ldd	r7, Y+14	; 0x0e
    33ac:	84 19       	sub	r24, r4
    33ae:	95 09       	sbc	r25, r5
    33b0:	a6 09       	sbc	r26, r6
    33b2:	b7 09       	sbc	r27, r7
    33b4:	4c 88       	ldd	r4, Y+20	; 0x14
    33b6:	5d 88       	ldd	r5, Y+21	; 0x15
    33b8:	6e 88       	ldd	r6, Y+22	; 0x16
    33ba:	7f 88       	ldd	r7, Y+23	; 0x17
    33bc:	84 19       	sub	r24, r4
    33be:	95 09       	sbc	r25, r5
    33c0:	a6 09       	sbc	r26, r6
    33c2:	b7 09       	sbc	r27, r7
    33c4:	bc 01       	movw	r22, r24
    33c6:	cd 01       	movw	r24, r26
    33c8:	4f 8c       	ldd	r4, Y+31	; 0x1f
    33ca:	58 a0       	ldd	r5, Y+32	; 0x20
    33cc:	69 a0       	ldd	r6, Y+33	; 0x21
    33ce:	7a a0       	ldd	r7, Y+34	; 0x22
    33d0:	64 19       	sub	r22, r4
    33d2:	75 09       	sbc	r23, r5
    33d4:	86 09       	sbc	r24, r6
    33d6:	97 09       	sbc	r25, r7
    33d8:	a7 01       	movw	r20, r14
    33da:	96 01       	movw	r18, r12
    33dc:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__udivmodsi4>
    33e0:	69 01       	movw	r12, r18
    33e2:	7a 01       	movw	r14, r20
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
    33e4:	26 ef       	ldi	r18, 0xF6	; 246
    33e6:	c2 16       	cp	r12, r18
    33e8:	2f ef       	ldi	r18, 0xFF	; 255
    33ea:	d2 06       	cpc	r13, r18
    33ec:	e1 04       	cpc	r14, r1
    33ee:	f1 04       	cpc	r15, r1
    33f0:	08 f4       	brcc	.+2      	; 0x33f4 <f_mkfs+0x408>
    33f2:	db c2       	rjmp	.+1462   	; 0x39aa <f_mkfs+0x9be>
		return FR_MKFS_ABORTED;

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
		sys = 0x0C;		/* FAT32X */
    33f4:	0c e0       	ldi	r16, 0x0C	; 12
    33f6:	54 c0       	rjmp	.+168    	; 0x34a0 <f_mkfs+0x4b4>
	n = (n - b_data) / N_FATS;
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
		n_rsv += n;
		b_fat += n;
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
    33f8:	4c 88       	ldd	r4, Y+20	; 0x14
    33fa:	5d 88       	ldd	r5, Y+21	; 0x15
    33fc:	6e 88       	ldd	r6, Y+22	; 0x16
    33fe:	7f 88       	ldd	r7, Y+23	; 0x17
    3400:	48 0e       	add	r4, r24
    3402:	59 1e       	adc	r5, r25
    3404:	6a 1e       	adc	r6, r26
    3406:	7b 1e       	adc	r7, r27
    3408:	4c 8a       	std	Y+20, r4	; 0x14
    340a:	5d 8a       	std	Y+21, r5	; 0x15
    340c:	6e 8a       	std	Y+22, r6	; 0x16
    340e:	7f 8a       	std	Y+23, r7	; 0x17
	}

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
    3410:	4d 80       	ldd	r4, Y+5	; 0x05
    3412:	5e 80       	ldd	r5, Y+6	; 0x06
    3414:	6f 80       	ldd	r6, Y+7	; 0x07
    3416:	78 84       	ldd	r7, Y+8	; 0x08
    3418:	d3 01       	movw	r26, r6
    341a:	c2 01       	movw	r24, r4
    341c:	2b 85       	ldd	r18, Y+11	; 0x0b
    341e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3420:	4d 85       	ldd	r20, Y+13	; 0x0d
    3422:	5e 85       	ldd	r21, Y+14	; 0x0e
    3424:	82 1b       	sub	r24, r18
    3426:	93 0b       	sbc	r25, r19
    3428:	a4 0b       	sbc	r26, r20
    342a:	b5 0b       	sbc	r27, r21
    342c:	2c 89       	ldd	r18, Y+20	; 0x14
    342e:	3d 89       	ldd	r19, Y+21	; 0x15
    3430:	4e 89       	ldd	r20, Y+22	; 0x16
    3432:	5f 89       	ldd	r21, Y+23	; 0x17
    3434:	82 1b       	sub	r24, r18
    3436:	93 0b       	sbc	r25, r19
    3438:	a4 0b       	sbc	r26, r20
    343a:	b5 0b       	sbc	r27, r21
    343c:	bc 01       	movw	r22, r24
    343e:	cd 01       	movw	r24, r26
    3440:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3442:	38 a1       	ldd	r19, Y+32	; 0x20
    3444:	49 a1       	ldd	r20, Y+33	; 0x21
    3446:	5a a1       	ldd	r21, Y+34	; 0x22
    3448:	62 1b       	sub	r22, r18
    344a:	73 0b       	sbc	r23, r19
    344c:	84 0b       	sbc	r24, r20
    344e:	95 0b       	sbc	r25, r21
    3450:	a7 01       	movw	r20, r14
    3452:	96 01       	movw	r18, r12
    3454:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__udivmodsi4>
    3458:	69 01       	movw	r12, r18
    345a:	7a 01       	movw	r14, r20
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
    345c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    345e:	32 30       	cpi	r19, 0x02	; 2
    3460:	49 f4       	brne	.+18     	; 0x3474 <f_mkfs+0x488>
    3462:	46 ef       	ldi	r20, 0xF6	; 246
    3464:	c4 16       	cp	r12, r20
    3466:	4f e0       	ldi	r20, 0x0F	; 15
    3468:	d4 06       	cpc	r13, r20
    346a:	e1 04       	cpc	r14, r1
    346c:	f1 04       	cpc	r15, r1
    346e:	08 f4       	brcc	.+2      	; 0x3472 <f_mkfs+0x486>
    3470:	9e c2       	rjmp	.+1340   	; 0x39ae <f_mkfs+0x9c2>
    3472:	0b c0       	rjmp	.+22     	; 0x348a <f_mkfs+0x49e>

	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
		sys = 0x0C;		/* FAT32X */
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
    3474:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3476:	51 30       	cpi	r21, 0x01	; 1
    3478:	41 f4       	brne	.+16     	; 0x348a <f_mkfs+0x49e>
    347a:	41 14       	cp	r4, r1
    347c:	51 04       	cpc	r5, r1
    347e:	61 e0       	ldi	r22, 0x01	; 1
    3480:	66 06       	cpc	r6, r22
    3482:	71 04       	cpc	r7, r1
    3484:	50 f0       	brcs	.+20     	; 0x349a <f_mkfs+0x4ae>
			sys = 0x01;	/* FAT12(<65536) */
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
    3486:	06 e0       	ldi	r16, 0x06	; 6
    3488:	0b c0       	rjmp	.+22     	; 0x34a0 <f_mkfs+0x4b4>
    348a:	41 14       	cp	r4, r1
    348c:	51 04       	cpc	r5, r1
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	68 06       	cpc	r6, r24
    3492:	71 04       	cpc	r7, r1
    3494:	20 f0       	brcs	.+8      	; 0x349e <f_mkfs+0x4b2>
    3496:	06 e0       	ldi	r16, 0x06	; 6
    3498:	03 c0       	rjmp	.+6      	; 0x34a0 <f_mkfs+0x4b4>
	/* Determine system ID in the partition table */
	if (fmt == FS_FAT32) {
		sys = 0x0C;		/* FAT32X */
	} else {
		if (fmt == FS_FAT12 && n_vol < 0x10000) {
			sys = 0x01;	/* FAT12(<65536) */
    349a:	01 e0       	ldi	r16, 0x01	; 1
    349c:	01 c0       	rjmp	.+2      	; 0x34a0 <f_mkfs+0x4b4>
		} else {
			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
    349e:	04 e0       	ldi	r16, 0x04	; 4
		tbl[4] = sys;
		if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
    34a0:	11 11       	cpse	r17, r1
    34a2:	67 c0       	rjmp	.+206    	; 0x3572 <f_mkfs+0x586>
			md = 0xF0;
		} else {	/* Create partition table (FDISK) */
			mem_set(fs->win, 0, SS(fs));
    34a4:	40 e0       	ldi	r20, 0x00	; 0
    34a6:	52 e0       	ldi	r21, 0x02	; 2
    34a8:	60 e0       	ldi	r22, 0x00	; 0
    34aa:	70 e0       	ldi	r23, 0x00	; 0
    34ac:	14 01       	movw	r2, r8
    34ae:	9e e2       	ldi	r25, 0x2E	; 46
    34b0:	29 0e       	add	r2, r25
    34b2:	31 1c       	adc	r3, r1
    34b4:	c1 01       	movw	r24, r2
    34b6:	0e 94 37 05 	call	0xa6e	; 0xa6e <mem_set>
			tbl = fs->win+MBR_Table;	/* Create partition table for single partition in the drive */
			tbl[1] = 1;						/* Partition start head */
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	f4 01       	movw	r30, r8
    34be:	e3 51       	subi	r30, 0x13	; 19
    34c0:	fe 4f       	sbci	r31, 0xFE	; 254
    34c2:	80 83       	st	Z, r24
			tbl[2] = 1;						/* Partition start sector */
    34c4:	31 96       	adiw	r30, 0x01	; 1
    34c6:	80 83       	st	Z, r24
			tbl[3] = 0;						/* Partition start cylinder */
    34c8:	31 96       	adiw	r30, 0x01	; 1
    34ca:	10 82       	st	Z, r1
			tbl[4] = sys;					/* System type */
    34cc:	31 96       	adiw	r30, 0x01	; 1
    34ce:	00 83       	st	Z, r16
			tbl[5] = 254;					/* Partition end head */
    34d0:	8e ef       	ldi	r24, 0xFE	; 254
    34d2:	31 96       	adiw	r30, 0x01	; 1
    34d4:	80 83       	st	Z, r24
			n = (b_vol + n_vol) / 63 / 255;
    34d6:	4d 80       	ldd	r4, Y+5	; 0x05
    34d8:	5e 80       	ldd	r5, Y+6	; 0x06
    34da:	6f 80       	ldd	r6, Y+7	; 0x07
    34dc:	78 84       	ldd	r7, Y+8	; 0x08
    34de:	68 8d       	ldd	r22, Y+24	; 0x18
    34e0:	79 8d       	ldd	r23, Y+25	; 0x19
    34e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    34e6:	64 0d       	add	r22, r4
    34e8:	75 1d       	adc	r23, r5
    34ea:	86 1d       	adc	r24, r6
    34ec:	97 1d       	adc	r25, r7
    34ee:	21 ec       	ldi	r18, 0xC1	; 193
    34f0:	3e e3       	ldi	r19, 0x3E	; 62
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__udivmodsi4>
    34fa:	29 83       	std	Y+1, r18	; 0x01
    34fc:	3a 83       	std	Y+2, r19	; 0x02
    34fe:	4b 83       	std	Y+3, r20	; 0x03
    3500:	5c 83       	std	Y+4, r21	; 0x04
			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
    3502:	f4 01       	movw	r30, r8
    3504:	ee 50       	subi	r30, 0x0E	; 14
    3506:	fe 4f       	sbci	r31, 0xFE	; 254
    3508:	da 01       	movw	r26, r20
    350a:	c9 01       	movw	r24, r18
    350c:	b6 95       	lsr	r27
    350e:	a7 95       	ror	r26
    3510:	97 95       	ror	r25
    3512:	87 95       	ror	r24
    3514:	b6 95       	lsr	r27
    3516:	a7 95       	ror	r26
    3518:	97 95       	ror	r25
    351a:	87 95       	ror	r24
    351c:	8f 63       	ori	r24, 0x3F	; 63
    351e:	80 83       	st	Z, r24
			tbl[7] = (BYTE)n;				/* End cylinder */
    3520:	31 96       	adiw	r30, 0x01	; 1
    3522:	20 83       	st	Z, r18
			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
    3524:	8f e3       	ldi	r24, 0x3F	; 63
    3526:	31 96       	adiw	r30, 0x01	; 1
    3528:	80 83       	st	Z, r24
    352a:	31 96       	adiw	r30, 0x01	; 1
    352c:	10 82       	st	Z, r1
    352e:	31 96       	adiw	r30, 0x01	; 1
    3530:	10 82       	st	Z, r1
    3532:	31 96       	adiw	r30, 0x01	; 1
    3534:	10 82       	st	Z, r1
			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
    3536:	31 96       	adiw	r30, 0x01	; 1
    3538:	40 82       	st	Z, r4
    353a:	31 96       	adiw	r30, 0x01	; 1
    353c:	50 82       	st	Z, r5
    353e:	31 96       	adiw	r30, 0x01	; 1
    3540:	60 82       	st	Z, r6
    3542:	31 96       	adiw	r30, 0x01	; 1
    3544:	70 82       	st	Z, r7
			ST_WORD(fs->win+BS_55AA, 0xAA55);	/* MBR signature */
    3546:	85 e5       	ldi	r24, 0x55	; 85
    3548:	f1 96       	adiw	r30, 0x31	; 49
    354a:	80 83       	st	Z, r24
    354c:	8a ea       	ldi	r24, 0xAA	; 170
    354e:	31 96       	adiw	r30, 0x01	; 1
    3550:	80 83       	st	Z, r24
			if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to the MBR */
    3552:	01 e0       	ldi	r16, 0x01	; 1
    3554:	10 e0       	ldi	r17, 0x00	; 0
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	a9 01       	movw	r20, r18
    355c:	b1 01       	movw	r22, r2
    355e:	8a 2d       	mov	r24, r10
    3560:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
    3564:	81 11       	cpse	r24, r1
    3566:	25 c2       	rjmp	.+1098   	; 0x39b2 <f_mkfs+0x9c6>
				return FR_DISK_ERR;
			md = 0xF8;
    3568:	0f 2e       	mov	r0, r31
    356a:	f8 ef       	ldi	r31, 0xF8	; 248
    356c:	7f 2e       	mov	r7, r31
    356e:	f0 2d       	mov	r31, r0
    3570:	04 c0       	rjmp	.+8      	; 0x357a <f_mkfs+0x58e>
		if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to teh MBR */
			return FR_DISK_ERR;
		md = 0xF8;
	} else {
		if (sfd) {	/* No partition table (SFD) */
			md = 0xF0;
    3572:	0f 2e       	mov	r0, r31
    3574:	f0 ef       	ldi	r31, 0xF0	; 240
    3576:	7f 2e       	mov	r7, r31
    3578:	f0 2d       	mov	r31, r0
			md = 0xF8;
		}
	}

	/* Create BPB in the VBR */
	tbl = fs->win;							/* Clear sector */
    357a:	14 01       	movw	r2, r8
    357c:	ae e2       	ldi	r26, 0x2E	; 46
    357e:	2a 0e       	add	r2, r26
    3580:	31 1c       	adc	r3, r1
	mem_set(tbl, 0, SS(fs));
    3582:	40 e0       	ldi	r20, 0x00	; 0
    3584:	52 e0       	ldi	r21, 0x02	; 2
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	c1 01       	movw	r24, r2
    358c:	0e 94 37 05 	call	0xa6e	; 0xa6e <mem_set>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
    3590:	4b e0       	ldi	r20, 0x0B	; 11
    3592:	50 e0       	ldi	r21, 0x00	; 0
    3594:	6b e6       	ldi	r22, 0x6B	; 107
    3596:	71 e0       	ldi	r23, 0x01	; 1
    3598:	c1 01       	movw	r24, r2
    359a:	0e 94 29 05 	call	0xa52	; 0xa52 <mem_cpy>
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
    359e:	f4 01       	movw	r30, r8
    35a0:	11 ae       	std	Z+57, r1	; 0x39
    35a2:	82 e0       	ldi	r24, 0x02	; 2
    35a4:	82 af       	std	Z+58, r24	; 0x3a
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
    35a6:	4d 8c       	ldd	r4, Y+29	; 0x1d
    35a8:	43 ae       	std	Z+59, r4	; 0x3b
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
    35aa:	5b 84       	ldd	r5, Y+11	; 0x0b
    35ac:	54 ae       	std	Z+60, r5	; 0x3c
    35ae:	6c 84       	ldd	r6, Y+12	; 0x0c
    35b0:	65 ae       	std	Z+61, r6	; 0x3d
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	86 af       	std	Z+62, r24	; 0x3e
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
    35b6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    35b8:	23 30       	cpi	r18, 0x03	; 3
    35ba:	11 f4       	brne	.+4      	; 0x35c0 <f_mkfs+0x5d4>
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	01 c0       	rjmp	.+2      	; 0x35c2 <f_mkfs+0x5d6>
    35c0:	82 e0       	ldi	r24, 0x02	; 2
	ST_WORD(tbl+BPB_RootEntCnt, i);
    35c2:	d4 01       	movw	r26, r8
    35c4:	df 96       	adiw	r26, 0x3f	; 63
    35c6:	1c 92       	st	X, r1
    35c8:	f4 01       	movw	r30, r8
    35ca:	e0 5c       	subi	r30, 0xC0	; 192
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 83       	st	Z, r24
	if (n_vol < 0x10000) {					/* Number of total sectors */
    35d0:	8d 81       	ldd	r24, Y+5	; 0x05
    35d2:	9e 81       	ldd	r25, Y+6	; 0x06
    35d4:	af 81       	ldd	r26, Y+7	; 0x07
    35d6:	b8 85       	ldd	r27, Y+8	; 0x08
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	e1 e0       	ldi	r30, 0x01	; 1
    35dc:	ae 07       	cpc	r26, r30
    35de:	b1 05       	cpc	r27, r1
    35e0:	38 f4       	brcc	.+14     	; 0x35f0 <f_mkfs+0x604>
		ST_WORD(tbl+BPB_TotSec16, n_vol);
    35e2:	f4 01       	movw	r30, r8
    35e4:	ef 5b       	subi	r30, 0xBF	; 191
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	80 83       	st	Z, r24
    35ea:	31 96       	adiw	r30, 0x01	; 1
    35ec:	90 83       	st	Z, r25
    35ee:	0a c0       	rjmp	.+20     	; 0x3604 <f_mkfs+0x618>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
    35f0:	f4 01       	movw	r30, r8
    35f2:	e2 5b       	subi	r30, 0xB2	; 178
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	80 83       	st	Z, r24
    35f8:	31 96       	adiw	r30, 0x01	; 1
    35fa:	90 83       	st	Z, r25
    35fc:	31 96       	adiw	r30, 0x01	; 1
    35fe:	a0 83       	st	Z, r26
    3600:	31 96       	adiw	r30, 0x01	; 1
    3602:	b0 83       	st	Z, r27
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
    3604:	f4 01       	movw	r30, r8
    3606:	ed 5b       	subi	r30, 0xBD	; 189
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	70 82       	st	Z, r7
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
    360c:	8f e3       	ldi	r24, 0x3F	; 63
    360e:	33 96       	adiw	r30, 0x03	; 3
    3610:	80 83       	st	Z, r24
    3612:	31 96       	adiw	r30, 0x01	; 1
    3614:	10 82       	st	Z, r1
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
    3616:	8f ef       	ldi	r24, 0xFF	; 255
    3618:	31 96       	adiw	r30, 0x01	; 1
    361a:	80 83       	st	Z, r24
    361c:	31 96       	adiw	r30, 0x01	; 1
    361e:	10 82       	st	Z, r1
	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
    3620:	31 96       	adiw	r30, 0x01	; 1
    3622:	48 8c       	ldd	r4, Y+24	; 0x18
    3624:	40 82       	st	Z, r4
    3626:	31 96       	adiw	r30, 0x01	; 1
    3628:	10 82       	st	Z, r1
    362a:	31 96       	adiw	r30, 0x01	; 1
    362c:	10 82       	st	Z, r1
    362e:	31 96       	adiw	r30, 0x01	; 1
    3630:	10 82       	st	Z, r1
	n = GET_FATTIME();						/* Use current time as VSN */
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	a9 e6       	ldi	r26, 0x69	; 105
    3638:	bd eb       	ldi	r27, 0xBD	; 189
    363a:	89 83       	std	Y+1, r24	; 0x01
    363c:	9a 83       	std	Y+2, r25	; 0x02
    363e:	ab 83       	std	Y+3, r26	; 0x03
    3640:	bc 83       	std	Y+4, r27	; 0x04
	if (fmt == FS_FAT32) {
    3642:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3644:	23 30       	cpi	r18, 0x03	; 3
    3646:	09 f0       	breq	.+2      	; 0x364a <f_mkfs+0x65e>
    3648:	4d c0       	rjmp	.+154    	; 0x36e4 <f_mkfs+0x6f8>
		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
    364a:	b4 96       	adiw	r30, 0x24	; 36
    364c:	10 82       	st	Z, r1
    364e:	31 96       	adiw	r30, 0x01	; 1
    3650:	10 82       	st	Z, r1
    3652:	89 e6       	ldi	r24, 0x69	; 105
    3654:	31 96       	adiw	r30, 0x01	; 1
    3656:	80 83       	st	Z, r24
    3658:	8d eb       	ldi	r24, 0xBD	; 189
    365a:	31 96       	adiw	r30, 0x01	; 1
    365c:	80 83       	st	Z, r24
		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
    365e:	b2 97       	sbiw	r30, 0x22	; 34
    3660:	3c 89       	ldd	r19, Y+20	; 0x14
    3662:	30 83       	st	Z, r19
    3664:	31 96       	adiw	r30, 0x01	; 1
    3666:	4d 89       	ldd	r20, Y+21	; 0x15
    3668:	40 83       	st	Z, r20
    366a:	31 96       	adiw	r30, 0x01	; 1
    366c:	5e 89       	ldd	r21, Y+22	; 0x16
    366e:	50 83       	st	Z, r21
    3670:	31 96       	adiw	r30, 0x01	; 1
    3672:	6f 89       	ldd	r22, Y+23	; 0x17
    3674:	60 83       	st	Z, r22
		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
    3676:	82 e0       	ldi	r24, 0x02	; 2
    3678:	35 96       	adiw	r30, 0x05	; 5
    367a:	80 83       	st	Z, r24
    367c:	31 96       	adiw	r30, 0x01	; 1
    367e:	10 82       	st	Z, r1
    3680:	31 96       	adiw	r30, 0x01	; 1
    3682:	10 82       	st	Z, r1
    3684:	31 96       	adiw	r30, 0x01	; 1
    3686:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSINFO record offset (VBR+1) */
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	31 96       	adiw	r30, 0x01	; 1
    368c:	80 83       	st	Z, r24
    368e:	31 96       	adiw	r30, 0x01	; 1
    3690:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
    3692:	86 e0       	ldi	r24, 0x06	; 6
    3694:	31 96       	adiw	r30, 0x01	; 1
    3696:	80 83       	st	Z, r24
    3698:	31 96       	adiw	r30, 0x01	; 1
    369a:	10 82       	st	Z, r1
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
    369c:	80 e8       	ldi	r24, 0x80	; 128
    369e:	3d 96       	adiw	r30, 0x0d	; 13
    36a0:	80 83       	st	Z, r24
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
    36a2:	89 e2       	ldi	r24, 0x29	; 41
    36a4:	32 96       	adiw	r30, 0x02	; 2
    36a6:	80 83       	st	Z, r24
		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
    36a8:	43 e1       	ldi	r20, 0x13	; 19
    36aa:	50 e0       	ldi	r21, 0x00	; 0
    36ac:	67 e7       	ldi	r22, 0x77	; 119
    36ae:	71 e0       	ldi	r23, 0x01	; 1
    36b0:	c4 01       	movw	r24, r8
    36b2:	8b 58       	subi	r24, 0x8B	; 139
    36b4:	9f 4f       	sbci	r25, 0xFF	; 255
    36b6:	0e 94 29 05 	call	0xa52	; 0xa52 <mem_cpy>
		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
    36ba:	85 e5       	ldi	r24, 0x55	; 85
    36bc:	f4 01       	movw	r30, r8
    36be:	e4 5d       	subi	r30, 0xD4	; 212
    36c0:	fd 4f       	sbci	r31, 0xFD	; 253
    36c2:	80 83       	st	Z, r24
    36c4:	8a ea       	ldi	r24, 0xAA	; 170
    36c6:	31 96       	adiw	r30, 0x01	; 1
    36c8:	80 83       	st	Z, r24
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
    36ca:	01 e0       	ldi	r16, 0x01	; 1
    36cc:	10 e0       	ldi	r17, 0x00	; 0
    36ce:	28 8d       	ldd	r18, Y+24	; 0x18
    36d0:	39 8d       	ldd	r19, Y+25	; 0x19
    36d2:	4a 8d       	ldd	r20, Y+26	; 0x1a
    36d4:	5b 8d       	ldd	r21, Y+27	; 0x1b
    36d6:	b1 01       	movw	r22, r2
    36d8:	8a 2d       	mov	r24, r10
    36da:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
    36de:	88 23       	and	r24, r24
    36e0:	c1 f1       	breq	.+112    	; 0x3752 <f_mkfs+0x766>
    36e2:	69 c1       	rjmp	.+722    	; 0x39b6 <f_mkfs+0x9ca>
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
	} else {
		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
    36e4:	f4 01       	movw	r30, r8
    36e6:	eb 5a       	subi	r30, 0xAB	; 171
    36e8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ea:	10 82       	st	Z, r1
    36ec:	31 96       	adiw	r30, 0x01	; 1
    36ee:	10 82       	st	Z, r1
    36f0:	89 e6       	ldi	r24, 0x69	; 105
    36f2:	31 96       	adiw	r30, 0x01	; 1
    36f4:	80 83       	st	Z, r24
    36f6:	8d eb       	ldi	r24, 0xBD	; 189
    36f8:	31 96       	adiw	r30, 0x01	; 1
    36fa:	80 83       	st	Z, r24
		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
    36fc:	74 97       	sbiw	r30, 0x14	; 20
    36fe:	8c 89       	ldd	r24, Y+20	; 0x14
    3700:	80 83       	st	Z, r24
    3702:	31 96       	adiw	r30, 0x01	; 1
    3704:	9d 89       	ldd	r25, Y+21	; 0x15
    3706:	90 83       	st	Z, r25
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
    3708:	80 e8       	ldi	r24, 0x80	; 128
    370a:	3d 96       	adiw	r30, 0x0d	; 13
    370c:	80 83       	st	Z, r24
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
    370e:	89 e2       	ldi	r24, 0x29	; 41
    3710:	32 96       	adiw	r30, 0x02	; 2
    3712:	80 83       	st	Z, r24
		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
    3714:	43 e1       	ldi	r20, 0x13	; 19
    3716:	50 e0       	ldi	r21, 0x00	; 0
    3718:	6b e8       	ldi	r22, 0x8B	; 139
    371a:	71 e0       	ldi	r23, 0x01	; 1
    371c:	c4 01       	movw	r24, r8
    371e:	87 5a       	subi	r24, 0xA7	; 167
    3720:	9f 4f       	sbci	r25, 0xFF	; 255
    3722:	0e 94 29 05 	call	0xa52	; 0xa52 <mem_cpy>
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
    3726:	85 e5       	ldi	r24, 0x55	; 85
    3728:	f4 01       	movw	r30, r8
    372a:	e4 5d       	subi	r30, 0xD4	; 212
    372c:	fd 4f       	sbci	r31, 0xFD	; 253
    372e:	80 83       	st	Z, r24
    3730:	8a ea       	ldi	r24, 0xAA	; 170
    3732:	31 96       	adiw	r30, 0x01	; 1
    3734:	80 83       	st	Z, r24
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
    3736:	01 e0       	ldi	r16, 0x01	; 1
    3738:	10 e0       	ldi	r17, 0x00	; 0
    373a:	28 8d       	ldd	r18, Y+24	; 0x18
    373c:	39 8d       	ldd	r19, Y+25	; 0x19
    373e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3740:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3742:	b1 01       	movw	r22, r2
    3744:	8a 2d       	mov	r24, r10
    3746:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
    374a:	88 23       	and	r24, r24
    374c:	09 f4       	brne	.+2      	; 0x3750 <f_mkfs+0x764>
    374e:	4d c1       	rjmp	.+666    	; 0x39ea <f_mkfs+0x9fe>
    3750:	34 c1       	rjmp	.+616    	; 0x39ba <f_mkfs+0x9ce>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR+6) */
		disk_write(pdrv, tbl, b_vol + 6, 1);
    3752:	01 e0       	ldi	r16, 0x01	; 1
    3754:	10 e0       	ldi	r17, 0x00	; 0
    3756:	28 8d       	ldd	r18, Y+24	; 0x18
    3758:	39 8d       	ldd	r19, Y+25	; 0x19
    375a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    375c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    375e:	2a 5f       	subi	r18, 0xFA	; 250
    3760:	3f 4f       	sbci	r19, 0xFF	; 255
    3762:	4f 4f       	sbci	r20, 0xFF	; 255
    3764:	5f 4f       	sbci	r21, 0xFF	; 255
    3766:	b1 01       	movw	r22, r2
    3768:	8a 2d       	mov	r24, r10
    376a:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>

	/* Initialize FAT area */
	wsect = b_fat;
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
    376e:	40 e0       	ldi	r20, 0x00	; 0
    3770:	52 e0       	ldi	r21, 0x02	; 2
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	70 e0       	ldi	r23, 0x00	; 0
    3776:	c1 01       	movw	r24, r2
    3778:	0e 94 37 05 	call	0xa6e	; 0xa6e <mem_set>
		n = md;								/* Media descriptor byte */
    377c:	87 2d       	mov	r24, r7
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	a0 e0       	ldi	r26, 0x00	; 0
    3782:	b0 e0       	ldi	r27, 0x00	; 0
		if (fmt != FS_FAT32) {
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
		} else {
			n |= 0xFFFFFF00;
    3784:	9f 6f       	ori	r25, 0xFF	; 255
    3786:	af 6f       	ori	r26, 0xFF	; 255
    3788:	bf 6f       	ori	r27, 0xFF	; 255
    378a:	89 83       	std	Y+1, r24	; 0x01
    378c:	9a 83       	std	Y+2, r25	; 0x02
    378e:	ab 83       	std	Y+3, r26	; 0x03
    3790:	bc 83       	std	Y+4, r27	; 0x04
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
    3792:	f4 01       	movw	r30, r8
    3794:	86 a7       	std	Z+46, r24	; 0x2e
    3796:	8f ef       	ldi	r24, 0xFF	; 255
    3798:	87 a7       	std	Z+47, r24	; 0x2f
    379a:	80 ab       	std	Z+48, r24	; 0x30
    379c:	81 ab       	std	Z+49, r24	; 0x31
			ST_DWORD(tbl+4, 0xFFFFFFFF);
    379e:	82 ab       	std	Z+50, r24	; 0x32
    37a0:	83 ab       	std	Z+51, r24	; 0x33
    37a2:	84 ab       	std	Z+52, r24	; 0x34
    37a4:	85 ab       	std	Z+53, r24	; 0x35
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
    37a6:	86 ab       	std	Z+54, r24	; 0x36
    37a8:	87 ab       	std	Z+55, r24	; 0x37
    37aa:	80 af       	std	Z+56, r24	; 0x38
    37ac:	8f e0       	ldi	r24, 0x0F	; 15
    37ae:	81 af       	std	Z+57, r24	; 0x39
    37b0:	12 c0       	rjmp	.+36     	; 0x37d6 <f_mkfs+0x7ea>
	wsect = b_fat;
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
		n = md;								/* Media descriptor byte */
		if (fmt != FS_FAT32) {
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	9f ef       	ldi	r25, 0xFF	; 255
    37b6:	af ef       	ldi	r26, 0xFF	; 255
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	84 2b       	or	r24, r20
    37bc:	95 2b       	or	r25, r21
    37be:	a6 2b       	or	r26, r22
    37c0:	b7 2b       	or	r27, r23
    37c2:	89 83       	std	Y+1, r24	; 0x01
    37c4:	9a 83       	std	Y+2, r25	; 0x02
    37c6:	ab 83       	std	Y+3, r26	; 0x03
    37c8:	bc 83       	std	Y+4, r27	; 0x04
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
    37ca:	f4 01       	movw	r30, r8
    37cc:	86 a7       	std	Z+46, r24	; 0x2e
    37ce:	2f ef       	ldi	r18, 0xFF	; 255
    37d0:	27 a7       	std	Z+47, r18	; 0x2f
    37d2:	20 ab       	std	Z+48, r18	; 0x30
    37d4:	b1 ab       	std	Z+49, r27	; 0x31
			n |= 0xFFFFFF00;
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
    37d6:	4b a0       	ldd	r4, Y+35	; 0x23
    37d8:	5c a0       	ldd	r5, Y+36	; 0x24
    37da:	6d a0       	ldd	r6, Y+37	; 0x25
    37dc:	7e a0       	ldd	r7, Y+38	; 0x26
    37de:	ff ef       	ldi	r31, 0xFF	; 255
    37e0:	4f 1a       	sub	r4, r31
    37e2:	5f 0a       	sbc	r5, r31
    37e4:	6f 0a       	sbc	r6, r31
    37e6:	7f 0a       	sbc	r7, r31
    37e8:	01 e0       	ldi	r16, 0x01	; 1
    37ea:	10 e0       	ldi	r17, 0x00	; 0
    37ec:	2b a1       	ldd	r18, Y+35	; 0x23
    37ee:	3c a1       	ldd	r19, Y+36	; 0x24
    37f0:	4d a1       	ldd	r20, Y+37	; 0x25
    37f2:	5e a1       	ldd	r21, Y+38	; 0x26
    37f4:	b1 01       	movw	r22, r2
    37f6:	8a 2d       	mov	r24, r10
    37f8:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
    37fc:	81 11       	cpse	r24, r1
    37fe:	df c0       	rjmp	.+446    	; 0x39be <f_mkfs+0x9d2>
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
    3800:	40 e0       	ldi	r20, 0x00	; 0
    3802:	52 e0       	ldi	r21, 0x02	; 2
    3804:	60 e0       	ldi	r22, 0x00	; 0
    3806:	70 e0       	ldi	r23, 0x00	; 0
    3808:	c1 01       	movw	r24, r2
    380a:	0e 94 37 05 	call	0xa6e	; 0xa6e <mem_set>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	a0 e0       	ldi	r26, 0x00	; 0
    3814:	b0 e0       	ldi	r27, 0x00	; 0
    3816:	89 83       	std	Y+1, r24	; 0x01
    3818:	9a 83       	std	Y+2, r25	; 0x02
    381a:	ab 83       	std	Y+3, r26	; 0x03
    381c:	bc 83       	std	Y+4, r27	; 0x04
    381e:	a3 01       	movw	r20, r6
    3820:	92 01       	movw	r18, r4
    3822:	1c c0       	rjmp	.+56     	; 0x385c <f_mkfs+0x870>
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
    3824:	29 01       	movw	r4, r18
    3826:	3a 01       	movw	r6, r20
    3828:	6f ef       	ldi	r22, 0xFF	; 255
    382a:	46 1a       	sub	r4, r22
    382c:	56 0a       	sbc	r5, r22
    382e:	66 0a       	sbc	r6, r22
    3830:	76 0a       	sbc	r7, r22
    3832:	01 e0       	ldi	r16, 0x01	; 1
    3834:	10 e0       	ldi	r17, 0x00	; 0
    3836:	b1 01       	movw	r22, r2
    3838:	8f 85       	ldd	r24, Y+15	; 0x0f
    383a:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
    383e:	81 11       	cpse	r24, r1
    3840:	c0 c0       	rjmp	.+384    	; 0x39c2 <f_mkfs+0x9d6>
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	9a 81       	ldd	r25, Y+2	; 0x02
    3846:	ab 81       	ldd	r26, Y+3	; 0x03
    3848:	bc 81       	ldd	r27, Y+4	; 0x04
    384a:	01 96       	adiw	r24, 0x01	; 1
    384c:	a1 1d       	adc	r26, r1
    384e:	b1 1d       	adc	r27, r1
    3850:	89 83       	std	Y+1, r24	; 0x01
    3852:	9a 83       	std	Y+2, r25	; 0x02
    3854:	ab 83       	std	Y+3, r26	; 0x03
    3856:	bc 83       	std	Y+4, r27	; 0x04
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
    3858:	a3 01       	movw	r20, r6
    385a:	92 01       	movw	r18, r4
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	9a 81       	ldd	r25, Y+2	; 0x02
    3860:	ab 81       	ldd	r26, Y+3	; 0x03
    3862:	bc 81       	ldd	r27, Y+4	; 0x04
    3864:	4c 88       	ldd	r4, Y+20	; 0x14
    3866:	5d 88       	ldd	r5, Y+21	; 0x15
    3868:	6e 88       	ldd	r6, Y+22	; 0x16
    386a:	7f 88       	ldd	r7, Y+23	; 0x17
    386c:	84 15       	cp	r24, r4
    386e:	95 05       	cpc	r25, r5
    3870:	a6 05       	cpc	r26, r6
    3872:	b7 05       	cpc	r27, r7
    3874:	b8 f2       	brcs	.-82     	; 0x3824 <f_mkfs+0x838>
    3876:	29 01       	movw	r4, r18
    3878:	3a 01       	movw	r6, r20
				return FR_DISK_ERR;
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
    387a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    387c:	23 30       	cpi	r18, 0x03	; 3
    387e:	39 f0       	breq	.+14     	; 0x388e <f_mkfs+0x8a2>
    3880:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3882:	58 a1       	ldd	r21, Y+32	; 0x20
    3884:	5e 8f       	std	Y+30, r21	; 0x1e
    3886:	4d 8f       	std	Y+29, r20	; 0x1d
    3888:	a3 01       	movw	r20, r6
    388a:	92 01       	movw	r18, r4
    388c:	02 c0       	rjmp	.+4      	; 0x3892 <f_mkfs+0x8a6>
    388e:	a3 01       	movw	r20, r6
    3890:	92 01       	movw	r18, r4
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
    3892:	29 01       	movw	r4, r18
    3894:	3a 01       	movw	r6, r20
    3896:	6f ef       	ldi	r22, 0xFF	; 255
    3898:	46 1a       	sub	r4, r22
    389a:	56 0a       	sbc	r5, r22
    389c:	66 0a       	sbc	r6, r22
    389e:	76 0a       	sbc	r7, r22
    38a0:	01 e0       	ldi	r16, 0x01	; 1
    38a2:	10 e0       	ldi	r17, 0x00	; 0
    38a4:	b1 01       	movw	r22, r2
    38a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    38a8:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
    38ac:	81 11       	cpse	r24, r1
    38ae:	8b c0       	rjmp	.+278    	; 0x39c6 <f_mkfs+0x9da>
			return FR_DISK_ERR;
	} while (--i);
    38b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38b4:	01 97       	sbiw	r24, 0x01	; 1
    38b6:	9e 8f       	std	Y+30, r25	; 0x1e
    38b8:	8d 8f       	std	Y+29, r24	; 0x1d
    38ba:	89 2b       	or	r24, r25
    38bc:	19 f0       	breq	.+6      	; 0x38c4 <f_mkfs+0x8d8>
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
    38be:	a3 01       	movw	r20, r6
    38c0:	92 01       	movw	r18, r4
    38c2:	e7 cf       	rjmp	.-50     	; 0x3892 <f_mkfs+0x8a6>
		disk_ioctl(pdrv, CTRL_TRIM, eb);
	}
#endif

	/* Create FSINFO if needed */
	if (fmt == FS_FAT32) {
    38c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38c6:	93 30       	cpi	r25, 0x03	; 3
    38c8:	09 f0       	breq	.+2      	; 0x38cc <f_mkfs+0x8e0>
    38ca:	54 c0       	rjmp	.+168    	; 0x3974 <f_mkfs+0x988>
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
    38cc:	82 e5       	ldi	r24, 0x52	; 82
    38ce:	d4 01       	movw	r26, r8
    38d0:	9e 96       	adiw	r26, 0x2e	; 46
    38d2:	8c 93       	st	X, r24
    38d4:	9e 97       	sbiw	r26, 0x2e	; 46
    38d6:	9f 96       	adiw	r26, 0x2f	; 47
    38d8:	8c 93       	st	X, r24
    38da:	9f 97       	sbiw	r26, 0x2f	; 47
    38dc:	81 e6       	ldi	r24, 0x61	; 97
    38de:	d0 96       	adiw	r26, 0x30	; 48
    38e0:	8c 93       	st	X, r24
    38e2:	d0 97       	sbiw	r26, 0x30	; 48
    38e4:	91 e4       	ldi	r25, 0x41	; 65
    38e6:	d1 96       	adiw	r26, 0x31	; 49
    38e8:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
    38ea:	f4 01       	movw	r30, r8
    38ec:	ee 5e       	subi	r30, 0xEE	; 238
    38ee:	fd 4f       	sbci	r31, 0xFD	; 253
    38f0:	22 e7       	ldi	r18, 0x72	; 114
    38f2:	20 83       	st	Z, r18
    38f4:	31 96       	adiw	r30, 0x01	; 1
    38f6:	20 83       	st	Z, r18
    38f8:	31 96       	adiw	r30, 0x01	; 1
    38fa:	90 83       	st	Z, r25
    38fc:	31 96       	adiw	r30, 0x01	; 1
    38fe:	80 83       	st	Z, r24
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    3900:	31 96       	adiw	r30, 0x01	; 1
    3902:	8f ef       	ldi	r24, 0xFF	; 255
    3904:	8c 0d       	add	r24, r12
    3906:	80 83       	st	Z, r24
    3908:	31 96       	adiw	r30, 0x01	; 1
    390a:	c6 01       	movw	r24, r12
    390c:	01 97       	sbiw	r24, 0x01	; 1
    390e:	90 83       	st	Z, r25
    3910:	b1 e0       	ldi	r27, 0x01	; 1
    3912:	cb 1a       	sub	r12, r27
    3914:	d1 08       	sbc	r13, r1
    3916:	e1 08       	sbc	r14, r1
    3918:	f1 08       	sbc	r15, r1
    391a:	31 96       	adiw	r30, 0x01	; 1
    391c:	e0 82       	st	Z, r14
    391e:	31 96       	adiw	r30, 0x01	; 1
    3920:	f0 82       	st	Z, r15
		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
    3922:	31 96       	adiw	r30, 0x01	; 1
    3924:	82 e0       	ldi	r24, 0x02	; 2
    3926:	80 83       	st	Z, r24
    3928:	31 96       	adiw	r30, 0x01	; 1
    392a:	10 82       	st	Z, r1
    392c:	31 96       	adiw	r30, 0x01	; 1
    392e:	10 82       	st	Z, r1
    3930:	31 96       	adiw	r30, 0x01	; 1
    3932:	10 82       	st	Z, r1
		ST_WORD(tbl+BS_55AA, 0xAA55);
    3934:	3f 96       	adiw	r30, 0x0f	; 15
    3936:	85 e5       	ldi	r24, 0x55	; 85
    3938:	80 83       	st	Z, r24
    393a:	31 96       	adiw	r30, 0x01	; 1
    393c:	8a ea       	ldi	r24, 0xAA	; 170
    393e:	80 83       	st	Z, r24
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
    3940:	28 8d       	ldd	r18, Y+24	; 0x18
    3942:	39 8d       	ldd	r19, Y+25	; 0x19
    3944:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3946:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3948:	2f 5f       	subi	r18, 0xFF	; 255
    394a:	3f 4f       	sbci	r19, 0xFF	; 255
    394c:	4f 4f       	sbci	r20, 0xFF	; 255
    394e:	5f 4f       	sbci	r21, 0xFF	; 255
    3950:	01 e0       	ldi	r16, 0x01	; 1
    3952:	10 e0       	ldi	r17, 0x00	; 0
    3954:	b1 01       	movw	r22, r2
    3956:	8a 2d       	mov	r24, r10
    3958:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
    395c:	28 8d       	ldd	r18, Y+24	; 0x18
    395e:	39 8d       	ldd	r19, Y+25	; 0x19
    3960:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3962:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3964:	29 5f       	subi	r18, 0xF9	; 249
    3966:	3f 4f       	sbci	r19, 0xFF	; 255
    3968:	4f 4f       	sbci	r20, 0xFF	; 255
    396a:	5f 4f       	sbci	r21, 0xFF	; 255
    396c:	b1 01       	movw	r22, r2
    396e:	8a 2d       	mov	r24, r10
    3970:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
    3974:	40 e0       	ldi	r20, 0x00	; 0
    3976:	50 e0       	ldi	r21, 0x00	; 0
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	8a 2d       	mov	r24, r10
    397c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <disk_ioctl>
    3980:	91 e0       	ldi	r25, 0x01	; 1
    3982:	81 11       	cpse	r24, r1
    3984:	46 c0       	rjmp	.+140    	; 0x3a12 <f_mkfs+0xa26>
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	44 c0       	rjmp	.+136    	; 0x3a12 <f_mkfs+0xa26>
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	if (sfd > 1) return FR_INVALID_PARAMETER;
    398a:	93 e1       	ldi	r25, 0x13	; 19
    398c:	42 c0       	rjmp	.+132    	; 0x3a12 <f_mkfs+0xa26>
	vol = get_ldnumber(&path);
	if (vol < 0) return FR_INVALID_DRIVE;
    398e:	9b e0       	ldi	r25, 0x0B	; 11
    3990:	40 c0       	rjmp	.+128    	; 0x3a12 <f_mkfs+0xa26>
	fs = FatFs[vol];
	if (!fs) return FR_NOT_ENABLED;
    3992:	9c e0       	ldi	r25, 0x0C	; 12
    3994:	3e c0       	rjmp	.+124    	; 0x3a12 <f_mkfs+0xa26>
	pdrv = LD2PD(vol);	/* Physical drive */
	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/

	/* Get disk statics */
	stat = disk_initialize(pdrv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
    3996:	93 e0       	ldi	r25, 0x03	; 3
    3998:	3c c0       	rjmp	.+120    	; 0x3a12 <f_mkfs+0xa26>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    399a:	9a e0       	ldi	r25, 0x0A	; 10
    399c:	3a c0       	rjmp	.+116    	; 0x3a12 <f_mkfs+0xa26>
		b_vol = LD_DWORD(tbl+8);	/* Volume start sector */
		n_vol = LD_DWORD(tbl+12);	/* Volume size */
	} else {
		/* Create a partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
			return FR_DISK_ERR;
    399e:	91 e0       	ldi	r25, 0x01	; 1
    39a0:	38 c0       	rjmp	.+112    	; 0x3a12 <f_mkfs+0xa26>
    39a2:	91 e0       	ldi	r25, 0x01	; 1
    39a4:	36 c0       	rjmp	.+108    	; 0x3a12 <f_mkfs+0xa26>
		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
	b_data = b_dir + n_dir;				/* Data area start sector */
	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
    39a6:	9e e0       	ldi	r25, 0x0E	; 14
    39a8:	34 c0       	rjmp	.+104    	; 0x3a12 <f_mkfs+0xa26>

	/* Determine number of clusters and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
		return FR_MKFS_ABORTED;
    39aa:	9e e0       	ldi	r25, 0x0E	; 14
    39ac:	32 c0       	rjmp	.+100    	; 0x3a12 <f_mkfs+0xa26>
    39ae:	9e e0       	ldi	r25, 0x0E	; 14
    39b0:	30 c0       	rjmp	.+96     	; 0x3a12 <f_mkfs+0xa26>
			tbl[7] = (BYTE)n;				/* End cylinder */
			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
			ST_WORD(fs->win+BS_55AA, 0xAA55);	/* MBR signature */
			if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to the MBR */
				return FR_DISK_ERR;
    39b2:	91 e0       	ldi	r25, 0x01	; 1
    39b4:	2e c0       	rjmp	.+92     	; 0x3a12 <f_mkfs+0xa26>
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
		return FR_DISK_ERR;
    39b6:	91 e0       	ldi	r25, 0x01	; 1
    39b8:	2c c0       	rjmp	.+88     	; 0x3a12 <f_mkfs+0xa26>
    39ba:	91 e0       	ldi	r25, 0x01	; 1
    39bc:	2a c0       	rjmp	.+84     	; 0x3a12 <f_mkfs+0xa26>
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
			ST_DWORD(tbl+4, 0xFFFFFFFF);
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
		}
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
    39be:	91 e0       	ldi	r25, 0x01	; 1
    39c0:	28 c0       	rjmp	.+80     	; 0x3a12 <f_mkfs+0xa26>
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
				return FR_DISK_ERR;
    39c2:	91 e0       	ldi	r25, 0x01	; 1
    39c4:	26 c0       	rjmp	.+76     	; 0x3a12 <f_mkfs+0xa26>

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
	do {
		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
    39c6:	91 e0       	ldi	r25, 0x01	; 1
    39c8:	24 c0       	rjmp	.+72     	; 0x3a12 <f_mkfs+0xa26>

	/* Pre-compute number of clusters and FAT sub-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
    39ca:	26 3f       	cpi	r18, 0xF6	; 246
    39cc:	ef ef       	ldi	r30, 0xFF	; 255
    39ce:	3e 07       	cpc	r19, r30
    39d0:	41 05       	cpc	r20, r1
    39d2:	51 05       	cpc	r21, r1
    39d4:	08 f0       	brcs	.+2      	; 0x39d8 <f_mkfs+0x9ec>
    39d6:	d4 cb       	rjmp	.-2136   	; 0x3180 <f_mkfs+0x194>
    39d8:	ff cb       	rjmp	.-2050   	; 0x31d8 <f_mkfs+0x1ec>
    39da:	26 3f       	cpi	r18, 0xF6	; 246
    39dc:	ff ef       	ldi	r31, 0xFF	; 255
    39de:	3f 07       	cpc	r19, r31
    39e0:	41 05       	cpc	r20, r1
    39e2:	51 05       	cpc	r21, r1
    39e4:	08 f0       	brcs	.+2      	; 0x39e8 <f_mkfs+0x9fc>
    39e6:	cc cb       	rjmp	.-2152   	; 0x3180 <f_mkfs+0x194>
    39e8:	0a cc       	rjmp	.-2028   	; 0x31fe <f_mkfs+0x212>
		disk_write(pdrv, tbl, b_vol + 6, 1);

	/* Initialize FAT area */
	wsect = b_fat;
	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
    39ea:	40 e0       	ldi	r20, 0x00	; 0
    39ec:	52 e0       	ldi	r21, 0x02	; 2
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	70 e0       	ldi	r23, 0x00	; 0
    39f2:	c1 01       	movw	r24, r2
    39f4:	0e 94 37 05 	call	0xa6e	; 0xa6e <mem_set>
		n = md;								/* Media descriptor byte */
    39f8:	47 2d       	mov	r20, r7
    39fa:	50 e0       	ldi	r21, 0x00	; 0
    39fc:	60 e0       	ldi	r22, 0x00	; 0
    39fe:	70 e0       	ldi	r23, 0x00	; 0
		if (fmt != FS_FAT32) {
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
    3a00:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3a02:	21 30       	cpi	r18, 0x01	; 1
    3a04:	09 f4       	brne	.+2      	; 0x3a08 <f_mkfs+0xa1c>
    3a06:	d5 ce       	rjmp	.-598    	; 0x37b2 <f_mkfs+0x7c6>
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	9f ef       	ldi	r25, 0xFF	; 255
    3a0c:	af ef       	ldi	r26, 0xFF	; 255
    3a0e:	bf ef       	ldi	r27, 0xFF	; 255
    3a10:	d4 ce       	rjmp	.-600    	; 0x37ba <f_mkfs+0x7ce>
		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
	}

	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
}
    3a12:	89 2f       	mov	r24, r25
    3a14:	a6 96       	adiw	r28, 0x26	; 38
    3a16:	0f b6       	in	r0, 0x3f	; 63
    3a18:	f8 94       	cli
    3a1a:	de bf       	out	0x3e, r29	; 62
    3a1c:	0f be       	out	0x3f, r0	; 63
    3a1e:	cd bf       	out	0x3d, r28	; 61
    3a20:	df 91       	pop	r29
    3a22:	cf 91       	pop	r28
    3a24:	1f 91       	pop	r17
    3a26:	0f 91       	pop	r16
    3a28:	ff 90       	pop	r15
    3a2a:	ef 90       	pop	r14
    3a2c:	df 90       	pop	r13
    3a2e:	cf 90       	pop	r12
    3a30:	bf 90       	pop	r11
    3a32:	af 90       	pop	r10
    3a34:	9f 90       	pop	r9
    3a36:	8f 90       	pop	r8
    3a38:	7f 90       	pop	r7
    3a3a:	6f 90       	pop	r6
    3a3c:	5f 90       	pop	r5
    3a3e:	4f 90       	pop	r4
    3a40:	3f 90       	pop	r3
    3a42:	2f 90       	pop	r2
    3a44:	08 95       	ret

00003a46 <SDCardManager_Init>:

	
	//printf_P(PSTR("SD blocks: %li\r\n"), TotalBlocks);
	
	return CachedTotalBlocks;
}
    3a46:	cf 93       	push	r28
    3a48:	df 93       	push	r29
    3a4a:	c5 e6       	ldi	r28, 0x65	; 101
    3a4c:	d1 e0       	ldi	r29, 0x01	; 1
    3a4e:	06 c0       	rjmp	.+12     	; 0x3a5c <SDCardManager_Init+0x16>
    3a50:	df 93       	push	r29
    3a52:	cf 93       	push	r28
    3a54:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <printf_P>
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <disk_initialize>
    3a62:	88 23       	and	r24, r24
    3a64:	a9 f3       	breq	.-22     	; 0x3a50 <SDCardManager_Init+0xa>
    3a66:	df 91       	pop	r29
    3a68:	cf 91       	pop	r28
    3a6a:	08 95       	ret

00003a6c <SDCardManager_WriteBlockHandler>:
 *
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
uintptr_t SDCardManager_WriteBlockHandler(uint8_t* buffer, uint8_t offset)
{
    3a6c:	1f 93       	push	r17
    3a6e:	cf 93       	push	r28
    3a70:	df 93       	push	r29
    3a72:	ec 01       	movw	r28, r24
    3a74:	16 2f       	mov	r17, r22
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3a76:	80 91 e8 00 	lds	r24, 0x00E8
	/* Check if the endpoint is currently empty */
	if (!(Endpoint_IsReadWriteAllowed()))
    3a7a:	85 fd       	sbrc	r24, 5
    3a7c:	09 c0       	rjmp	.+18     	; 0x3a90 <SDCardManager_WriteBlockHandler+0x24>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3a7e:	e8 ee       	ldi	r30, 0xE8	; 232
    3a80:	f0 e0       	ldi	r31, 0x00	; 0
    3a82:	80 81       	ld	r24, Z
    3a84:	8b 77       	andi	r24, 0x7B	; 123
    3a86:	80 83       	st	Z, r24
	{
		/* Clear the current endpoint bank */
		Endpoint_ClearOUT();
		
		/* Wait until the host has sent another packet */
		if (Endpoint_WaitUntilReady())
    3a88:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <Endpoint_WaitUntilReady>
    3a8c:	81 11       	cpse	r24, r1
    3a8e:	28 c0       	rjmp	.+80     	; 0x3ae0 <SDCardManager_WriteBlockHandler+0x74>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3a90:	a1 ef       	ldi	r26, 0xF1	; 241
    3a92:	b0 e0       	ldi	r27, 0x00	; 0
    3a94:	8c 91       	ld	r24, X
		  return 0;
	}
	
	/* Write one 16-byte chunk of data to the dataflash */
	buffer[0+offset] = Endpoint_Read_8();
    3a96:	fe 01       	movw	r30, r28
    3a98:	e1 0f       	add	r30, r17
    3a9a:	f1 1d       	adc	r31, r1
    3a9c:	80 83       	st	Z, r24
    3a9e:	8c 91       	ld	r24, X
	buffer[1+offset] = Endpoint_Read_8();
    3aa0:	81 83       	std	Z+1, r24	; 0x01
    3aa2:	8c 91       	ld	r24, X
	buffer[2+offset] = Endpoint_Read_8();
    3aa4:	82 83       	std	Z+2, r24	; 0x02
    3aa6:	8c 91       	ld	r24, X
	buffer[3+offset] = Endpoint_Read_8();
    3aa8:	83 83       	std	Z+3, r24	; 0x03
    3aaa:	8c 91       	ld	r24, X
	buffer[4+offset] = Endpoint_Read_8();
    3aac:	84 83       	std	Z+4, r24	; 0x04
    3aae:	8c 91       	ld	r24, X
	buffer[5+offset] = Endpoint_Read_8();
    3ab0:	85 83       	std	Z+5, r24	; 0x05
    3ab2:	8c 91       	ld	r24, X
	buffer[6+offset] = Endpoint_Read_8();
    3ab4:	86 83       	std	Z+6, r24	; 0x06
    3ab6:	8c 91       	ld	r24, X
	buffer[7+offset] = Endpoint_Read_8();
    3ab8:	87 83       	std	Z+7, r24	; 0x07
    3aba:	8c 91       	ld	r24, X
	buffer[8+offset] = Endpoint_Read_8();
    3abc:	80 87       	std	Z+8, r24	; 0x08
    3abe:	8c 91       	ld	r24, X
	buffer[9+offset] = Endpoint_Read_8();
    3ac0:	81 87       	std	Z+9, r24	; 0x09
    3ac2:	8c 91       	ld	r24, X
	buffer[10+offset] = Endpoint_Read_8();
    3ac4:	82 87       	std	Z+10, r24	; 0x0a
    3ac6:	8c 91       	ld	r24, X
	buffer[11+offset] = Endpoint_Read_8();
    3ac8:	83 87       	std	Z+11, r24	; 0x0b
    3aca:	8c 91       	ld	r24, X
	buffer[12+offset] = Endpoint_Read_8();
    3acc:	84 87       	std	Z+12, r24	; 0x0c
    3ace:	8c 91       	ld	r24, X
	buffer[13+offset] = Endpoint_Read_8();
    3ad0:	85 87       	std	Z+13, r24	; 0x0d
    3ad2:	8c 91       	ld	r24, X
	buffer[14+offset] = Endpoint_Read_8();
    3ad4:	86 87       	std	Z+14, r24	; 0x0e
    3ad6:	8c 91       	ld	r24, X
	buffer[15+offset] = Endpoint_Read_8();
    3ad8:	87 87       	std	Z+15, r24	; 0x0f
	
	return 16;
    3ada:	80 e1       	ldi	r24, 0x10	; 16
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	02 c0       	rjmp	.+4      	; 0x3ae4 <SDCardManager_WriteBlockHandler+0x78>
		/* Clear the current endpoint bank */
		Endpoint_ClearOUT();
		
		/* Wait until the host has sent another packet */
		if (Endpoint_WaitUntilReady())
		  return 0;
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
	buffer[13+offset] = Endpoint_Read_8();
	buffer[14+offset] = Endpoint_Read_8();
	buffer[15+offset] = Endpoint_Read_8();
	
	return 16;
}
    3ae4:	df 91       	pop	r29
    3ae6:	cf 91       	pop	r28
    3ae8:	1f 91       	pop	r17
    3aea:	08 95       	ret

00003aec <SDCardManager_WriteBlocks>:

void SDCardManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
    3aec:	af 92       	push	r10
    3aee:	bf 92       	push	r11
    3af0:	cf 92       	push	r12
    3af2:	df 92       	push	r13
    3af4:	ef 92       	push	r14
    3af6:	ff 92       	push	r15
    3af8:	0f 93       	push	r16
    3afa:	1f 93       	push	r17
    3afc:	cf 93       	push	r28
    3afe:	df 93       	push	r29
    3b00:	5c 01       	movw	r10, r24
    3b02:	6a 01       	movw	r12, r20
    3b04:	7b 01       	movw	r14, r22
    3b06:	e9 01       	movw	r28, r18
	uint8_t  BytesWritten = 0;

//	printf_P(PSTR("W %li %i\r\n"), BlockAddress, TotalBlocks);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    3b08:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <Endpoint_WaitUntilReady>
    3b0c:	88 23       	and	r24, r24
    3b0e:	c9 f0       	breq	.+50     	; 0x3b42 <SDCardManager_WriteBlocks+0x56>
    3b10:	26 c0       	rjmp	.+76     	; 0x3b5e <SDCardManager_WriteBlocks+0x72>
	  return;
	
	while (TotalBlocks)
	{
	//	sd_raw_write_interval(BlockAddress *  VIRTUAL_MEMORY_BLOCK_SIZE, Buffer, VIRTUAL_MEMORY_BLOCK_SIZE, &SDCardManager_WriteBlockHandler, NULL);
	disk_write (0, Buffer, BlockAddress, 1);//write to disk 0, from Buffer array, into BlockAddress, Write only 1 sector (block);
    3b12:	01 e0       	ldi	r16, 0x01	; 1
    3b14:	10 e0       	ldi	r17, 0x00	; 0
    3b16:	a7 01       	movw	r20, r14
    3b18:	96 01       	movw	r18, r12
    3b1a:	65 e1       	ldi	r22, 0x15	; 21
    3b1c:	72 e0       	ldi	r23, 0x02	; 2
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	0e 94 0a 04 	call	0x814	; 0x814 <disk_write>
	SDCardManager_WriteBlockHandler(Buffer, BytesWritten);
    3b24:	60 e0       	ldi	r22, 0x00	; 0
    3b26:	85 e1       	ldi	r24, 0x15	; 21
    3b28:	92 e0       	ldi	r25, 0x02	; 2
    3b2a:	a0 df       	rcall	.-192    	; 0x3a6c <SDCardManager_WriteBlockHandler>
	
		/* Decrement the blocks remaining counter and reset the sub block counter */
		BlockAddress++;
    3b2c:	8f ef       	ldi	r24, 0xFF	; 255
    3b2e:	c8 1a       	sub	r12, r24
    3b30:	d8 0a       	sbc	r13, r24
    3b32:	e8 0a       	sbc	r14, r24
    3b34:	f8 0a       	sbc	r15, r24
		TotalBlocks--;
    3b36:	21 97       	sbiw	r28, 0x01	; 1
		
		if (MSInterfaceInfo->State.IsMassStoreReset)
    3b38:	f5 01       	movw	r30, r10
    3b3a:	80 ad       	ldd	r24, Z+56	; 0x38
    3b3c:	88 23       	and	r24, r24
    3b3e:	21 f0       	breq	.+8      	; 0x3b48 <SDCardManager_WriteBlocks+0x5c>
    3b40:	0e c0       	rjmp	.+28     	; 0x3b5e <SDCardManager_WriteBlocks+0x72>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
    3b42:	20 97       	sbiw	r28, 0x00	; 0
    3b44:	31 f7       	brne	.-52     	; 0x3b12 <SDCardManager_WriteBlocks+0x26>
    3b46:	02 c0       	rjmp	.+4      	; 0x3b4c <SDCardManager_WriteBlocks+0x60>
    3b48:	20 97       	sbiw	r28, 0x00	; 0
    3b4a:	19 f7       	brne	.-58     	; 0x3b12 <SDCardManager_WriteBlocks+0x26>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3b4c:	80 91 e8 00 	lds	r24, 0x00E8
			
		
	}

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    3b50:	85 fd       	sbrc	r24, 5
    3b52:	05 c0       	rjmp	.+10     	; 0x3b5e <SDCardManager_WriteBlocks+0x72>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3b54:	e8 ee       	ldi	r30, 0xE8	; 232
    3b56:	f0 e0       	ldi	r31, 0x00	; 0
    3b58:	80 81       	ld	r24, Z
    3b5a:	8b 77       	andi	r24, 0x7B	; 123
    3b5c:	80 83       	st	Z, r24
	  Endpoint_ClearOUT();
}
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	ff 90       	pop	r15
    3b68:	ef 90       	pop	r14
    3b6a:	df 90       	pop	r13
    3b6c:	cf 90       	pop	r12
    3b6e:	bf 90       	pop	r11
    3b70:	af 90       	pop	r10
    3b72:	08 95       	ret

00003b74 <SDCardManager_ReadBlockHandler>:
 *  \param[in] BlockAddress  Data block starting address for the read sequence
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */

uint8_t SDCardManager_ReadBlockHandler(uint8_t* buffer, uint8_t offset)
{
    3b74:	1f 93       	push	r17
    3b76:	cf 93       	push	r28
    3b78:	df 93       	push	r29
    3b7a:	ec 01       	movw	r28, r24
    3b7c:	16 2f       	mov	r17, r22
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3b7e:	80 91 e8 00 	lds	r24, 0x00E8
	uint8_t i;

	/* Check if the endpoint is currently full */
	if (!(Endpoint_IsReadWriteAllowed()))
    3b82:	85 fd       	sbrc	r24, 5
    3b84:	09 c0       	rjmp	.+18     	; 0x3b98 <SDCardManager_ReadBlockHandler+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3b86:	e8 ee       	ldi	r30, 0xE8	; 232
    3b88:	f0 e0       	ldi	r31, 0x00	; 0
    3b8a:	80 81       	ld	r24, Z
    3b8c:	8e 77       	andi	r24, 0x7E	; 126
    3b8e:	80 83       	st	Z, r24
	{
		/* Clear the endpoint bank to send its contents to the host */
		Endpoint_ClearIN();
		
		/* Wait until the endpoint is ready for more data */
		if (Endpoint_WaitUntilReady())
    3b90:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <Endpoint_WaitUntilReady>
    3b94:	81 11       	cpse	r24, r1
    3b96:	44 c0       	rjmp	.+136    	; 0x3c20 <SDCardManager_ReadBlockHandler+0xac>
		  return 0;
	}
		
	Endpoint_Write_8(buffer[0+offset]);
    3b98:	de 01       	movw	r26, r28
    3b9a:	a1 0f       	add	r26, r17
    3b9c:	b1 1d       	adc	r27, r1
    3b9e:	8c 91       	ld	r24, X
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3ba0:	e1 ef       	ldi	r30, 0xF1	; 241
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[1+offset]);
    3ba6:	11 96       	adiw	r26, 0x01	; 1
    3ba8:	8c 91       	ld	r24, X
    3baa:	11 97       	sbiw	r26, 0x01	; 1
    3bac:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[2+offset]);
    3bae:	12 96       	adiw	r26, 0x02	; 2
    3bb0:	8c 91       	ld	r24, X
    3bb2:	12 97       	sbiw	r26, 0x02	; 2
    3bb4:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[3+offset]);
    3bb6:	13 96       	adiw	r26, 0x03	; 3
    3bb8:	8c 91       	ld	r24, X
    3bba:	13 97       	sbiw	r26, 0x03	; 3
    3bbc:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[4+offset]);
    3bbe:	14 96       	adiw	r26, 0x04	; 4
    3bc0:	8c 91       	ld	r24, X
    3bc2:	14 97       	sbiw	r26, 0x04	; 4
    3bc4:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[5+offset]);
    3bc6:	15 96       	adiw	r26, 0x05	; 5
    3bc8:	8c 91       	ld	r24, X
    3bca:	15 97       	sbiw	r26, 0x05	; 5
    3bcc:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[6+offset]);
    3bce:	16 96       	adiw	r26, 0x06	; 6
    3bd0:	8c 91       	ld	r24, X
    3bd2:	16 97       	sbiw	r26, 0x06	; 6
    3bd4:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[7+offset]);
    3bd6:	17 96       	adiw	r26, 0x07	; 7
    3bd8:	8c 91       	ld	r24, X
    3bda:	17 97       	sbiw	r26, 0x07	; 7
    3bdc:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[8+offset]);
    3bde:	18 96       	adiw	r26, 0x08	; 8
    3be0:	8c 91       	ld	r24, X
    3be2:	18 97       	sbiw	r26, 0x08	; 8
    3be4:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[9+offset]);
    3be6:	19 96       	adiw	r26, 0x09	; 9
    3be8:	8c 91       	ld	r24, X
    3bea:	19 97       	sbiw	r26, 0x09	; 9
    3bec:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[10+offset]);
    3bee:	1a 96       	adiw	r26, 0x0a	; 10
    3bf0:	8c 91       	ld	r24, X
    3bf2:	1a 97       	sbiw	r26, 0x0a	; 10
    3bf4:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[11+offset]);
    3bf6:	1b 96       	adiw	r26, 0x0b	; 11
    3bf8:	8c 91       	ld	r24, X
    3bfa:	1b 97       	sbiw	r26, 0x0b	; 11
    3bfc:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[12+offset]);
    3bfe:	1c 96       	adiw	r26, 0x0c	; 12
    3c00:	8c 91       	ld	r24, X
    3c02:	1c 97       	sbiw	r26, 0x0c	; 12
    3c04:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[13+offset]);
    3c06:	1d 96       	adiw	r26, 0x0d	; 13
    3c08:	8c 91       	ld	r24, X
    3c0a:	1d 97       	sbiw	r26, 0x0d	; 13
    3c0c:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[14+offset]);
    3c0e:	1e 96       	adiw	r26, 0x0e	; 14
    3c10:	8c 91       	ld	r24, X
    3c12:	1e 97       	sbiw	r26, 0x0e	; 14
    3c14:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[15+offset]);
    3c16:	1f 96       	adiw	r26, 0x0f	; 15
    3c18:	8c 91       	ld	r24, X
    3c1a:	80 83       	st	Z, r24
	
	/* Check if the current command is being aborted by the host */
//	if (IsMassStoreReset)
//	  return 0;
	
	return 1;
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	01 c0       	rjmp	.+2      	; 0x3c22 <SDCardManager_ReadBlockHandler+0xae>
		/* Clear the endpoint bank to send its contents to the host */
		Endpoint_ClearIN();
		
		/* Wait until the endpoint is ready for more data */
		if (Endpoint_WaitUntilReady())
		  return 0;
    3c20:	80 e0       	ldi	r24, 0x00	; 0
	/* Check if the current command is being aborted by the host */
//	if (IsMassStoreReset)
//	  return 0;
	
	return 1;
}
    3c22:	df 91       	pop	r29
    3c24:	cf 91       	pop	r28
    3c26:	1f 91       	pop	r17
    3c28:	08 95       	ret

00003c2a <SDCardManager_ReadBlocks>:

void SDCardManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
    3c2a:	cf 92       	push	r12
    3c2c:	df 92       	push	r13
    3c2e:	ef 92       	push	r14
    3c30:	ff 92       	push	r15
    3c32:	0f 93       	push	r16
    3c34:	1f 93       	push	r17
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
    3c3a:	6a 01       	movw	r12, r20
    3c3c:	7b 01       	movw	r14, r22
    3c3e:	e9 01       	movw	r28, r18
	uint8_t BytesRead			= 0;

//	printf_P(PSTR("R %li %i\r\n"), BlockAddress, TotalBlocks);
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    3c40:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <Endpoint_WaitUntilReady>
    3c44:	88 23       	and	r24, r24
    3c46:	81 f0       	breq	.+32     	; 0x3c68 <SDCardManager_ReadBlocks+0x3e>
    3c48:	1a c0       	rjmp	.+52     	; 0x3c7e <SDCardManager_ReadBlocks+0x54>
	while (TotalBlocks)
	{
		/* Read a data block from the SD card */
		//sd_raw_read_interval(BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE, Buffer, 16, 512, &SDCardManager_ReadBlockHandler, NULL);
		
		disk_read (0, Buffer, BlockAddress, 1);//  read disk 0,  into buffer,  starting at block address,  read only 1 sector (block=sector)
    3c4a:	01 e0       	ldi	r16, 0x01	; 1
    3c4c:	10 e0       	ldi	r17, 0x00	; 0
    3c4e:	a7 01       	movw	r20, r14
    3c50:	96 01       	movw	r18, r12
    3c52:	65 e1       	ldi	r22, 0x15	; 21
    3c54:	72 e0       	ldi	r23, 0x02	; 2
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	0e 94 bc 03 	call	0x778	; 0x778 <disk_read>
void SDCardManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
	uint16_t CurrPage          = BlockAddress;
	uint16_t CurrPageByte      = 0;
	
	uint8_t BytesRead			= 0;
    3c5c:	80 e0       	ldi	r24, 0x00	; 0
		/* Read a data block from the SD card */
		//sd_raw_read_interval(BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE, Buffer, 16, 512, &SDCardManager_ReadBlockHandler, NULL);
		
		disk_read (0, Buffer, BlockAddress, 1);//  read disk 0,  into buffer,  starting at block address,  read only 1 sector (block=sector)
		while(BytesRead<512){  //send the results to the usb endpoint buffer, 16 bytes at a time.
			BytesRead = SDCardManager_ReadBlockHandler(Buffer, BytesRead); // Bytes Read increases 16 every time handler is called, if all goes well.
    3c5e:	68 2f       	mov	r22, r24
    3c60:	85 e1       	ldi	r24, 0x15	; 21
    3c62:	92 e0       	ldi	r25, 0x02	; 2
    3c64:	87 df       	rcall	.-242    	; 0x3b74 <SDCardManager_ReadBlockHandler>
    3c66:	fb cf       	rjmp	.-10     	; 0x3c5e <SDCardManager_ReadBlocks+0x34>
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
    3c68:	cd 2b       	or	r28, r29
    3c6a:	79 f7       	brne	.-34     	; 0x3c4a <SDCardManager_ReadBlocks+0x20>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3c6c:	80 91 e8 00 	lds	r24, 0x00E8
				return;
		
	}
	
	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    3c70:	85 fd       	sbrc	r24, 5
    3c72:	05 c0       	rjmp	.+10     	; 0x3c7e <SDCardManager_ReadBlocks+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3c74:	e8 ee       	ldi	r30, 0xE8	; 232
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	80 81       	ld	r24, Z
    3c7a:	8e 77       	andi	r24, 0x7E	; 126
    3c7c:	80 83       	st	Z, r24
	  Endpoint_ClearIN();
}
    3c7e:	df 91       	pop	r29
    3c80:	cf 91       	pop	r28
    3c82:	1f 91       	pop	r17
    3c84:	0f 91       	pop	r16
    3c86:	ff 90       	pop	r15
    3c88:	ef 90       	pop	r14
    3c8a:	df 90       	pop	r13
    3c8c:	cf 90       	pop	r12
    3c8e:	08 95       	ret

00003c90 <SDCardManager_CheckDataflashOperation>:
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool SDCardManager_CheckDataflashOperation(void)
{	
	return true;
}
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	08 95       	ret

00003c94 <__vector_17>:



/** ISR to handle the 500ms ticks for sampling and data logging */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    3c94:	1f 92       	push	r1
    3c96:	0f 92       	push	r0
    3c98:	0f b6       	in	r0, 0x3f	; 63
    3c9a:	0f 92       	push	r0
    3c9c:	11 24       	eor	r1, r1
    3c9e:	2f 93       	push	r18
    3ca0:	3f 93       	push	r19
    3ca2:	4f 93       	push	r20
    3ca4:	5f 93       	push	r21
    3ca6:	6f 93       	push	r22
    3ca8:	7f 93       	push	r23
    3caa:	8f 93       	push	r24
    3cac:	9f 93       	push	r25
    3cae:	af 93       	push	r26
    3cb0:	bf 93       	push	r27
    3cb2:	ef 93       	push	r30
    3cb4:	ff 93       	push	r31
    3cb6:	cf 93       	push	r28
    3cb8:	df 93       	push	r29
    3cba:	cd b7       	in	r28, 0x3d	; 61
    3cbc:	de b7       	in	r29, 0x3e	; 62
    3cbe:	c6 56       	subi	r28, 0x66	; 102
    3cc0:	d1 09       	sbc	r29, r1
    3cc2:	de bf       	out	0x3e, r29	; 62
    3cc4:	cd bf       	out	0x3d, r28	; 61
	/* Only log when not connected to a USB host */
	if (USB_DeviceState != DEVICE_STATE_Configured)
    3cc6:	8e b3       	in	r24, 0x1e	; 30
    3cc8:	84 30       	cpi	r24, 0x04	; 4
    3cca:	f9 f0       	breq	.+62     	; 0x3d0a <__vector_17+0x76>
	{
		char     LineBuffer[100];
		uint16_t BytesWritten;

		BytesWritten = sprintf(LineBuffer, "TEST1 TEST2 TEST3/r/n");//write the letter a to the write buffer.  BytesWritten is the number of bytes, conveniently returned by sprintf
    3ccc:	86 e1       	ldi	r24, 0x16	; 22
    3cce:	eb ec       	ldi	r30, 0xCB	; 203
    3cd0:	f1 e0       	ldi	r31, 0x01	; 1
    3cd2:	de 01       	movw	r26, r28
    3cd4:	11 96       	adiw	r26, 0x01	; 1
    3cd6:	01 90       	ld	r0, Z+
    3cd8:	0d 92       	st	X+, r0
    3cda:	8a 95       	dec	r24
    3cdc:	e1 f7       	brne	.-8      	; 0x3cd6 <__vector_17+0x42>
    3cde:	85 e1       	ldi	r24, 0x15	; 21
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	a7 96       	adiw	r28, 0x27	; 39
    3ce4:	9f af       	std	Y+63, r25	; 0x3f
    3ce6:	8e af       	std	Y+62, r24	; 0x3e
    3ce8:	a7 97       	sbiw	r28, 0x27	; 39
		
		f_write(&TempLogFile, LineBuffer, BytesWritten, &BytesWritten);
    3cea:	9e 01       	movw	r18, r28
    3cec:	2b 59       	subi	r18, 0x9B	; 155
    3cee:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf0:	45 e1       	ldi	r20, 0x15	; 21
    3cf2:	50 e0       	ldi	r21, 0x00	; 0
    3cf4:	be 01       	movw	r22, r28
    3cf6:	6f 5f       	subi	r22, 0xFF	; 255
    3cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cfa:	88 e1       	ldi	r24, 0x18	; 24
    3cfc:	94 e0       	ldi	r25, 0x04	; 4
    3cfe:	0e 94 a7 13 	call	0x274e	; 0x274e <f_write>
		f_sync(&TempLogFile);
    3d02:	88 e1       	ldi	r24, 0x18	; 24
    3d04:	94 e0       	ldi	r25, 0x04	; 4
    3d06:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <f_sync>
	}
}
    3d0a:	ca 59       	subi	r28, 0x9A	; 154
    3d0c:	df 4f       	sbci	r29, 0xFF	; 255
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	f8 94       	cli
    3d12:	de bf       	out	0x3e, r29	; 62
    3d14:	0f be       	out	0x3f, r0	; 63
    3d16:	cd bf       	out	0x3d, r28	; 61
    3d18:	df 91       	pop	r29
    3d1a:	cf 91       	pop	r28
    3d1c:	ff 91       	pop	r31
    3d1e:	ef 91       	pop	r30
    3d20:	bf 91       	pop	r27
    3d22:	af 91       	pop	r26
    3d24:	9f 91       	pop	r25
    3d26:	8f 91       	pop	r24
    3d28:	7f 91       	pop	r23
    3d2a:	6f 91       	pop	r22
    3d2c:	5f 91       	pop	r21
    3d2e:	4f 91       	pop	r20
    3d30:	3f 91       	pop	r19
    3d32:	2f 91       	pop	r18
    3d34:	0f 90       	pop	r0
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	0f 90       	pop	r0
    3d3a:	1f 90       	pop	r1
    3d3c:	18 95       	reti

00003d3e <OpenLogFile>:
	}
}

/** Opens the log file on the Dataflash's FAT formatted partition according to the current date */
void OpenLogFile(void)
{
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
    3d42:	cd b7       	in	r28, 0x3d	; 61
    3d44:	de b7       	in	r29, 0x3e	; 62
    3d46:	2c 97       	sbiw	r28, 0x0c	; 12
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	f8 94       	cli
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	cd bf       	out	0x3d, r28	; 61
	char LogFileName[12]; // max length of file name is 12 characters, I guess
	static uint16_t FileNumber=0; // defaults to 0
	FileNumber ++; //Increment the Filenumber
    3d52:	80 91 15 04 	lds	r24, 0x0415
    3d56:	90 91 16 04 	lds	r25, 0x0416
    3d5a:	01 96       	adiw	r24, 0x01	; 1
    3d5c:	90 93 16 04 	sts	0x0416, r25
    3d60:	80 93 15 04 	sts	0x0415, r24
	/* Get the current date for the filename as "DDMMYY.csv" */
	sprintf(LogFileName, "F%05d.csv", FileNumber);
    3d64:	9f 93       	push	r25
    3d66:	8f 93       	push	r24
    3d68:	81 ee       	ldi	r24, 0xE1	; 225
    3d6a:	91 e0       	ldi	r25, 0x01	; 1
    3d6c:	9f 93       	push	r25
    3d6e:	8f 93       	push	r24
    3d70:	ce 01       	movw	r24, r28
    3d72:	01 96       	adiw	r24, 0x01	; 1
    3d74:	9f 93       	push	r25
    3d76:	8f 93       	push	r24
    3d78:	0e 94 11 2c 	call	0x5822	; 0x5822 <sprintf>
	FRESULT diskstatus;


	
	diskstatus = f_mount(&DiskFATState,"",1);
    3d7c:	41 e0       	ldi	r20, 0x01	; 1
    3d7e:	6e e9       	ldi	r22, 0x9E	; 158
    3d80:	71 e0       	ldi	r23, 0x01	; 1
    3d82:	88 e3       	ldi	r24, 0x38	; 56
    3d84:	96 e0       	ldi	r25, 0x06	; 6
    3d86:	0e 94 2b 12 	call	0x2456	; 0x2456 <f_mount>
		/* Mount the storage device, open the file */
		if(diskstatus == FR_NO_FILESYSTEM){//if there is no file system,
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	0f 90       	pop	r0
    3d90:	0f 90       	pop	r0
    3d92:	0f 90       	pop	r0
    3d94:	0f 90       	pop	r0
    3d96:	8d 30       	cpi	r24, 0x0D	; 13
    3d98:	31 f4       	brne	.+12     	; 0x3da6 <OpenLogFile+0x68>
			diskstatus = f_mkfs("", 0,0); //make a new fat file system in default partition with automatically determined sector size.
    3d9a:	40 e0       	ldi	r20, 0x00	; 0
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	60 e0       	ldi	r22, 0x00	; 0
    3da0:	8e e9       	ldi	r24, 0x9E	; 158
    3da2:	91 e0       	ldi	r25, 0x01	; 1
    3da4:	23 d9       	rcall	.-3514   	; 0x2fec <f_mkfs>
		}
	if (diskstatus == FR_OK){
    3da6:	81 11       	cpse	r24, r1
    3da8:	17 c0       	rjmp	.+46     	; 0x3dd8 <OpenLogFile+0x9a>
		f_open(&TempLogFile, LogFileName, FA_OPEN_ALWAYS | FA_WRITE);
    3daa:	42 e1       	ldi	r20, 0x12	; 18
    3dac:	be 01       	movw	r22, r28
    3dae:	6f 5f       	subi	r22, 0xFF	; 255
    3db0:	7f 4f       	sbci	r23, 0xFF	; 255
    3db2:	88 e1       	ldi	r24, 0x18	; 24
    3db4:	94 e0       	ldi	r25, 0x04	; 4
    3db6:	0e 94 7e 12 	call	0x24fc	; 0x24fc <f_open>
		f_lseek(&TempLogFile, TempLogFile.fsize);
    3dba:	40 91 22 04 	lds	r20, 0x0422
    3dbe:	50 91 23 04 	lds	r21, 0x0423
    3dc2:	60 91 24 04 	lds	r22, 0x0424
    3dc6:	70 91 25 04 	lds	r23, 0x0425
    3dca:	88 e1       	ldi	r24, 0x18	; 24
    3dcc:	94 e0       	ldi	r25, 0x04	; 4
    3dce:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <f_lseek>
		FileIsOpen = true;
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	80 93 17 04 	sts	0x0417, r24

	}
}
    3dd8:	2c 96       	adiw	r28, 0x0c	; 12
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	de bf       	out	0x3e, r29	; 62
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	cd bf       	out	0x3d, r28	; 61
    3de4:	df 91       	pop	r29
    3de6:	cf 91       	pop	r28
    3de8:	08 95       	ret

00003dea <CloseLogFile>:

/** Closes the open data log file on the Dataflash's FAT formatted partition */
void CloseLogFile(void)
{
	/* Sync any data waiting to be written, unmount the storage device */
	f_sync(&TempLogFile);
    3dea:	88 e1       	ldi	r24, 0x18	; 24
    3dec:	94 e0       	ldi	r25, 0x04	; 4
    3dee:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <f_sync>
	f_close(&TempLogFile);
    3df2:	88 e1       	ldi	r24, 0x18	; 24
    3df4:	94 e0       	ldi	r25, 0x04	; 4
    3df6:	0e 94 f5 15 	call	0x2bea	; 0x2bea <f_close>
	FileIsOpen = false;
    3dfa:	10 92 17 04 	sts	0x0417, r1
    3dfe:	08 95       	ret

00003e00 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    3e00:	84 b7       	in	r24, 0x34	; 52
    3e02:	87 7f       	andi	r24, 0xF7	; 247
    3e04:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    3e06:	88 e1       	ldi	r24, 0x18	; 24
    3e08:	0f b6       	in	r0, 0x3f	; 63
    3e0a:	f8 94       	cli
    3e0c:	80 93 60 00 	sts	0x0060, r24
    3e10:	10 92 60 00 	sts	0x0060, r1
    3e14:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	80 e8       	ldi	r24, 0x80	; 128
    3e1a:	0f b6       	in	r0, 0x3f	; 63
    3e1c:	f8 94       	cli
    3e1e:	80 93 61 00 	sts	0x0061, r24
    3e22:	90 93 61 00 	sts	0x0061, r25
    3e26:	0f be       	out	0x3f, r0	; 63
	/* Disable clock division */
	clock_prescale_set(clock_div_1);
#endif

	/* Hardware Initialization */
	Config_IO();
    3e28:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Config_IO>
	SDCardManager_Init();
    3e2c:	0c de       	rcall	.-1000   	; 0x3a46 <SDCardManager_Init>
	USB_Init();
    3e2e:	0e 94 fb 28 	call	0x51f6	; 0x51f6 <USB_Init>

	/* Check if the Dataflash/SD is working, abort if not */ // this function does not currently do anything -- just returns true
	if (!(SDCardManager_CheckDataflashOperation()))
    3e32:	2e df       	rcall	.-420    	; 0x3c90 <SDCardManager_CheckDataflashOperation>
    3e34:	81 11       	cpse	r24, r1
    3e36:	01 c0       	rjmp	.+2      	; 0x3e3a <SetupHardware+0x3a>
    3e38:	ff cf       	rjmp	.-2      	; 0x3e38 <SetupHardware+0x38>
    3e3a:	08 95       	ret

00003e3c <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
    3e3c:	e1 df       	rcall	.-62     	; 0x3e00 <SetupHardware>

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
    3e3e:	7f df       	rcall	.-258    	; 0x3d3e <OpenLogFile>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3e40:	78 94       	sei
	
	GlobalInterruptEnable();

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
    3e42:	81 e1       	ldi	r24, 0x11	; 17
    3e44:	91 e0       	ldi	r25, 0x01	; 1
    3e46:	56 d4       	rcall	.+2220   	; 0x46f4 <MS_Device_USBTask>
		HID_Device_USBTask(&Generic_HID_Interface);
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	91 e0       	ldi	r25, 0x01	; 1
    3e4c:	3e d3       	rcall	.+1660   	; 0x44ca <HID_Device_USBTask>
		USB_USBTask();
    3e4e:	0e 94 80 2b 	call	0x5700	; 0x5700 <USB_USBTask>
		if(FileIsOpen && USB_DeviceState == DEVICE_STATE_Configured){
    3e52:	80 91 17 04 	lds	r24, 0x0417
    3e56:	88 23       	and	r24, r24
    3e58:	29 f0       	breq	.+10     	; 0x3e64 <main+0x28>
    3e5a:	8e b3       	in	r24, 0x1e	; 30
    3e5c:	84 30       	cpi	r24, 0x04	; 4
    3e5e:	89 f7       	brne	.-30     	; 0x3e42 <main+0x6>
			CloseLogFile();
    3e60:	c4 df       	rcall	.-120    	; 0x3dea <CloseLogFile>
    3e62:	ef cf       	rjmp	.-34     	; 0x3e42 <main+0x6>
		}
		else if(!FileIsOpen){
			OpenLogFile();
    3e64:	6c df       	rcall	.-296    	; 0x3d3e <OpenLogFile>
    3e66:	ed cf       	rjmp	.-38     	; 0x3e42 <main+0x6>

00003e68 <get_num_of_sectors>:
	/* Clear Dataflash sector protections, if enabled */
//	SDCardManager_ResetDataflashProtections(); //THIS FUNCTION NO LONGER EXISTS
}

uint32_t get_num_of_sectors(){
	return 	DiskFATState.fsize;
    3e68:	60 91 4e 06 	lds	r22, 0x064E
    3e6c:	70 91 4f 06 	lds	r23, 0x064F
    3e70:	80 91 50 06 	lds	r24, 0x0650
    3e74:	90 91 51 06 	lds	r25, 0x0651
}
    3e78:	08 95       	ret

00003e7a <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    3e7a:	08 95       	ret

00003e7c <EVENT_USB_Device_Disconnect>:

}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    3e7c:	08 95       	ret

00003e7e <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	91 e0       	ldi	r25, 0x01	; 1
    3e82:	0f d3       	rcall	.+1566   	; 0x44a2 <HID_Device_ConfigureEndpoints>
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
    3e84:	81 e1       	ldi	r24, 0x11	; 17
    3e86:	91 e0       	ldi	r25, 0x01	; 1
    3e88:	1b c4       	rjmp	.+2102   	; 0x46c0 <MS_Device_ConfigureEndpoints>
    3e8a:	08 95       	ret

00003e8c <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
    3e8c:	81 e1       	ldi	r24, 0x11	; 17
    3e8e:	91 e0       	ldi	r25, 0x01	; 1
    3e90:	db d3       	rcall	.+1974   	; 0x4648 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	91 e0       	ldi	r25, 0x01	; 1
    3e96:	bb c1       	rjmp	.+886    	; 0x420e <HID_Device_ProcessControlRequest>
    3e98:	08 95       	ret

00003e9a <CALLBACK_MS_Device_SCSICommandReceived>:
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;
	
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
    3e9a:	6e c0       	rjmp	.+220    	; 0x3f78 <SCSI_DecodeSCSICommand>

	return CommandSuccess;
}
    3e9c:	08 95       	ret

00003e9e <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
    3e9e:	0f 93       	push	r16
    3ea0:	1f 93       	push	r17
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;

//	RTC_GetTimeDate(&ReportParams->TimeDate);

	ReportParams->LogInterval500MS = LoggingInterval500MS_SRAM;
    3ea2:	80 91 66 08 	lds	r24, 0x0866
    3ea6:	f9 01       	movw	r30, r18
    3ea8:	81 83       	std	Z+1, r24	; 0x01

	*ReportSize = sizeof(Device_Report_t);
    3eaa:	82 e0       	ldi	r24, 0x02	; 2
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	f8 01       	movw	r30, r16
    3eb0:	91 83       	std	Z+1, r25	; 0x01
    3eb2:	80 83       	st	Z, r24
	return true;
}
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	1f 91       	pop	r17
    3eb8:	0f 91       	pop	r16
    3eba:	08 95       	ret

00003ebc <CALLBACK_HID_Device_ProcessHIDReport>:
{
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;


	/* If the logging interval has changed from its current value, write it to EEPROM */
	if (LoggingInterval500MS_SRAM != ReportParams->LogInterval500MS)
    3ebc:	f9 01       	movw	r30, r18
    3ebe:	61 81       	ldd	r22, Z+1	; 0x01
    3ec0:	80 91 66 08 	lds	r24, 0x0866
    3ec4:	68 17       	cp	r22, r24
    3ec6:	31 f0       	breq	.+12     	; 0x3ed4 <CALLBACK_HID_Device_ProcessHIDReport+0x18>
	{
		LoggingInterval500MS_SRAM = ReportParams->LogInterval500MS;
    3ec8:	60 93 66 08 	sts	0x0866, r22
		eeprom_update_byte(&LoggingInterval500MS_EEPROM, LoggingInterval500MS_SRAM);
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__eeupd_byte_m32u4>
    3ed4:	08 95       	ret

00003ed6 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    3ed6:	bf 92       	push	r11
    3ed8:	cf 92       	push	r12
    3eda:	df 92       	push	r13
    3edc:	ef 92       	push	r14
    3ede:	ff 92       	push	r15
    3ee0:	0f 93       	push	r16
    3ee2:	1f 93       	push	r17
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	ec 01       	movw	r28, r24
    3eea:	b6 2e       	mov	r11, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    3eec:	c8 a0       	ldd	r12, Y+32	; 0x20
    3eee:	df 8c       	ldd	r13, Y+31	; 0x1f
    3ef0:	ee 8c       	ldd	r14, Y+30	; 0x1e
    3ef2:	fd 8c       	ldd	r15, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    3ef4:	0b a1       	ldd	r16, Y+35	; 0x23
    3ef6:	1a a1       	ldd	r17, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= get_num_of_sectors())
    3ef8:	b7 df       	rcall	.-146    	; 0x3e68 <get_num_of_sectors>
    3efa:	c6 16       	cp	r12, r22
    3efc:	d7 06       	cpc	r13, r23
    3efe:	e8 06       	cpc	r14, r24
    3f00:	f9 06       	cpc	r15, r25
    3f02:	68 f0       	brcs	.+26     	; 0x3f1e <SCSI_Command_ReadWrite_10+0x48>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    3f04:	ec e4       	ldi	r30, 0x4C	; 76
    3f06:	f1 e0       	ldi	r31, 0x01	; 1
    3f08:	80 81       	ld	r24, Z
    3f0a:	80 7f       	andi	r24, 0xF0	; 240
    3f0c:	85 60       	ori	r24, 0x05	; 5
    3f0e:	80 83       	st	Z, r24
    3f10:	81 e2       	ldi	r24, 0x21	; 33
    3f12:	80 93 56 01 	sts	0x0156, r24
    3f16:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	23 c0       	rjmp	.+70     	; 0x3f64 <SCSI_Command_ReadWrite_10+0x8e>
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    3f1e:	bb 20       	and	r11, r11
    3f20:	39 f0       	breq	.+14     	; 0x3f30 <SCSI_Command_ReadWrite_10+0x5a>
	  //SDCardManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
	  SDCardManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    3f22:	20 2f       	mov	r18, r16
    3f24:	31 2f       	mov	r19, r17
    3f26:	b7 01       	movw	r22, r14
    3f28:	a6 01       	movw	r20, r12
    3f2a:	ce 01       	movw	r24, r28
    3f2c:	7e de       	rcall	.-772    	; 0x3c2a <SDCardManager_ReadBlocks>
    3f2e:	06 c0       	rjmp	.+12     	; 0x3f3c <SCSI_Command_ReadWrite_10+0x66>
	else
	  SDCardManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    3f30:	20 2f       	mov	r18, r16
    3f32:	31 2f       	mov	r19, r17
    3f34:	b7 01       	movw	r22, r14
    3f36:	a6 01       	movw	r20, r12
    3f38:	ce 01       	movw	r24, r28
    3f3a:	d8 dd       	rcall	.-1104   	; 0x3aec <SDCardManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * get_num_of_sectors());
    3f3c:	cc 88       	ldd	r12, Y+20	; 0x14
    3f3e:	dd 88       	ldd	r13, Y+21	; 0x15
    3f40:	ee 88       	ldd	r14, Y+22	; 0x16
    3f42:	ff 88       	ldd	r15, Y+23	; 0x17
    3f44:	91 df       	rcall	.-222    	; 0x3e68 <get_num_of_sectors>
    3f46:	9b 01       	movw	r18, r22
    3f48:	ac 01       	movw	r20, r24
    3f4a:	a0 2f       	mov	r26, r16
    3f4c:	b1 2f       	mov	r27, r17
    3f4e:	0e 94 bc 2b 	call	0x5778	; 0x5778 <__muluhisi3>
    3f52:	c6 1a       	sub	r12, r22
    3f54:	d7 0a       	sbc	r13, r23
    3f56:	e8 0a       	sbc	r14, r24
    3f58:	f9 0a       	sbc	r15, r25
    3f5a:	cc 8a       	std	Y+20, r12	; 0x14
    3f5c:	dd 8a       	std	Y+21, r13	; 0x15
    3f5e:	ee 8a       	std	Y+22, r14	; 0x16
    3f60:	ff 8a       	std	Y+23, r15	; 0x17

	return true;
    3f62:	81 e0       	ldi	r24, 0x01	; 1
}
    3f64:	df 91       	pop	r29
    3f66:	cf 91       	pop	r28
    3f68:	1f 91       	pop	r17
    3f6a:	0f 91       	pop	r16
    3f6c:	ff 90       	pop	r15
    3f6e:	ef 90       	pop	r14
    3f70:	df 90       	pop	r13
    3f72:	cf 90       	pop	r12
    3f74:	bf 90       	pop	r11
    3f76:	08 95       	ret

00003f78 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    3f78:	cf 92       	push	r12
    3f7a:	df 92       	push	r13
    3f7c:	ef 92       	push	r14
    3f7e:	ff 92       	push	r15
    3f80:	0f 93       	push	r16
    3f82:	1f 93       	push	r17
    3f84:	cf 93       	push	r28
    3f86:	df 93       	push	r29
    3f88:	cd b7       	in	r28, 0x3d	; 61
    3f8a:	de b7       	in	r29, 0x3e	; 62
    3f8c:	28 97       	sbiw	r28, 0x08	; 8
    3f8e:	0f b6       	in	r0, 0x3f	; 63
    3f90:	f8 94       	cli
    3f92:	de bf       	out	0x3e, r29	; 62
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	cd bf       	out	0x3d, r28	; 61
    3f98:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	83 8d       	ldd	r24, Z+27	; 0x1b
    3f9e:	8d 31       	cpi	r24, 0x1D	; 29
    3fa0:	09 f4       	brne	.+2      	; 0x3fa4 <SCSI_DecodeSCSICommand+0x2c>
    3fa2:	bd c0       	rjmp	.+378    	; 0x411e <SCSI_DecodeSCSICommand+0x1a6>
    3fa4:	88 f4       	brcc	.+34     	; 0x3fc8 <SCSI_DecodeSCSICommand+0x50>
    3fa6:	82 31       	cpi	r24, 0x12	; 18
    3fa8:	09 f1       	breq	.+66     	; 0x3fec <SCSI_DecodeSCSICommand+0x74>
    3faa:	38 f4       	brcc	.+14     	; 0x3fba <SCSI_DecodeSCSICommand+0x42>
    3fac:	88 23       	and	r24, r24
    3fae:	09 f4       	brne	.+2      	; 0x3fb2 <SCSI_DecodeSCSICommand+0x3a>
    3fb0:	fe c0       	rjmp	.+508    	; 0x41ae <SCSI_DecodeSCSICommand+0x236>
    3fb2:	83 30       	cpi	r24, 0x03	; 3
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <SCSI_DecodeSCSICommand+0x40>
    3fb6:	5a c0       	rjmp	.+180    	; 0x406c <SCSI_DecodeSCSICommand+0xf4>
    3fb8:	00 c1       	rjmp	.+512    	; 0x41ba <SCSI_DecodeSCSICommand+0x242>
    3fba:	8a 31       	cpi	r24, 0x1A	; 26
    3fbc:	09 f4       	brne	.+2      	; 0x3fc0 <SCSI_DecodeSCSICommand+0x48>
    3fbe:	de c0       	rjmp	.+444    	; 0x417c <SCSI_DecodeSCSICommand+0x204>
    3fc0:	8b 31       	cpi	r24, 0x1B	; 27
    3fc2:	09 f4       	brne	.+2      	; 0x3fc6 <SCSI_DecodeSCSICommand+0x4e>
    3fc4:	f4 c0       	rjmp	.+488    	; 0x41ae <SCSI_DecodeSCSICommand+0x236>
    3fc6:	f9 c0       	rjmp	.+498    	; 0x41ba <SCSI_DecodeSCSICommand+0x242>
    3fc8:	88 32       	cpi	r24, 0x28	; 40
    3fca:	09 f4       	brne	.+2      	; 0x3fce <SCSI_DecodeSCSICommand+0x56>
    3fcc:	d3 c0       	rjmp	.+422    	; 0x4174 <SCSI_DecodeSCSICommand+0x1fc>
    3fce:	38 f4       	brcc	.+14     	; 0x3fde <SCSI_DecodeSCSICommand+0x66>
    3fd0:	8e 31       	cpi	r24, 0x1E	; 30
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <SCSI_DecodeSCSICommand+0x5e>
    3fd4:	ec c0       	rjmp	.+472    	; 0x41ae <SCSI_DecodeSCSICommand+0x236>
    3fd6:	85 32       	cpi	r24, 0x25	; 37
    3fd8:	09 f4       	brne	.+2      	; 0x3fdc <SCSI_DecodeSCSICommand+0x64>
    3fda:	74 c0       	rjmp	.+232    	; 0x40c4 <SCSI_DecodeSCSICommand+0x14c>
    3fdc:	ee c0       	rjmp	.+476    	; 0x41ba <SCSI_DecodeSCSICommand+0x242>
    3fde:	8a 32       	cpi	r24, 0x2A	; 42
    3fe0:	09 f4       	brne	.+2      	; 0x3fe4 <SCSI_DecodeSCSICommand+0x6c>
    3fe2:	c4 c0       	rjmp	.+392    	; 0x416c <SCSI_DecodeSCSICommand+0x1f4>
    3fe4:	8f 32       	cpi	r24, 0x2F	; 47
    3fe6:	09 f4       	brne	.+2      	; 0x3fea <SCSI_DecodeSCSICommand+0x72>
    3fe8:	e2 c0       	rjmp	.+452    	; 0x41ae <SCSI_DecodeSCSICommand+0x236>
    3fea:	e7 c0       	rjmp	.+462    	; 0x41ba <SCSI_DecodeSCSICommand+0x242>
    3fec:	f8 01       	movw	r30, r16
    3fee:	c7 8c       	ldd	r12, Z+31	; 0x1f
    3ff0:	d6 8c       	ldd	r13, Z+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    3ff2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ff4:	83 70       	andi	r24, 0x03	; 3
    3ff6:	19 f4       	brne	.+6      	; 0x3ffe <SCSI_DecodeSCSICommand+0x86>
    3ff8:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ffa:	88 23       	and	r24, r24
    3ffc:	69 f0       	breq	.+26     	; 0x4018 <SCSI_DecodeSCSICommand+0xa0>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    3ffe:	ec e4       	ldi	r30, 0x4C	; 76
    4000:	f1 e0       	ldi	r31, 0x01	; 1
    4002:	80 81       	ld	r24, Z
    4004:	80 7f       	andi	r24, 0xF0	; 240
    4006:	85 60       	ori	r24, 0x05	; 5
    4008:	80 83       	st	Z, r24
    400a:	84 e2       	ldi	r24, 0x24	; 36
    400c:	80 93 56 01 	sts	0x0156, r24
    4010:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    4014:	80 e0       	ldi	r24, 0x00	; 0
    4016:	de c0       	rjmp	.+444    	; 0x41d4 <SCSI_DecodeSCSICommand+0x25c>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    4018:	76 01       	movw	r14, r12
    401a:	f5 e2       	ldi	r31, 0x25	; 37
    401c:	cf 16       	cp	r12, r31
    401e:	d1 04       	cpc	r13, r1
    4020:	28 f0       	brcs	.+10     	; 0x402c <SCSI_DecodeSCSICommand+0xb4>
    4022:	0f 2e       	mov	r0, r31
    4024:	f4 e2       	ldi	r31, 0x24	; 36
    4026:	ef 2e       	mov	r14, r31
    4028:	f1 2c       	mov	r15, r1
    402a:	f0 2d       	mov	r31, r0
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    402c:	40 e0       	ldi	r20, 0x00	; 0
    402e:	50 e0       	ldi	r21, 0x00	; 0
    4030:	b7 01       	movw	r22, r14
    4032:	8b ee       	ldi	r24, 0xEB	; 235
    4034:	91 e0       	ldi	r25, 0x01	; 1
    4036:	e1 d4       	rcall	.+2498   	; 0x49fa <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	70 e0       	ldi	r23, 0x00	; 0
    403c:	c6 01       	movw	r24, r12
    403e:	8e 19       	sub	r24, r14
    4040:	9f 09       	sbc	r25, r15
    4042:	8b d4       	rcall	.+2326   	; 0x495a <Endpoint_Null_Stream>
    4044:	e8 ee       	ldi	r30, 0xE8	; 232
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	80 81       	ld	r24, Z
    404a:	8e 77       	andi	r24, 0x7E	; 126
    404c:	80 83       	st	Z, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    404e:	f8 01       	movw	r30, r16
    4050:	84 89       	ldd	r24, Z+20	; 0x14
    4052:	95 89       	ldd	r25, Z+21	; 0x15
    4054:	a6 89       	ldd	r26, Z+22	; 0x16
    4056:	b7 89       	ldd	r27, Z+23	; 0x17
    4058:	8e 19       	sub	r24, r14
    405a:	9f 09       	sbc	r25, r15
    405c:	a1 09       	sbc	r26, r1
    405e:	b1 09       	sbc	r27, r1
    4060:	84 8b       	std	Z+20, r24	; 0x14
    4062:	95 8b       	std	Z+21, r25	; 0x15
    4064:	a6 8b       	std	Z+22, r26	; 0x16
    4066:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
    4068:	81 e0       	ldi	r24, 0x01	; 1
	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
	{
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
			break;
    406a:	b4 c0       	rjmp	.+360    	; 0x41d4 <SCSI_DecodeSCSICommand+0x25c>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    406c:	f8 01       	movw	r30, r16
    406e:	d7 8c       	ldd	r13, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    4070:	cd 2c       	mov	r12, r13
    4072:	f2 e1       	ldi	r31, 0x12	; 18
    4074:	fd 15       	cp	r31, r13
    4076:	20 f4       	brcc	.+8      	; 0x4080 <SCSI_DecodeSCSICommand+0x108>
    4078:	0f 2e       	mov	r0, r31
    407a:	f2 e1       	ldi	r31, 0x12	; 18
    407c:	cf 2e       	mov	r12, r31
    407e:	f0 2d       	mov	r31, r0

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    4080:	ec 2c       	mov	r14, r12
    4082:	f1 2c       	mov	r15, r1
    4084:	40 e0       	ldi	r20, 0x00	; 0
    4086:	50 e0       	ldi	r21, 0x00	; 0
    4088:	b7 01       	movw	r22, r14
    408a:	8a e4       	ldi	r24, 0x4A	; 74
    408c:	91 e0       	ldi	r25, 0x01	; 1
    408e:	b5 d4       	rcall	.+2410   	; 0x49fa <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    4090:	8d 2d       	mov	r24, r13
    4092:	90 e0       	ldi	r25, 0x00	; 0
    4094:	60 e0       	ldi	r22, 0x00	; 0
    4096:	70 e0       	ldi	r23, 0x00	; 0
    4098:	8e 19       	sub	r24, r14
    409a:	9f 09       	sbc	r25, r15
    409c:	5e d4       	rcall	.+2236   	; 0x495a <Endpoint_Null_Stream>
    409e:	e8 ee       	ldi	r30, 0xE8	; 232
    40a0:	f0 e0       	ldi	r31, 0x00	; 0
    40a2:	80 81       	ld	r24, Z
    40a4:	8e 77       	andi	r24, 0x7E	; 126
    40a6:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    40a8:	f8 01       	movw	r30, r16
    40aa:	84 89       	ldd	r24, Z+20	; 0x14
    40ac:	95 89       	ldd	r25, Z+21	; 0x15
    40ae:	a6 89       	ldd	r26, Z+22	; 0x16
    40b0:	b7 89       	ldd	r27, Z+23	; 0x17
    40b2:	8c 19       	sub	r24, r12
    40b4:	91 09       	sbc	r25, r1
    40b6:	a1 09       	sbc	r26, r1
    40b8:	b1 09       	sbc	r27, r1
    40ba:	84 8b       	std	Z+20, r24	; 0x14
    40bc:	95 8b       	std	Z+21, r25	; 0x15
    40be:	a6 8b       	std	Z+22, r26	; 0x16
    40c0:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
			break;
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
			break;
    40c2:	8a c0       	rjmp	.+276    	; 0x41d8 <SCSI_DecodeSCSICommand+0x260>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN;
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	92 e0       	ldi	r25, 0x02	; 2
    40c8:	a0 e0       	ldi	r26, 0x00	; 0
    40ca:	b0 e0       	ldi	r27, 0x00	; 0
    40cc:	89 83       	std	Y+1, r24	; 0x01
    40ce:	9a 83       	std	Y+2, r25	; 0x02
    40d0:	ab 83       	std	Y+3, r26	; 0x03
    40d2:	bc 83       	std	Y+4, r27	; 0x04

	LastBlockAddressInLUN = get_num_of_sectors();
    40d4:	c9 de       	rcall	.-622    	; 0x3e68 <get_num_of_sectors>
    40d6:	6d 83       	std	Y+5, r22	; 0x05
    40d8:	7e 83       	std	Y+6, r23	; 0x06
    40da:	8f 83       	std	Y+7, r24	; 0x07
    40dc:	98 87       	std	Y+8, r25	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
    40de:	40 e0       	ldi	r20, 0x00	; 0
    40e0:	50 e0       	ldi	r21, 0x00	; 0
    40e2:	64 e0       	ldi	r22, 0x04	; 4
    40e4:	70 e0       	ldi	r23, 0x00	; 0
    40e6:	ce 01       	movw	r24, r28
    40e8:	05 96       	adiw	r24, 0x05	; 5
    40ea:	e3 d4       	rcall	.+2502   	; 0x4ab2 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    40ec:	40 e0       	ldi	r20, 0x00	; 0
    40ee:	50 e0       	ldi	r21, 0x00	; 0
    40f0:	64 e0       	ldi	r22, 0x04	; 4
    40f2:	70 e0       	ldi	r23, 0x00	; 0
    40f4:	ce 01       	movw	r24, r28
    40f6:	01 96       	adiw	r24, 0x01	; 1
    40f8:	dc d4       	rcall	.+2488   	; 0x4ab2 <Endpoint_Write_Stream_BE>
    40fa:	e8 ee       	ldi	r30, 0xE8	; 232
    40fc:	f0 e0       	ldi	r31, 0x00	; 0
    40fe:	80 81       	ld	r24, Z
    4100:	8e 77       	andi	r24, 0x7E	; 126
    4102:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    4104:	f8 01       	movw	r30, r16
    4106:	84 89       	ldd	r24, Z+20	; 0x14
    4108:	95 89       	ldd	r25, Z+21	; 0x15
    410a:	a6 89       	ldd	r26, Z+22	; 0x16
    410c:	b7 89       	ldd	r27, Z+23	; 0x17
    410e:	08 97       	sbiw	r24, 0x08	; 8
    4110:	a1 09       	sbc	r26, r1
    4112:	b1 09       	sbc	r27, r1
    4114:	84 8b       	std	Z+20, r24	; 0x14
    4116:	95 8b       	std	Z+21, r25	; 0x15
    4118:	a6 8b       	std	Z+22, r26	; 0x16
    411a:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
			break;
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
			break;
    411c:	5d c0       	rjmp	.+186    	; 0x41d8 <SCSI_DecodeSCSICommand+0x260>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    411e:	f8 01       	movw	r30, r16
    4120:	84 8d       	ldd	r24, Z+28	; 0x1c
    4122:	82 fd       	sbrc	r24, 2
    4124:	0d c0       	rjmp	.+26     	; 0x4140 <SCSI_DecodeSCSICommand+0x1c8>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    4126:	ec e4       	ldi	r30, 0x4C	; 76
    4128:	f1 e0       	ldi	r31, 0x01	; 1
    412a:	80 81       	ld	r24, Z
    412c:	80 7f       	andi	r24, 0xF0	; 240
    412e:	85 60       	ori	r24, 0x05	; 5
    4130:	80 83       	st	Z, r24
    4132:	84 e2       	ldi	r24, 0x24	; 36
    4134:	80 93 56 01 	sts	0x0156, r24
    4138:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	4a c0       	rjmp	.+148    	; 0x41d4 <SCSI_DecodeSCSICommand+0x25c>
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(SDCardManager_CheckDataflashOperation()))
    4140:	a7 dd       	rcall	.-1202   	; 0x3c90 <SDCardManager_CheckDataflashOperation>
    4142:	81 11       	cpse	r24, r1
    4144:	0c c0       	rjmp	.+24     	; 0x415e <SCSI_DecodeSCSICommand+0x1e6>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    4146:	ec e4       	ldi	r30, 0x4C	; 76
    4148:	f1 e0       	ldi	r31, 0x01	; 1
    414a:	80 81       	ld	r24, Z
    414c:	80 7f       	andi	r24, 0xF0	; 240
    414e:	84 60       	ori	r24, 0x04	; 4
    4150:	80 83       	st	Z, r24
    4152:	10 92 56 01 	sts	0x0156, r1
    4156:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    415a:	80 e0       	ldi	r24, 0x00	; 0
    415c:	3b c0       	rjmp	.+118    	; 0x41d4 <SCSI_DecodeSCSICommand+0x25c>
	}

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    415e:	f8 01       	movw	r30, r16
    4160:	14 8a       	std	Z+20, r1	; 0x14
    4162:	15 8a       	std	Z+21, r1	; 0x15
    4164:	16 8a       	std	Z+22, r1	; 0x16
    4166:	17 8a       	std	Z+23, r1	; 0x17

	return true;
    4168:	81 e0       	ldi	r24, 0x01	; 1
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
    416a:	34 c0       	rjmp	.+104    	; 0x41d4 <SCSI_DecodeSCSICommand+0x25c>
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    416c:	60 e0       	ldi	r22, 0x00	; 0
    416e:	c8 01       	movw	r24, r16
    4170:	b2 de       	rcall	.-668    	; 0x3ed6 <SCSI_Command_ReadWrite_10>
			break;
    4172:	30 c0       	rjmp	.+96     	; 0x41d4 <SCSI_DecodeSCSICommand+0x25c>
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    4174:	61 e0       	ldi	r22, 0x01	; 1
    4176:	c8 01       	movw	r24, r16
    4178:	ae de       	rcall	.-676    	; 0x3ed6 <SCSI_Command_ReadWrite_10>
			break;
    417a:	2c c0       	rjmp	.+88     	; 0x41d4 <SCSI_DecodeSCSICommand+0x25c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    417c:	e1 ef       	ldi	r30, 0xF1	; 241
    417e:	f0 e0       	ldi	r31, 0x00	; 0
    4180:	10 82       	st	Z, r1
    4182:	10 82       	st	Z, r1
    4184:	10 82       	st	Z, r1
    4186:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4188:	e8 ee       	ldi	r30, 0xE8	; 232
    418a:	f0 e0       	ldi	r31, 0x00	; 0
    418c:	80 81       	ld	r24, Z
    418e:	8e 77       	andi	r24, 0x7E	; 126
    4190:	80 83       	st	Z, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    4192:	f8 01       	movw	r30, r16
    4194:	44 89       	ldd	r20, Z+20	; 0x14
    4196:	55 89       	ldd	r21, Z+21	; 0x15
    4198:	66 89       	ldd	r22, Z+22	; 0x16
    419a:	77 89       	ldd	r23, Z+23	; 0x17
    419c:	44 50       	subi	r20, 0x04	; 4
    419e:	51 09       	sbc	r21, r1
    41a0:	61 09       	sbc	r22, r1
    41a2:	71 09       	sbc	r23, r1
    41a4:	44 8b       	std	Z+20, r20	; 0x14
    41a6:	55 8b       	std	Z+21, r21	; 0x15
    41a8:	66 8b       	std	Z+22, r22	; 0x16
    41aa:	77 8b       	std	Z+23, r23	; 0x17
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
    41ac:	15 c0       	rjmp	.+42     	; 0x41d8 <SCSI_DecodeSCSICommand+0x260>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    41ae:	f8 01       	movw	r30, r16
    41b0:	14 8a       	std	Z+20, r1	; 0x14
    41b2:	15 8a       	std	Z+21, r1	; 0x15
    41b4:	16 8a       	std	Z+22, r1	; 0x16
    41b6:	17 8a       	std	Z+23, r1	; 0x17
			break;
    41b8:	0f c0       	rjmp	.+30     	; 0x41d8 <SCSI_DecodeSCSICommand+0x260>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    41ba:	ec e4       	ldi	r30, 0x4C	; 76
    41bc:	f1 e0       	ldi	r31, 0x01	; 1
    41be:	80 81       	ld	r24, Z
    41c0:	80 7f       	andi	r24, 0xF0	; 240
    41c2:	85 60       	ori	r24, 0x05	; 5
    41c4:	80 83       	st	Z, r24
    41c6:	80 e2       	ldi	r24, 0x20	; 32
    41c8:	80 93 56 01 	sts	0x0156, r24
    41cc:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
	}

	return false;
    41d0:	80 e0       	ldi	r24, 0x00	; 0
    41d2:	0e c0       	rjmp	.+28     	; 0x41f0 <SCSI_DecodeSCSICommand+0x278>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    41d4:	88 23       	and	r24, r24
    41d6:	59 f0       	breq	.+22     	; 0x41ee <SCSI_DecodeSCSICommand+0x276>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    41d8:	ec e4       	ldi	r30, 0x4C	; 76
    41da:	f1 e0       	ldi	r31, 0x01	; 1
    41dc:	80 81       	ld	r24, Z
    41de:	80 7f       	andi	r24, 0xF0	; 240
    41e0:	80 83       	st	Z, r24
    41e2:	10 92 56 01 	sts	0x0156, r1
    41e6:	10 92 57 01 	sts	0x0157, r1
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	01 c0       	rjmp	.+2      	; 0x41f0 <SCSI_DecodeSCSICommand+0x278>
	}

	return false;
    41ee:	80 e0       	ldi	r24, 0x00	; 0
}
    41f0:	28 96       	adiw	r28, 0x08	; 8
    41f2:	0f b6       	in	r0, 0x3f	; 63
    41f4:	f8 94       	cli
    41f6:	de bf       	out	0x3e, r29	; 62
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	cd bf       	out	0x3d, r28	; 61
    41fc:	df 91       	pop	r29
    41fe:	cf 91       	pop	r28
    4200:	1f 91       	pop	r17
    4202:	0f 91       	pop	r16
    4204:	ff 90       	pop	r15
    4206:	ef 90       	pop	r14
    4208:	df 90       	pop	r13
    420a:	cf 90       	pop	r12
    420c:	08 95       	ret

0000420e <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    420e:	3f 92       	push	r3
    4210:	4f 92       	push	r4
    4212:	5f 92       	push	r5
    4214:	6f 92       	push	r6
    4216:	7f 92       	push	r7
    4218:	8f 92       	push	r8
    421a:	9f 92       	push	r9
    421c:	af 92       	push	r10
    421e:	bf 92       	push	r11
    4220:	cf 92       	push	r12
    4222:	df 92       	push	r13
    4224:	ef 92       	push	r14
    4226:	ff 92       	push	r15
    4228:	0f 93       	push	r16
    422a:	1f 93       	push	r17
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
    4230:	00 d0       	rcall	.+0      	; 0x4232 <HID_Device_ProcessControlRequest+0x24>
    4232:	1f 92       	push	r1
    4234:	cd b7       	in	r28, 0x3d	; 61
    4236:	de b7       	in	r29, 0x3e	; 62
    4238:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    423a:	ed b6       	in	r14, 0x3d	; 61
    423c:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    423e:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    4242:	83 ff       	sbrs	r24, 3
    4244:	14 c1       	rjmp	.+552    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    4246:	f6 01       	movw	r30, r12
    4248:	80 81       	ld	r24, Z
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	20 91 71 08 	lds	r18, 0x0871
    4250:	30 91 72 08 	lds	r19, 0x0872
    4254:	28 17       	cp	r18, r24
    4256:	39 07       	cpc	r19, r25
    4258:	09 f0       	breq	.+2      	; 0x425c <HID_Device_ProcessControlRequest+0x4e>
    425a:	09 c1       	rjmp	.+530    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
	  return;

	switch (USB_ControlRequest.bRequest)
    425c:	80 91 6e 08 	lds	r24, 0x086E
    4260:	83 30       	cpi	r24, 0x03	; 3
    4262:	09 f4       	brne	.+2      	; 0x4266 <HID_Device_ProcessControlRequest+0x58>
    4264:	a1 c0       	rjmp	.+322    	; 0x43a8 <HID_Device_ProcessControlRequest+0x19a>
    4266:	30 f4       	brcc	.+12     	; 0x4274 <HID_Device_ProcessControlRequest+0x66>
    4268:	81 30       	cpi	r24, 0x01	; 1
    426a:	71 f0       	breq	.+28     	; 0x4288 <HID_Device_ProcessControlRequest+0x7a>
    426c:	82 30       	cpi	r24, 0x02	; 2
    426e:	09 f4       	brne	.+2      	; 0x4272 <HID_Device_ProcessControlRequest+0x64>
    4270:	e3 c0       	rjmp	.+454    	; 0x4438 <HID_Device_ProcessControlRequest+0x22a>
    4272:	fd c0       	rjmp	.+506    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
    4274:	8a 30       	cpi	r24, 0x0A	; 10
    4276:	09 f4       	brne	.+2      	; 0x427a <HID_Device_ProcessControlRequest+0x6c>
    4278:	c3 c0       	rjmp	.+390    	; 0x4400 <HID_Device_ProcessControlRequest+0x1f2>
    427a:	8b 30       	cpi	r24, 0x0B	; 11
    427c:	09 f4       	brne	.+2      	; 0x4280 <HID_Device_ProcessControlRequest+0x72>
    427e:	ac c0       	rjmp	.+344    	; 0x43d8 <HID_Device_ProcessControlRequest+0x1ca>
    4280:	89 30       	cpi	r24, 0x09	; 9
    4282:	09 f0       	breq	.+2      	; 0x4286 <HID_Device_ProcessControlRequest+0x78>
    4284:	f4 c0       	rjmp	.+488    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
    4286:	52 c0       	rjmp	.+164    	; 0x432c <HID_Device_ProcessControlRequest+0x11e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4288:	80 91 6d 08 	lds	r24, 0x086D
    428c:	81 3a       	cpi	r24, 0xA1	; 161
    428e:	09 f0       	breq	.+2      	; 0x4292 <HID_Device_ProcessControlRequest+0x84>
    4290:	ee c0       	rjmp	.+476    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
    4292:	8d b6       	in	r8, 0x3d	; 61
    4294:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    4296:	1a 82       	std	Y+2, r1	; 0x02
    4298:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    429a:	ef e6       	ldi	r30, 0x6F	; 111
    429c:	f8 e0       	ldi	r31, 0x08	; 8
    429e:	80 81       	ld	r24, Z
    42a0:	11 81       	ldd	r17, Z+1	; 0x01
    42a2:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    42a4:	f6 01       	movw	r30, r12
    42a6:	40 85       	ldd	r20, Z+8	; 0x08
    42a8:	50 e0       	ldi	r21, 0x00	; 0
    42aa:	8d b7       	in	r24, 0x3d	; 61
    42ac:	9e b7       	in	r25, 0x3e	; 62
    42ae:	84 1b       	sub	r24, r20
    42b0:	95 0b       	sbc	r25, r21
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	9e bf       	out	0x3e, r25	; 62
    42b8:	0f be       	out	0x3f, r0	; 63
    42ba:	8d bf       	out	0x3d, r24	; 61
    42bc:	ed b7       	in	r30, 0x3d	; 61
    42be:	fe b7       	in	r31, 0x3e	; 62
    42c0:	31 96       	adiw	r30, 0x01	; 1
    42c2:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
    42c4:	60 e0       	ldi	r22, 0x00	; 0
    42c6:	70 e0       	ldi	r23, 0x00	; 0
    42c8:	cf 01       	movw	r24, r30
    42ca:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    42ce:	4f ef       	ldi	r20, 0xFF	; 255
    42d0:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    42d2:	8e 01       	movw	r16, r28
    42d4:	0f 5f       	subi	r16, 0xFF	; 255
    42d6:	1f 4f       	sbci	r17, 0xFF	; 255
    42d8:	95 01       	movw	r18, r10
    42da:	be 01       	movw	r22, r28
    42dc:	6d 5f       	subi	r22, 0xFD	; 253
    42de:	7f 4f       	sbci	r23, 0xFF	; 255
    42e0:	c6 01       	movw	r24, r12
    42e2:	dd dd       	rcall	.-1094   	; 0x3e9e <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    42e4:	f6 01       	movw	r30, r12
    42e6:	86 81       	ldd	r24, Z+6	; 0x06
    42e8:	97 81       	ldd	r25, Z+7	; 0x07
    42ea:	00 97       	sbiw	r24, 0x00	; 0
    42ec:	29 f0       	breq	.+10     	; 0x42f8 <HID_Device_ProcessControlRequest+0xea>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    42ee:	40 85       	ldd	r20, Z+8	; 0x08
    42f0:	50 e0       	ldi	r21, 0x00	; 0
    42f2:	b5 01       	movw	r22, r10
    42f4:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    42f8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    42fc:	e8 ee       	ldi	r30, 0xE8	; 232
    42fe:	f0 e0       	ldi	r31, 0x00	; 0
    4300:	80 81       	ld	r24, Z
    4302:	87 7f       	andi	r24, 0xF7	; 247
    4304:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    4306:	8b 81       	ldd	r24, Y+3	; 0x03
    4308:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    430a:	80 93 f1 00 	sts	0x00F1, r24
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    430e:	69 81       	ldd	r22, Y+1	; 0x01
    4310:	7a 81       	ldd	r23, Y+2	; 0x02
    4312:	c5 01       	movw	r24, r10
    4314:	8c d4       	rcall	.+2328   	; 0x4c2e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4316:	e8 ee       	ldi	r30, 0xE8	; 232
    4318:	f0 e0       	ldi	r31, 0x00	; 0
    431a:	80 81       	ld	r24, Z
    431c:	8b 77       	andi	r24, 0x7B	; 123
    431e:	80 83       	st	Z, r24
    4320:	0f b6       	in	r0, 0x3f	; 63
    4322:	f8 94       	cli
    4324:	9e be       	out	0x3e, r9	; 62
    4326:	0f be       	out	0x3f, r0	; 63
    4328:	8d be       	out	0x3d, r8	; 61
    432a:	a1 c0       	rjmp	.+322    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    432c:	80 91 6d 08 	lds	r24, 0x086D
    4330:	81 32       	cpi	r24, 0x21	; 33
    4332:	09 f0       	breq	.+2      	; 0x4336 <HID_Device_ProcessControlRequest+0x128>
    4334:	9c c0       	rjmp	.+312    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
    4336:	6d b6       	in	r6, 0x3d	; 61
    4338:	7e b6       	in	r7, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    433a:	a0 90 73 08 	lds	r10, 0x0873
    433e:	b0 90 74 08 	lds	r11, 0x0874
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    4342:	ef e6       	ldi	r30, 0x6F	; 111
    4344:	f8 e0       	ldi	r31, 0x08	; 8
    4346:	50 80       	ld	r5, Z
    4348:	41 80       	ldd	r4, Z+1	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    434a:	8d b7       	in	r24, 0x3d	; 61
    434c:	9e b7       	in	r25, 0x3e	; 62
    434e:	8a 19       	sub	r24, r10
    4350:	9b 09       	sbc	r25, r11
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	f8 94       	cli
    4356:	9e bf       	out	0x3e, r25	; 62
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	8d bf       	out	0x3d, r24	; 61
    435c:	ed b7       	in	r30, 0x3d	; 61
    435e:	fe b7       	in	r31, 0x3e	; 62
    4360:	31 96       	adiw	r30, 0x01	; 1
    4362:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4364:	08 ee       	ldi	r16, 0xE8	; 232
    4366:	10 e0       	ldi	r17, 0x00	; 0
    4368:	f8 01       	movw	r30, r16
    436a:	80 81       	ld	r24, Z
    436c:	87 7f       	andi	r24, 0xF7	; 247
    436e:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    4370:	b5 01       	movw	r22, r10
    4372:	c4 01       	movw	r24, r8
    4374:	df d4       	rcall	.+2494   	; 0x4d34 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4376:	f8 01       	movw	r30, r16
    4378:	80 81       	ld	r24, Z
    437a:	8e 77       	andi	r24, 0x7E	; 126
    437c:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    437e:	21 e0       	ldi	r18, 0x01	; 1
    4380:	51 10       	cpse	r5, r1
    4382:	01 c0       	rjmp	.+2      	; 0x4386 <HID_Device_ProcessControlRequest+0x178>
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	85 01       	movw	r16, r10
    438a:	02 1b       	sub	r16, r18
    438c:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    438e:	28 0d       	add	r18, r8
    4390:	39 1d       	adc	r19, r9
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    4392:	4f ef       	ldi	r20, 0xFF	; 255
    4394:	44 0d       	add	r20, r4

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    4396:	65 2d       	mov	r22, r5
    4398:	c6 01       	movw	r24, r12
    439a:	90 dd       	rcall	.-1248   	; 0x3ebc <CALLBACK_HID_Device_ProcessHIDReport>
    439c:	0f b6       	in	r0, 0x3f	; 63
    439e:	f8 94       	cli
    43a0:	7e be       	out	0x3e, r7	; 62
    43a2:	0f be       	out	0x3f, r0	; 63
    43a4:	6d be       	out	0x3d, r6	; 61
    43a6:	63 c0       	rjmp	.+198    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    43a8:	80 91 6d 08 	lds	r24, 0x086D
    43ac:	81 3a       	cpi	r24, 0xA1	; 161
    43ae:	09 f0       	breq	.+2      	; 0x43b2 <HID_Device_ProcessControlRequest+0x1a4>
    43b0:	5e c0       	rjmp	.+188    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    43b2:	e8 ee       	ldi	r30, 0xE8	; 232
    43b4:	f0 e0       	ldi	r31, 0x00	; 0
    43b6:	80 81       	ld	r24, Z
    43b8:	87 7f       	andi	r24, 0xF7	; 247
    43ba:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    43bc:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    43be:	80 ff       	sbrs	r24, 0
    43c0:	fd cf       	rjmp	.-6      	; 0x43bc <HID_Device_ProcessControlRequest+0x1ae>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    43c2:	f6 01       	movw	r30, r12
    43c4:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    43c6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    43ca:	e8 ee       	ldi	r30, 0xE8	; 232
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	80 81       	ld	r24, Z
    43d0:	8e 77       	andi	r24, 0x7E	; 126
    43d2:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    43d4:	6e d6       	rcall	.+3292   	; 0x50b2 <Endpoint_ClearStatusStage>
    43d6:	4b c0       	rjmp	.+150    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    43d8:	80 91 6d 08 	lds	r24, 0x086D
    43dc:	81 32       	cpi	r24, 0x21	; 33
    43de:	09 f0       	breq	.+2      	; 0x43e2 <HID_Device_ProcessControlRequest+0x1d4>
    43e0:	46 c0       	rjmp	.+140    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    43e2:	e8 ee       	ldi	r30, 0xE8	; 232
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	80 81       	ld	r24, Z
    43e8:	87 7f       	andi	r24, 0xF7	; 247
    43ea:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    43ec:	62 d6       	rcall	.+3268   	; 0x50b2 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    43ee:	90 91 6f 08 	lds	r25, 0x086F
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	91 11       	cpse	r25, r1
    43f6:	01 c0       	rjmp	.+2      	; 0x43fa <HID_Device_ProcessControlRequest+0x1ec>
    43f8:	80 e0       	ldi	r24, 0x00	; 0
    43fa:	f6 01       	movw	r30, r12
    43fc:	81 87       	std	Z+9, r24	; 0x09
    43fe:	37 c0       	rjmp	.+110    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4400:	80 91 6d 08 	lds	r24, 0x086D
    4404:	81 32       	cpi	r24, 0x21	; 33
    4406:	99 f5       	brne	.+102    	; 0x446e <HID_Device_ProcessControlRequest+0x260>
    4408:	e8 ee       	ldi	r30, 0xE8	; 232
    440a:	f0 e0       	ldi	r31, 0x00	; 0
    440c:	80 81       	ld	r24, Z
    440e:	87 7f       	andi	r24, 0xF7	; 247
    4410:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    4412:	4f d6       	rcall	.+3230   	; 0x50b2 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    4414:	80 91 6f 08 	lds	r24, 0x086F
    4418:	90 91 70 08 	lds	r25, 0x0870
    441c:	88 27       	eor	r24, r24
    441e:	00 24       	eor	r0, r0
    4420:	88 0f       	add	r24, r24
    4422:	99 1f       	adc	r25, r25
    4424:	00 1c       	adc	r0, r0
    4426:	88 0f       	add	r24, r24
    4428:	99 1f       	adc	r25, r25
    442a:	00 1c       	adc	r0, r0
    442c:	89 2f       	mov	r24, r25
    442e:	90 2d       	mov	r25, r0
    4430:	f6 01       	movw	r30, r12
    4432:	95 87       	std	Z+13, r25	; 0x0d
    4434:	84 87       	std	Z+12, r24	; 0x0c
    4436:	1b c0       	rjmp	.+54     	; 0x446e <HID_Device_ProcessControlRequest+0x260>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4438:	80 91 6d 08 	lds	r24, 0x086D
    443c:	81 3a       	cpi	r24, 0xA1	; 161
    443e:	b9 f4       	brne	.+46     	; 0x446e <HID_Device_ProcessControlRequest+0x260>
    4440:	e8 ee       	ldi	r30, 0xE8	; 232
    4442:	f0 e0       	ldi	r31, 0x00	; 0
    4444:	80 81       	ld	r24, Z
    4446:	87 7f       	andi	r24, 0xF7	; 247
    4448:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    444a:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    444c:	80 ff       	sbrs	r24, 0
    444e:	fd cf       	rjmp	.-6      	; 0x444a <HID_Device_ProcessControlRequest+0x23c>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    4450:	f6 01       	movw	r30, r12
    4452:	84 85       	ldd	r24, Z+12	; 0x0c
    4454:	95 85       	ldd	r25, Z+13	; 0x0d
    4456:	96 95       	lsr	r25
    4458:	87 95       	ror	r24
    445a:	96 95       	lsr	r25
    445c:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    445e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4462:	e8 ee       	ldi	r30, 0xE8	; 232
    4464:	f0 e0       	ldi	r31, 0x00	; 0
    4466:	80 81       	ld	r24, Z
    4468:	8e 77       	andi	r24, 0x7E	; 126
    446a:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    446c:	22 d6       	rcall	.+3140   	; 0x50b2 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    446e:	0f b6       	in	r0, 0x3f	; 63
    4470:	f8 94       	cli
    4472:	fe be       	out	0x3e, r15	; 62
    4474:	0f be       	out	0x3f, r0	; 63
    4476:	ed be       	out	0x3d, r14	; 61
    4478:	0f 90       	pop	r0
    447a:	0f 90       	pop	r0
    447c:	0f 90       	pop	r0
    447e:	df 91       	pop	r29
    4480:	cf 91       	pop	r28
    4482:	1f 91       	pop	r17
    4484:	0f 91       	pop	r16
    4486:	ff 90       	pop	r15
    4488:	ef 90       	pop	r14
    448a:	df 90       	pop	r13
    448c:	cf 90       	pop	r12
    448e:	bf 90       	pop	r11
    4490:	af 90       	pop	r10
    4492:	9f 90       	pop	r9
    4494:	8f 90       	pop	r8
    4496:	7f 90       	pop	r7
    4498:	6f 90       	pop	r6
    449a:	5f 90       	pop	r5
    449c:	4f 90       	pop	r4
    449e:	3f 90       	pop	r3
    44a0:	08 95       	ret

000044a2 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    44a2:	fc 01       	movw	r30, r24
    44a4:	39 96       	adiw	r30, 0x09	; 9
    44a6:	27 e0       	ldi	r18, 0x07	; 7
    44a8:	df 01       	movw	r26, r30
    44aa:	1d 92       	st	X+, r1
    44ac:	2a 95       	dec	r18
    44ae:	e9 f7       	brne	.-6      	; 0x44aa <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    44b0:	21 e0       	ldi	r18, 0x01	; 1
    44b2:	fc 01       	movw	r30, r24
    44b4:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    44b6:	24 ef       	ldi	r18, 0xF4	; 244
    44b8:	31 e0       	ldi	r19, 0x01	; 1
    44ba:	35 87       	std	Z+13, r19	; 0x0d
    44bc:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    44be:	23 e0       	ldi	r18, 0x03	; 3
    44c0:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    44c2:	61 e0       	ldi	r22, 0x01	; 1
    44c4:	01 96       	adiw	r24, 0x01	; 1
    44c6:	98 c5       	rjmp	.+2864   	; 0x4ff8 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    44c8:	08 95       	ret

000044ca <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    44ca:	5f 92       	push	r5
    44cc:	6f 92       	push	r6
    44ce:	7f 92       	push	r7
    44d0:	8f 92       	push	r8
    44d2:	9f 92       	push	r9
    44d4:	af 92       	push	r10
    44d6:	bf 92       	push	r11
    44d8:	cf 92       	push	r12
    44da:	df 92       	push	r13
    44dc:	ef 92       	push	r14
    44de:	ff 92       	push	r15
    44e0:	0f 93       	push	r16
    44e2:	1f 93       	push	r17
    44e4:	cf 93       	push	r28
    44e6:	df 93       	push	r29
    44e8:	00 d0       	rcall	.+0      	; 0x44ea <HID_Device_USBTask+0x20>
    44ea:	1f 92       	push	r1
    44ec:	cd b7       	in	r28, 0x3d	; 61
    44ee:	de b7       	in	r29, 0x3e	; 62
    44f0:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    44f2:	cd b6       	in	r12, 0x3d	; 61
    44f4:	de b6       	in	r13, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    44f6:	8e b3       	in	r24, 0x1e	; 30
    44f8:	84 30       	cpi	r24, 0x04	; 4
    44fa:	09 f0       	breq	.+2      	; 0x44fe <HID_Device_USBTask+0x34>
    44fc:	8d c0       	rjmp	.+282    	; 0x4618 <HID_Device_USBTask+0x14e>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    44fe:	80 91 e4 00 	lds	r24, 0x00E4
    4502:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    4506:	f7 01       	movw	r30, r14
    4508:	22 85       	ldd	r18, Z+10	; 0x0a
    450a:	33 85       	ldd	r19, Z+11	; 0x0b
    450c:	28 17       	cp	r18, r24
    450e:	39 07       	cpc	r19, r25
    4510:	09 f4       	brne	.+2      	; 0x4514 <HID_Device_USBTask+0x4a>
    4512:	82 c0       	rjmp	.+260    	; 0x4618 <HID_Device_USBTask+0x14e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4514:	81 81       	ldd	r24, Z+1	; 0x01
    4516:	8f 70       	andi	r24, 0x0F	; 15
    4518:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    451c:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    4520:	85 ff       	sbrs	r24, 5
    4522:	7a c0       	rjmp	.+244    	; 0x4618 <HID_Device_USBTask+0x14e>
    4524:	8d b6       	in	r8, 0x3d	; 61
    4526:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    4528:	40 85       	ldd	r20, Z+8	; 0x08
    452a:	50 e0       	ldi	r21, 0x00	; 0
    452c:	8d b7       	in	r24, 0x3d	; 61
    452e:	9e b7       	in	r25, 0x3e	; 62
    4530:	84 1b       	sub	r24, r20
    4532:	95 0b       	sbc	r25, r21
    4534:	0f b6       	in	r0, 0x3f	; 63
    4536:	f8 94       	cli
    4538:	9e bf       	out	0x3e, r25	; 62
    453a:	0f be       	out	0x3f, r0	; 63
    453c:	8d bf       	out	0x3d, r24	; 61
    453e:	ed b7       	in	r30, 0x3d	; 61
    4540:	fe b7       	in	r31, 0x3e	; 62
    4542:	31 96       	adiw	r30, 0x01	; 1
    4544:	5f 01       	movw	r10, r30
		uint8_t  ReportID     = 0;
    4546:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    4548:	1a 82       	std	Y+2, r1	; 0x02
    454a:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    454c:	60 e0       	ldi	r22, 0x00	; 0
    454e:	70 e0       	ldi	r23, 0x00	; 0
    4550:	cf 01       	movw	r24, r30
    4552:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    4556:	8e 01       	movw	r16, r28
    4558:	0f 5f       	subi	r16, 0xFF	; 255
    455a:	1f 4f       	sbci	r17, 0xFF	; 255
    455c:	95 01       	movw	r18, r10
    455e:	40 e0       	ldi	r20, 0x00	; 0
    4560:	be 01       	movw	r22, r28
    4562:	6d 5f       	subi	r22, 0xFD	; 253
    4564:	7f 4f       	sbci	r23, 0xFF	; 255
    4566:	c7 01       	movw	r24, r14
    4568:	9a dc       	rcall	.-1740   	; 0x3e9e <CALLBACK_HID_Device_CreateHIDReport>
    456a:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    456c:	f7 01       	movw	r30, r14
    456e:	24 85       	ldd	r18, Z+12	; 0x0c
    4570:	35 85       	ldd	r19, Z+13	; 0x0d
    4572:	23 2b       	or	r18, r19
    4574:	41 f0       	breq	.+16     	; 0x4586 <HID_Device_USBTask+0xbc>
    4576:	21 e0       	ldi	r18, 0x01	; 1
    4578:	86 85       	ldd	r24, Z+14	; 0x0e
    457a:	97 85       	ldd	r25, Z+15	; 0x0f
    457c:	89 2b       	or	r24, r25
    457e:	09 f0       	breq	.+2      	; 0x4582 <HID_Device_USBTask+0xb8>
    4580:	20 e0       	ldi	r18, 0x00	; 0
    4582:	52 2e       	mov	r5, r18
    4584:	01 c0       	rjmp	.+2      	; 0x4588 <HID_Device_USBTask+0xbe>
    4586:	51 2c       	mov	r5, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    4588:	f7 01       	movw	r30, r14
    458a:	06 81       	ldd	r16, Z+6	; 0x06
    458c:	17 81       	ldd	r17, Z+7	; 0x07
    458e:	01 15       	cp	r16, r1
    4590:	11 05       	cpc	r17, r1
    4592:	99 f0       	breq	.+38     	; 0x45ba <HID_Device_USBTask+0xf0>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    4594:	49 81       	ldd	r20, Y+1	; 0x01
    4596:	5a 81       	ldd	r21, Y+2	; 0x02
    4598:	b8 01       	movw	r22, r16
    459a:	c5 01       	movw	r24, r10
    459c:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <memcmp>
    45a0:	77 24       	eor	r7, r7
    45a2:	73 94       	inc	r7
    45a4:	89 2b       	or	r24, r25
    45a6:	09 f4       	brne	.+2      	; 0x45aa <HID_Device_USBTask+0xe0>
    45a8:	71 2c       	mov	r7, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    45aa:	f7 01       	movw	r30, r14
    45ac:	40 85       	ldd	r20, Z+8	; 0x08
    45ae:	50 e0       	ldi	r21, 0x00	; 0
    45b0:	b5 01       	movw	r22, r10
    45b2:	c8 01       	movw	r24, r16
    45b4:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <memcpy>
    45b8:	01 c0       	rjmp	.+2      	; 0x45bc <HID_Device_USBTask+0xf2>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    45ba:	71 2c       	mov	r7, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    45bc:	29 81       	ldd	r18, Y+1	; 0x01
    45be:	3a 81       	ldd	r19, Y+2	; 0x02
    45c0:	23 2b       	or	r18, r19
    45c2:	f1 f0       	breq	.+60     	; 0x4600 <HID_Device_USBTask+0x136>
    45c4:	61 10       	cpse	r6, r1
    45c6:	04 c0       	rjmp	.+8      	; 0x45d0 <HID_Device_USBTask+0x106>
    45c8:	71 10       	cpse	r7, r1
    45ca:	02 c0       	rjmp	.+4      	; 0x45d0 <HID_Device_USBTask+0x106>
    45cc:	50 fe       	sbrs	r5, 0
    45ce:	18 c0       	rjmp	.+48     	; 0x4600 <HID_Device_USBTask+0x136>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    45d0:	f7 01       	movw	r30, r14
    45d2:	84 85       	ldd	r24, Z+12	; 0x0c
    45d4:	95 85       	ldd	r25, Z+13	; 0x0d
    45d6:	97 87       	std	Z+15, r25	; 0x0f
    45d8:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    45da:	81 81       	ldd	r24, Z+1	; 0x01
    45dc:	8f 70       	andi	r24, 0x0F	; 15
    45de:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    45e2:	8b 81       	ldd	r24, Y+3	; 0x03
    45e4:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    45e6:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    45ea:	69 81       	ldd	r22, Y+1	; 0x01
    45ec:	7a 81       	ldd	r23, Y+2	; 0x02
    45ee:	40 e0       	ldi	r20, 0x00	; 0
    45f0:	50 e0       	ldi	r21, 0x00	; 0
    45f2:	c5 01       	movw	r24, r10
    45f4:	02 d2       	rcall	.+1028   	; 0x49fa <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    45f6:	e8 ee       	ldi	r30, 0xE8	; 232
    45f8:	f0 e0       	ldi	r31, 0x00	; 0
    45fa:	80 81       	ld	r24, Z
    45fc:	8e 77       	andi	r24, 0x7E	; 126
    45fe:	80 83       	st	Z, r24
    4600:	80 91 e4 00 	lds	r24, 0x00E4
    4604:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    4608:	f7 01       	movw	r30, r14
    460a:	93 87       	std	Z+11, r25	; 0x0b
    460c:	82 87       	std	Z+10, r24	; 0x0a
    460e:	0f b6       	in	r0, 0x3f	; 63
    4610:	f8 94       	cli
    4612:	9e be       	out	0x3e, r9	; 62
    4614:	0f be       	out	0x3f, r0	; 63
    4616:	8d be       	out	0x3d, r8	; 61
	}
}
    4618:	0f b6       	in	r0, 0x3f	; 63
    461a:	f8 94       	cli
    461c:	de be       	out	0x3e, r13	; 62
    461e:	0f be       	out	0x3f, r0	; 63
    4620:	cd be       	out	0x3d, r12	; 61
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	0f 90       	pop	r0
    4628:	df 91       	pop	r29
    462a:	cf 91       	pop	r28
    462c:	1f 91       	pop	r17
    462e:	0f 91       	pop	r16
    4630:	ff 90       	pop	r15
    4632:	ef 90       	pop	r14
    4634:	df 90       	pop	r13
    4636:	cf 90       	pop	r12
    4638:	bf 90       	pop	r11
    463a:	af 90       	pop	r10
    463c:	9f 90       	pop	r9
    463e:	8f 90       	pop	r8
    4640:	7f 90       	pop	r7
    4642:	6f 90       	pop	r6
    4644:	5f 90       	pop	r5
    4646:	08 95       	ret

00004648 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    4648:	cf 93       	push	r28
    464a:	df 93       	push	r29
    464c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    464e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    4652:	83 ff       	sbrs	r24, 3
    4654:	32 c0       	rjmp	.+100    	; 0x46ba <MS_Device_ProcessControlRequest+0x72>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    4656:	88 81       	ld	r24, Y
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	20 91 71 08 	lds	r18, 0x0871
    465e:	30 91 72 08 	lds	r19, 0x0872
    4662:	28 17       	cp	r18, r24
    4664:	39 07       	cpc	r19, r25
    4666:	49 f5       	brne	.+82     	; 0x46ba <MS_Device_ProcessControlRequest+0x72>
	  return;

	switch (USB_ControlRequest.bRequest)
    4668:	80 91 6e 08 	lds	r24, 0x086E
    466c:	8e 3f       	cpi	r24, 0xFE	; 254
    466e:	79 f0       	breq	.+30     	; 0x468e <MS_Device_ProcessControlRequest+0x46>
    4670:	8f 3f       	cpi	r24, 0xFF	; 255
    4672:	19 f5       	brne	.+70     	; 0x46ba <MS_Device_ProcessControlRequest+0x72>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4674:	80 91 6d 08 	lds	r24, 0x086D
    4678:	81 32       	cpi	r24, 0x21	; 33
    467a:	f9 f4       	brne	.+62     	; 0x46ba <MS_Device_ProcessControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    467c:	e8 ee       	ldi	r30, 0xE8	; 232
    467e:	f0 e0       	ldi	r31, 0x00	; 0
    4680:	80 81       	ld	r24, Z
    4682:	87 7f       	andi	r24, 0xF7	; 247
    4684:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    4686:	15 d5       	rcall	.+2602   	; 0x50b2 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	88 af       	std	Y+56, r24	; 0x38
    468c:	16 c0       	rjmp	.+44     	; 0x46ba <MS_Device_ProcessControlRequest+0x72>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    468e:	80 91 6d 08 	lds	r24, 0x086D
    4692:	81 3a       	cpi	r24, 0xA1	; 161
    4694:	91 f4       	brne	.+36     	; 0x46ba <MS_Device_ProcessControlRequest+0x72>
    4696:	e8 ee       	ldi	r30, 0xE8	; 232
    4698:	f0 e0       	ldi	r31, 0x00	; 0
    469a:	80 81       	ld	r24, Z
    469c:	87 7f       	andi	r24, 0xF7	; 247
    469e:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    46a0:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    46a2:	80 ff       	sbrs	r24, 0
    46a4:	fd cf       	rjmp	.-6      	; 0x46a0 <MS_Device_ProcessControlRequest+0x58>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    46a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    46a8:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    46aa:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    46ae:	e8 ee       	ldi	r30, 0xE8	; 232
    46b0:	f0 e0       	ldi	r31, 0x00	; 0
    46b2:	80 81       	ld	r24, Z
    46b4:	8e 77       	andi	r24, 0x7E	; 126
    46b6:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    46b8:	fc d4       	rcall	.+2552   	; 0x50b2 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    46ba:	df 91       	pop	r29
    46bc:	cf 91       	pop	r28
    46be:	08 95       	ret

000046c0 <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    46c0:	cf 93       	push	r28
    46c2:	df 93       	push	r29
    46c4:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    46c6:	fc 01       	movw	r30, r24
    46c8:	3c 96       	adiw	r30, 0x0c	; 12
    46ca:	8d e2       	ldi	r24, 0x2D	; 45
    46cc:	df 01       	movw	r26, r30
    46ce:	1d 92       	st	X+, r1
    46d0:	8a 95       	dec	r24
    46d2:	e9 f7       	brne	.-6      	; 0x46ce <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    46d4:	82 e0       	ldi	r24, 0x02	; 2
    46d6:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    46d8:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    46da:	61 e0       	ldi	r22, 0x01	; 1
    46dc:	ce 01       	movw	r24, r28
    46de:	01 96       	adiw	r24, 0x01	; 1
    46e0:	8b d4       	rcall	.+2326   	; 0x4ff8 <Endpoint_ConfigureEndpointTable>
    46e2:	88 23       	and	r24, r24
    46e4:	21 f0       	breq	.+8      	; 0x46ee <MS_Device_ConfigureEndpoints+0x2e>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    46e6:	61 e0       	ldi	r22, 0x01	; 1
    46e8:	ce 01       	movw	r24, r28
    46ea:	06 96       	adiw	r24, 0x06	; 6
    46ec:	85 d4       	rcall	.+2314   	; 0x4ff8 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    46ee:	df 91       	pop	r29
    46f0:	cf 91       	pop	r28
    46f2:	08 95       	ret

000046f4 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    46f4:	ef 92       	push	r14
    46f6:	ff 92       	push	r15
    46f8:	0f 93       	push	r16
    46fa:	1f 93       	push	r17
    46fc:	cf 93       	push	r28
    46fe:	df 93       	push	r29
    4700:	00 d0       	rcall	.+0      	; 0x4702 <MS_Device_USBTask+0xe>
    4702:	cd b7       	in	r28, 0x3d	; 61
    4704:	de b7       	in	r29, 0x3e	; 62
    4706:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    4708:	8e b3       	in	r24, 0x1e	; 30
    470a:	84 30       	cpi	r24, 0x04	; 4
    470c:	09 f0       	breq	.+2      	; 0x4710 <MS_Device_USBTask+0x1c>
    470e:	1c c1       	rjmp	.+568    	; 0x4948 <MS_Device_USBTask+0x254>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4710:	d8 01       	movw	r26, r16
    4712:	16 96       	adiw	r26, 0x06	; 6
    4714:	8c 91       	ld	r24, X
    4716:	16 97       	sbiw	r26, 0x06	; 6
    4718:	8f 70       	andi	r24, 0x0F	; 15
    471a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    471e:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    4722:	82 ff       	sbrs	r24, 2
    4724:	d2 c0       	rjmp	.+420    	; 0x48ca <MS_Device_USBTask+0x1d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4726:	16 96       	adiw	r26, 0x06	; 6
    4728:	8c 91       	ld	r24, X
    472a:	8f 70       	andi	r24, 0x0F	; 15
    472c:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
    4730:	1a 82       	std	Y+2, r1	; 0x02
    4732:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    4734:	78 01       	movw	r14, r16
    4736:	bc e0       	ldi	r27, 0x0C	; 12
    4738:	eb 0e       	add	r14, r27
    473a:	f1 1c       	adc	r15, r1
    473c:	04 c0       	rjmp	.+8      	; 0x4746 <MS_Device_USBTask+0x52>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    473e:	f8 01       	movw	r30, r16
    4740:	80 ad       	ldd	r24, Z+56	; 0x38
    4742:	81 11       	cpse	r24, r1
    4744:	c2 c0       	rjmp	.+388    	; 0x48ca <MS_Device_USBTask+0x1d6>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    4746:	ae 01       	movw	r20, r28
    4748:	4f 5f       	subi	r20, 0xFF	; 255
    474a:	5f 4f       	sbci	r21, 0xFF	; 255
    474c:	6f e0       	ldi	r22, 0x0F	; 15
    474e:	70 e0       	ldi	r23, 0x00	; 0
    4750:	c7 01       	movw	r24, r14
    4752:	11 d2       	rcall	.+1058   	; 0x4b76 <Endpoint_Read_Stream_LE>
    4754:	85 30       	cpi	r24, 0x05	; 5
    4756:	99 f3       	breq	.-26     	; 0x473e <MS_Device_USBTask+0x4a>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    4758:	f8 01       	movw	r30, r16
    475a:	84 85       	ldd	r24, Z+12	; 0x0c
    475c:	95 85       	ldd	r25, Z+13	; 0x0d
    475e:	a6 85       	ldd	r26, Z+14	; 0x0e
    4760:	b7 85       	ldd	r27, Z+15	; 0x0f
    4762:	85 35       	cpi	r24, 0x55	; 85
    4764:	93 45       	sbci	r25, 0x53	; 83
    4766:	a2 44       	sbci	r26, 0x42	; 66
    4768:	b3 44       	sbci	r27, 0x43	; 67
    476a:	99 f4       	brne	.+38     	; 0x4792 <MS_Device_USBTask+0x9e>
    476c:	d8 01       	movw	r26, r16
    476e:	59 96       	adiw	r26, 0x19	; 25
    4770:	9c 91       	ld	r25, X
    4772:	59 97       	sbiw	r26, 0x19	; 25
    4774:	1b 96       	adiw	r26, 0x0b	; 11
    4776:	8c 91       	ld	r24, X
    4778:	1b 97       	sbiw	r26, 0x0b	; 11
    477a:	98 17       	cp	r25, r24
    477c:	50 f4       	brcc	.+20     	; 0x4792 <MS_Device_USBTask+0x9e>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    477e:	58 96       	adiw	r26, 0x18	; 24
    4780:	8c 91       	ld	r24, X
    4782:	58 97       	sbiw	r26, 0x18	; 24
    4784:	8f 71       	andi	r24, 0x1F	; 31
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    4786:	29 f4       	brne	.+10     	; 0x4792 <MS_Device_USBTask+0x9e>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    4788:	5a 96       	adiw	r26, 0x1a	; 26
    478a:	8c 91       	ld	r24, X
    478c:	81 50       	subi	r24, 0x01	; 1
    478e:	80 31       	cpi	r24, 0x10	; 16
    4790:	78 f0       	brcs	.+30     	; 0x47b0 <MS_Device_USBTask+0xbc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4792:	eb ee       	ldi	r30, 0xEB	; 235
    4794:	f0 e0       	ldi	r31, 0x00	; 0
    4796:	80 81       	ld	r24, Z
    4798:	80 62       	ori	r24, 0x20	; 32
    479a:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    479c:	d8 01       	movw	r26, r16
    479e:	11 96       	adiw	r26, 0x01	; 1
    47a0:	8c 91       	ld	r24, X
    47a2:	8f 70       	andi	r24, 0x0F	; 15
    47a4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    47a8:	80 81       	ld	r24, Z
    47aa:	80 62       	ori	r24, 0x20	; 32
    47ac:	80 83       	st	Z, r24
    47ae:	8d c0       	rjmp	.+282    	; 0x48ca <MS_Device_USBTask+0x1d6>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    47b0:	1a 82       	std	Y+2, r1	; 0x02
    47b2:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    47b4:	78 01       	movw	r14, r16
    47b6:	bb e1       	ldi	r27, 0x1B	; 27
    47b8:	eb 0e       	add	r14, r27
    47ba:	f1 1c       	adc	r15, r1
    47bc:	04 c0       	rjmp	.+8      	; 0x47c6 <MS_Device_USBTask+0xd2>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    47be:	f8 01       	movw	r30, r16
    47c0:	80 ad       	ldd	r24, Z+56	; 0x38
    47c2:	81 11       	cpse	r24, r1
    47c4:	82 c0       	rjmp	.+260    	; 0x48ca <MS_Device_USBTask+0x1d6>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    47c6:	d8 01       	movw	r26, r16
    47c8:	5a 96       	adiw	r26, 0x1a	; 26
    47ca:	6c 91       	ld	r22, X
    47cc:	70 e0       	ldi	r23, 0x00	; 0
    47ce:	ae 01       	movw	r20, r28
    47d0:	4f 5f       	subi	r20, 0xFF	; 255
    47d2:	5f 4f       	sbci	r21, 0xFF	; 255
    47d4:	c7 01       	movw	r24, r14
    47d6:	cf d1       	rcall	.+926    	; 0x4b76 <Endpoint_Read_Stream_LE>
    47d8:	85 30       	cpi	r24, 0x05	; 5
    47da:	89 f3       	breq	.-30     	; 0x47be <MS_Device_USBTask+0xca>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    47dc:	e8 ee       	ldi	r30, 0xE8	; 232
    47de:	f0 e0       	ldi	r31, 0x00	; 0
    47e0:	80 81       	ld	r24, Z
    47e2:	8b 77       	andi	r24, 0x7B	; 123
    47e4:	80 83       	st	Z, r24

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    47e6:	f8 01       	movw	r30, r16
    47e8:	80 8d       	ldd	r24, Z+24	; 0x18
    47ea:	88 23       	and	r24, r24
    47ec:	24 f4       	brge	.+8      	; 0x47f6 <MS_Device_USBTask+0x102>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    47ee:	81 81       	ldd	r24, Z+1	; 0x01
    47f0:	8f 70       	andi	r24, 0x0F	; 15
    47f2:	80 93 e9 00 	sts	0x00E9, r24
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    47f6:	c8 01       	movw	r24, r16
    47f8:	50 db       	rcall	.-2400   	; 0x3e9a <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    47fa:	91 e0       	ldi	r25, 0x01	; 1
    47fc:	98 27       	eor	r25, r24
    47fe:	d8 01       	movw	r26, r16
    4800:	d7 96       	adiw	r26, 0x37	; 55
    4802:	9c 93       	st	X, r25
    4804:	d7 97       	sbiw	r26, 0x37	; 55
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    4806:	45 e5       	ldi	r20, 0x55	; 85
    4808:	53 e5       	ldi	r21, 0x53	; 83
    480a:	62 e4       	ldi	r22, 0x42	; 66
    480c:	73 e5       	ldi	r23, 0x53	; 83
    480e:	f8 01       	movw	r30, r16
    4810:	43 a7       	std	Z+43, r20	; 0x2b
    4812:	54 a7       	std	Z+44, r21	; 0x2c
    4814:	65 a7       	std	Z+45, r22	; 0x2d
    4816:	76 a7       	std	Z+46, r23	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    4818:	40 89       	ldd	r20, Z+16	; 0x10
    481a:	51 89       	ldd	r21, Z+17	; 0x11
    481c:	62 89       	ldd	r22, Z+18	; 0x12
    481e:	73 89       	ldd	r23, Z+19	; 0x13
    4820:	9f 96       	adiw	r26, 0x2f	; 47
    4822:	4d 93       	st	X+, r20
    4824:	5d 93       	st	X+, r21
    4826:	6d 93       	st	X+, r22
    4828:	7c 93       	st	X, r23
    482a:	d2 97       	sbiw	r26, 0x32	; 50
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    482c:	54 96       	adiw	r26, 0x14	; 20
    482e:	4d 91       	ld	r20, X+
    4830:	5d 91       	ld	r21, X+
    4832:	6d 91       	ld	r22, X+
    4834:	7c 91       	ld	r23, X
    4836:	57 97       	sbiw	r26, 0x17	; 23
    4838:	43 ab       	std	Z+51, r20	; 0x33
    483a:	54 ab       	std	Z+52, r21	; 0x34
    483c:	65 ab       	std	Z+53, r22	; 0x35
    483e:	76 ab       	std	Z+54, r23	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    4840:	81 11       	cpse	r24, r1
    4842:	09 c0       	rjmp	.+18     	; 0x4856 <MS_Device_USBTask+0x162>
    4844:	45 2b       	or	r20, r21
    4846:	46 2b       	or	r20, r22
    4848:	47 2b       	or	r20, r23
    484a:	29 f0       	breq	.+10     	; 0x4856 <MS_Device_USBTask+0x162>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    484c:	eb ee       	ldi	r30, 0xEB	; 235
    484e:	f0 e0       	ldi	r31, 0x00	; 0
    4850:	80 81       	ld	r24, Z
    4852:	80 62       	ori	r24, 0x20	; 32
    4854:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4856:	d8 01       	movw	r26, r16
    4858:	16 96       	adiw	r26, 0x06	; 6
    485a:	8c 91       	ld	r24, X
    485c:	8f 70       	andi	r24, 0x0F	; 15
    485e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    4862:	eb ee       	ldi	r30, 0xEB	; 235
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	05 c0       	rjmp	.+10     	; 0x4872 <MS_Device_USBTask+0x17e>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4868:	d8 01       	movw	r26, r16
    486a:	d8 96       	adiw	r26, 0x38	; 56
    486c:	8c 91       	ld	r24, X
    486e:	81 11       	cpse	r24, r1
    4870:	2c c0       	rjmp	.+88     	; 0x48ca <MS_Device_USBTask+0x1d6>
    4872:	80 81       	ld	r24, Z

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    4874:	85 fd       	sbrc	r24, 5
    4876:	f8 cf       	rjmp	.-16     	; 0x4868 <MS_Device_USBTask+0x174>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    4878:	f8 01       	movw	r30, r16
    487a:	81 81       	ldd	r24, Z+1	; 0x01
    487c:	8f 70       	andi	r24, 0x0F	; 15
    487e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    4882:	eb ee       	ldi	r30, 0xEB	; 235
    4884:	f0 e0       	ldi	r31, 0x00	; 0
    4886:	05 c0       	rjmp	.+10     	; 0x4892 <MS_Device_USBTask+0x19e>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4888:	d8 01       	movw	r26, r16
    488a:	d8 96       	adiw	r26, 0x38	; 56
    488c:	8c 91       	ld	r24, X
    488e:	81 11       	cpse	r24, r1
    4890:	1c c0       	rjmp	.+56     	; 0x48ca <MS_Device_USBTask+0x1d6>
    4892:	80 81       	ld	r24, Z
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    4894:	85 fd       	sbrc	r24, 5
    4896:	f8 cf       	rjmp	.-16     	; 0x4888 <MS_Device_USBTask+0x194>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    4898:	1a 82       	std	Y+2, r1	; 0x02
    489a:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    489c:	78 01       	movw	r14, r16
    489e:	bb e2       	ldi	r27, 0x2B	; 43
    48a0:	eb 0e       	add	r14, r27
    48a2:	f1 1c       	adc	r15, r1
    48a4:	04 c0       	rjmp	.+8      	; 0x48ae <MS_Device_USBTask+0x1ba>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    48a6:	f8 01       	movw	r30, r16
    48a8:	80 ad       	ldd	r24, Z+56	; 0x38
    48aa:	81 11       	cpse	r24, r1
    48ac:	0e c0       	rjmp	.+28     	; 0x48ca <MS_Device_USBTask+0x1d6>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    48ae:	ae 01       	movw	r20, r28
    48b0:	4f 5f       	subi	r20, 0xFF	; 255
    48b2:	5f 4f       	sbci	r21, 0xFF	; 255
    48b4:	6d e0       	ldi	r22, 0x0D	; 13
    48b6:	70 e0       	ldi	r23, 0x00	; 0
    48b8:	c7 01       	movw	r24, r14
    48ba:	9f d0       	rcall	.+318    	; 0x49fa <Endpoint_Write_Stream_LE>
    48bc:	85 30       	cpi	r24, 0x05	; 5
    48be:	99 f3       	breq	.-26     	; 0x48a6 <MS_Device_USBTask+0x1b2>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    48c0:	e8 ee       	ldi	r30, 0xE8	; 232
    48c2:	f0 e0       	ldi	r31, 0x00	; 0
    48c4:	80 81       	ld	r24, Z
    48c6:	8e 77       	andi	r24, 0x7E	; 126
    48c8:	80 83       	st	Z, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    48ca:	d8 01       	movw	r26, r16
    48cc:	d8 96       	adiw	r26, 0x38	; 56
    48ce:	8c 91       	ld	r24, X
    48d0:	d8 97       	sbiw	r26, 0x38	; 56
    48d2:	88 23       	and	r24, r24
    48d4:	c9 f1       	breq	.+114    	; 0x4948 <MS_Device_USBTask+0x254>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    48d6:	16 96       	adiw	r26, 0x06	; 6
    48d8:	2c 91       	ld	r18, X
    48da:	16 97       	sbiw	r26, 0x06	; 6
    48dc:	2f 70       	andi	r18, 0x0F	; 15
    48de:	81 e0       	ldi	r24, 0x01	; 1
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	fc 01       	movw	r30, r24
    48e4:	02 c0       	rjmp	.+4      	; 0x48ea <MS_Device_USBTask+0x1f6>
    48e6:	ee 0f       	add	r30, r30
    48e8:	ff 1f       	adc	r31, r31
    48ea:	2a 95       	dec	r18
    48ec:	e2 f7       	brpl	.-8      	; 0x48e6 <MS_Device_USBTask+0x1f2>
    48ee:	9f 01       	movw	r18, r30
    48f0:	ea ee       	ldi	r30, 0xEA	; 234
    48f2:	f0 e0       	ldi	r31, 0x00	; 0
    48f4:	20 83       	st	Z, r18
				UERST = 0;
    48f6:	10 82       	st	Z, r1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    48f8:	11 96       	adiw	r26, 0x01	; 1
    48fa:	2c 91       	ld	r18, X
    48fc:	11 97       	sbiw	r26, 0x01	; 1
    48fe:	2f 70       	andi	r18, 0x0F	; 15
    4900:	02 c0       	rjmp	.+4      	; 0x4906 <MS_Device_USBTask+0x212>
    4902:	88 0f       	add	r24, r24
    4904:	99 1f       	adc	r25, r25
    4906:	2a 95       	dec	r18
    4908:	e2 f7       	brpl	.-8      	; 0x4902 <MS_Device_USBTask+0x20e>
    490a:	80 83       	st	Z, r24
				UERST = 0;
    490c:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    490e:	16 96       	adiw	r26, 0x06	; 6
    4910:	8c 91       	ld	r24, X
    4912:	8f 70       	andi	r24, 0x0F	; 15
    4914:	29 ee       	ldi	r18, 0xE9	; 233
    4916:	30 e0       	ldi	r19, 0x00	; 0
    4918:	d9 01       	movw	r26, r18
    491a:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    491c:	eb ee       	ldi	r30, 0xEB	; 235
    491e:	f0 e0       	ldi	r31, 0x00	; 0
    4920:	80 81       	ld	r24, Z
    4922:	80 61       	ori	r24, 0x10	; 16
    4924:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4926:	80 81       	ld	r24, Z
    4928:	88 60       	ori	r24, 0x08	; 8
    492a:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    492c:	d8 01       	movw	r26, r16
    492e:	11 96       	adiw	r26, 0x01	; 1
    4930:	8c 91       	ld	r24, X
    4932:	8f 70       	andi	r24, 0x0F	; 15
    4934:	d9 01       	movw	r26, r18
    4936:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    4938:	80 81       	ld	r24, Z
    493a:	80 61       	ori	r24, 0x10	; 16
    493c:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    493e:	80 81       	ld	r24, Z
    4940:	88 60       	ori	r24, 0x08	; 8
    4942:	80 83       	st	Z, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    4944:	f8 01       	movw	r30, r16
    4946:	10 ae       	std	Z+56, r1	; 0x38
	}
}
    4948:	0f 90       	pop	r0
    494a:	0f 90       	pop	r0
    494c:	df 91       	pop	r29
    494e:	cf 91       	pop	r28
    4950:	1f 91       	pop	r17
    4952:	0f 91       	pop	r16
    4954:	ff 90       	pop	r15
    4956:	ef 90       	pop	r14
    4958:	08 95       	ret

0000495a <Endpoint_Null_Stream>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    495a:	af 92       	push	r10
    495c:	bf 92       	push	r11
    495e:	cf 92       	push	r12
    4960:	df 92       	push	r13
    4962:	ef 92       	push	r14
    4964:	ff 92       	push	r15
    4966:	0f 93       	push	r16
    4968:	1f 93       	push	r17
    496a:	cf 93       	push	r28
    496c:	df 93       	push	r29
    496e:	ec 01       	movw	r28, r24
    4970:	6b 01       	movw	r12, r22
    4972:	c1 d3       	rcall	.+1922   	; 0x50f6 <Endpoint_WaitUntilReady>
    4974:	81 11       	cpse	r24, r1
    4976:	36 c0       	rjmp	.+108    	; 0x49e4 <Endpoint_Null_Stream+0x8a>
    4978:	c1 14       	cp	r12, r1
    497a:	d1 04       	cpc	r13, r1
    497c:	29 f0       	breq	.+10     	; 0x4988 <Endpoint_Null_Stream+0x2e>
    497e:	f6 01       	movw	r30, r12
    4980:	80 81       	ld	r24, Z
    4982:	91 81       	ldd	r25, Z+1	; 0x01
    4984:	c8 1b       	sub	r28, r24
    4986:	d9 0b       	sbc	r29, r25
    4988:	20 97       	sbiw	r28, 0x00	; 0
    498a:	49 f1       	breq	.+82     	; 0x49de <Endpoint_Null_Stream+0x84>
    498c:	e1 2c       	mov	r14, r1
    498e:	f1 2c       	mov	r15, r1
    4990:	08 ee       	ldi	r16, 0xE8	; 232
    4992:	10 e0       	ldi	r17, 0x00	; 0
    4994:	0f 2e       	mov	r0, r31
    4996:	f1 ef       	ldi	r31, 0xF1	; 241
    4998:	af 2e       	mov	r10, r31
    499a:	b1 2c       	mov	r11, r1
    499c:	f0 2d       	mov	r31, r0
    499e:	f8 01       	movw	r30, r16
    49a0:	80 81       	ld	r24, Z
    49a2:	85 fd       	sbrc	r24, 5
    49a4:	13 c0       	rjmp	.+38     	; 0x49cc <Endpoint_Null_Stream+0x72>
    49a6:	80 81       	ld	r24, Z
    49a8:	8e 77       	andi	r24, 0x7E	; 126
    49aa:	80 83       	st	Z, r24
    49ac:	c1 14       	cp	r12, r1
    49ae:	d1 04       	cpc	r13, r1
    49b0:	49 f0       	breq	.+18     	; 0x49c4 <Endpoint_Null_Stream+0x6a>
    49b2:	f6 01       	movw	r30, r12
    49b4:	80 81       	ld	r24, Z
    49b6:	91 81       	ldd	r25, Z+1	; 0x01
    49b8:	e8 0e       	add	r14, r24
    49ba:	f9 1e       	adc	r15, r25
    49bc:	f1 82       	std	Z+1, r15	; 0x01
    49be:	e0 82       	st	Z, r14
    49c0:	85 e0       	ldi	r24, 0x05	; 5
    49c2:	10 c0       	rjmp	.+32     	; 0x49e4 <Endpoint_Null_Stream+0x8a>
    49c4:	98 d3       	rcall	.+1840   	; 0x50f6 <Endpoint_WaitUntilReady>
    49c6:	88 23       	and	r24, r24
    49c8:	39 f0       	breq	.+14     	; 0x49d8 <Endpoint_Null_Stream+0x7e>
    49ca:	0c c0       	rjmp	.+24     	; 0x49e4 <Endpoint_Null_Stream+0x8a>
    49cc:	f5 01       	movw	r30, r10
    49ce:	10 82       	st	Z, r1
    49d0:	21 97       	sbiw	r28, 0x01	; 1
    49d2:	ff ef       	ldi	r31, 0xFF	; 255
    49d4:	ef 1a       	sub	r14, r31
    49d6:	ff 0a       	sbc	r15, r31
    49d8:	20 97       	sbiw	r28, 0x00	; 0
    49da:	09 f7       	brne	.-62     	; 0x499e <Endpoint_Null_Stream+0x44>
    49dc:	02 c0       	rjmp	.+4      	; 0x49e2 <Endpoint_Null_Stream+0x88>
    49de:	80 e0       	ldi	r24, 0x00	; 0
    49e0:	01 c0       	rjmp	.+2      	; 0x49e4 <Endpoint_Null_Stream+0x8a>
    49e2:	80 e0       	ldi	r24, 0x00	; 0
    49e4:	df 91       	pop	r29
    49e6:	cf 91       	pop	r28
    49e8:	1f 91       	pop	r17
    49ea:	0f 91       	pop	r16
    49ec:	ff 90       	pop	r15
    49ee:	ef 90       	pop	r14
    49f0:	df 90       	pop	r13
    49f2:	cf 90       	pop	r12
    49f4:	bf 90       	pop	r11
    49f6:	af 90       	pop	r10
    49f8:	08 95       	ret

000049fa <Endpoint_Write_Stream_LE>:
    49fa:	8f 92       	push	r8
    49fc:	9f 92       	push	r9
    49fe:	af 92       	push	r10
    4a00:	bf 92       	push	r11
    4a02:	cf 92       	push	r12
    4a04:	df 92       	push	r13
    4a06:	ef 92       	push	r14
    4a08:	ff 92       	push	r15
    4a0a:	0f 93       	push	r16
    4a0c:	1f 93       	push	r17
    4a0e:	cf 93       	push	r28
    4a10:	df 93       	push	r29
    4a12:	7c 01       	movw	r14, r24
    4a14:	eb 01       	movw	r28, r22
    4a16:	6a 01       	movw	r12, r20
    4a18:	6e d3       	rcall	.+1756   	; 0x50f6 <Endpoint_WaitUntilReady>
    4a1a:	81 11       	cpse	r24, r1
    4a1c:	3d c0       	rjmp	.+122    	; 0x4a98 <Endpoint_Write_Stream_LE+0x9e>
    4a1e:	c1 14       	cp	r12, r1
    4a20:	d1 04       	cpc	r13, r1
    4a22:	39 f0       	breq	.+14     	; 0x4a32 <Endpoint_Write_Stream_LE+0x38>
    4a24:	f6 01       	movw	r30, r12
    4a26:	80 81       	ld	r24, Z
    4a28:	91 81       	ldd	r25, Z+1	; 0x01
    4a2a:	c8 1b       	sub	r28, r24
    4a2c:	d9 0b       	sbc	r29, r25
    4a2e:	e8 0e       	add	r14, r24
    4a30:	f9 1e       	adc	r15, r25
    4a32:	20 97       	sbiw	r28, 0x00	; 0
    4a34:	71 f1       	breq	.+92     	; 0x4a92 <Endpoint_Write_Stream_LE+0x98>
    4a36:	00 e0       	ldi	r16, 0x00	; 0
    4a38:	10 e0       	ldi	r17, 0x00	; 0
    4a3a:	0f 2e       	mov	r0, r31
    4a3c:	f8 ee       	ldi	r31, 0xE8	; 232
    4a3e:	8f 2e       	mov	r8, r31
    4a40:	91 2c       	mov	r9, r1
    4a42:	f0 2d       	mov	r31, r0
    4a44:	0f 2e       	mov	r0, r31
    4a46:	f1 ef       	ldi	r31, 0xF1	; 241
    4a48:	af 2e       	mov	r10, r31
    4a4a:	b1 2c       	mov	r11, r1
    4a4c:	f0 2d       	mov	r31, r0
    4a4e:	f4 01       	movw	r30, r8
    4a50:	80 81       	ld	r24, Z
    4a52:	85 fd       	sbrc	r24, 5
    4a54:	13 c0       	rjmp	.+38     	; 0x4a7c <Endpoint_Write_Stream_LE+0x82>
    4a56:	80 81       	ld	r24, Z
    4a58:	8e 77       	andi	r24, 0x7E	; 126
    4a5a:	80 83       	st	Z, r24
    4a5c:	c1 14       	cp	r12, r1
    4a5e:	d1 04       	cpc	r13, r1
    4a60:	49 f0       	breq	.+18     	; 0x4a74 <Endpoint_Write_Stream_LE+0x7a>
    4a62:	f6 01       	movw	r30, r12
    4a64:	80 81       	ld	r24, Z
    4a66:	91 81       	ldd	r25, Z+1	; 0x01
    4a68:	08 0f       	add	r16, r24
    4a6a:	19 1f       	adc	r17, r25
    4a6c:	11 83       	std	Z+1, r17	; 0x01
    4a6e:	00 83       	st	Z, r16
    4a70:	85 e0       	ldi	r24, 0x05	; 5
    4a72:	12 c0       	rjmp	.+36     	; 0x4a98 <Endpoint_Write_Stream_LE+0x9e>
    4a74:	40 d3       	rcall	.+1664   	; 0x50f6 <Endpoint_WaitUntilReady>
    4a76:	88 23       	and	r24, r24
    4a78:	49 f0       	breq	.+18     	; 0x4a8c <Endpoint_Write_Stream_LE+0x92>
    4a7a:	0e c0       	rjmp	.+28     	; 0x4a98 <Endpoint_Write_Stream_LE+0x9e>
    4a7c:	f7 01       	movw	r30, r14
    4a7e:	81 91       	ld	r24, Z+
    4a80:	7f 01       	movw	r14, r30
    4a82:	f5 01       	movw	r30, r10
    4a84:	80 83       	st	Z, r24
    4a86:	21 97       	sbiw	r28, 0x01	; 1
    4a88:	0f 5f       	subi	r16, 0xFF	; 255
    4a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a8c:	20 97       	sbiw	r28, 0x00	; 0
    4a8e:	f9 f6       	brne	.-66     	; 0x4a4e <Endpoint_Write_Stream_LE+0x54>
    4a90:	02 c0       	rjmp	.+4      	; 0x4a96 <Endpoint_Write_Stream_LE+0x9c>
    4a92:	80 e0       	ldi	r24, 0x00	; 0
    4a94:	01 c0       	rjmp	.+2      	; 0x4a98 <Endpoint_Write_Stream_LE+0x9e>
    4a96:	80 e0       	ldi	r24, 0x00	; 0
    4a98:	df 91       	pop	r29
    4a9a:	cf 91       	pop	r28
    4a9c:	1f 91       	pop	r17
    4a9e:	0f 91       	pop	r16
    4aa0:	ff 90       	pop	r15
    4aa2:	ef 90       	pop	r14
    4aa4:	df 90       	pop	r13
    4aa6:	cf 90       	pop	r12
    4aa8:	bf 90       	pop	r11
    4aaa:	af 90       	pop	r10
    4aac:	9f 90       	pop	r9
    4aae:	8f 90       	pop	r8
    4ab0:	08 95       	ret

00004ab2 <Endpoint_Write_Stream_BE>:
    4ab2:	8f 92       	push	r8
    4ab4:	9f 92       	push	r9
    4ab6:	af 92       	push	r10
    4ab8:	bf 92       	push	r11
    4aba:	cf 92       	push	r12
    4abc:	df 92       	push	r13
    4abe:	ef 92       	push	r14
    4ac0:	ff 92       	push	r15
    4ac2:	0f 93       	push	r16
    4ac4:	1f 93       	push	r17
    4ac6:	cf 93       	push	r28
    4ac8:	df 93       	push	r29
    4aca:	8c 01       	movw	r16, r24
    4acc:	eb 01       	movw	r28, r22
    4ace:	6a 01       	movw	r12, r20
    4ad0:	12 d3       	rcall	.+1572   	; 0x50f6 <Endpoint_WaitUntilReady>
    4ad2:	81 11       	cpse	r24, r1
    4ad4:	43 c0       	rjmp	.+134    	; 0x4b5c <Endpoint_Write_Stream_BE+0xaa>
    4ad6:	4e 01       	movw	r8, r28
    4ad8:	81 e0       	ldi	r24, 0x01	; 1
    4ada:	88 1a       	sub	r8, r24
    4adc:	91 08       	sbc	r9, r1
    4ade:	80 0e       	add	r8, r16
    4ae0:	91 1e       	adc	r9, r17
    4ae2:	c1 14       	cp	r12, r1
    4ae4:	d1 04       	cpc	r13, r1
    4ae6:	39 f0       	breq	.+14     	; 0x4af6 <Endpoint_Write_Stream_BE+0x44>
    4ae8:	f6 01       	movw	r30, r12
    4aea:	80 81       	ld	r24, Z
    4aec:	91 81       	ldd	r25, Z+1	; 0x01
    4aee:	c8 1b       	sub	r28, r24
    4af0:	d9 0b       	sbc	r29, r25
    4af2:	88 1a       	sub	r8, r24
    4af4:	99 0a       	sbc	r9, r25
    4af6:	20 97       	sbiw	r28, 0x00	; 0
    4af8:	71 f1       	breq	.+92     	; 0x4b56 <Endpoint_Write_Stream_BE+0xa4>
    4afa:	e1 2c       	mov	r14, r1
    4afc:	f1 2c       	mov	r15, r1
    4afe:	08 ee       	ldi	r16, 0xE8	; 232
    4b00:	10 e0       	ldi	r17, 0x00	; 0
    4b02:	0f 2e       	mov	r0, r31
    4b04:	f1 ef       	ldi	r31, 0xF1	; 241
    4b06:	af 2e       	mov	r10, r31
    4b08:	b1 2c       	mov	r11, r1
    4b0a:	f0 2d       	mov	r31, r0
    4b0c:	f8 01       	movw	r30, r16
    4b0e:	80 81       	ld	r24, Z
    4b10:	85 fd       	sbrc	r24, 5
    4b12:	13 c0       	rjmp	.+38     	; 0x4b3a <Endpoint_Write_Stream_BE+0x88>
    4b14:	80 81       	ld	r24, Z
    4b16:	8e 77       	andi	r24, 0x7E	; 126
    4b18:	80 83       	st	Z, r24
    4b1a:	c1 14       	cp	r12, r1
    4b1c:	d1 04       	cpc	r13, r1
    4b1e:	49 f0       	breq	.+18     	; 0x4b32 <Endpoint_Write_Stream_BE+0x80>
    4b20:	f6 01       	movw	r30, r12
    4b22:	80 81       	ld	r24, Z
    4b24:	91 81       	ldd	r25, Z+1	; 0x01
    4b26:	e8 0e       	add	r14, r24
    4b28:	f9 1e       	adc	r15, r25
    4b2a:	f1 82       	std	Z+1, r15	; 0x01
    4b2c:	e0 82       	st	Z, r14
    4b2e:	85 e0       	ldi	r24, 0x05	; 5
    4b30:	15 c0       	rjmp	.+42     	; 0x4b5c <Endpoint_Write_Stream_BE+0xaa>
    4b32:	e1 d2       	rcall	.+1474   	; 0x50f6 <Endpoint_WaitUntilReady>
    4b34:	88 23       	and	r24, r24
    4b36:	61 f0       	breq	.+24     	; 0x4b50 <Endpoint_Write_Stream_BE+0x9e>
    4b38:	11 c0       	rjmp	.+34     	; 0x4b5c <Endpoint_Write_Stream_BE+0xaa>
    4b3a:	f4 01       	movw	r30, r8
    4b3c:	80 81       	ld	r24, Z
    4b3e:	f5 01       	movw	r30, r10
    4b40:	80 83       	st	Z, r24
    4b42:	f1 e0       	ldi	r31, 0x01	; 1
    4b44:	8f 1a       	sub	r8, r31
    4b46:	91 08       	sbc	r9, r1
    4b48:	21 97       	sbiw	r28, 0x01	; 1
    4b4a:	8f ef       	ldi	r24, 0xFF	; 255
    4b4c:	e8 1a       	sub	r14, r24
    4b4e:	f8 0a       	sbc	r15, r24
    4b50:	20 97       	sbiw	r28, 0x00	; 0
    4b52:	e1 f6       	brne	.-72     	; 0x4b0c <Endpoint_Write_Stream_BE+0x5a>
    4b54:	02 c0       	rjmp	.+4      	; 0x4b5a <Endpoint_Write_Stream_BE+0xa8>
    4b56:	80 e0       	ldi	r24, 0x00	; 0
    4b58:	01 c0       	rjmp	.+2      	; 0x4b5c <Endpoint_Write_Stream_BE+0xaa>
    4b5a:	80 e0       	ldi	r24, 0x00	; 0
    4b5c:	df 91       	pop	r29
    4b5e:	cf 91       	pop	r28
    4b60:	1f 91       	pop	r17
    4b62:	0f 91       	pop	r16
    4b64:	ff 90       	pop	r15
    4b66:	ef 90       	pop	r14
    4b68:	df 90       	pop	r13
    4b6a:	cf 90       	pop	r12
    4b6c:	bf 90       	pop	r11
    4b6e:	af 90       	pop	r10
    4b70:	9f 90       	pop	r9
    4b72:	8f 90       	pop	r8
    4b74:	08 95       	ret

00004b76 <Endpoint_Read_Stream_LE>:
    4b76:	8f 92       	push	r8
    4b78:	9f 92       	push	r9
    4b7a:	af 92       	push	r10
    4b7c:	bf 92       	push	r11
    4b7e:	cf 92       	push	r12
    4b80:	df 92       	push	r13
    4b82:	ef 92       	push	r14
    4b84:	ff 92       	push	r15
    4b86:	0f 93       	push	r16
    4b88:	1f 93       	push	r17
    4b8a:	cf 93       	push	r28
    4b8c:	df 93       	push	r29
    4b8e:	7c 01       	movw	r14, r24
    4b90:	eb 01       	movw	r28, r22
    4b92:	6a 01       	movw	r12, r20
    4b94:	b0 d2       	rcall	.+1376   	; 0x50f6 <Endpoint_WaitUntilReady>
    4b96:	81 11       	cpse	r24, r1
    4b98:	3d c0       	rjmp	.+122    	; 0x4c14 <Endpoint_Read_Stream_LE+0x9e>
    4b9a:	c1 14       	cp	r12, r1
    4b9c:	d1 04       	cpc	r13, r1
    4b9e:	39 f0       	breq	.+14     	; 0x4bae <Endpoint_Read_Stream_LE+0x38>
    4ba0:	f6 01       	movw	r30, r12
    4ba2:	80 81       	ld	r24, Z
    4ba4:	91 81       	ldd	r25, Z+1	; 0x01
    4ba6:	c8 1b       	sub	r28, r24
    4ba8:	d9 0b       	sbc	r29, r25
    4baa:	e8 0e       	add	r14, r24
    4bac:	f9 1e       	adc	r15, r25
    4bae:	20 97       	sbiw	r28, 0x00	; 0
    4bb0:	71 f1       	breq	.+92     	; 0x4c0e <Endpoint_Read_Stream_LE+0x98>
    4bb2:	00 e0       	ldi	r16, 0x00	; 0
    4bb4:	10 e0       	ldi	r17, 0x00	; 0
    4bb6:	0f 2e       	mov	r0, r31
    4bb8:	f8 ee       	ldi	r31, 0xE8	; 232
    4bba:	8f 2e       	mov	r8, r31
    4bbc:	91 2c       	mov	r9, r1
    4bbe:	f0 2d       	mov	r31, r0
    4bc0:	0f 2e       	mov	r0, r31
    4bc2:	f1 ef       	ldi	r31, 0xF1	; 241
    4bc4:	af 2e       	mov	r10, r31
    4bc6:	b1 2c       	mov	r11, r1
    4bc8:	f0 2d       	mov	r31, r0
    4bca:	f4 01       	movw	r30, r8
    4bcc:	80 81       	ld	r24, Z
    4bce:	85 fd       	sbrc	r24, 5
    4bd0:	13 c0       	rjmp	.+38     	; 0x4bf8 <Endpoint_Read_Stream_LE+0x82>
    4bd2:	80 81       	ld	r24, Z
    4bd4:	8b 77       	andi	r24, 0x7B	; 123
    4bd6:	80 83       	st	Z, r24
    4bd8:	c1 14       	cp	r12, r1
    4bda:	d1 04       	cpc	r13, r1
    4bdc:	49 f0       	breq	.+18     	; 0x4bf0 <Endpoint_Read_Stream_LE+0x7a>
    4bde:	f6 01       	movw	r30, r12
    4be0:	80 81       	ld	r24, Z
    4be2:	91 81       	ldd	r25, Z+1	; 0x01
    4be4:	08 0f       	add	r16, r24
    4be6:	19 1f       	adc	r17, r25
    4be8:	11 83       	std	Z+1, r17	; 0x01
    4bea:	00 83       	st	Z, r16
    4bec:	85 e0       	ldi	r24, 0x05	; 5
    4bee:	12 c0       	rjmp	.+36     	; 0x4c14 <Endpoint_Read_Stream_LE+0x9e>
    4bf0:	82 d2       	rcall	.+1284   	; 0x50f6 <Endpoint_WaitUntilReady>
    4bf2:	88 23       	and	r24, r24
    4bf4:	49 f0       	breq	.+18     	; 0x4c08 <Endpoint_Read_Stream_LE+0x92>
    4bf6:	0e c0       	rjmp	.+28     	; 0x4c14 <Endpoint_Read_Stream_LE+0x9e>
    4bf8:	f5 01       	movw	r30, r10
    4bfa:	80 81       	ld	r24, Z
    4bfc:	f7 01       	movw	r30, r14
    4bfe:	81 93       	st	Z+, r24
    4c00:	7f 01       	movw	r14, r30
    4c02:	21 97       	sbiw	r28, 0x01	; 1
    4c04:	0f 5f       	subi	r16, 0xFF	; 255
    4c06:	1f 4f       	sbci	r17, 0xFF	; 255
    4c08:	20 97       	sbiw	r28, 0x00	; 0
    4c0a:	f9 f6       	brne	.-66     	; 0x4bca <Endpoint_Read_Stream_LE+0x54>
    4c0c:	02 c0       	rjmp	.+4      	; 0x4c12 <Endpoint_Read_Stream_LE+0x9c>
    4c0e:	80 e0       	ldi	r24, 0x00	; 0
    4c10:	01 c0       	rjmp	.+2      	; 0x4c14 <Endpoint_Read_Stream_LE+0x9e>
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	df 91       	pop	r29
    4c16:	cf 91       	pop	r28
    4c18:	1f 91       	pop	r17
    4c1a:	0f 91       	pop	r16
    4c1c:	ff 90       	pop	r15
    4c1e:	ef 90       	pop	r14
    4c20:	df 90       	pop	r13
    4c22:	cf 90       	pop	r12
    4c24:	bf 90       	pop	r11
    4c26:	af 90       	pop	r10
    4c28:	9f 90       	pop	r9
    4c2a:	8f 90       	pop	r8
    4c2c:	08 95       	ret

00004c2e <Endpoint_Write_Control_Stream_LE>:
    4c2e:	df 92       	push	r13
    4c30:	ef 92       	push	r14
    4c32:	ff 92       	push	r15
    4c34:	0f 93       	push	r16
    4c36:	1f 93       	push	r17
    4c38:	cf 93       	push	r28
    4c3a:	df 93       	push	r29
    4c3c:	20 91 73 08 	lds	r18, 0x0873
    4c40:	30 91 74 08 	lds	r19, 0x0874
    4c44:	26 17       	cp	r18, r22
    4c46:	37 07       	cpc	r19, r23
    4c48:	58 f0       	brcs	.+22     	; 0x4c60 <Endpoint_Write_Control_Stream_LE+0x32>
    4c4a:	61 15       	cp	r22, r1
    4c4c:	71 05       	cpc	r23, r1
    4c4e:	39 f4       	brne	.+14     	; 0x4c5e <Endpoint_Write_Control_Stream_LE+0x30>
    4c50:	e8 ee       	ldi	r30, 0xE8	; 232
    4c52:	f0 e0       	ldi	r31, 0x00	; 0
    4c54:	20 81       	ld	r18, Z
    4c56:	2e 77       	andi	r18, 0x7E	; 126
    4c58:	20 83       	st	Z, r18
    4c5a:	9b 01       	movw	r18, r22
    4c5c:	01 c0       	rjmp	.+2      	; 0x4c60 <Endpoint_Write_Control_Stream_LE+0x32>
    4c5e:	9b 01       	movw	r18, r22
    4c60:	a0 e0       	ldi	r26, 0x00	; 0
    4c62:	e8 ee       	ldi	r30, 0xE8	; 232
    4c64:	f0 e0       	ldi	r31, 0x00	; 0
    4c66:	03 ef       	ldi	r16, 0xF3	; 243
    4c68:	10 e0       	ldi	r17, 0x00	; 0
    4c6a:	62 ef       	ldi	r22, 0xF2	; 242
    4c6c:	70 e0       	ldi	r23, 0x00	; 0
    4c6e:	c1 ef       	ldi	r28, 0xF1	; 241
    4c70:	d0 e0       	ldi	r29, 0x00	; 0
    4c72:	ff 24       	eor	r15, r15
    4c74:	f3 94       	inc	r15
    4c76:	e1 2c       	mov	r14, r1
    4c78:	37 c0       	rjmp	.+110    	; 0x4ce8 <Endpoint_Write_Control_Stream_LE+0xba>
    4c7a:	4e b3       	in	r20, 0x1e	; 30
    4c7c:	44 23       	and	r20, r20
    4c7e:	09 f4       	brne	.+2      	; 0x4c82 <Endpoint_Write_Control_Stream_LE+0x54>
    4c80:	46 c0       	rjmp	.+140    	; 0x4d0e <Endpoint_Write_Control_Stream_LE+0xe0>
    4c82:	45 30       	cpi	r20, 0x05	; 5
    4c84:	09 f4       	brne	.+2      	; 0x4c88 <Endpoint_Write_Control_Stream_LE+0x5a>
    4c86:	45 c0       	rjmp	.+138    	; 0x4d12 <Endpoint_Write_Control_Stream_LE+0xe4>
    4c88:	40 81       	ld	r20, Z
    4c8a:	43 fd       	sbrc	r20, 3
    4c8c:	44 c0       	rjmp	.+136    	; 0x4d16 <Endpoint_Write_Control_Stream_LE+0xe8>
    4c8e:	40 81       	ld	r20, Z
    4c90:	42 ff       	sbrs	r20, 2
    4c92:	03 c0       	rjmp	.+6      	; 0x4c9a <Endpoint_Write_Control_Stream_LE+0x6c>
    4c94:	e8 ee       	ldi	r30, 0xE8	; 232
    4c96:	f0 e0       	ldi	r31, 0x00	; 0
    4c98:	35 c0       	rjmp	.+106    	; 0x4d04 <Endpoint_Write_Control_Stream_LE+0xd6>
    4c9a:	40 81       	ld	r20, Z
    4c9c:	40 ff       	sbrs	r20, 0
    4c9e:	24 c0       	rjmp	.+72     	; 0x4ce8 <Endpoint_Write_Control_Stream_LE+0xba>
    4ca0:	d8 01       	movw	r26, r16
    4ca2:	dc 90       	ld	r13, X
    4ca4:	db 01       	movw	r26, r22
    4ca6:	4c 91       	ld	r20, X
    4ca8:	50 e0       	ldi	r21, 0x00	; 0
    4caa:	5d 29       	or	r21, r13
    4cac:	21 15       	cp	r18, r1
    4cae:	31 05       	cpc	r19, r1
    4cb0:	99 f0       	breq	.+38     	; 0x4cd8 <Endpoint_Write_Control_Stream_LE+0xaa>
    4cb2:	48 30       	cpi	r20, 0x08	; 8
    4cb4:	51 05       	cpc	r21, r1
    4cb6:	80 f4       	brcc	.+32     	; 0x4cd8 <Endpoint_Write_Control_Stream_LE+0xaa>
    4cb8:	a8 2f       	mov	r26, r24
    4cba:	b9 2f       	mov	r27, r25
    4cbc:	8d 91       	ld	r24, X+
    4cbe:	88 83       	st	Y, r24
    4cc0:	8a 2f       	mov	r24, r26
    4cc2:	9b 2f       	mov	r25, r27
    4cc4:	21 50       	subi	r18, 0x01	; 1
    4cc6:	31 09       	sbc	r19, r1
    4cc8:	4f 5f       	subi	r20, 0xFF	; 255
    4cca:	5f 4f       	sbci	r21, 0xFF	; 255
    4ccc:	21 15       	cp	r18, r1
    4cce:	31 05       	cpc	r19, r1
    4cd0:	19 f0       	breq	.+6      	; 0x4cd8 <Endpoint_Write_Control_Stream_LE+0xaa>
    4cd2:	48 30       	cpi	r20, 0x08	; 8
    4cd4:	51 05       	cpc	r21, r1
    4cd6:	91 f7       	brne	.-28     	; 0x4cbc <Endpoint_Write_Control_Stream_LE+0x8e>
    4cd8:	af 2d       	mov	r26, r15
    4cda:	48 30       	cpi	r20, 0x08	; 8
    4cdc:	51 05       	cpc	r21, r1
    4cde:	09 f0       	breq	.+2      	; 0x4ce2 <Endpoint_Write_Control_Stream_LE+0xb4>
    4ce0:	ae 2d       	mov	r26, r14
    4ce2:	40 81       	ld	r20, Z
    4ce4:	4e 77       	andi	r20, 0x7E	; 126
    4ce6:	40 83       	st	Z, r20
    4ce8:	21 15       	cp	r18, r1
    4cea:	31 05       	cpc	r19, r1
    4cec:	31 f6       	brne	.-116    	; 0x4c7a <Endpoint_Write_Control_Stream_LE+0x4c>
    4cee:	a1 11       	cpse	r26, r1
    4cf0:	c4 cf       	rjmp	.-120    	; 0x4c7a <Endpoint_Write_Control_Stream_LE+0x4c>
    4cf2:	d0 cf       	rjmp	.-96     	; 0x4c94 <Endpoint_Write_Control_Stream_LE+0x66>
    4cf4:	8e b3       	in	r24, 0x1e	; 30
    4cf6:	88 23       	and	r24, r24
    4cf8:	81 f0       	breq	.+32     	; 0x4d1a <Endpoint_Write_Control_Stream_LE+0xec>
    4cfa:	85 30       	cpi	r24, 0x05	; 5
    4cfc:	81 f0       	breq	.+32     	; 0x4d1e <Endpoint_Write_Control_Stream_LE+0xf0>
    4cfe:	80 81       	ld	r24, Z
    4d00:	83 fd       	sbrc	r24, 3
    4d02:	0f c0       	rjmp	.+30     	; 0x4d22 <Endpoint_Write_Control_Stream_LE+0xf4>
    4d04:	80 81       	ld	r24, Z
    4d06:	82 ff       	sbrs	r24, 2
    4d08:	f5 cf       	rjmp	.-22     	; 0x4cf4 <Endpoint_Write_Control_Stream_LE+0xc6>
    4d0a:	80 e0       	ldi	r24, 0x00	; 0
    4d0c:	0b c0       	rjmp	.+22     	; 0x4d24 <Endpoint_Write_Control_Stream_LE+0xf6>
    4d0e:	82 e0       	ldi	r24, 0x02	; 2
    4d10:	09 c0       	rjmp	.+18     	; 0x4d24 <Endpoint_Write_Control_Stream_LE+0xf6>
    4d12:	83 e0       	ldi	r24, 0x03	; 3
    4d14:	07 c0       	rjmp	.+14     	; 0x4d24 <Endpoint_Write_Control_Stream_LE+0xf6>
    4d16:	81 e0       	ldi	r24, 0x01	; 1
    4d18:	05 c0       	rjmp	.+10     	; 0x4d24 <Endpoint_Write_Control_Stream_LE+0xf6>
    4d1a:	82 e0       	ldi	r24, 0x02	; 2
    4d1c:	03 c0       	rjmp	.+6      	; 0x4d24 <Endpoint_Write_Control_Stream_LE+0xf6>
    4d1e:	83 e0       	ldi	r24, 0x03	; 3
    4d20:	01 c0       	rjmp	.+2      	; 0x4d24 <Endpoint_Write_Control_Stream_LE+0xf6>
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	df 91       	pop	r29
    4d26:	cf 91       	pop	r28
    4d28:	1f 91       	pop	r17
    4d2a:	0f 91       	pop	r16
    4d2c:	ff 90       	pop	r15
    4d2e:	ef 90       	pop	r14
    4d30:	df 90       	pop	r13
    4d32:	08 95       	ret

00004d34 <Endpoint_Read_Control_Stream_LE>:
    4d34:	cf 92       	push	r12
    4d36:	df 92       	push	r13
    4d38:	ff 92       	push	r15
    4d3a:	0f 93       	push	r16
    4d3c:	1f 93       	push	r17
    4d3e:	cf 93       	push	r28
    4d40:	df 93       	push	r29
    4d42:	61 15       	cp	r22, r1
    4d44:	71 05       	cpc	r23, r1
    4d46:	29 f4       	brne	.+10     	; 0x4d52 <Endpoint_Read_Control_Stream_LE+0x1e>
    4d48:	e8 ee       	ldi	r30, 0xE8	; 232
    4d4a:	f0 e0       	ldi	r31, 0x00	; 0
    4d4c:	20 81       	ld	r18, Z
    4d4e:	2b 77       	andi	r18, 0x7B	; 123
    4d50:	20 83       	st	Z, r18
    4d52:	e8 ee       	ldi	r30, 0xE8	; 232
    4d54:	f0 e0       	ldi	r31, 0x00	; 0
    4d56:	43 ef       	ldi	r20, 0xF3	; 243
    4d58:	50 e0       	ldi	r21, 0x00	; 0
    4d5a:	0f 2e       	mov	r0, r31
    4d5c:	f2 ef       	ldi	r31, 0xF2	; 242
    4d5e:	cf 2e       	mov	r12, r31
    4d60:	d1 2c       	mov	r13, r1
    4d62:	f0 2d       	mov	r31, r0
    4d64:	01 ef       	ldi	r16, 0xF1	; 241
    4d66:	10 e0       	ldi	r17, 0x00	; 0
    4d68:	21 c0       	rjmp	.+66     	; 0x4dac <Endpoint_Read_Control_Stream_LE+0x78>
    4d6a:	2e b3       	in	r18, 0x1e	; 30
    4d6c:	22 23       	and	r18, r18
    4d6e:	d1 f1       	breq	.+116    	; 0x4de4 <Endpoint_Read_Control_Stream_LE+0xb0>
    4d70:	25 30       	cpi	r18, 0x05	; 5
    4d72:	d1 f1       	breq	.+116    	; 0x4de8 <Endpoint_Read_Control_Stream_LE+0xb4>
    4d74:	20 81       	ld	r18, Z
    4d76:	23 fd       	sbrc	r18, 3
    4d78:	39 c0       	rjmp	.+114    	; 0x4dec <Endpoint_Read_Control_Stream_LE+0xb8>
    4d7a:	20 81       	ld	r18, Z
    4d7c:	22 ff       	sbrs	r18, 2
    4d7e:	f5 cf       	rjmp	.-22     	; 0x4d6a <Endpoint_Read_Control_Stream_LE+0x36>
    4d80:	41 c0       	rjmp	.+130    	; 0x4e04 <Endpoint_Read_Control_Stream_LE+0xd0>
    4d82:	e8 01       	movw	r28, r16
    4d84:	88 81       	ld	r24, Y
    4d86:	8d 93       	st	X+, r24
    4d88:	8a 2f       	mov	r24, r26
    4d8a:	9b 2f       	mov	r25, r27
    4d8c:	61 50       	subi	r22, 0x01	; 1
    4d8e:	71 09       	sbc	r23, r1
    4d90:	61 15       	cp	r22, r1
    4d92:	71 05       	cpc	r23, r1
    4d94:	41 f0       	breq	.+16     	; 0x4da6 <Endpoint_Read_Control_Stream_LE+0x72>
    4d96:	ea 01       	movw	r28, r20
    4d98:	f8 80       	ld	r15, Y
    4d9a:	e6 01       	movw	r28, r12
    4d9c:	28 81       	ld	r18, Y
    4d9e:	30 e0       	ldi	r19, 0x00	; 0
    4da0:	3f 29       	or	r19, r15
    4da2:	23 2b       	or	r18, r19
    4da4:	71 f7       	brne	.-36     	; 0x4d82 <Endpoint_Read_Control_Stream_LE+0x4e>
    4da6:	20 81       	ld	r18, Z
    4da8:	2b 77       	andi	r18, 0x7B	; 123
    4daa:	20 83       	st	Z, r18
    4dac:	61 15       	cp	r22, r1
    4dae:	71 05       	cpc	r23, r1
    4db0:	19 f4       	brne	.+6      	; 0x4db8 <Endpoint_Read_Control_Stream_LE+0x84>
    4db2:	e8 ee       	ldi	r30, 0xE8	; 232
    4db4:	f0 e0       	ldi	r31, 0x00	; 0
    4db6:	11 c0       	rjmp	.+34     	; 0x4dda <Endpoint_Read_Control_Stream_LE+0xa6>
    4db8:	2e b3       	in	r18, 0x1e	; 30
    4dba:	22 23       	and	r18, r18
    4dbc:	c9 f0       	breq	.+50     	; 0x4df0 <Endpoint_Read_Control_Stream_LE+0xbc>
    4dbe:	25 30       	cpi	r18, 0x05	; 5
    4dc0:	c9 f0       	breq	.+50     	; 0x4df4 <Endpoint_Read_Control_Stream_LE+0xc0>
    4dc2:	20 81       	ld	r18, Z
    4dc4:	23 fd       	sbrc	r18, 3
    4dc6:	18 c0       	rjmp	.+48     	; 0x4df8 <Endpoint_Read_Control_Stream_LE+0xc4>
    4dc8:	20 81       	ld	r18, Z
    4dca:	22 fd       	sbrc	r18, 2
    4dcc:	1b c0       	rjmp	.+54     	; 0x4e04 <Endpoint_Read_Control_Stream_LE+0xd0>
    4dce:	cd cf       	rjmp	.-102    	; 0x4d6a <Endpoint_Read_Control_Stream_LE+0x36>
    4dd0:	8e b3       	in	r24, 0x1e	; 30
    4dd2:	88 23       	and	r24, r24
    4dd4:	99 f0       	breq	.+38     	; 0x4dfc <Endpoint_Read_Control_Stream_LE+0xc8>
    4dd6:	85 30       	cpi	r24, 0x05	; 5
    4dd8:	99 f0       	breq	.+38     	; 0x4e00 <Endpoint_Read_Control_Stream_LE+0xcc>
    4dda:	80 81       	ld	r24, Z
    4ddc:	80 ff       	sbrs	r24, 0
    4dde:	f8 cf       	rjmp	.-16     	; 0x4dd0 <Endpoint_Read_Control_Stream_LE+0x9c>
    4de0:	80 e0       	ldi	r24, 0x00	; 0
    4de2:	1b c0       	rjmp	.+54     	; 0x4e1a <Endpoint_Read_Control_Stream_LE+0xe6>
    4de4:	82 e0       	ldi	r24, 0x02	; 2
    4de6:	19 c0       	rjmp	.+50     	; 0x4e1a <Endpoint_Read_Control_Stream_LE+0xe6>
    4de8:	83 e0       	ldi	r24, 0x03	; 3
    4dea:	17 c0       	rjmp	.+46     	; 0x4e1a <Endpoint_Read_Control_Stream_LE+0xe6>
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	15 c0       	rjmp	.+42     	; 0x4e1a <Endpoint_Read_Control_Stream_LE+0xe6>
    4df0:	82 e0       	ldi	r24, 0x02	; 2
    4df2:	13 c0       	rjmp	.+38     	; 0x4e1a <Endpoint_Read_Control_Stream_LE+0xe6>
    4df4:	83 e0       	ldi	r24, 0x03	; 3
    4df6:	11 c0       	rjmp	.+34     	; 0x4e1a <Endpoint_Read_Control_Stream_LE+0xe6>
    4df8:	81 e0       	ldi	r24, 0x01	; 1
    4dfa:	0f c0       	rjmp	.+30     	; 0x4e1a <Endpoint_Read_Control_Stream_LE+0xe6>
    4dfc:	82 e0       	ldi	r24, 0x02	; 2
    4dfe:	0d c0       	rjmp	.+26     	; 0x4e1a <Endpoint_Read_Control_Stream_LE+0xe6>
    4e00:	83 e0       	ldi	r24, 0x03	; 3
    4e02:	0b c0       	rjmp	.+22     	; 0x4e1a <Endpoint_Read_Control_Stream_LE+0xe6>
    4e04:	ea 01       	movw	r28, r20
    4e06:	a8 81       	ld	r26, Y
    4e08:	e6 01       	movw	r28, r12
    4e0a:	28 81       	ld	r18, Y
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	3a 2b       	or	r19, r26
    4e10:	23 2b       	or	r18, r19
    4e12:	49 f2       	breq	.-110    	; 0x4da6 <Endpoint_Read_Control_Stream_LE+0x72>
    4e14:	a8 2f       	mov	r26, r24
    4e16:	b9 2f       	mov	r27, r25
    4e18:	b4 cf       	rjmp	.-152    	; 0x4d82 <Endpoint_Read_Control_Stream_LE+0x4e>
    4e1a:	df 91       	pop	r29
    4e1c:	cf 91       	pop	r28
    4e1e:	1f 91       	pop	r17
    4e20:	0f 91       	pop	r16
    4e22:	ff 90       	pop	r15
    4e24:	df 90       	pop	r13
    4e26:	cf 90       	pop	r12
    4e28:	08 95       	ret

00004e2a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    4e2a:	cf 92       	push	r12
    4e2c:	df 92       	push	r13
    4e2e:	ff 92       	push	r15
    4e30:	0f 93       	push	r16
    4e32:	1f 93       	push	r17
    4e34:	cf 93       	push	r28
    4e36:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    4e38:	20 91 73 08 	lds	r18, 0x0873
    4e3c:	30 91 74 08 	lds	r19, 0x0874
    4e40:	26 17       	cp	r18, r22
    4e42:	37 07       	cpc	r19, r23
    4e44:	58 f0       	brcs	.+22     	; 0x4e5c <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    4e46:	61 15       	cp	r22, r1
    4e48:	71 05       	cpc	r23, r1
    4e4a:	39 f4       	brne	.+14     	; 0x4e5a <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4e4c:	e8 ee       	ldi	r30, 0xE8	; 232
    4e4e:	f0 e0       	ldi	r31, 0x00	; 0
    4e50:	20 81       	ld	r18, Z
    4e52:	2e 77       	andi	r18, 0x7E	; 126
    4e54:	20 83       	st	Z, r18
    4e56:	9b 01       	movw	r18, r22
    4e58:	01 c0       	rjmp	.+2      	; 0x4e5c <Endpoint_Write_Control_PStream_LE+0x32>
    4e5a:	9b 01       	movw	r18, r22
    4e5c:	e8 2f       	mov	r30, r24
    4e5e:	f9 2f       	mov	r31, r25
    4e60:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4e62:	a8 ee       	ldi	r26, 0xE8	; 232
    4e64:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    4e66:	63 ef       	ldi	r22, 0xF3	; 243
    4e68:	70 e0       	ldi	r23, 0x00	; 0
    4e6a:	42 ef       	ldi	r20, 0xF2	; 242
    4e6c:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4e6e:	0f 2e       	mov	r0, r31
    4e70:	f1 ef       	ldi	r31, 0xF1	; 241
    4e72:	cf 2e       	mov	r12, r31
    4e74:	d1 2c       	mov	r13, r1
    4e76:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    4e78:	01 e0       	ldi	r16, 0x01	; 1
    4e7a:	f1 2c       	mov	r15, r1
    4e7c:	33 c0       	rjmp	.+102    	; 0x4ee4 <Endpoint_Write_Control_PStream_LE+0xba>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4e7e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4e80:	88 23       	and	r24, r24
    4e82:	09 f4       	brne	.+2      	; 0x4e86 <Endpoint_Write_Control_PStream_LE+0x5c>
    4e84:	42 c0       	rjmp	.+132    	; 0x4f0a <Endpoint_Write_Control_PStream_LE+0xe0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4e86:	85 30       	cpi	r24, 0x05	; 5
    4e88:	09 f4       	brne	.+2      	; 0x4e8c <Endpoint_Write_Control_PStream_LE+0x62>
    4e8a:	41 c0       	rjmp	.+130    	; 0x4f0e <Endpoint_Write_Control_PStream_LE+0xe4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4e8c:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    4e8e:	83 fd       	sbrc	r24, 3
    4e90:	40 c0       	rjmp	.+128    	; 0x4f12 <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4e92:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    4e94:	82 ff       	sbrs	r24, 2
    4e96:	03 c0       	rjmp	.+6      	; 0x4e9e <Endpoint_Write_Control_PStream_LE+0x74>
    4e98:	e8 ee       	ldi	r30, 0xE8	; 232
    4e9a:	f0 e0       	ldi	r31, 0x00	; 0
    4e9c:	31 c0       	rjmp	.+98     	; 0x4f00 <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    4e9e:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    4ea0:	80 ff       	sbrs	r24, 0
    4ea2:	20 c0       	rjmp	.+64     	; 0x4ee4 <Endpoint_Write_Control_PStream_LE+0xba>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    4ea4:	eb 01       	movw	r28, r22
    4ea6:	18 81       	ld	r17, Y
    4ea8:	ea 01       	movw	r28, r20
    4eaa:	88 81       	ld	r24, Y
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    4eb0:	21 15       	cp	r18, r1
    4eb2:	31 05       	cpc	r19, r1
    4eb4:	81 f0       	breq	.+32     	; 0x4ed6 <Endpoint_Write_Control_PStream_LE+0xac>
    4eb6:	88 30       	cpi	r24, 0x08	; 8
    4eb8:	91 05       	cpc	r25, r1
    4eba:	68 f4       	brcc	.+26     	; 0x4ed6 <Endpoint_Write_Control_PStream_LE+0xac>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    4ebc:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4ebe:	e6 01       	movw	r28, r12
    4ec0:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    4ec2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    4ec4:	21 50       	subi	r18, 0x01	; 1
    4ec6:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    4ec8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    4eca:	21 15       	cp	r18, r1
    4ecc:	31 05       	cpc	r19, r1
    4ece:	19 f0       	breq	.+6      	; 0x4ed6 <Endpoint_Write_Control_PStream_LE+0xac>
    4ed0:	88 30       	cpi	r24, 0x08	; 8
    4ed2:	91 05       	cpc	r25, r1
    4ed4:	99 f7       	brne	.-26     	; 0x4ebc <Endpoint_Write_Control_PStream_LE+0x92>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    4ed6:	10 2f       	mov	r17, r16
    4ed8:	08 97       	sbiw	r24, 0x08	; 8
    4eda:	09 f0       	breq	.+2      	; 0x4ede <Endpoint_Write_Control_PStream_LE+0xb4>
    4edc:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4ede:	8c 91       	ld	r24, X
    4ee0:	8e 77       	andi	r24, 0x7E	; 126
    4ee2:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    4ee4:	21 15       	cp	r18, r1
    4ee6:	31 05       	cpc	r19, r1
    4ee8:	51 f6       	brne	.-108    	; 0x4e7e <Endpoint_Write_Control_PStream_LE+0x54>
    4eea:	11 11       	cpse	r17, r1
    4eec:	c8 cf       	rjmp	.-112    	; 0x4e7e <Endpoint_Write_Control_PStream_LE+0x54>
    4eee:	d4 cf       	rjmp	.-88     	; 0x4e98 <Endpoint_Write_Control_PStream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    4ef0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    4ef2:	88 23       	and	r24, r24
    4ef4:	81 f0       	breq	.+32     	; 0x4f16 <Endpoint_Write_Control_PStream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    4ef6:	85 30       	cpi	r24, 0x05	; 5
    4ef8:	81 f0       	breq	.+32     	; 0x4f1a <Endpoint_Write_Control_PStream_LE+0xf0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4efa:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    4efc:	83 fd       	sbrc	r24, 3
    4efe:	0f c0       	rjmp	.+30     	; 0x4f1e <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    4f00:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    4f02:	82 ff       	sbrs	r24, 2
    4f04:	f5 cf       	rjmp	.-22     	; 0x4ef0 <Endpoint_Write_Control_PStream_LE+0xc6>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    4f06:	80 e0       	ldi	r24, 0x00	; 0
    4f08:	0b c0       	rjmp	.+22     	; 0x4f20 <Endpoint_Write_Control_PStream_LE+0xf6>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    4f0a:	82 e0       	ldi	r24, 0x02	; 2
    4f0c:	09 c0       	rjmp	.+18     	; 0x4f20 <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    4f0e:	83 e0       	ldi	r24, 0x03	; 3
    4f10:	07 c0       	rjmp	.+14     	; 0x4f20 <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    4f12:	81 e0       	ldi	r24, 0x01	; 1
    4f14:	05 c0       	rjmp	.+10     	; 0x4f20 <Endpoint_Write_Control_PStream_LE+0xf6>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    4f16:	82 e0       	ldi	r24, 0x02	; 2
    4f18:	03 c0       	rjmp	.+6      	; 0x4f20 <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    4f1a:	83 e0       	ldi	r24, 0x03	; 3
    4f1c:	01 c0       	rjmp	.+2      	; 0x4f20 <Endpoint_Write_Control_PStream_LE+0xf6>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    4f1e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    4f20:	df 91       	pop	r29
    4f22:	cf 91       	pop	r28
    4f24:	1f 91       	pop	r17
    4f26:	0f 91       	pop	r16
    4f28:	ff 90       	pop	r15
    4f2a:	df 90       	pop	r13
    4f2c:	cf 90       	pop	r12
    4f2e:	08 95       	ret

00004f30 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    4f30:	8f 92       	push	r8
    4f32:	9f 92       	push	r9
    4f34:	bf 92       	push	r11
    4f36:	cf 92       	push	r12
    4f38:	df 92       	push	r13
    4f3a:	ef 92       	push	r14
    4f3c:	ff 92       	push	r15
    4f3e:	0f 93       	push	r16
    4f40:	1f 93       	push	r17
    4f42:	cf 93       	push	r28
    4f44:	df 93       	push	r29
    4f46:	87 30       	cpi	r24, 0x07	; 7
    4f48:	70 f1       	brcs	.+92     	; 0x4fa6 <Endpoint_ConfigureEndpoint_Prv+0x76>
    4f4a:	26 c0       	rjmp	.+76     	; 0x4f98 <Endpoint_ConfigureEndpoint_Prv+0x68>
    4f4c:	59 2f       	mov	r21, r25
    4f4e:	5f 70       	andi	r21, 0x0F	; 15
    4f50:	e8 01       	movw	r28, r16
    4f52:	58 83       	st	Y, r21
    4f54:	89 17       	cp	r24, r25
    4f56:	31 f0       	breq	.+12     	; 0x4f64 <Endpoint_ConfigureEndpoint_Prv+0x34>
    4f58:	e9 01       	movw	r28, r18
    4f5a:	d8 80       	ld	r13, Y
    4f5c:	50 81       	ld	r21, Z
    4f5e:	e4 01       	movw	r28, r8
    4f60:	78 81       	ld	r23, Y
    4f62:	03 c0       	rjmp	.+6      	; 0x4f6a <Endpoint_ConfigureEndpoint_Prv+0x3a>
    4f64:	5b 2d       	mov	r21, r11
    4f66:	d6 2e       	mov	r13, r22
    4f68:	7c 2d       	mov	r23, r12
    4f6a:	51 ff       	sbrs	r21, 1
    4f6c:	12 c0       	rjmp	.+36     	; 0x4f92 <Endpoint_ConfigureEndpoint_Prv+0x62>
    4f6e:	4c 91       	ld	r20, X
    4f70:	4e 7f       	andi	r20, 0xFE	; 254
    4f72:	4c 93       	st	X, r20
    4f74:	40 81       	ld	r20, Z
    4f76:	4d 7f       	andi	r20, 0xFD	; 253
    4f78:	40 83       	st	Z, r20
    4f7a:	4c 91       	ld	r20, X
    4f7c:	41 60       	ori	r20, 0x01	; 1
    4f7e:	4c 93       	st	X, r20
    4f80:	e9 01       	movw	r28, r18
    4f82:	d8 82       	st	Y, r13
    4f84:	50 83       	st	Z, r21
    4f86:	e4 01       	movw	r28, r8
    4f88:	78 83       	st	Y, r23
    4f8a:	e7 01       	movw	r28, r14
    4f8c:	58 81       	ld	r21, Y
    4f8e:	55 23       	and	r21, r21
    4f90:	44 f4       	brge	.+16     	; 0x4fa2 <Endpoint_ConfigureEndpoint_Prv+0x72>
    4f92:	9f 5f       	subi	r25, 0xFF	; 255
    4f94:	97 30       	cpi	r25, 0x07	; 7
    4f96:	d1 f6       	brne	.-76     	; 0x4f4c <Endpoint_ConfigureEndpoint_Prv+0x1c>
    4f98:	8f 70       	andi	r24, 0x0F	; 15
    4f9a:	80 93 e9 00 	sts	0x00E9, r24
    4f9e:	81 e0       	ldi	r24, 0x01	; 1
    4fa0:	1f c0       	rjmp	.+62     	; 0x4fe0 <Endpoint_ConfigureEndpoint_Prv+0xb0>
    4fa2:	80 e0       	ldi	r24, 0x00	; 0
    4fa4:	1d c0       	rjmp	.+58     	; 0x4fe0 <Endpoint_ConfigureEndpoint_Prv+0xb0>
    4fa6:	98 2f       	mov	r25, r24
    4fa8:	9f 70       	andi	r25, 0x0F	; 15
    4faa:	90 93 e9 00 	sts	0x00E9, r25
    4fae:	98 2f       	mov	r25, r24
    4fb0:	54 2f       	mov	r21, r20
    4fb2:	d6 2e       	mov	r13, r22
    4fb4:	70 e0       	ldi	r23, 0x00	; 0
    4fb6:	ab ee       	ldi	r26, 0xEB	; 235
    4fb8:	b0 e0       	ldi	r27, 0x00	; 0
    4fba:	ed ee       	ldi	r30, 0xED	; 237
    4fbc:	f0 e0       	ldi	r31, 0x00	; 0
    4fbe:	2c ee       	ldi	r18, 0xEC	; 236
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	0f 2e       	mov	r0, r31
    4fc4:	f0 ef       	ldi	r31, 0xF0	; 240
    4fc6:	8f 2e       	mov	r8, r31
    4fc8:	91 2c       	mov	r9, r1
    4fca:	f0 2d       	mov	r31, r0
    4fcc:	0f 2e       	mov	r0, r31
    4fce:	fe ee       	ldi	r31, 0xEE	; 238
    4fd0:	ef 2e       	mov	r14, r31
    4fd2:	f1 2c       	mov	r15, r1
    4fd4:	f0 2d       	mov	r31, r0
    4fd6:	09 ee       	ldi	r16, 0xE9	; 233
    4fd8:	10 e0       	ldi	r17, 0x00	; 0
    4fda:	b4 2e       	mov	r11, r20
    4fdc:	c1 2c       	mov	r12, r1
    4fde:	c5 cf       	rjmp	.-118    	; 0x4f6a <Endpoint_ConfigureEndpoint_Prv+0x3a>
    4fe0:	df 91       	pop	r29
    4fe2:	cf 91       	pop	r28
    4fe4:	1f 91       	pop	r17
    4fe6:	0f 91       	pop	r16
    4fe8:	ff 90       	pop	r15
    4fea:	ef 90       	pop	r14
    4fec:	df 90       	pop	r13
    4fee:	cf 90       	pop	r12
    4ff0:	bf 90       	pop	r11
    4ff2:	9f 90       	pop	r9
    4ff4:	8f 90       	pop	r8
    4ff6:	08 95       	ret

00004ff8 <Endpoint_ConfigureEndpointTable>:
    4ff8:	bf 92       	push	r11
    4ffa:	cf 92       	push	r12
    4ffc:	df 92       	push	r13
    4ffe:	ef 92       	push	r14
    5000:	ff 92       	push	r15
    5002:	0f 93       	push	r16
    5004:	1f 93       	push	r17
    5006:	cf 93       	push	r28
    5008:	df 93       	push	r29
    500a:	06 2f       	mov	r16, r22
    500c:	66 23       	and	r22, r22
    500e:	09 f4       	brne	.+2      	; 0x5012 <Endpoint_ConfigureEndpointTable+0x1a>
    5010:	41 c0       	rjmp	.+130    	; 0x5094 <Endpoint_ConfigureEndpointTable+0x9c>
    5012:	c8 2f       	mov	r28, r24
    5014:	d9 2f       	mov	r29, r25
    5016:	10 e0       	ldi	r17, 0x00	; 0
    5018:	f1 2c       	mov	r15, r1
    501a:	68 94       	set
    501c:	dd 24       	eor	r13, r13
    501e:	d3 f8       	bld	r13, 3
    5020:	e1 2c       	mov	r14, r1
    5022:	68 94       	set
    5024:	bb 24       	eor	r11, r11
    5026:	b1 f8       	bld	r11, 1
    5028:	0f 2e       	mov	r0, r31
    502a:	f6 e0       	ldi	r31, 0x06	; 6
    502c:	cf 2e       	mov	r12, r31
    502e:	f0 2d       	mov	r31, r0
    5030:	58 81       	ld	r21, Y
    5032:	55 23       	and	r21, r21
    5034:	51 f1       	breq	.+84     	; 0x508a <Endpoint_ConfigureEndpointTable+0x92>
    5036:	9c 81       	ldd	r25, Y+4	; 0x04
    5038:	e9 81       	ldd	r30, Y+1	; 0x01
    503a:	fa 81       	ldd	r31, Y+2	; 0x02
    503c:	7b 81       	ldd	r23, Y+3	; 0x03
    503e:	85 2f       	mov	r24, r21
    5040:	8f 70       	andi	r24, 0x0F	; 15
    5042:	87 30       	cpi	r24, 0x07	; 7
    5044:	48 f5       	brcc	.+82     	; 0x5098 <Endpoint_ConfigureEndpointTable+0xa0>
    5046:	92 30       	cpi	r25, 0x02	; 2
    5048:	10 f0       	brcs	.+4      	; 0x504e <Endpoint_ConfigureEndpointTable+0x56>
    504a:	4c 2d       	mov	r20, r12
    504c:	01 c0       	rjmp	.+2      	; 0x5050 <Endpoint_ConfigureEndpointTable+0x58>
    504e:	4b 2d       	mov	r20, r11
    5050:	e9 30       	cpi	r30, 0x09	; 9
    5052:	f1 05       	cpc	r31, r1
    5054:	50 f0       	brcs	.+20     	; 0x506a <Endpoint_ConfigureEndpointTable+0x72>
    5056:	2d 2d       	mov	r18, r13
    5058:	3e 2d       	mov	r19, r14
    505a:	9f 2d       	mov	r25, r15
    505c:	9f 5f       	subi	r25, 0xFF	; 255
    505e:	22 0f       	add	r18, r18
    5060:	33 1f       	adc	r19, r19
    5062:	2e 17       	cp	r18, r30
    5064:	3f 07       	cpc	r19, r31
    5066:	d0 f3       	brcs	.-12     	; 0x505c <Endpoint_ConfigureEndpointTable+0x64>
    5068:	01 c0       	rjmp	.+2      	; 0x506c <Endpoint_ConfigureEndpointTable+0x74>
    506a:	9f 2d       	mov	r25, r15
    506c:	92 95       	swap	r25
    506e:	90 7f       	andi	r25, 0xF0	; 240
    5070:	49 2b       	or	r20, r25
    5072:	55 1f       	adc	r21, r21
    5074:	55 27       	eor	r21, r21
    5076:	55 1f       	adc	r21, r21
    5078:	90 e4       	ldi	r25, 0x40	; 64
    507a:	79 9f       	mul	r23, r25
    507c:	90 01       	movw	r18, r0
    507e:	11 24       	eor	r1, r1
    5080:	65 2f       	mov	r22, r21
    5082:	62 2b       	or	r22, r18
    5084:	55 df       	rcall	.-342    	; 0x4f30 <Endpoint_ConfigureEndpoint_Prv>
    5086:	88 23       	and	r24, r24
    5088:	51 f0       	breq	.+20     	; 0x509e <Endpoint_ConfigureEndpointTable+0xa6>
    508a:	1f 5f       	subi	r17, 0xFF	; 255
    508c:	25 96       	adiw	r28, 0x05	; 5
    508e:	10 13       	cpse	r17, r16
    5090:	cf cf       	rjmp	.-98     	; 0x5030 <Endpoint_ConfigureEndpointTable+0x38>
    5092:	04 c0       	rjmp	.+8      	; 0x509c <Endpoint_ConfigureEndpointTable+0xa4>
    5094:	81 e0       	ldi	r24, 0x01	; 1
    5096:	03 c0       	rjmp	.+6      	; 0x509e <Endpoint_ConfigureEndpointTable+0xa6>
    5098:	80 e0       	ldi	r24, 0x00	; 0
    509a:	01 c0       	rjmp	.+2      	; 0x509e <Endpoint_ConfigureEndpointTable+0xa6>
    509c:	81 e0       	ldi	r24, 0x01	; 1
    509e:	df 91       	pop	r29
    50a0:	cf 91       	pop	r28
    50a2:	1f 91       	pop	r17
    50a4:	0f 91       	pop	r16
    50a6:	ff 90       	pop	r15
    50a8:	ef 90       	pop	r14
    50aa:	df 90       	pop	r13
    50ac:	cf 90       	pop	r12
    50ae:	bf 90       	pop	r11
    50b0:	08 95       	ret

000050b2 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    50b2:	80 91 6d 08 	lds	r24, 0x086D
    50b6:	88 23       	and	r24, r24
    50b8:	1c f0       	brlt	.+6      	; 0x50c0 <Endpoint_ClearStatusStage+0xe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    50ba:	e8 ee       	ldi	r30, 0xE8	; 232
    50bc:	f0 e0       	ldi	r31, 0x00	; 0
    50be:	12 c0       	rjmp	.+36     	; 0x50e4 <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    50c0:	e8 ee       	ldi	r30, 0xE8	; 232
    50c2:	f0 e0       	ldi	r31, 0x00	; 0
    50c4:	03 c0       	rjmp	.+6      	; 0x50cc <Endpoint_ClearStatusStage+0x1a>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    50c6:	8e b3       	in	r24, 0x1e	; 30
    50c8:	88 23       	and	r24, r24
    50ca:	a1 f0       	breq	.+40     	; 0x50f4 <Endpoint_ClearStatusStage+0x42>
    50cc:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    50ce:	82 ff       	sbrs	r24, 2
    50d0:	fa cf       	rjmp	.-12     	; 0x50c6 <Endpoint_ClearStatusStage+0x14>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    50d2:	e8 ee       	ldi	r30, 0xE8	; 232
    50d4:	f0 e0       	ldi	r31, 0x00	; 0
    50d6:	80 81       	ld	r24, Z
    50d8:	8b 77       	andi	r24, 0x7B	; 123
    50da:	80 83       	st	Z, r24
    50dc:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    50de:	8e b3       	in	r24, 0x1e	; 30
    50e0:	88 23       	and	r24, r24
    50e2:	41 f0       	breq	.+16     	; 0x50f4 <Endpoint_ClearStatusStage+0x42>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    50e4:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    50e6:	80 ff       	sbrs	r24, 0
    50e8:	fa cf       	rjmp	.-12     	; 0x50de <Endpoint_ClearStatusStage+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    50ea:	e8 ee       	ldi	r30, 0xE8	; 232
    50ec:	f0 e0       	ldi	r31, 0x00	; 0
    50ee:	80 81       	ld	r24, Z
    50f0:	8e 77       	andi	r24, 0x7E	; 126
    50f2:	80 83       	st	Z, r24
    50f4:	08 95       	ret

000050f6 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    50f6:	0f 93       	push	r16
    50f8:	1f 93       	push	r17
    50fa:	cf 93       	push	r28
    50fc:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    50fe:	20 91 e4 00 	lds	r18, 0x00E4
    5102:	30 91 e5 00 	lds	r19, 0x00E5
    5106:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    5108:	ac ee       	ldi	r26, 0xEC	; 236
    510a:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    510c:	e8 ee       	ldi	r30, 0xE8	; 232
    510e:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    5110:	0b ee       	ldi	r16, 0xEB	; 235
    5112:	10 e0       	ldi	r17, 0x00	; 0
    5114:	44 ee       	ldi	r20, 0xE4	; 228
    5116:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    5118:	8c 91       	ld	r24, X
    511a:	80 fd       	sbrc	r24, 0
    511c:	20 c0       	rjmp	.+64     	; 0x515e <Endpoint_WaitUntilReady+0x68>
    511e:	23 c0       	rjmp	.+70     	; 0x5166 <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5120:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5122:	88 23       	and	r24, r24
    5124:	81 f0       	breq	.+32     	; 0x5146 <Endpoint_WaitUntilReady+0x50>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5126:	85 30       	cpi	r24, 0x05	; 5
    5128:	81 f0       	breq	.+32     	; 0x514a <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    512a:	e8 01       	movw	r28, r16
    512c:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    512e:	85 fd       	sbrc	r24, 5
    5130:	0e c0       	rjmp	.+28     	; 0x514e <Endpoint_WaitUntilReady+0x58>
    5132:	ea 01       	movw	r28, r20
    5134:	88 81       	ld	r24, Y
    5136:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    5138:	28 17       	cp	r18, r24
    513a:	39 07       	cpc	r19, r25
    513c:	69 f3       	breq	.-38     	; 0x5118 <Endpoint_WaitUntilReady+0x22>
    513e:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    5140:	41 f0       	breq	.+16     	; 0x5152 <Endpoint_WaitUntilReady+0x5c>
    5142:	9c 01       	movw	r18, r24
    5144:	e9 cf       	rjmp	.-46     	; 0x5118 <Endpoint_WaitUntilReady+0x22>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    5146:	82 e0       	ldi	r24, 0x02	; 2
    5148:	12 c0       	rjmp	.+36     	; 0x516e <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    514a:	83 e0       	ldi	r24, 0x03	; 3
    514c:	10 c0       	rjmp	.+32     	; 0x516e <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    514e:	81 e0       	ldi	r24, 0x01	; 1
    5150:	0e c0       	rjmp	.+28     	; 0x516e <Endpoint_WaitUntilReady+0x78>
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    5152:	84 e0       	ldi	r24, 0x04	; 4
    5154:	0c c0       	rjmp	.+24     	; 0x516e <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    5156:	80 e0       	ldi	r24, 0x00	; 0
    5158:	0a c0       	rjmp	.+20     	; 0x516e <Endpoint_WaitUntilReady+0x78>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    515a:	80 e0       	ldi	r24, 0x00	; 0
    515c:	08 c0       	rjmp	.+16     	; 0x516e <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    515e:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    5160:	80 ff       	sbrs	r24, 0
    5162:	de cf       	rjmp	.-68     	; 0x5120 <Endpoint_WaitUntilReady+0x2a>
    5164:	f8 cf       	rjmp	.-16     	; 0x5156 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5166:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    5168:	82 ff       	sbrs	r24, 2
    516a:	da cf       	rjmp	.-76     	; 0x5120 <Endpoint_WaitUntilReady+0x2a>
    516c:	f6 cf       	rjmp	.-20     	; 0x515a <Endpoint_WaitUntilReady+0x64>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    516e:	df 91       	pop	r29
    5170:	cf 91       	pop	r28
    5172:	1f 91       	pop	r17
    5174:	0f 91       	pop	r16
    5176:	08 95       	ret

00005178 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    5178:	0f 93       	push	r16
    517a:	1f 93       	push	r17
    517c:	cf 93       	push	r28
    517e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    5180:	4b d0       	rcall	.+150    	; 0x5218 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    5182:	52 d0       	rcall	.+164    	; 0x5228 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    5184:	c8 ed       	ldi	r28, 0xD8	; 216
    5186:	d0 e0       	ldi	r29, 0x00	; 0
    5188:	88 81       	ld	r24, Y
    518a:	8f 77       	andi	r24, 0x7F	; 127
    518c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    518e:	88 81       	ld	r24, Y
    5190:	80 68       	ori	r24, 0x80	; 128
    5192:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    5194:	88 81       	ld	r24, Y
    5196:	8f 7d       	andi	r24, 0xDF	; 223
    5198:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    519a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    519c:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    519e:	10 92 69 08 	sts	0x0869, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    51a2:	10 92 6b 08 	sts	0x086B, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    51a6:	10 92 6a 08 	sts	0x086A, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    51aa:	00 ee       	ldi	r16, 0xE0	; 224
    51ac:	10 e0       	ldi	r17, 0x00	; 0
    51ae:	f8 01       	movw	r30, r16
    51b0:	80 81       	ld	r24, Z
    51b2:	8b 7f       	andi	r24, 0xFB	; 251
    51b4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    51b6:	88 81       	ld	r24, Y
    51b8:	81 60       	ori	r24, 0x01	; 1
    51ba:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    51bc:	42 e0       	ldi	r20, 0x02	; 2
    51be:	60 e0       	ldi	r22, 0x00	; 0
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	b6 de       	rcall	.-660    	; 0x4f30 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    51c4:	e1 ee       	ldi	r30, 0xE1	; 225
    51c6:	f0 e0       	ldi	r31, 0x00	; 0
    51c8:	80 81       	ld	r24, Z
    51ca:	8e 7f       	andi	r24, 0xFE	; 254
    51cc:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    51ce:	e2 ee       	ldi	r30, 0xE2	; 226
    51d0:	f0 e0       	ldi	r31, 0x00	; 0
    51d2:	80 81       	ld	r24, Z
    51d4:	81 60       	ori	r24, 0x01	; 1
    51d6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    51d8:	80 81       	ld	r24, Z
    51da:	88 60       	ori	r24, 0x08	; 8
    51dc:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    51de:	f8 01       	movw	r30, r16
    51e0:	80 81       	ld	r24, Z
    51e2:	8e 7f       	andi	r24, 0xFE	; 254
    51e4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    51e6:	88 81       	ld	r24, Y
    51e8:	80 61       	ori	r24, 0x10	; 16
    51ea:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    51ec:	df 91       	pop	r29
    51ee:	cf 91       	pop	r28
    51f0:	1f 91       	pop	r17
    51f2:	0f 91       	pop	r16
    51f4:	08 95       	ret

000051f6 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    51f6:	e8 ed       	ldi	r30, 0xD8	; 216
    51f8:	f0 e0       	ldi	r31, 0x00	; 0
    51fa:	80 81       	ld	r24, Z
    51fc:	8f 7e       	andi	r24, 0xEF	; 239
    51fe:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    5200:	e7 ed       	ldi	r30, 0xD7	; 215
    5202:	f0 e0       	ldi	r31, 0x00	; 0
    5204:	80 81       	ld	r24, Z
    5206:	81 60       	ori	r24, 0x01	; 1
    5208:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    520a:	84 e0       	ldi	r24, 0x04	; 4
    520c:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    520e:	81 e0       	ldi	r24, 0x01	; 1
    5210:	80 93 6c 08 	sts	0x086C, r24

	USB_ResetInterface();
    5214:	b1 cf       	rjmp	.-158    	; 0x5178 <USB_ResetInterface>
    5216:	08 95       	ret

00005218 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    5218:	e8 ed       	ldi	r30, 0xD8	; 216
    521a:	f0 e0       	ldi	r31, 0x00	; 0
    521c:	80 81       	ld	r24, Z
    521e:	8e 7f       	andi	r24, 0xFE	; 254
    5220:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    5222:	10 92 e2 00 	sts	0x00E2, r1
    5226:	08 95       	ret

00005228 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    5228:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    522c:	10 92 e1 00 	sts	0x00E1, r1
    5230:	08 95       	ret

00005232 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    5232:	1f 92       	push	r1
    5234:	0f 92       	push	r0
    5236:	0f b6       	in	r0, 0x3f	; 63
    5238:	0f 92       	push	r0
    523a:	11 24       	eor	r1, r1
    523c:	2f 93       	push	r18
    523e:	3f 93       	push	r19
    5240:	4f 93       	push	r20
    5242:	5f 93       	push	r21
    5244:	6f 93       	push	r22
    5246:	7f 93       	push	r23
    5248:	8f 93       	push	r24
    524a:	9f 93       	push	r25
    524c:	af 93       	push	r26
    524e:	bf 93       	push	r27
    5250:	ef 93       	push	r30
    5252:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    5254:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    5258:	82 ff       	sbrs	r24, 2
    525a:	0a c0       	rjmp	.+20     	; 0x5270 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    525c:	80 91 e2 00 	lds	r24, 0x00E2
    5260:	82 ff       	sbrs	r24, 2
    5262:	06 c0       	rjmp	.+12     	; 0x5270 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    5264:	e1 ee       	ldi	r30, 0xE1	; 225
    5266:	f0 e0       	ldi	r31, 0x00	; 0
    5268:	80 81       	ld	r24, Z
    526a:	8b 7f       	andi	r24, 0xFB	; 251
    526c:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    526e:	47 d2       	rcall	.+1166   	; 0x56fe <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    5270:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    5274:	80 ff       	sbrs	r24, 0
    5276:	1c c0       	rjmp	.+56     	; 0x52b0 <__vector_10+0x7e>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    5278:	80 91 d8 00 	lds	r24, 0x00D8
    527c:	80 ff       	sbrs	r24, 0
    527e:	18 c0       	rjmp	.+48     	; 0x52b0 <__vector_10+0x7e>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    5280:	ea ed       	ldi	r30, 0xDA	; 218
    5282:	f0 e0       	ldi	r31, 0x00	; 0
    5284:	80 81       	ld	r24, Z
    5286:	8e 7f       	andi	r24, 0xFE	; 254
    5288:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    528a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    528e:	80 ff       	sbrs	r24, 0
    5290:	0b c0       	rjmp	.+22     	; 0x52a8 <__vector_10+0x76>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    5292:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    5294:	82 e0       	ldi	r24, 0x02	; 2
    5296:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    5298:	09 b4       	in	r0, 0x29	; 41
    529a:	00 fe       	sbrs	r0, 0
    529c:	fd cf       	rjmp	.-6      	; 0x5298 <__vector_10+0x66>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    52a2:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <EVENT_USB_Device_Connect>
    52a6:	04 c0       	rjmp	.+8      	; 0x52b0 <__vector_10+0x7e>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    52a8:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    52aa:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    52ac:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    52b0:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    52b4:	80 ff       	sbrs	r24, 0
    52b6:	15 c0       	rjmp	.+42     	; 0x52e2 <__vector_10+0xb0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    52b8:	80 91 e2 00 	lds	r24, 0x00E2
    52bc:	80 ff       	sbrs	r24, 0
    52be:	11 c0       	rjmp	.+34     	; 0x52e2 <__vector_10+0xb0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    52c0:	e2 ee       	ldi	r30, 0xE2	; 226
    52c2:	f0 e0       	ldi	r31, 0x00	; 0
    52c4:	80 81       	ld	r24, Z
    52c6:	8e 7f       	andi	r24, 0xFE	; 254
    52c8:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    52ca:	80 81       	ld	r24, Z
    52cc:	80 61       	ori	r24, 0x10	; 16
    52ce:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    52d0:	e8 ed       	ldi	r30, 0xD8	; 216
    52d2:	f0 e0       	ldi	r31, 0x00	; 0
    52d4:	80 81       	ld	r24, Z
    52d6:	80 62       	ori	r24, 0x20	; 32
    52d8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    52da:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    52dc:	85 e0       	ldi	r24, 0x05	; 5
    52de:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    52e0:	0e d2       	rcall	.+1052   	; 0x56fe <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    52e2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    52e6:	84 ff       	sbrs	r24, 4
    52e8:	2c c0       	rjmp	.+88     	; 0x5342 <__vector_10+0x110>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    52ea:	80 91 e2 00 	lds	r24, 0x00E2
    52ee:	84 ff       	sbrs	r24, 4
    52f0:	28 c0       	rjmp	.+80     	; 0x5342 <__vector_10+0x110>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    52f2:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    52f4:	82 e0       	ldi	r24, 0x02	; 2
    52f6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    52f8:	09 b4       	in	r0, 0x29	; 41
    52fa:	00 fe       	sbrs	r0, 0
    52fc:	fd cf       	rjmp	.-6      	; 0x52f8 <__vector_10+0xc6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    52fe:	e8 ed       	ldi	r30, 0xD8	; 216
    5300:	f0 e0       	ldi	r31, 0x00	; 0
    5302:	80 81       	ld	r24, Z
    5304:	8f 7d       	andi	r24, 0xDF	; 223
    5306:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    5308:	e1 ee       	ldi	r30, 0xE1	; 225
    530a:	f0 e0       	ldi	r31, 0x00	; 0
    530c:	80 81       	ld	r24, Z
    530e:	8f 7e       	andi	r24, 0xEF	; 239
    5310:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    5312:	e2 ee       	ldi	r30, 0xE2	; 226
    5314:	f0 e0       	ldi	r31, 0x00	; 0
    5316:	80 81       	ld	r24, Z
    5318:	8f 7e       	andi	r24, 0xEF	; 239
    531a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    531c:	80 81       	ld	r24, Z
    531e:	81 60       	ori	r24, 0x01	; 1
    5320:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    5322:	80 91 69 08 	lds	r24, 0x0869
    5326:	88 23       	and	r24, r24
    5328:	19 f0       	breq	.+6      	; 0x5330 <__vector_10+0xfe>
		  USB_DeviceState = DEVICE_STATE_Configured;
    532a:	84 e0       	ldi	r24, 0x04	; 4
    532c:	8e bb       	out	0x1e, r24	; 30
    532e:	08 c0       	rjmp	.+16     	; 0x5340 <__vector_10+0x10e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    5330:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    5334:	88 23       	and	r24, r24
    5336:	14 f4       	brge	.+4      	; 0x533c <__vector_10+0x10a>
    5338:	83 e0       	ldi	r24, 0x03	; 3
    533a:	01 c0       	rjmp	.+2      	; 0x533e <__vector_10+0x10c>
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    5340:	de d1       	rcall	.+956    	; 0x56fe <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    5342:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    5346:	83 ff       	sbrs	r24, 3
    5348:	22 c0       	rjmp	.+68     	; 0x538e <__vector_10+0x15c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    534a:	80 91 e2 00 	lds	r24, 0x00E2
    534e:	83 ff       	sbrs	r24, 3
    5350:	1e c0       	rjmp	.+60     	; 0x538e <__vector_10+0x15c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    5352:	e1 ee       	ldi	r30, 0xE1	; 225
    5354:	f0 e0       	ldi	r31, 0x00	; 0
    5356:	80 81       	ld	r24, Z
    5358:	87 7f       	andi	r24, 0xF7	; 247
    535a:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    535c:	82 e0       	ldi	r24, 0x02	; 2
    535e:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    5360:	10 92 69 08 	sts	0x0869, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    5364:	80 81       	ld	r24, Z
    5366:	8e 7f       	andi	r24, 0xFE	; 254
    5368:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    536a:	e2 ee       	ldi	r30, 0xE2	; 226
    536c:	f0 e0       	ldi	r31, 0x00	; 0
    536e:	80 81       	ld	r24, Z
    5370:	8e 7f       	andi	r24, 0xFE	; 254
    5372:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    5374:	80 81       	ld	r24, Z
    5376:	80 61       	ori	r24, 0x10	; 16
    5378:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    537a:	42 e0       	ldi	r20, 0x02	; 2
    537c:	60 e0       	ldi	r22, 0x00	; 0
    537e:	80 e0       	ldi	r24, 0x00	; 0
    5380:	d7 dd       	rcall	.-1106   	; 0x4f30 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    5382:	e0 ef       	ldi	r30, 0xF0	; 240
    5384:	f0 e0       	ldi	r31, 0x00	; 0
    5386:	80 81       	ld	r24, Z
    5388:	88 60       	ori	r24, 0x08	; 8
    538a:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    538c:	b8 d1       	rcall	.+880    	; 0x56fe <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    538e:	ff 91       	pop	r31
    5390:	ef 91       	pop	r30
    5392:	bf 91       	pop	r27
    5394:	af 91       	pop	r26
    5396:	9f 91       	pop	r25
    5398:	8f 91       	pop	r24
    539a:	7f 91       	pop	r23
    539c:	6f 91       	pop	r22
    539e:	5f 91       	pop	r21
    53a0:	4f 91       	pop	r20
    53a2:	3f 91       	pop	r19
    53a4:	2f 91       	pop	r18
    53a6:	0f 90       	pop	r0
    53a8:	0f be       	out	0x3f, r0	; 63
    53aa:	0f 90       	pop	r0
    53ac:	1f 90       	pop	r1
    53ae:	18 95       	reti

000053b0 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    53b0:	1f 92       	push	r1
    53b2:	0f 92       	push	r0
    53b4:	0f b6       	in	r0, 0x3f	; 63
    53b6:	0f 92       	push	r0
    53b8:	11 24       	eor	r1, r1
    53ba:	2f 93       	push	r18
    53bc:	3f 93       	push	r19
    53be:	4f 93       	push	r20
    53c0:	5f 93       	push	r21
    53c2:	6f 93       	push	r22
    53c4:	7f 93       	push	r23
    53c6:	8f 93       	push	r24
    53c8:	9f 93       	push	r25
    53ca:	af 93       	push	r26
    53cc:	bf 93       	push	r27
    53ce:	cf 93       	push	r28
    53d0:	ef 93       	push	r30
    53d2:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    53d4:	c0 91 e9 00 	lds	r28, 0x00E9
    53d8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    53da:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    53de:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    53e2:	e0 ef       	ldi	r30, 0xF0	; 240
    53e4:	f0 e0       	ldi	r31, 0x00	; 0
    53e6:	80 81       	ld	r24, Z
    53e8:	87 7f       	andi	r24, 0xF7	; 247
    53ea:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    53ec:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    53ee:	1b d0       	rcall	.+54     	; 0x5426 <USB_Device_ProcessControlRequest>
    53f0:	e9 ee       	ldi	r30, 0xE9	; 233
    53f2:	f0 e0       	ldi	r31, 0x00	; 0
    53f4:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    53f6:	a0 ef       	ldi	r26, 0xF0	; 240
    53f8:	b0 e0       	ldi	r27, 0x00	; 0
    53fa:	8c 91       	ld	r24, X
    53fc:	88 60       	ori	r24, 0x08	; 8
    53fe:	8c 93       	st	X, r24
    5400:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    5402:	ff 91       	pop	r31
    5404:	ef 91       	pop	r30
    5406:	cf 91       	pop	r28
    5408:	bf 91       	pop	r27
    540a:	af 91       	pop	r26
    540c:	9f 91       	pop	r25
    540e:	8f 91       	pop	r24
    5410:	7f 91       	pop	r23
    5412:	6f 91       	pop	r22
    5414:	5f 91       	pop	r21
    5416:	4f 91       	pop	r20
    5418:	3f 91       	pop	r19
    541a:	2f 91       	pop	r18
    541c:	0f 90       	pop	r0
    541e:	0f be       	out	0x3f, r0	; 63
    5420:	0f 90       	pop	r0
    5422:	1f 90       	pop	r1
    5424:	18 95       	reti

00005426 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    5426:	0f 93       	push	r16
    5428:	1f 93       	push	r17
    542a:	cf 93       	push	r28
    542c:	df 93       	push	r29
    542e:	cd b7       	in	r28, 0x3d	; 61
    5430:	de b7       	in	r29, 0x3e	; 62
    5432:	aa 97       	sbiw	r28, 0x2a	; 42
    5434:	0f b6       	in	r0, 0x3f	; 63
    5436:	f8 94       	cli
    5438:	de bf       	out	0x3e, r29	; 62
    543a:	0f be       	out	0x3f, r0	; 63
    543c:	cd bf       	out	0x3d, r28	; 61
    543e:	ed e6       	ldi	r30, 0x6D	; 109
    5440:	f8 e0       	ldi	r31, 0x08	; 8
    5442:	85 e7       	ldi	r24, 0x75	; 117
    5444:	98 e0       	ldi	r25, 0x08	; 8
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    5446:	a1 ef       	ldi	r26, 0xF1	; 241
    5448:	b0 e0       	ldi	r27, 0x00	; 0
    544a:	2c 91       	ld	r18, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    544c:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    544e:	e8 17       	cp	r30, r24
    5450:	f9 07       	cpc	r31, r25
    5452:	d9 f7       	brne	.-10     	; 0x544a <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    5454:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5458:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    545c:	83 ff       	sbrs	r24, 3
    545e:	2a c1       	rjmp	.+596    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    5460:	90 91 6d 08 	lds	r25, 0x086D

		switch (USB_ControlRequest.bRequest)
    5464:	80 91 6e 08 	lds	r24, 0x086E
    5468:	85 30       	cpi	r24, 0x05	; 5
    546a:	09 f4       	brne	.+2      	; 0x546e <USB_Device_ProcessControlRequest+0x48>
    546c:	78 c0       	rjmp	.+240    	; 0x555e <USB_Device_ProcessControlRequest+0x138>
    546e:	30 f4       	brcc	.+12     	; 0x547c <USB_Device_ProcessControlRequest+0x56>
    5470:	81 30       	cpi	r24, 0x01	; 1
    5472:	b1 f1       	breq	.+108    	; 0x54e0 <USB_Device_ProcessControlRequest+0xba>
    5474:	68 f0       	brcs	.+26     	; 0x5490 <USB_Device_ProcessControlRequest+0x6a>
    5476:	83 30       	cpi	r24, 0x03	; 3
    5478:	99 f1       	breq	.+102    	; 0x54e0 <USB_Device_ProcessControlRequest+0xba>
    547a:	1c c1       	rjmp	.+568    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
    547c:	88 30       	cpi	r24, 0x08	; 8
    547e:	09 f4       	brne	.+2      	; 0x5482 <USB_Device_ProcessControlRequest+0x5c>
    5480:	e8 c0       	rjmp	.+464    	; 0x5652 <USB_Device_ProcessControlRequest+0x22c>
    5482:	89 30       	cpi	r24, 0x09	; 9
    5484:	09 f4       	brne	.+2      	; 0x5488 <USB_Device_ProcessControlRequest+0x62>
    5486:	f5 c0       	rjmp	.+490    	; 0x5672 <USB_Device_ProcessControlRequest+0x24c>
    5488:	86 30       	cpi	r24, 0x06	; 6
    548a:	09 f0       	breq	.+2      	; 0x548e <USB_Device_ProcessControlRequest+0x68>
    548c:	13 c1       	rjmp	.+550    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
    548e:	89 c0       	rjmp	.+274    	; 0x55a2 <USB_Device_ProcessControlRequest+0x17c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    5490:	90 38       	cpi	r25, 0x80	; 128
    5492:	21 f0       	breq	.+8      	; 0x549c <USB_Device_ProcessControlRequest+0x76>
    5494:	92 38       	cpi	r25, 0x82	; 130
    5496:	09 f0       	breq	.+2      	; 0x549a <USB_Device_ProcessControlRequest+0x74>
    5498:	0d c1       	rjmp	.+538    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
    549a:	08 c0       	rjmp	.+16     	; 0x54ac <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    549c:	80 91 6a 08 	lds	r24, 0x086A
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    54a0:	90 91 6b 08 	lds	r25, 0x086B
    54a4:	99 23       	and	r25, r25
    54a6:	71 f0       	breq	.+28     	; 0x54c4 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    54a8:	82 60       	ori	r24, 0x02	; 2
    54aa:	0c c0       	rjmp	.+24     	; 0x54c4 <USB_Device_ProcessControlRequest+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    54ac:	80 91 71 08 	lds	r24, 0x0871
    54b0:	8f 70       	andi	r24, 0x0F	; 15
    54b2:	e9 ee       	ldi	r30, 0xE9	; 233
    54b4:	f0 e0       	ldi	r31, 0x00	; 0
    54b6:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    54b8:	80 91 eb 00 	lds	r24, 0x00EB
    54bc:	85 fb       	bst	r24, 5
    54be:	88 27       	eor	r24, r24
    54c0:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    54c2:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    54c4:	e8 ee       	ldi	r30, 0xE8	; 232
    54c6:	f0 e0       	ldi	r31, 0x00	; 0
    54c8:	90 81       	ld	r25, Z
    54ca:	97 7f       	andi	r25, 0xF7	; 247
    54cc:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    54ce:	a1 ef       	ldi	r26, 0xF1	; 241
    54d0:	b0 e0       	ldi	r27, 0x00	; 0
    54d2:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    54d4:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    54d6:	80 81       	ld	r24, Z
    54d8:	8e 77       	andi	r24, 0x7E	; 126
    54da:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    54dc:	ea dd       	rcall	.-1068   	; 0x50b2 <Endpoint_ClearStatusStage>
    54de:	ea c0       	rjmp	.+468    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    54e0:	99 23       	and	r25, r25
    54e2:	09 f4       	brne	.+2      	; 0x54e6 <USB_Device_ProcessControlRequest+0xc0>
    54e4:	f6 c0       	rjmp	.+492    	; 0x56d2 <USB_Device_ProcessControlRequest+0x2ac>
    54e6:	92 30       	cpi	r25, 0x02	; 2
    54e8:	09 f0       	breq	.+2      	; 0x54ec <USB_Device_ProcessControlRequest+0xc6>
    54ea:	e4 c0       	rjmp	.+456    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
    54ec:	f7 c0       	rjmp	.+494    	; 0x56dc <USB_Device_ProcessControlRequest+0x2b6>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    54ee:	91 e0       	ldi	r25, 0x01	; 1
    54f0:	83 30       	cpi	r24, 0x03	; 3
    54f2:	09 f0       	breq	.+2      	; 0x54f6 <USB_Device_ProcessControlRequest+0xd0>
    54f4:	90 e0       	ldi	r25, 0x00	; 0
    54f6:	90 93 6b 08 	sts	0x086B, r25
    54fa:	28 c0       	rjmp	.+80     	; 0x554c <USB_Device_ProcessControlRequest+0x126>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    54fc:	20 91 71 08 	lds	r18, 0x0871
    5500:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    5502:	09 f4       	brne	.+2      	; 0x5506 <USB_Device_ProcessControlRequest+0xe0>
    5504:	d7 c0       	rjmp	.+430    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5506:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    550a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    550e:	80 ff       	sbrs	r24, 0
    5510:	1d c0       	rjmp	.+58     	; 0x554c <USB_Device_ProcessControlRequest+0x126>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    5512:	80 91 6e 08 	lds	r24, 0x086E
    5516:	83 30       	cpi	r24, 0x03	; 3
    5518:	31 f4       	brne	.+12     	; 0x5526 <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    551a:	eb ee       	ldi	r30, 0xEB	; 235
    551c:	f0 e0       	ldi	r31, 0x00	; 0
    551e:	80 81       	ld	r24, Z
    5520:	80 62       	ori	r24, 0x20	; 32
    5522:	80 83       	st	Z, r24
    5524:	13 c0       	rjmp	.+38     	; 0x554c <USB_Device_ProcessControlRequest+0x126>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    5526:	eb ee       	ldi	r30, 0xEB	; 235
    5528:	f0 e0       	ldi	r31, 0x00	; 0
    552a:	80 81       	ld	r24, Z
    552c:	80 61       	ori	r24, 0x10	; 16
    552e:	80 83       	st	Z, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	02 c0       	rjmp	.+4      	; 0x553a <USB_Device_ProcessControlRequest+0x114>
    5536:	88 0f       	add	r24, r24
    5538:	99 1f       	adc	r25, r25
    553a:	2a 95       	dec	r18
    553c:	e2 f7       	brpl	.-8      	; 0x5536 <USB_Device_ProcessControlRequest+0x110>
    553e:	aa ee       	ldi	r26, 0xEA	; 234
    5540:	b0 e0       	ldi	r27, 0x00	; 0
    5542:	8c 93       	st	X, r24
				UERST = 0;
    5544:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    5546:	80 81       	ld	r24, Z
    5548:	88 60       	ori	r24, 0x08	; 8
    554a:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    554c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5550:	e8 ee       	ldi	r30, 0xE8	; 232
    5552:	f0 e0       	ldi	r31, 0x00	; 0
    5554:	80 81       	ld	r24, Z
    5556:	87 7f       	andi	r24, 0xF7	; 247
    5558:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    555a:	ab dd       	rcall	.-1194   	; 0x50b2 <Endpoint_ClearStatusStage>
    555c:	ab c0       	rjmp	.+342    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    555e:	91 11       	cpse	r25, r1
    5560:	a9 c0       	rjmp	.+338    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    5562:	10 91 6f 08 	lds	r17, 0x086F
    5566:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    5568:	e3 ee       	ldi	r30, 0xE3	; 227
    556a:	f0 e0       	ldi	r31, 0x00	; 0
    556c:	80 81       	ld	r24, Z
    556e:	80 78       	andi	r24, 0x80	; 128
    5570:	81 2b       	or	r24, r17
    5572:	80 83       	st	Z, r24
    5574:	e8 ee       	ldi	r30, 0xE8	; 232
    5576:	f0 e0       	ldi	r31, 0x00	; 0
    5578:	80 81       	ld	r24, Z
    557a:	87 7f       	andi	r24, 0xF7	; 247
    557c:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    557e:	99 dd       	rcall	.-1230   	; 0x50b2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5580:	e8 ee       	ldi	r30, 0xE8	; 232
    5582:	f0 e0       	ldi	r31, 0x00	; 0
    5584:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    5586:	80 ff       	sbrs	r24, 0
    5588:	fd cf       	rjmp	.-6      	; 0x5584 <USB_Device_ProcessControlRequest+0x15e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    558a:	e3 ee       	ldi	r30, 0xE3	; 227
    558c:	f0 e0       	ldi	r31, 0x00	; 0
    558e:	80 81       	ld	r24, Z
    5590:	80 68       	ori	r24, 0x80	; 128
    5592:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    5594:	11 23       	and	r17, r17
    5596:	11 f0       	breq	.+4      	; 0x559c <USB_Device_ProcessControlRequest+0x176>
    5598:	83 e0       	ldi	r24, 0x03	; 3
    559a:	01 c0       	rjmp	.+2      	; 0x559e <USB_Device_ProcessControlRequest+0x178>
    559c:	82 e0       	ldi	r24, 0x02	; 2
    559e:	8e bb       	out	0x1e, r24	; 30
    55a0:	89 c0       	rjmp	.+274    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    55a2:	90 58       	subi	r25, 0x80	; 128
    55a4:	92 30       	cpi	r25, 0x02	; 2
    55a6:	08 f0       	brcs	.+2      	; 0x55aa <USB_Device_ProcessControlRequest+0x184>
    55a8:	85 c0       	rjmp	.+266    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    55aa:	80 91 6f 08 	lds	r24, 0x086F
    55ae:	90 91 70 08 	lds	r25, 0x0870
    55b2:	8c 3d       	cpi	r24, 0xDC	; 220
    55b4:	23 e0       	ldi	r18, 0x03	; 3
    55b6:	92 07       	cpc	r25, r18
    55b8:	99 f5       	brne	.+102    	; 0x5620 <USB_Device_ProcessControlRequest+0x1fa>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    55ba:	83 e0       	ldi	r24, 0x03	; 3
    55bc:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    55be:	8a e2       	ldi	r24, 0x2A	; 42
    55c0:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    55c2:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    55c4:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    55c6:	de 01       	movw	r26, r28
    55c8:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    55ca:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    55cc:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    55ce:	41 e2       	ldi	r20, 0x21	; 33
    55d0:	e3 2f       	mov	r30, r19
    55d2:	f0 e0       	ldi	r31, 0x00	; 0
    55d4:	40 93 57 00 	sts	0x0057, r20
    55d8:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    55da:	20 ff       	sbrs	r18, 0
    55dc:	03 c0       	rjmp	.+6      	; 0x55e4 <USB_Device_ProcessControlRequest+0x1be>
					{
						SerialByte >>= 4;
    55de:	82 95       	swap	r24
    55e0:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    55e2:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    55e4:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    55e6:	8a 30       	cpi	r24, 0x0A	; 10
    55e8:	18 f0       	brcs	.+6      	; 0x55f0 <USB_Device_ProcessControlRequest+0x1ca>
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	c7 96       	adiw	r24, 0x37	; 55
    55ee:	02 c0       	rjmp	.+4      	; 0x55f4 <USB_Device_ProcessControlRequest+0x1ce>
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	c0 96       	adiw	r24, 0x30	; 48
    55f4:	8d 93       	st	X+, r24
    55f6:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    55f8:	2f 5f       	subi	r18, 0xFF	; 255
    55fa:	24 31       	cpi	r18, 0x14	; 20
    55fc:	49 f7       	brne	.-46     	; 0x55d0 <USB_Device_ProcessControlRequest+0x1aa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    55fe:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5600:	08 ee       	ldi	r16, 0xE8	; 232
    5602:	10 e0       	ldi	r17, 0x00	; 0
    5604:	f8 01       	movw	r30, r16
    5606:	80 81       	ld	r24, Z
    5608:	87 7f       	andi	r24, 0xF7	; 247
    560a:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    560c:	6a e2       	ldi	r22, 0x2A	; 42
    560e:	70 e0       	ldi	r23, 0x00	; 0
    5610:	ce 01       	movw	r24, r28
    5612:	01 96       	adiw	r24, 0x01	; 1
    5614:	0c db       	rcall	.-2536   	; 0x4c2e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5616:	f8 01       	movw	r30, r16
    5618:	80 81       	ld	r24, Z
    561a:	8b 77       	andi	r24, 0x7B	; 123
    561c:	80 83       	st	Z, r24
    561e:	4a c0       	rjmp	.+148    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    5620:	ae 01       	movw	r20, r28
    5622:	4f 5f       	subi	r20, 0xFF	; 255
    5624:	5f 4f       	sbci	r21, 0xFF	; 255
    5626:	60 91 71 08 	lds	r22, 0x0871
    562a:	0e 94 11 01 	call	0x222	; 0x222 <CALLBACK_USB_GetDescriptor>
    562e:	00 97       	sbiw	r24, 0x00	; 0
    5630:	09 f4       	brne	.+2      	; 0x5634 <USB_Device_ProcessControlRequest+0x20e>
    5632:	40 c0       	rjmp	.+128    	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5634:	08 ee       	ldi	r16, 0xE8	; 232
    5636:	10 e0       	ldi	r17, 0x00	; 0
    5638:	f8 01       	movw	r30, r16
    563a:	20 81       	ld	r18, Z
    563c:	27 7f       	andi	r18, 0xF7	; 247
    563e:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    5640:	bc 01       	movw	r22, r24
    5642:	89 81       	ldd	r24, Y+1	; 0x01
    5644:	9a 81       	ldd	r25, Y+2	; 0x02
    5646:	f1 db       	rcall	.-2078   	; 0x4e2a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5648:	f8 01       	movw	r30, r16
    564a:	80 81       	ld	r24, Z
    564c:	8b 77       	andi	r24, 0x7B	; 123
    564e:	80 83       	st	Z, r24
    5650:	31 c0       	rjmp	.+98     	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    5652:	90 38       	cpi	r25, 0x80	; 128
    5654:	79 f5       	brne	.+94     	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5656:	e8 ee       	ldi	r30, 0xE8	; 232
    5658:	f0 e0       	ldi	r31, 0x00	; 0
    565a:	80 81       	ld	r24, Z
    565c:	87 7f       	andi	r24, 0xF7	; 247
    565e:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    5660:	80 91 69 08 	lds	r24, 0x0869
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    5664:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5668:	80 81       	ld	r24, Z
    566a:	8e 77       	andi	r24, 0x7E	; 126
    566c:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    566e:	21 dd       	rcall	.-1470   	; 0x50b2 <Endpoint_ClearStatusStage>
    5670:	21 c0       	rjmp	.+66     	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    5672:	91 11       	cpse	r25, r1
    5674:	1f c0       	rjmp	.+62     	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    5676:	80 91 6f 08 	lds	r24, 0x086F
    567a:	82 30       	cpi	r24, 0x02	; 2
    567c:	d8 f4       	brcc	.+54     	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    567e:	e8 ee       	ldi	r30, 0xE8	; 232
    5680:	f0 e0       	ldi	r31, 0x00	; 0
    5682:	80 81       	ld	r24, Z
    5684:	87 7f       	andi	r24, 0xF7	; 247
    5686:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    5688:	80 91 6f 08 	lds	r24, 0x086F
    568c:	80 93 69 08 	sts	0x0869, r24

	Endpoint_ClearStatusStage();
    5690:	10 dd       	rcall	.-1504   	; 0x50b2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    5692:	80 91 69 08 	lds	r24, 0x0869
    5696:	88 23       	and	r24, r24
    5698:	19 f0       	breq	.+6      	; 0x56a0 <USB_Device_ProcessControlRequest+0x27a>
	  USB_DeviceState = DEVICE_STATE_Configured;
    569a:	84 e0       	ldi	r24, 0x04	; 4
    569c:	8e bb       	out	0x1e, r24	; 30
    569e:	08 c0       	rjmp	.+16     	; 0x56b0 <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    56a0:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    56a4:	88 23       	and	r24, r24
    56a6:	14 f4       	brge	.+4      	; 0x56ac <USB_Device_ProcessControlRequest+0x286>
    56a8:	84 e0       	ldi	r24, 0x04	; 4
    56aa:	01 c0       	rjmp	.+2      	; 0x56ae <USB_Device_ProcessControlRequest+0x288>
    56ac:	81 e0       	ldi	r24, 0x01	; 1
    56ae:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    56b0:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    56b4:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    56b8:	83 ff       	sbrs	r24, 3
    56ba:	16 c0       	rjmp	.+44     	; 0x56e8 <USB_Device_ProcessControlRequest+0x2c2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    56bc:	e8 ee       	ldi	r30, 0xE8	; 232
    56be:	f0 e0       	ldi	r31, 0x00	; 0
    56c0:	80 81       	ld	r24, Z
    56c2:	87 7f       	andi	r24, 0xF7	; 247
    56c4:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    56c6:	eb ee       	ldi	r30, 0xEB	; 235
    56c8:	f0 e0       	ldi	r31, 0x00	; 0
    56ca:	80 81       	ld	r24, Z
    56cc:	80 62       	ori	r24, 0x20	; 32
    56ce:	80 83       	st	Z, r24
    56d0:	0b c0       	rjmp	.+22     	; 0x56e8 <USB_Device_ProcessControlRequest+0x2c2>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    56d2:	90 91 6f 08 	lds	r25, 0x086F
    56d6:	91 30       	cpi	r25, 0x01	; 1
    56d8:	69 f7       	brne	.-38     	; 0x56b4 <USB_Device_ProcessControlRequest+0x28e>
    56da:	09 cf       	rjmp	.-494    	; 0x54ee <USB_Device_ProcessControlRequest+0xc8>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    56dc:	80 91 6f 08 	lds	r24, 0x086F
    56e0:	88 23       	and	r24, r24
    56e2:	09 f4       	brne	.+2      	; 0x56e6 <USB_Device_ProcessControlRequest+0x2c0>
    56e4:	0b cf       	rjmp	.-490    	; 0x54fc <USB_Device_ProcessControlRequest+0xd6>
    56e6:	32 cf       	rjmp	.-412    	; 0x554c <USB_Device_ProcessControlRequest+0x126>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    56e8:	aa 96       	adiw	r28, 0x2a	; 42
    56ea:	0f b6       	in	r0, 0x3f	; 63
    56ec:	f8 94       	cli
    56ee:	de bf       	out	0x3e, r29	; 62
    56f0:	0f be       	out	0x3f, r0	; 63
    56f2:	cd bf       	out	0x3d, r28	; 61
    56f4:	df 91       	pop	r29
    56f6:	cf 91       	pop	r28
    56f8:	1f 91       	pop	r17
    56fa:	0f 91       	pop	r16
    56fc:	08 95       	ret

000056fe <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    56fe:	08 95       	ret

00005700 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    5700:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    5702:	8e b3       	in	r24, 0x1e	; 30
    5704:	88 23       	and	r24, r24
    5706:	a1 f0       	breq	.+40     	; 0x5730 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    5708:	c0 91 e9 00 	lds	r28, 0x00E9
    570c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    570e:	80 91 ec 00 	lds	r24, 0x00EC
    5712:	80 ff       	sbrs	r24, 0
    5714:	02 c0       	rjmp	.+4      	; 0x571a <USB_USBTask+0x1a>
    5716:	80 e8       	ldi	r24, 0x80	; 128
    5718:	01 c0       	rjmp	.+2      	; 0x571c <USB_USBTask+0x1c>
    571a:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    571c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    571e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5722:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    5726:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    5728:	7e de       	rcall	.-772    	; 0x5426 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    572a:	cf 70       	andi	r28, 0x0F	; 15
    572c:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    5730:	cf 91       	pop	r28
    5732:	08 95       	ret

00005734 <__udivmodsi4>:
    5734:	a1 e2       	ldi	r26, 0x21	; 33
    5736:	1a 2e       	mov	r1, r26
    5738:	aa 1b       	sub	r26, r26
    573a:	bb 1b       	sub	r27, r27
    573c:	fd 01       	movw	r30, r26
    573e:	0d c0       	rjmp	.+26     	; 0x575a <__udivmodsi4_ep>

00005740 <__udivmodsi4_loop>:
    5740:	aa 1f       	adc	r26, r26
    5742:	bb 1f       	adc	r27, r27
    5744:	ee 1f       	adc	r30, r30
    5746:	ff 1f       	adc	r31, r31
    5748:	a2 17       	cp	r26, r18
    574a:	b3 07       	cpc	r27, r19
    574c:	e4 07       	cpc	r30, r20
    574e:	f5 07       	cpc	r31, r21
    5750:	20 f0       	brcs	.+8      	; 0x575a <__udivmodsi4_ep>
    5752:	a2 1b       	sub	r26, r18
    5754:	b3 0b       	sbc	r27, r19
    5756:	e4 0b       	sbc	r30, r20
    5758:	f5 0b       	sbc	r31, r21

0000575a <__udivmodsi4_ep>:
    575a:	66 1f       	adc	r22, r22
    575c:	77 1f       	adc	r23, r23
    575e:	88 1f       	adc	r24, r24
    5760:	99 1f       	adc	r25, r25
    5762:	1a 94       	dec	r1
    5764:	69 f7       	brne	.-38     	; 0x5740 <__udivmodsi4_loop>
    5766:	60 95       	com	r22
    5768:	70 95       	com	r23
    576a:	80 95       	com	r24
    576c:	90 95       	com	r25
    576e:	9b 01       	movw	r18, r22
    5770:	ac 01       	movw	r20, r24
    5772:	bd 01       	movw	r22, r26
    5774:	cf 01       	movw	r24, r30
    5776:	08 95       	ret

00005778 <__muluhisi3>:
    5778:	09 d0       	rcall	.+18     	; 0x578c <__umulhisi3>
    577a:	a5 9f       	mul	r26, r21
    577c:	90 0d       	add	r25, r0
    577e:	b4 9f       	mul	r27, r20
    5780:	90 0d       	add	r25, r0
    5782:	a4 9f       	mul	r26, r20
    5784:	80 0d       	add	r24, r0
    5786:	91 1d       	adc	r25, r1
    5788:	11 24       	eor	r1, r1
    578a:	08 95       	ret

0000578c <__umulhisi3>:
    578c:	a2 9f       	mul	r26, r18
    578e:	b0 01       	movw	r22, r0
    5790:	b3 9f       	mul	r27, r19
    5792:	c0 01       	movw	r24, r0
    5794:	a3 9f       	mul	r26, r19
    5796:	70 0d       	add	r23, r0
    5798:	81 1d       	adc	r24, r1
    579a:	11 24       	eor	r1, r1
    579c:	91 1d       	adc	r25, r1
    579e:	b2 9f       	mul	r27, r18
    57a0:	70 0d       	add	r23, r0
    57a2:	81 1d       	adc	r24, r1
    57a4:	11 24       	eor	r1, r1
    57a6:	91 1d       	adc	r25, r1
    57a8:	08 95       	ret

000057aa <memcmp>:
    57aa:	fb 01       	movw	r30, r22
    57ac:	dc 01       	movw	r26, r24
    57ae:	04 c0       	rjmp	.+8      	; 0x57b8 <memcmp+0xe>
    57b0:	8d 91       	ld	r24, X+
    57b2:	01 90       	ld	r0, Z+
    57b4:	80 19       	sub	r24, r0
    57b6:	21 f4       	brne	.+8      	; 0x57c0 <memcmp+0x16>
    57b8:	41 50       	subi	r20, 0x01	; 1
    57ba:	50 40       	sbci	r21, 0x00	; 0
    57bc:	c8 f7       	brcc	.-14     	; 0x57b0 <memcmp+0x6>
    57be:	88 1b       	sub	r24, r24
    57c0:	99 0b       	sbc	r25, r25
    57c2:	08 95       	ret

000057c4 <memcpy>:
    57c4:	fb 01       	movw	r30, r22
    57c6:	dc 01       	movw	r26, r24
    57c8:	02 c0       	rjmp	.+4      	; 0x57ce <memcpy+0xa>
    57ca:	01 90       	ld	r0, Z+
    57cc:	0d 92       	st	X+, r0
    57ce:	41 50       	subi	r20, 0x01	; 1
    57d0:	50 40       	sbci	r21, 0x00	; 0
    57d2:	d8 f7       	brcc	.-10     	; 0x57ca <memcpy+0x6>
    57d4:	08 95       	ret

000057d6 <memset>:
    57d6:	dc 01       	movw	r26, r24
    57d8:	01 c0       	rjmp	.+2      	; 0x57dc <memset+0x6>
    57da:	6d 93       	st	X+, r22
    57dc:	41 50       	subi	r20, 0x01	; 1
    57de:	50 40       	sbci	r21, 0x00	; 0
    57e0:	e0 f7       	brcc	.-8      	; 0x57da <memset+0x4>
    57e2:	08 95       	ret

000057e4 <printf_P>:
    57e4:	a0 e0       	ldi	r26, 0x00	; 0
    57e6:	b0 e0       	ldi	r27, 0x00	; 0
    57e8:	e7 ef       	ldi	r30, 0xF7	; 247
    57ea:	fb e2       	ldi	r31, 0x2B	; 43
    57ec:	c2 c2       	rjmp	.+1412   	; 0x5d72 <__prologue_saves__+0x1c>
    57ee:	fe 01       	movw	r30, r28
    57f0:	37 96       	adiw	r30, 0x07	; 7
    57f2:	61 91       	ld	r22, Z+
    57f4:	71 91       	ld	r23, Z+
    57f6:	07 e7       	ldi	r16, 0x77	; 119
    57f8:	18 e0       	ldi	r17, 0x08	; 8
    57fa:	d8 01       	movw	r26, r16
    57fc:	8d 91       	ld	r24, X+
    57fe:	9c 91       	ld	r25, X
    5800:	dc 01       	movw	r26, r24
    5802:	13 96       	adiw	r26, 0x03	; 3
    5804:	2c 91       	ld	r18, X
    5806:	13 97       	sbiw	r26, 0x03	; 3
    5808:	28 60       	ori	r18, 0x08	; 8
    580a:	13 96       	adiw	r26, 0x03	; 3
    580c:	2c 93       	st	X, r18
    580e:	af 01       	movw	r20, r30
    5810:	27 d0       	rcall	.+78     	; 0x5860 <vfprintf>
    5812:	d8 01       	movw	r26, r16
    5814:	ed 91       	ld	r30, X+
    5816:	fc 91       	ld	r31, X
    5818:	23 81       	ldd	r18, Z+3	; 0x03
    581a:	27 7f       	andi	r18, 0xF7	; 247
    581c:	23 83       	std	Z+3, r18	; 0x03
    581e:	e4 e0       	ldi	r30, 0x04	; 4
    5820:	c4 c2       	rjmp	.+1416   	; 0x5daa <__epilogue_restores__+0x1c>

00005822 <sprintf>:
    5822:	ae e0       	ldi	r26, 0x0E	; 14
    5824:	b0 e0       	ldi	r27, 0x00	; 0
    5826:	e6 e1       	ldi	r30, 0x16	; 22
    5828:	fc e2       	ldi	r31, 0x2C	; 44
    582a:	a3 c2       	rjmp	.+1350   	; 0x5d72 <__prologue_saves__+0x1c>
    582c:	0d 89       	ldd	r16, Y+21	; 0x15
    582e:	1e 89       	ldd	r17, Y+22	; 0x16
    5830:	86 e0       	ldi	r24, 0x06	; 6
    5832:	8c 83       	std	Y+4, r24	; 0x04
    5834:	1a 83       	std	Y+2, r17	; 0x02
    5836:	09 83       	std	Y+1, r16	; 0x01
    5838:	8f ef       	ldi	r24, 0xFF	; 255
    583a:	9f e7       	ldi	r25, 0x7F	; 127
    583c:	9e 83       	std	Y+6, r25	; 0x06
    583e:	8d 83       	std	Y+5, r24	; 0x05
    5840:	ae 01       	movw	r20, r28
    5842:	47 5e       	subi	r20, 0xE7	; 231
    5844:	5f 4f       	sbci	r21, 0xFF	; 255
    5846:	6f 89       	ldd	r22, Y+23	; 0x17
    5848:	78 8d       	ldd	r23, Y+24	; 0x18
    584a:	ce 01       	movw	r24, r28
    584c:	01 96       	adiw	r24, 0x01	; 1
    584e:	08 d0       	rcall	.+16     	; 0x5860 <vfprintf>
    5850:	ef 81       	ldd	r30, Y+7	; 0x07
    5852:	f8 85       	ldd	r31, Y+8	; 0x08
    5854:	e0 0f       	add	r30, r16
    5856:	f1 1f       	adc	r31, r17
    5858:	10 82       	st	Z, r1
    585a:	2e 96       	adiw	r28, 0x0e	; 14
    585c:	e4 e0       	ldi	r30, 0x04	; 4
    585e:	a5 c2       	rjmp	.+1354   	; 0x5daa <__epilogue_restores__+0x1c>

00005860 <vfprintf>:
    5860:	ac e0       	ldi	r26, 0x0C	; 12
    5862:	b0 e0       	ldi	r27, 0x00	; 0
    5864:	e5 e3       	ldi	r30, 0x35	; 53
    5866:	fc e2       	ldi	r31, 0x2C	; 44
    5868:	76 c2       	rjmp	.+1260   	; 0x5d56 <__prologue_saves__>
    586a:	7c 01       	movw	r14, r24
    586c:	6b 01       	movw	r12, r22
    586e:	8a 01       	movw	r16, r20
    5870:	fc 01       	movw	r30, r24
    5872:	17 82       	std	Z+7, r1	; 0x07
    5874:	16 82       	std	Z+6, r1	; 0x06
    5876:	83 81       	ldd	r24, Z+3	; 0x03
    5878:	81 ff       	sbrs	r24, 1
    587a:	b0 c1       	rjmp	.+864    	; 0x5bdc <vfprintf+0x37c>
    587c:	ce 01       	movw	r24, r28
    587e:	01 96       	adiw	r24, 0x01	; 1
    5880:	4c 01       	movw	r8, r24
    5882:	f7 01       	movw	r30, r14
    5884:	93 81       	ldd	r25, Z+3	; 0x03
    5886:	f6 01       	movw	r30, r12
    5888:	93 fd       	sbrc	r25, 3
    588a:	85 91       	lpm	r24, Z+
    588c:	93 ff       	sbrs	r25, 3
    588e:	81 91       	ld	r24, Z+
    5890:	6f 01       	movw	r12, r30
    5892:	88 23       	and	r24, r24
    5894:	09 f4       	brne	.+2      	; 0x5898 <vfprintf+0x38>
    5896:	9e c1       	rjmp	.+828    	; 0x5bd4 <vfprintf+0x374>
    5898:	85 32       	cpi	r24, 0x25	; 37
    589a:	39 f4       	brne	.+14     	; 0x58aa <vfprintf+0x4a>
    589c:	93 fd       	sbrc	r25, 3
    589e:	85 91       	lpm	r24, Z+
    58a0:	93 ff       	sbrs	r25, 3
    58a2:	81 91       	ld	r24, Z+
    58a4:	6f 01       	movw	r12, r30
    58a6:	85 32       	cpi	r24, 0x25	; 37
    58a8:	21 f4       	brne	.+8      	; 0x58b2 <vfprintf+0x52>
    58aa:	b7 01       	movw	r22, r14
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	c3 d1       	rcall	.+902    	; 0x5c36 <fputc>
    58b0:	e8 cf       	rjmp	.-48     	; 0x5882 <vfprintf+0x22>
    58b2:	51 2c       	mov	r5, r1
    58b4:	31 2c       	mov	r3, r1
    58b6:	20 e0       	ldi	r18, 0x00	; 0
    58b8:	20 32       	cpi	r18, 0x20	; 32
    58ba:	a0 f4       	brcc	.+40     	; 0x58e4 <vfprintf+0x84>
    58bc:	8b 32       	cpi	r24, 0x2B	; 43
    58be:	69 f0       	breq	.+26     	; 0x58da <vfprintf+0x7a>
    58c0:	30 f4       	brcc	.+12     	; 0x58ce <vfprintf+0x6e>
    58c2:	80 32       	cpi	r24, 0x20	; 32
    58c4:	59 f0       	breq	.+22     	; 0x58dc <vfprintf+0x7c>
    58c6:	83 32       	cpi	r24, 0x23	; 35
    58c8:	69 f4       	brne	.+26     	; 0x58e4 <vfprintf+0x84>
    58ca:	20 61       	ori	r18, 0x10	; 16
    58cc:	2c c0       	rjmp	.+88     	; 0x5926 <vfprintf+0xc6>
    58ce:	8d 32       	cpi	r24, 0x2D	; 45
    58d0:	39 f0       	breq	.+14     	; 0x58e0 <vfprintf+0x80>
    58d2:	80 33       	cpi	r24, 0x30	; 48
    58d4:	39 f4       	brne	.+14     	; 0x58e4 <vfprintf+0x84>
    58d6:	21 60       	ori	r18, 0x01	; 1
    58d8:	26 c0       	rjmp	.+76     	; 0x5926 <vfprintf+0xc6>
    58da:	22 60       	ori	r18, 0x02	; 2
    58dc:	24 60       	ori	r18, 0x04	; 4
    58de:	23 c0       	rjmp	.+70     	; 0x5926 <vfprintf+0xc6>
    58e0:	28 60       	ori	r18, 0x08	; 8
    58e2:	21 c0       	rjmp	.+66     	; 0x5926 <vfprintf+0xc6>
    58e4:	27 fd       	sbrc	r18, 7
    58e6:	27 c0       	rjmp	.+78     	; 0x5936 <vfprintf+0xd6>
    58e8:	30 ed       	ldi	r19, 0xD0	; 208
    58ea:	38 0f       	add	r19, r24
    58ec:	3a 30       	cpi	r19, 0x0A	; 10
    58ee:	78 f4       	brcc	.+30     	; 0x590e <vfprintf+0xae>
    58f0:	26 ff       	sbrs	r18, 6
    58f2:	06 c0       	rjmp	.+12     	; 0x5900 <vfprintf+0xa0>
    58f4:	fa e0       	ldi	r31, 0x0A	; 10
    58f6:	5f 9e       	mul	r5, r31
    58f8:	30 0d       	add	r19, r0
    58fa:	11 24       	eor	r1, r1
    58fc:	53 2e       	mov	r5, r19
    58fe:	13 c0       	rjmp	.+38     	; 0x5926 <vfprintf+0xc6>
    5900:	8a e0       	ldi	r24, 0x0A	; 10
    5902:	38 9e       	mul	r3, r24
    5904:	30 0d       	add	r19, r0
    5906:	11 24       	eor	r1, r1
    5908:	33 2e       	mov	r3, r19
    590a:	20 62       	ori	r18, 0x20	; 32
    590c:	0c c0       	rjmp	.+24     	; 0x5926 <vfprintf+0xc6>
    590e:	8e 32       	cpi	r24, 0x2E	; 46
    5910:	21 f4       	brne	.+8      	; 0x591a <vfprintf+0xba>
    5912:	26 fd       	sbrc	r18, 6
    5914:	5f c1       	rjmp	.+702    	; 0x5bd4 <vfprintf+0x374>
    5916:	20 64       	ori	r18, 0x40	; 64
    5918:	06 c0       	rjmp	.+12     	; 0x5926 <vfprintf+0xc6>
    591a:	8c 36       	cpi	r24, 0x6C	; 108
    591c:	11 f4       	brne	.+4      	; 0x5922 <vfprintf+0xc2>
    591e:	20 68       	ori	r18, 0x80	; 128
    5920:	02 c0       	rjmp	.+4      	; 0x5926 <vfprintf+0xc6>
    5922:	88 36       	cpi	r24, 0x68	; 104
    5924:	41 f4       	brne	.+16     	; 0x5936 <vfprintf+0xd6>
    5926:	f6 01       	movw	r30, r12
    5928:	93 fd       	sbrc	r25, 3
    592a:	85 91       	lpm	r24, Z+
    592c:	93 ff       	sbrs	r25, 3
    592e:	81 91       	ld	r24, Z+
    5930:	6f 01       	movw	r12, r30
    5932:	81 11       	cpse	r24, r1
    5934:	c1 cf       	rjmp	.-126    	; 0x58b8 <vfprintf+0x58>
    5936:	98 2f       	mov	r25, r24
    5938:	9f 7d       	andi	r25, 0xDF	; 223
    593a:	95 54       	subi	r25, 0x45	; 69
    593c:	93 30       	cpi	r25, 0x03	; 3
    593e:	28 f4       	brcc	.+10     	; 0x594a <vfprintf+0xea>
    5940:	0c 5f       	subi	r16, 0xFC	; 252
    5942:	1f 4f       	sbci	r17, 0xFF	; 255
    5944:	ff e3       	ldi	r31, 0x3F	; 63
    5946:	f9 83       	std	Y+1, r31	; 0x01
    5948:	0d c0       	rjmp	.+26     	; 0x5964 <vfprintf+0x104>
    594a:	83 36       	cpi	r24, 0x63	; 99
    594c:	31 f0       	breq	.+12     	; 0x595a <vfprintf+0xfa>
    594e:	83 37       	cpi	r24, 0x73	; 115
    5950:	71 f0       	breq	.+28     	; 0x596e <vfprintf+0x10e>
    5952:	83 35       	cpi	r24, 0x53	; 83
    5954:	09 f0       	breq	.+2      	; 0x5958 <vfprintf+0xf8>
    5956:	57 c0       	rjmp	.+174    	; 0x5a06 <vfprintf+0x1a6>
    5958:	21 c0       	rjmp	.+66     	; 0x599c <vfprintf+0x13c>
    595a:	f8 01       	movw	r30, r16
    595c:	80 81       	ld	r24, Z
    595e:	89 83       	std	Y+1, r24	; 0x01
    5960:	0e 5f       	subi	r16, 0xFE	; 254
    5962:	1f 4f       	sbci	r17, 0xFF	; 255
    5964:	44 24       	eor	r4, r4
    5966:	43 94       	inc	r4
    5968:	51 2c       	mov	r5, r1
    596a:	54 01       	movw	r10, r8
    596c:	14 c0       	rjmp	.+40     	; 0x5996 <vfprintf+0x136>
    596e:	38 01       	movw	r6, r16
    5970:	f2 e0       	ldi	r31, 0x02	; 2
    5972:	6f 0e       	add	r6, r31
    5974:	71 1c       	adc	r7, r1
    5976:	f8 01       	movw	r30, r16
    5978:	a0 80       	ld	r10, Z
    597a:	b1 80       	ldd	r11, Z+1	; 0x01
    597c:	26 ff       	sbrs	r18, 6
    597e:	03 c0       	rjmp	.+6      	; 0x5986 <vfprintf+0x126>
    5980:	65 2d       	mov	r22, r5
    5982:	70 e0       	ldi	r23, 0x00	; 0
    5984:	02 c0       	rjmp	.+4      	; 0x598a <vfprintf+0x12a>
    5986:	6f ef       	ldi	r22, 0xFF	; 255
    5988:	7f ef       	ldi	r23, 0xFF	; 255
    598a:	c5 01       	movw	r24, r10
    598c:	2c 87       	std	Y+12, r18	; 0x0c
    598e:	48 d1       	rcall	.+656    	; 0x5c20 <strnlen>
    5990:	2c 01       	movw	r4, r24
    5992:	83 01       	movw	r16, r6
    5994:	2c 85       	ldd	r18, Y+12	; 0x0c
    5996:	2f 77       	andi	r18, 0x7F	; 127
    5998:	22 2e       	mov	r2, r18
    599a:	16 c0       	rjmp	.+44     	; 0x59c8 <vfprintf+0x168>
    599c:	38 01       	movw	r6, r16
    599e:	f2 e0       	ldi	r31, 0x02	; 2
    59a0:	6f 0e       	add	r6, r31
    59a2:	71 1c       	adc	r7, r1
    59a4:	f8 01       	movw	r30, r16
    59a6:	a0 80       	ld	r10, Z
    59a8:	b1 80       	ldd	r11, Z+1	; 0x01
    59aa:	26 ff       	sbrs	r18, 6
    59ac:	03 c0       	rjmp	.+6      	; 0x59b4 <vfprintf+0x154>
    59ae:	65 2d       	mov	r22, r5
    59b0:	70 e0       	ldi	r23, 0x00	; 0
    59b2:	02 c0       	rjmp	.+4      	; 0x59b8 <vfprintf+0x158>
    59b4:	6f ef       	ldi	r22, 0xFF	; 255
    59b6:	7f ef       	ldi	r23, 0xFF	; 255
    59b8:	c5 01       	movw	r24, r10
    59ba:	2c 87       	std	Y+12, r18	; 0x0c
    59bc:	26 d1       	rcall	.+588    	; 0x5c0a <strnlen_P>
    59be:	2c 01       	movw	r4, r24
    59c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    59c2:	20 68       	ori	r18, 0x80	; 128
    59c4:	22 2e       	mov	r2, r18
    59c6:	83 01       	movw	r16, r6
    59c8:	23 fc       	sbrc	r2, 3
    59ca:	19 c0       	rjmp	.+50     	; 0x59fe <vfprintf+0x19e>
    59cc:	83 2d       	mov	r24, r3
    59ce:	90 e0       	ldi	r25, 0x00	; 0
    59d0:	48 16       	cp	r4, r24
    59d2:	59 06       	cpc	r5, r25
    59d4:	a0 f4       	brcc	.+40     	; 0x59fe <vfprintf+0x19e>
    59d6:	b7 01       	movw	r22, r14
    59d8:	80 e2       	ldi	r24, 0x20	; 32
    59da:	90 e0       	ldi	r25, 0x00	; 0
    59dc:	2c d1       	rcall	.+600    	; 0x5c36 <fputc>
    59de:	3a 94       	dec	r3
    59e0:	f5 cf       	rjmp	.-22     	; 0x59cc <vfprintf+0x16c>
    59e2:	f5 01       	movw	r30, r10
    59e4:	27 fc       	sbrc	r2, 7
    59e6:	85 91       	lpm	r24, Z+
    59e8:	27 fe       	sbrs	r2, 7
    59ea:	81 91       	ld	r24, Z+
    59ec:	5f 01       	movw	r10, r30
    59ee:	b7 01       	movw	r22, r14
    59f0:	90 e0       	ldi	r25, 0x00	; 0
    59f2:	21 d1       	rcall	.+578    	; 0x5c36 <fputc>
    59f4:	31 10       	cpse	r3, r1
    59f6:	3a 94       	dec	r3
    59f8:	f1 e0       	ldi	r31, 0x01	; 1
    59fa:	4f 1a       	sub	r4, r31
    59fc:	51 08       	sbc	r5, r1
    59fe:	41 14       	cp	r4, r1
    5a00:	51 04       	cpc	r5, r1
    5a02:	79 f7       	brne	.-34     	; 0x59e2 <vfprintf+0x182>
    5a04:	de c0       	rjmp	.+444    	; 0x5bc2 <vfprintf+0x362>
    5a06:	84 36       	cpi	r24, 0x64	; 100
    5a08:	11 f0       	breq	.+4      	; 0x5a0e <vfprintf+0x1ae>
    5a0a:	89 36       	cpi	r24, 0x69	; 105
    5a0c:	31 f5       	brne	.+76     	; 0x5a5a <vfprintf+0x1fa>
    5a0e:	f8 01       	movw	r30, r16
    5a10:	27 ff       	sbrs	r18, 7
    5a12:	07 c0       	rjmp	.+14     	; 0x5a22 <vfprintf+0x1c2>
    5a14:	60 81       	ld	r22, Z
    5a16:	71 81       	ldd	r23, Z+1	; 0x01
    5a18:	82 81       	ldd	r24, Z+2	; 0x02
    5a1a:	93 81       	ldd	r25, Z+3	; 0x03
    5a1c:	0c 5f       	subi	r16, 0xFC	; 252
    5a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a20:	08 c0       	rjmp	.+16     	; 0x5a32 <vfprintf+0x1d2>
    5a22:	60 81       	ld	r22, Z
    5a24:	71 81       	ldd	r23, Z+1	; 0x01
    5a26:	88 27       	eor	r24, r24
    5a28:	77 fd       	sbrc	r23, 7
    5a2a:	80 95       	com	r24
    5a2c:	98 2f       	mov	r25, r24
    5a2e:	0e 5f       	subi	r16, 0xFE	; 254
    5a30:	1f 4f       	sbci	r17, 0xFF	; 255
    5a32:	2f 76       	andi	r18, 0x6F	; 111
    5a34:	b2 2e       	mov	r11, r18
    5a36:	97 ff       	sbrs	r25, 7
    5a38:	09 c0       	rjmp	.+18     	; 0x5a4c <vfprintf+0x1ec>
    5a3a:	90 95       	com	r25
    5a3c:	80 95       	com	r24
    5a3e:	70 95       	com	r23
    5a40:	61 95       	neg	r22
    5a42:	7f 4f       	sbci	r23, 0xFF	; 255
    5a44:	8f 4f       	sbci	r24, 0xFF	; 255
    5a46:	9f 4f       	sbci	r25, 0xFF	; 255
    5a48:	20 68       	ori	r18, 0x80	; 128
    5a4a:	b2 2e       	mov	r11, r18
    5a4c:	2a e0       	ldi	r18, 0x0A	; 10
    5a4e:	30 e0       	ldi	r19, 0x00	; 0
    5a50:	a4 01       	movw	r20, r8
    5a52:	23 d1       	rcall	.+582    	; 0x5c9a <__ultoa_invert>
    5a54:	a8 2e       	mov	r10, r24
    5a56:	a8 18       	sub	r10, r8
    5a58:	43 c0       	rjmp	.+134    	; 0x5ae0 <vfprintf+0x280>
    5a5a:	85 37       	cpi	r24, 0x75	; 117
    5a5c:	29 f4       	brne	.+10     	; 0x5a68 <vfprintf+0x208>
    5a5e:	2f 7e       	andi	r18, 0xEF	; 239
    5a60:	b2 2e       	mov	r11, r18
    5a62:	2a e0       	ldi	r18, 0x0A	; 10
    5a64:	30 e0       	ldi	r19, 0x00	; 0
    5a66:	25 c0       	rjmp	.+74     	; 0x5ab2 <vfprintf+0x252>
    5a68:	f2 2f       	mov	r31, r18
    5a6a:	f9 7f       	andi	r31, 0xF9	; 249
    5a6c:	bf 2e       	mov	r11, r31
    5a6e:	8f 36       	cpi	r24, 0x6F	; 111
    5a70:	c1 f0       	breq	.+48     	; 0x5aa2 <vfprintf+0x242>
    5a72:	18 f4       	brcc	.+6      	; 0x5a7a <vfprintf+0x21a>
    5a74:	88 35       	cpi	r24, 0x58	; 88
    5a76:	79 f0       	breq	.+30     	; 0x5a96 <vfprintf+0x236>
    5a78:	ad c0       	rjmp	.+346    	; 0x5bd4 <vfprintf+0x374>
    5a7a:	80 37       	cpi	r24, 0x70	; 112
    5a7c:	19 f0       	breq	.+6      	; 0x5a84 <vfprintf+0x224>
    5a7e:	88 37       	cpi	r24, 0x78	; 120
    5a80:	21 f0       	breq	.+8      	; 0x5a8a <vfprintf+0x22a>
    5a82:	a8 c0       	rjmp	.+336    	; 0x5bd4 <vfprintf+0x374>
    5a84:	2f 2f       	mov	r18, r31
    5a86:	20 61       	ori	r18, 0x10	; 16
    5a88:	b2 2e       	mov	r11, r18
    5a8a:	b4 fe       	sbrs	r11, 4
    5a8c:	0d c0       	rjmp	.+26     	; 0x5aa8 <vfprintf+0x248>
    5a8e:	8b 2d       	mov	r24, r11
    5a90:	84 60       	ori	r24, 0x04	; 4
    5a92:	b8 2e       	mov	r11, r24
    5a94:	09 c0       	rjmp	.+18     	; 0x5aa8 <vfprintf+0x248>
    5a96:	24 ff       	sbrs	r18, 4
    5a98:	0a c0       	rjmp	.+20     	; 0x5aae <vfprintf+0x24e>
    5a9a:	9f 2f       	mov	r25, r31
    5a9c:	96 60       	ori	r25, 0x06	; 6
    5a9e:	b9 2e       	mov	r11, r25
    5aa0:	06 c0       	rjmp	.+12     	; 0x5aae <vfprintf+0x24e>
    5aa2:	28 e0       	ldi	r18, 0x08	; 8
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	05 c0       	rjmp	.+10     	; 0x5ab2 <vfprintf+0x252>
    5aa8:	20 e1       	ldi	r18, 0x10	; 16
    5aaa:	30 e0       	ldi	r19, 0x00	; 0
    5aac:	02 c0       	rjmp	.+4      	; 0x5ab2 <vfprintf+0x252>
    5aae:	20 e1       	ldi	r18, 0x10	; 16
    5ab0:	32 e0       	ldi	r19, 0x02	; 2
    5ab2:	f8 01       	movw	r30, r16
    5ab4:	b7 fe       	sbrs	r11, 7
    5ab6:	07 c0       	rjmp	.+14     	; 0x5ac6 <vfprintf+0x266>
    5ab8:	60 81       	ld	r22, Z
    5aba:	71 81       	ldd	r23, Z+1	; 0x01
    5abc:	82 81       	ldd	r24, Z+2	; 0x02
    5abe:	93 81       	ldd	r25, Z+3	; 0x03
    5ac0:	0c 5f       	subi	r16, 0xFC	; 252
    5ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ac4:	06 c0       	rjmp	.+12     	; 0x5ad2 <vfprintf+0x272>
    5ac6:	60 81       	ld	r22, Z
    5ac8:	71 81       	ldd	r23, Z+1	; 0x01
    5aca:	80 e0       	ldi	r24, 0x00	; 0
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	0e 5f       	subi	r16, 0xFE	; 254
    5ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    5ad2:	a4 01       	movw	r20, r8
    5ad4:	e2 d0       	rcall	.+452    	; 0x5c9a <__ultoa_invert>
    5ad6:	a8 2e       	mov	r10, r24
    5ad8:	a8 18       	sub	r10, r8
    5ada:	fb 2d       	mov	r31, r11
    5adc:	ff 77       	andi	r31, 0x7F	; 127
    5ade:	bf 2e       	mov	r11, r31
    5ae0:	b6 fe       	sbrs	r11, 6
    5ae2:	0b c0       	rjmp	.+22     	; 0x5afa <vfprintf+0x29a>
    5ae4:	2b 2d       	mov	r18, r11
    5ae6:	2e 7f       	andi	r18, 0xFE	; 254
    5ae8:	a5 14       	cp	r10, r5
    5aea:	50 f4       	brcc	.+20     	; 0x5b00 <vfprintf+0x2a0>
    5aec:	b4 fe       	sbrs	r11, 4
    5aee:	0a c0       	rjmp	.+20     	; 0x5b04 <vfprintf+0x2a4>
    5af0:	b2 fc       	sbrc	r11, 2
    5af2:	08 c0       	rjmp	.+16     	; 0x5b04 <vfprintf+0x2a4>
    5af4:	2b 2d       	mov	r18, r11
    5af6:	2e 7e       	andi	r18, 0xEE	; 238
    5af8:	05 c0       	rjmp	.+10     	; 0x5b04 <vfprintf+0x2a4>
    5afa:	7a 2c       	mov	r7, r10
    5afc:	2b 2d       	mov	r18, r11
    5afe:	03 c0       	rjmp	.+6      	; 0x5b06 <vfprintf+0x2a6>
    5b00:	7a 2c       	mov	r7, r10
    5b02:	01 c0       	rjmp	.+2      	; 0x5b06 <vfprintf+0x2a6>
    5b04:	75 2c       	mov	r7, r5
    5b06:	24 ff       	sbrs	r18, 4
    5b08:	0d c0       	rjmp	.+26     	; 0x5b24 <vfprintf+0x2c4>
    5b0a:	fe 01       	movw	r30, r28
    5b0c:	ea 0d       	add	r30, r10
    5b0e:	f1 1d       	adc	r31, r1
    5b10:	80 81       	ld	r24, Z
    5b12:	80 33       	cpi	r24, 0x30	; 48
    5b14:	11 f4       	brne	.+4      	; 0x5b1a <vfprintf+0x2ba>
    5b16:	29 7e       	andi	r18, 0xE9	; 233
    5b18:	09 c0       	rjmp	.+18     	; 0x5b2c <vfprintf+0x2cc>
    5b1a:	22 ff       	sbrs	r18, 2
    5b1c:	06 c0       	rjmp	.+12     	; 0x5b2a <vfprintf+0x2ca>
    5b1e:	73 94       	inc	r7
    5b20:	73 94       	inc	r7
    5b22:	04 c0       	rjmp	.+8      	; 0x5b2c <vfprintf+0x2cc>
    5b24:	82 2f       	mov	r24, r18
    5b26:	86 78       	andi	r24, 0x86	; 134
    5b28:	09 f0       	breq	.+2      	; 0x5b2c <vfprintf+0x2cc>
    5b2a:	73 94       	inc	r7
    5b2c:	23 fd       	sbrc	r18, 3
    5b2e:	12 c0       	rjmp	.+36     	; 0x5b54 <vfprintf+0x2f4>
    5b30:	20 ff       	sbrs	r18, 0
    5b32:	06 c0       	rjmp	.+12     	; 0x5b40 <vfprintf+0x2e0>
    5b34:	5a 2c       	mov	r5, r10
    5b36:	73 14       	cp	r7, r3
    5b38:	18 f4       	brcc	.+6      	; 0x5b40 <vfprintf+0x2e0>
    5b3a:	53 0c       	add	r5, r3
    5b3c:	57 18       	sub	r5, r7
    5b3e:	73 2c       	mov	r7, r3
    5b40:	73 14       	cp	r7, r3
    5b42:	60 f4       	brcc	.+24     	; 0x5b5c <vfprintf+0x2fc>
    5b44:	b7 01       	movw	r22, r14
    5b46:	80 e2       	ldi	r24, 0x20	; 32
    5b48:	90 e0       	ldi	r25, 0x00	; 0
    5b4a:	2c 87       	std	Y+12, r18	; 0x0c
    5b4c:	74 d0       	rcall	.+232    	; 0x5c36 <fputc>
    5b4e:	73 94       	inc	r7
    5b50:	2c 85       	ldd	r18, Y+12	; 0x0c
    5b52:	f6 cf       	rjmp	.-20     	; 0x5b40 <vfprintf+0x2e0>
    5b54:	73 14       	cp	r7, r3
    5b56:	10 f4       	brcc	.+4      	; 0x5b5c <vfprintf+0x2fc>
    5b58:	37 18       	sub	r3, r7
    5b5a:	01 c0       	rjmp	.+2      	; 0x5b5e <vfprintf+0x2fe>
    5b5c:	31 2c       	mov	r3, r1
    5b5e:	24 ff       	sbrs	r18, 4
    5b60:	11 c0       	rjmp	.+34     	; 0x5b84 <vfprintf+0x324>
    5b62:	b7 01       	movw	r22, r14
    5b64:	80 e3       	ldi	r24, 0x30	; 48
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	2c 87       	std	Y+12, r18	; 0x0c
    5b6a:	65 d0       	rcall	.+202    	; 0x5c36 <fputc>
    5b6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    5b6e:	22 ff       	sbrs	r18, 2
    5b70:	16 c0       	rjmp	.+44     	; 0x5b9e <vfprintf+0x33e>
    5b72:	21 ff       	sbrs	r18, 1
    5b74:	03 c0       	rjmp	.+6      	; 0x5b7c <vfprintf+0x31c>
    5b76:	88 e5       	ldi	r24, 0x58	; 88
    5b78:	90 e0       	ldi	r25, 0x00	; 0
    5b7a:	02 c0       	rjmp	.+4      	; 0x5b80 <vfprintf+0x320>
    5b7c:	88 e7       	ldi	r24, 0x78	; 120
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	b7 01       	movw	r22, r14
    5b82:	0c c0       	rjmp	.+24     	; 0x5b9c <vfprintf+0x33c>
    5b84:	82 2f       	mov	r24, r18
    5b86:	86 78       	andi	r24, 0x86	; 134
    5b88:	51 f0       	breq	.+20     	; 0x5b9e <vfprintf+0x33e>
    5b8a:	21 fd       	sbrc	r18, 1
    5b8c:	02 c0       	rjmp	.+4      	; 0x5b92 <vfprintf+0x332>
    5b8e:	80 e2       	ldi	r24, 0x20	; 32
    5b90:	01 c0       	rjmp	.+2      	; 0x5b94 <vfprintf+0x334>
    5b92:	8b e2       	ldi	r24, 0x2B	; 43
    5b94:	27 fd       	sbrc	r18, 7
    5b96:	8d e2       	ldi	r24, 0x2D	; 45
    5b98:	b7 01       	movw	r22, r14
    5b9a:	90 e0       	ldi	r25, 0x00	; 0
    5b9c:	4c d0       	rcall	.+152    	; 0x5c36 <fputc>
    5b9e:	a5 14       	cp	r10, r5
    5ba0:	30 f4       	brcc	.+12     	; 0x5bae <vfprintf+0x34e>
    5ba2:	b7 01       	movw	r22, r14
    5ba4:	80 e3       	ldi	r24, 0x30	; 48
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	46 d0       	rcall	.+140    	; 0x5c36 <fputc>
    5baa:	5a 94       	dec	r5
    5bac:	f8 cf       	rjmp	.-16     	; 0x5b9e <vfprintf+0x33e>
    5bae:	aa 94       	dec	r10
    5bb0:	f4 01       	movw	r30, r8
    5bb2:	ea 0d       	add	r30, r10
    5bb4:	f1 1d       	adc	r31, r1
    5bb6:	80 81       	ld	r24, Z
    5bb8:	b7 01       	movw	r22, r14
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	3c d0       	rcall	.+120    	; 0x5c36 <fputc>
    5bbe:	a1 10       	cpse	r10, r1
    5bc0:	f6 cf       	rjmp	.-20     	; 0x5bae <vfprintf+0x34e>
    5bc2:	33 20       	and	r3, r3
    5bc4:	09 f4       	brne	.+2      	; 0x5bc8 <vfprintf+0x368>
    5bc6:	5d ce       	rjmp	.-838    	; 0x5882 <vfprintf+0x22>
    5bc8:	b7 01       	movw	r22, r14
    5bca:	80 e2       	ldi	r24, 0x20	; 32
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	33 d0       	rcall	.+102    	; 0x5c36 <fputc>
    5bd0:	3a 94       	dec	r3
    5bd2:	f7 cf       	rjmp	.-18     	; 0x5bc2 <vfprintf+0x362>
    5bd4:	f7 01       	movw	r30, r14
    5bd6:	86 81       	ldd	r24, Z+6	; 0x06
    5bd8:	97 81       	ldd	r25, Z+7	; 0x07
    5bda:	02 c0       	rjmp	.+4      	; 0x5be0 <vfprintf+0x380>
    5bdc:	8f ef       	ldi	r24, 0xFF	; 255
    5bde:	9f ef       	ldi	r25, 0xFF	; 255
    5be0:	2c 96       	adiw	r28, 0x0c	; 12
    5be2:	e2 e1       	ldi	r30, 0x12	; 18
    5be4:	d4 c0       	rjmp	.+424    	; 0x5d8e <__epilogue_restores__>

00005be6 <__eeupd_byte_m32u4>:
    5be6:	26 2f       	mov	r18, r22

00005be8 <__eeupd_r18_m32u4>:
    5be8:	f9 99       	sbic	0x1f, 1	; 31
    5bea:	fe cf       	rjmp	.-4      	; 0x5be8 <__eeupd_r18_m32u4>
    5bec:	92 bd       	out	0x22, r25	; 34
    5bee:	81 bd       	out	0x21, r24	; 33
    5bf0:	f8 9a       	sbi	0x1f, 0	; 31
    5bf2:	01 97       	sbiw	r24, 0x01	; 1
    5bf4:	00 b4       	in	r0, 0x20	; 32
    5bf6:	02 16       	cp	r0, r18
    5bf8:	39 f0       	breq	.+14     	; 0x5c08 <__eeupd_r18_m32u4+0x20>
    5bfa:	1f ba       	out	0x1f, r1	; 31
    5bfc:	20 bd       	out	0x20, r18	; 32
    5bfe:	0f b6       	in	r0, 0x3f	; 63
    5c00:	f8 94       	cli
    5c02:	fa 9a       	sbi	0x1f, 2	; 31
    5c04:	f9 9a       	sbi	0x1f, 1	; 31
    5c06:	0f be       	out	0x3f, r0	; 63
    5c08:	08 95       	ret

00005c0a <strnlen_P>:
    5c0a:	fc 01       	movw	r30, r24
    5c0c:	05 90       	lpm	r0, Z+
    5c0e:	61 50       	subi	r22, 0x01	; 1
    5c10:	70 40       	sbci	r23, 0x00	; 0
    5c12:	01 10       	cpse	r0, r1
    5c14:	d8 f7       	brcc	.-10     	; 0x5c0c <strnlen_P+0x2>
    5c16:	80 95       	com	r24
    5c18:	90 95       	com	r25
    5c1a:	8e 0f       	add	r24, r30
    5c1c:	9f 1f       	adc	r25, r31
    5c1e:	08 95       	ret

00005c20 <strnlen>:
    5c20:	fc 01       	movw	r30, r24
    5c22:	61 50       	subi	r22, 0x01	; 1
    5c24:	70 40       	sbci	r23, 0x00	; 0
    5c26:	01 90       	ld	r0, Z+
    5c28:	01 10       	cpse	r0, r1
    5c2a:	d8 f7       	brcc	.-10     	; 0x5c22 <strnlen+0x2>
    5c2c:	80 95       	com	r24
    5c2e:	90 95       	com	r25
    5c30:	8e 0f       	add	r24, r30
    5c32:	9f 1f       	adc	r25, r31
    5c34:	08 95       	ret

00005c36 <fputc>:
    5c36:	0f 93       	push	r16
    5c38:	1f 93       	push	r17
    5c3a:	cf 93       	push	r28
    5c3c:	df 93       	push	r29
    5c3e:	18 2f       	mov	r17, r24
    5c40:	09 2f       	mov	r16, r25
    5c42:	eb 01       	movw	r28, r22
    5c44:	8b 81       	ldd	r24, Y+3	; 0x03
    5c46:	81 fd       	sbrc	r24, 1
    5c48:	03 c0       	rjmp	.+6      	; 0x5c50 <fputc+0x1a>
    5c4a:	8f ef       	ldi	r24, 0xFF	; 255
    5c4c:	9f ef       	ldi	r25, 0xFF	; 255
    5c4e:	20 c0       	rjmp	.+64     	; 0x5c90 <fputc+0x5a>
    5c50:	82 ff       	sbrs	r24, 2
    5c52:	10 c0       	rjmp	.+32     	; 0x5c74 <fputc+0x3e>
    5c54:	4e 81       	ldd	r20, Y+6	; 0x06
    5c56:	5f 81       	ldd	r21, Y+7	; 0x07
    5c58:	2c 81       	ldd	r18, Y+4	; 0x04
    5c5a:	3d 81       	ldd	r19, Y+5	; 0x05
    5c5c:	42 17       	cp	r20, r18
    5c5e:	53 07       	cpc	r21, r19
    5c60:	7c f4       	brge	.+30     	; 0x5c80 <fputc+0x4a>
    5c62:	e8 81       	ld	r30, Y
    5c64:	f9 81       	ldd	r31, Y+1	; 0x01
    5c66:	9f 01       	movw	r18, r30
    5c68:	2f 5f       	subi	r18, 0xFF	; 255
    5c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c6c:	39 83       	std	Y+1, r19	; 0x01
    5c6e:	28 83       	st	Y, r18
    5c70:	10 83       	st	Z, r17
    5c72:	06 c0       	rjmp	.+12     	; 0x5c80 <fputc+0x4a>
    5c74:	e8 85       	ldd	r30, Y+8	; 0x08
    5c76:	f9 85       	ldd	r31, Y+9	; 0x09
    5c78:	81 2f       	mov	r24, r17
    5c7a:	09 95       	icall
    5c7c:	89 2b       	or	r24, r25
    5c7e:	29 f7       	brne	.-54     	; 0x5c4a <fputc+0x14>
    5c80:	2e 81       	ldd	r18, Y+6	; 0x06
    5c82:	3f 81       	ldd	r19, Y+7	; 0x07
    5c84:	2f 5f       	subi	r18, 0xFF	; 255
    5c86:	3f 4f       	sbci	r19, 0xFF	; 255
    5c88:	3f 83       	std	Y+7, r19	; 0x07
    5c8a:	2e 83       	std	Y+6, r18	; 0x06
    5c8c:	81 2f       	mov	r24, r17
    5c8e:	90 2f       	mov	r25, r16
    5c90:	df 91       	pop	r29
    5c92:	cf 91       	pop	r28
    5c94:	1f 91       	pop	r17
    5c96:	0f 91       	pop	r16
    5c98:	08 95       	ret

00005c9a <__ultoa_invert>:
    5c9a:	fa 01       	movw	r30, r20
    5c9c:	aa 27       	eor	r26, r26
    5c9e:	28 30       	cpi	r18, 0x08	; 8
    5ca0:	51 f1       	breq	.+84     	; 0x5cf6 <__ultoa_invert+0x5c>
    5ca2:	20 31       	cpi	r18, 0x10	; 16
    5ca4:	81 f1       	breq	.+96     	; 0x5d06 <__ultoa_invert+0x6c>
    5ca6:	e8 94       	clt
    5ca8:	6f 93       	push	r22
    5caa:	6e 7f       	andi	r22, 0xFE	; 254
    5cac:	6e 5f       	subi	r22, 0xFE	; 254
    5cae:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb0:	8f 4f       	sbci	r24, 0xFF	; 255
    5cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb4:	af 4f       	sbci	r26, 0xFF	; 255
    5cb6:	b1 e0       	ldi	r27, 0x01	; 1
    5cb8:	3e d0       	rcall	.+124    	; 0x5d36 <__ultoa_invert+0x9c>
    5cba:	b4 e0       	ldi	r27, 0x04	; 4
    5cbc:	3c d0       	rcall	.+120    	; 0x5d36 <__ultoa_invert+0x9c>
    5cbe:	67 0f       	add	r22, r23
    5cc0:	78 1f       	adc	r23, r24
    5cc2:	89 1f       	adc	r24, r25
    5cc4:	9a 1f       	adc	r25, r26
    5cc6:	a1 1d       	adc	r26, r1
    5cc8:	68 0f       	add	r22, r24
    5cca:	79 1f       	adc	r23, r25
    5ccc:	8a 1f       	adc	r24, r26
    5cce:	91 1d       	adc	r25, r1
    5cd0:	a1 1d       	adc	r26, r1
    5cd2:	6a 0f       	add	r22, r26
    5cd4:	71 1d       	adc	r23, r1
    5cd6:	81 1d       	adc	r24, r1
    5cd8:	91 1d       	adc	r25, r1
    5cda:	a1 1d       	adc	r26, r1
    5cdc:	20 d0       	rcall	.+64     	; 0x5d1e <__ultoa_invert+0x84>
    5cde:	09 f4       	brne	.+2      	; 0x5ce2 <__ultoa_invert+0x48>
    5ce0:	68 94       	set
    5ce2:	3f 91       	pop	r19
    5ce4:	2a e0       	ldi	r18, 0x0A	; 10
    5ce6:	26 9f       	mul	r18, r22
    5ce8:	11 24       	eor	r1, r1
    5cea:	30 19       	sub	r19, r0
    5cec:	30 5d       	subi	r19, 0xD0	; 208
    5cee:	31 93       	st	Z+, r19
    5cf0:	de f6       	brtc	.-74     	; 0x5ca8 <__ultoa_invert+0xe>
    5cf2:	cf 01       	movw	r24, r30
    5cf4:	08 95       	ret
    5cf6:	46 2f       	mov	r20, r22
    5cf8:	47 70       	andi	r20, 0x07	; 7
    5cfa:	40 5d       	subi	r20, 0xD0	; 208
    5cfc:	41 93       	st	Z+, r20
    5cfe:	b3 e0       	ldi	r27, 0x03	; 3
    5d00:	0f d0       	rcall	.+30     	; 0x5d20 <__ultoa_invert+0x86>
    5d02:	c9 f7       	brne	.-14     	; 0x5cf6 <__ultoa_invert+0x5c>
    5d04:	f6 cf       	rjmp	.-20     	; 0x5cf2 <__ultoa_invert+0x58>
    5d06:	46 2f       	mov	r20, r22
    5d08:	4f 70       	andi	r20, 0x0F	; 15
    5d0a:	40 5d       	subi	r20, 0xD0	; 208
    5d0c:	4a 33       	cpi	r20, 0x3A	; 58
    5d0e:	18 f0       	brcs	.+6      	; 0x5d16 <__ultoa_invert+0x7c>
    5d10:	49 5d       	subi	r20, 0xD9	; 217
    5d12:	31 fd       	sbrc	r19, 1
    5d14:	40 52       	subi	r20, 0x20	; 32
    5d16:	41 93       	st	Z+, r20
    5d18:	02 d0       	rcall	.+4      	; 0x5d1e <__ultoa_invert+0x84>
    5d1a:	a9 f7       	brne	.-22     	; 0x5d06 <__ultoa_invert+0x6c>
    5d1c:	ea cf       	rjmp	.-44     	; 0x5cf2 <__ultoa_invert+0x58>
    5d1e:	b4 e0       	ldi	r27, 0x04	; 4
    5d20:	a6 95       	lsr	r26
    5d22:	97 95       	ror	r25
    5d24:	87 95       	ror	r24
    5d26:	77 95       	ror	r23
    5d28:	67 95       	ror	r22
    5d2a:	ba 95       	dec	r27
    5d2c:	c9 f7       	brne	.-14     	; 0x5d20 <__ultoa_invert+0x86>
    5d2e:	00 97       	sbiw	r24, 0x00	; 0
    5d30:	61 05       	cpc	r22, r1
    5d32:	71 05       	cpc	r23, r1
    5d34:	08 95       	ret
    5d36:	9b 01       	movw	r18, r22
    5d38:	ac 01       	movw	r20, r24
    5d3a:	0a 2e       	mov	r0, r26
    5d3c:	06 94       	lsr	r0
    5d3e:	57 95       	ror	r21
    5d40:	47 95       	ror	r20
    5d42:	37 95       	ror	r19
    5d44:	27 95       	ror	r18
    5d46:	ba 95       	dec	r27
    5d48:	c9 f7       	brne	.-14     	; 0x5d3c <__ultoa_invert+0xa2>
    5d4a:	62 0f       	add	r22, r18
    5d4c:	73 1f       	adc	r23, r19
    5d4e:	84 1f       	adc	r24, r20
    5d50:	95 1f       	adc	r25, r21
    5d52:	a0 1d       	adc	r26, r0
    5d54:	08 95       	ret

00005d56 <__prologue_saves__>:
    5d56:	2f 92       	push	r2
    5d58:	3f 92       	push	r3
    5d5a:	4f 92       	push	r4
    5d5c:	5f 92       	push	r5
    5d5e:	6f 92       	push	r6
    5d60:	7f 92       	push	r7
    5d62:	8f 92       	push	r8
    5d64:	9f 92       	push	r9
    5d66:	af 92       	push	r10
    5d68:	bf 92       	push	r11
    5d6a:	cf 92       	push	r12
    5d6c:	df 92       	push	r13
    5d6e:	ef 92       	push	r14
    5d70:	ff 92       	push	r15
    5d72:	0f 93       	push	r16
    5d74:	1f 93       	push	r17
    5d76:	cf 93       	push	r28
    5d78:	df 93       	push	r29
    5d7a:	cd b7       	in	r28, 0x3d	; 61
    5d7c:	de b7       	in	r29, 0x3e	; 62
    5d7e:	ca 1b       	sub	r28, r26
    5d80:	db 0b       	sbc	r29, r27
    5d82:	0f b6       	in	r0, 0x3f	; 63
    5d84:	f8 94       	cli
    5d86:	de bf       	out	0x3e, r29	; 62
    5d88:	0f be       	out	0x3f, r0	; 63
    5d8a:	cd bf       	out	0x3d, r28	; 61
    5d8c:	09 94       	ijmp

00005d8e <__epilogue_restores__>:
    5d8e:	2a 88       	ldd	r2, Y+18	; 0x12
    5d90:	39 88       	ldd	r3, Y+17	; 0x11
    5d92:	48 88       	ldd	r4, Y+16	; 0x10
    5d94:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d96:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d98:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5da0:	b9 84       	ldd	r11, Y+9	; 0x09
    5da2:	c8 84       	ldd	r12, Y+8	; 0x08
    5da4:	df 80       	ldd	r13, Y+7	; 0x07
    5da6:	ee 80       	ldd	r14, Y+6	; 0x06
    5da8:	fd 80       	ldd	r15, Y+5	; 0x05
    5daa:	0c 81       	ldd	r16, Y+4	; 0x04
    5dac:	1b 81       	ldd	r17, Y+3	; 0x03
    5dae:	aa 81       	ldd	r26, Y+2	; 0x02
    5db0:	b9 81       	ldd	r27, Y+1	; 0x01
    5db2:	ce 0f       	add	r28, r30
    5db4:	d1 1d       	adc	r29, r1
    5db6:	0f b6       	in	r0, 0x3f	; 63
    5db8:	f8 94       	cli
    5dba:	de bf       	out	0x3e, r29	; 62
    5dbc:	0f be       	out	0x3f, r0	; 63
    5dbe:	cd bf       	out	0x3d, r28	; 61
    5dc0:	ed 01       	movw	r28, r26
    5dc2:	08 95       	ret

00005dc4 <_exit>:
    5dc4:	f8 94       	cli

00005dc6 <__stop_program>:
    5dc6:	ff cf       	rjmp	.-2      	; 0x5dc6 <__stop_program>
